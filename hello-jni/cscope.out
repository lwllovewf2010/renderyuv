cscope 15 $HOME/code/github/hello-jni               0000797532
	@jni/Android.mk

1 #C›yrighà(
C
Ë2009 
The
 
Android
 
O≥n
 
Sour˚
 
Proje˘


2 #
#Li˚n£d 
undî
 
the
 
A∑che
 
Li˚n£
, 
Vîsi⁄
 2.0 (the "License");

4 #you 
may
 
nŸ
 
u£
 
this
 
fûe
 
ex˚±
 
ö
 
com∂ün˚
 
wôh
 
the
 
Li˚n£
.

5 #You 
may
 
obèö
 
a
 
c›y
 
of
 
the
 
Li˚n£
 
©


8 #
#U∆es†
ªquúed
 
by
 
≠∂iˇbÀ
 
œw
 
‹
 
agªed
 
to
 
ö
 
wrôög
, 
so·w¨e


10 #di°ribuãd 
undî
 
the
 
Li˚n£
 
is
 
di°ribuãd
 
⁄
 
™
 "AS IS" 
BASIS
,

11 #WITHOUT 
WARRANTIES
 
OR
 
CONDITIONS
 
OF
 
ANY
 
KIND
, 
eôhî
 
ex¥ess
 
‹
 
im∂õd
.

12 #Sì 
the
 
Li˚n£
 thê
•ecific
 
œnguage
 
govînög
 
≥rmissi⁄s
 
™d


13 #limô©i⁄†
undî
 
the
 
Li˚n£
.

14 #
_PATH :$(ˇŒ my-dú)

17 
ö˛ude
 
	$$
(
CLEAR_VARS
)

18 
EXTERNAL_INCLUDE_PATH
 :
	`$
(
LOCAL_PATH
)/
ö˛ude


19 
LOCAL_CFLAGS
 +-
°d
=
c
++0x

20 
LOCAL_C_INCLUDES
 +
	$$
(
EXTERNAL_INCLUDE_PATH
)

21 
LOCAL_MODULE
 :
hñlo
-
jni


22 
LOCAL_SRC_FILES
 :
hñlo
-
jni
.
˝p
 \

23 #HookC‹e.
˝p
 \

25 
LOCAL_LDLIBS
 +-
Œog
 -
L
. -
 ©ivehñ≥r


27 
ö˛ude
 
	`$
(
BUILD_SHARED_LIBRARY
)

	@jni/hello-jni.cpp

1 
	~<°rög.h
>

2 
	~<jni.h
>

3 
	~"JNIHñp.h
"

4 
	~<™droid/log.h
>

6 c⁄° * 
	g˛assName
 = "com/example/hello_jni/MainActivity";

7 
	$add
(
JNIEnv
 * 
ív
, 
jobje˘
 
obj
, 
a
, 
b
)

9 
j˛ass
 
˛azz
 = 
ív
->
	`FödCœss
(
˛assName
);

10 i‡(
˛azz
 == 0) {

13 
jmëhodID
 
javamëhod
 = 
ív
->
	`GëMëhodID
(
˛azz
, "fakeResult", "()Z");

14 i‡(
javamëhod
 == 0) {

15 
	`LOGI
("GetMethodIDÉrror");

18 
jboﬁón
 
Áke
 = 
ív
->
	`CÆlBoﬁónMëhod
(
obj
, 
javamëhod
);

20 
	`__™droid_log_¥öt
(
ANDROID_LOG_DEBUG
, "mamk", "addá=%d b=%d fackResu…=%d", 
a
, 
b
, 
Áke
?1:0);

22 i‡(
Áke
)

23  
a
-
b
;

25  
a
+
b
;

26 
	}
}

29 
JNIN©iveMëhod
 
	gg_javaMëhods
[] = {

31 (*Ë
add
 },

35 
JNIEXPORT
 
jöt
 
	$JNI_OnLﬂd
(
JavaVM
* 
vm
, *)

37 
JNIEnv
 * 
ív
;

38 if(
JNI_OK
 !
vm
->
	`AâachCuºítThªad
(&
ív
,
NULL
))

40  
JNI_VERSION_1_6
;

43 
	`jniRegi°îN©iveMëhods
(
ív
, 
˛assName
,

44 
g_javaMëhods
, 
	`NELEM
(g_javaMethods));

47  
JNI_VERSION_1_6
;

48 
	}
}

	@jni/hello-jni.h

1 
add
(
a
, 
b
);

	@jni/include/EGL/egl.h

30 #i‚de‡
__egl_h_


31 
	#__egl_h_


	)

36 
	~<EGL/egÕœtf‹m.h
>

38 #ifde‡
__˝lu•lus


44 
	tEGLBoﬁón
;

45 
	tEGLíum
;

46 *
	tEGLC⁄fig
;

47 *
	tEGLC⁄ãxt
;

48 *
	tEGLDi•œy
;

49 *
	tEGLSurÁ˚
;

50 *
	tEGLClõ¡Buf„r
;

53 
	#EGL_VERSION_1_0
 1

	)

54 
	#EGL_VERSION_1_1
 1

	)

55 
	#EGL_VERSION_1_2
 1

	)

56 
	#EGL_VERSION_1_3
 1

	)

57 
	#EGL_VERSION_1_4
 1

	)

64 
	#EGL_FALSE
 0

	)

65 
	#EGL_TRUE
 1

	)

68 
	#EGL_DEFAULT_DISPLAY
 ((
EGLN©iveDi•œyTy≥
)0)

	)

69 
	#EGL_NO_CONTEXT
 ((
EGLC⁄ãxt
)0)

	)

70 
	#EGL_NO_DISPLAY
 ((
EGLDi•œy
)0)

	)

71 
	#EGL_NO_SURFACE
 ((
EGLSurÁ˚
)0)

	)

74 
	#EGL_DONT_CARE
 ((
EGLöt
)-1)

	)

77 
	#EGL_SUCCESS
 0x3000

	)

78 
	#EGL_NOT_INITIALIZED
 0x3001

	)

79 
	#EGL_BAD_ACCESS
 0x3002

	)

80 
	#EGL_BAD_ALLOC
 0x3003

	)

81 
	#EGL_BAD_ATTRIBUTE
 0x3004

	)

82 
	#EGL_BAD_CONFIG
 0x3005

	)

83 
	#EGL_BAD_CONTEXT
 0x3006

	)

84 
	#EGL_BAD_CURRENT_SURFACE
 0x3007

	)

85 
	#EGL_BAD_DISPLAY
 0x3008

	)

86 
	#EGL_BAD_MATCH
 0x3009

	)

87 
	#EGL_BAD_NATIVE_PIXMAP
 0x300A

	)

88 
	#EGL_BAD_NATIVE_WINDOW
 0x300B

	)

89 
	#EGL_BAD_PARAMETER
 0x300C

	)

90 
	#EGL_BAD_SURFACE
 0x300D

	)

91 
	#EGL_CONTEXT_LOST
 0x300E

	)

96 
	#EGL_BUFFER_SIZE
 0x3020

	)

97 
	#EGL_ALPHA_SIZE
 0x3021

	)

98 
	#EGL_BLUE_SIZE
 0x3022

	)

99 
	#EGL_GREEN_SIZE
 0x3023

	)

100 
	#EGL_RED_SIZE
 0x3024

	)

101 
	#EGL_DEPTH_SIZE
 0x3025

	)

102 
	#EGL_STENCIL_SIZE
 0x3026

	)

103 
	#EGL_CONFIG_CAVEAT
 0x3027

	)

104 
	#EGL_CONFIG_ID
 0x3028

	)

105 
	#EGL_LEVEL
 0x3029

	)

106 
	#EGL_MAX_PBUFFER_HEIGHT
 0x302A

	)

107 
	#EGL_MAX_PBUFFER_PIXELS
 0x302B

	)

108 
	#EGL_MAX_PBUFFER_WIDTH
 0x302C

	)

109 
	#EGL_NATIVE_RENDERABLE
 0x302D

	)

110 
	#EGL_NATIVE_VISUAL_ID
 0x302E

	)

111 
	#EGL_NATIVE_VISUAL_TYPE
 0x302F

	)

112 
	#EGL_PRESERVED_RESOURCES
 0x3030

	)

113 
	#EGL_SAMPLES
 0x3031

	)

114 
	#EGL_SAMPLE_BUFFERS
 0x3032

	)

115 
	#EGL_SURFACE_TYPE
 0x3033

	)

116 
	#EGL_TRANSPARENT_TYPE
 0x3034

	)

117 
	#EGL_TRANSPARENT_BLUE_VALUE
 0x3035

	)

118 
	#EGL_TRANSPARENT_GREEN_VALUE
 0x3036

	)

119 
	#EGL_TRANSPARENT_RED_VALUE
 0x3037

	)

120 
	#EGL_NONE
 0x3038

	)

121 
	#EGL_BIND_TO_TEXTURE_RGB
 0x3039

	)

122 
	#EGL_BIND_TO_TEXTURE_RGBA
 0x303A

	)

123 
	#EGL_MIN_SWAP_INTERVAL
 0x303B

	)

124 
	#EGL_MAX_SWAP_INTERVAL
 0x303C

	)

125 
	#EGL_LUMINANCE_SIZE
 0x303D

	)

126 
	#EGL_ALPHA_MASK_SIZE
 0x303E

	)

127 
	#EGL_COLOR_BUFFER_TYPE
 0x303F

	)

128 
	#EGL_RENDERABLE_TYPE
 0x3040

	)

129 
	#EGL_MATCH_NATIVE_PIXMAP
 0x3041

	)

130 
	#EGL_CONFORMANT
 0x3042

	)

135 
	#EGL_SLOW_CONFIG
 0x3050

	)

136 
	#EGL_NON_CONFORMANT_CONFIG
 0x3051

	)

137 
	#EGL_TRANSPARENT_RGB
 0x3052

	)

138 
	#EGL_RGB_BUFFER
 0x308E

	)

139 
	#EGL_LUMINANCE_BUFFER
 0x308F

	)

142 
	#EGL_NO_TEXTURE
 0x305C

	)

143 
	#EGL_TEXTURE_RGB
 0x305D

	)

144 
	#EGL_TEXTURE_RGBA
 0x305E

	)

145 
	#EGL_TEXTURE_2D
 0x305F

	)

148 
	#EGL_PBUFFER_BIT
 0x0001

	)

149 
	#EGL_PIXMAP_BIT
 0x0002

	)

150 
	#EGL_WINDOW_BIT
 0x0004

	)

151 
	#EGL_VG_COLORSPACE_LINEAR_BIT
 0x0020

	)

152 
	#EGL_VG_ALPHA_FORMAT_PRE_BIT
 0x0040

	)

153 
	#EGL_MULTISAMPLE_RESOLVE_BOX_BIT
 0x0200

	)

154 
	#EGL_SWAP_BEHAVIOR_PRESERVED_BIT
 0x0400

	)

156 
	#EGL_OPENGL_ES_BIT
 0x0001

	)

157 
	#EGL_OPENVG_BIT
 0x0002

	)

158 
	#EGL_OPENGL_ES2_BIT
 0x0004

	)

159 
	#EGL_OPENGL_BIT
 0x0008

	)

162 
	#EGL_VENDOR
 0x3053

	)

163 
	#EGL_VERSION
 0x3054

	)

164 
	#EGL_EXTENSIONS
 0x3055

	)

165 
	#EGL_CLIENT_APIS
 0x308D

	)

168 
	#EGL_HEIGHT
 0x3056

	)

169 
	#EGL_WIDTH
 0x3057

	)

170 
	#EGL_LARGEST_PBUFFER
 0x3058

	)

171 
	#EGL_TEXTURE_FORMAT
 0x3080

	)

172 
	#EGL_TEXTURE_TARGET
 0x3081

	)

173 
	#EGL_MIPMAP_TEXTURE
 0x3082

	)

174 
	#EGL_MIPMAP_LEVEL
 0x3083

	)

175 
	#EGL_RENDER_BUFFER
 0x3086

	)

176 
	#EGL_VG_COLORSPACE
 0x3087

	)

177 
	#EGL_VG_ALPHA_FORMAT
 0x3088

	)

178 
	#EGL_HORIZONTAL_RESOLUTION
 0x3090

	)

179 
	#EGL_VERTICAL_RESOLUTION
 0x3091

	)

180 
	#EGL_PIXEL_ASPECT_RATIO
 0x3092

	)

181 
	#EGL_SWAP_BEHAVIOR
 0x3093

	)

182 
	#EGL_MULTISAMPLE_RESOLVE
 0x3099

	)

185 
	#EGL_BACK_BUFFER
 0x3084

	)

186 
	#EGL_SINGLE_BUFFER
 0x3085

	)

189 
	#EGL_VG_COLORSPACE_sRGB
 0x3089

	)

190 
	#EGL_VG_COLORSPACE_LINEAR
 0x308A

	)

193 
	#EGL_VG_ALPHA_FORMAT_NONPRE
 0x308B

	)

194 
	#EGL_VG_ALPHA_FORMAT_PRE
 0x308C

	)

199 
	#EGL_DISPLAY_SCALING
 10000

	)

202 
	#EGL_UNKNOWN
 ((
EGLöt
)-1)

	)

205 
	#EGL_BUFFER_PRESERVED
 0x3094

	)

206 
	#EGL_BUFFER_DESTROYED
 0x3095

	)

209 
	#EGL_OPENVG_IMAGE
 0x3096

	)

212 
	#EGL_CONTEXT_CLIENT_TYPE
 0x3097

	)

215 
	#EGL_CONTEXT_CLIENT_VERSION
 0x3098

	)

218 
	#EGL_MULTISAMPLE_RESOLVE_DEFAULT
 0x309A

	)

219 
	#EGL_MULTISAMPLE_RESOLVE_BOX
 0x309B

	)

222 
	#EGL_OPENGL_ES_API
 0x30A0

	)

223 
	#EGL_OPENVG_API
 0x30A1

	)

224 
	#EGL_OPENGL_API
 0x30A2

	)

227 
	#EGL_DRAW
 0x3059

	)

228 
	#EGL_READ
 0x305A

	)

231 
	#EGL_CORE_NATIVE_ENGINE
 0x305B

	)

234 
	#EGL_COLORSPACE
 
EGL_VG_COLORSPACE


	)

235 
	#EGL_ALPHA_FORMAT
 
EGL_VG_ALPHA_FORMAT


	)

236 
	#EGL_COLORSPACE_sRGB
 
EGL_VG_COLORSPACE_sRGB


	)

237 
	#EGL_COLORSPACE_LINEAR
 
EGL_VG_COLORSPACE_LINEAR


	)

238 
	#EGL_ALPHA_FORMAT_NONPRE
 
EGL_VG_ALPHA_FORMAT_NONPRE


	)

239 
	#EGL_ALPHA_FORMAT_PRE
 
EGL_VG_ALPHA_FORMAT_PRE


	)

250 
EGLAPI
 
EGLöt
 
EGLAPIENTRY
 
eglGëEº‹
();

252 
EGLAPI
 
EGLDi•œy
 
EGLAPIENTRY
 
eglGëDi•œy
(
EGLN©iveDi•œyTy≥
 
di•œy_id
);

253 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglInôülize
(
EGLDi•œy
 
dpy
, 
EGLöt
 *
maj‹
, EGLöà*
mö‹
);

254 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglTîmö©e
(
EGLDi•œy
 
dpy
);

256 
EGLAPI
 c⁄° * 
EGLAPIENTRY
 
eglQuîySåög
(
EGLDi•œy
 
dpy
, 
EGLöt
 
«me
);

258 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglGëC⁄figs
(
EGLDi•œy
 
dpy
, 
EGLC⁄fig
 *
c⁄figs
,

259 
EGLöt
 
c⁄fig_size
, EGLöà*
num_c⁄fig
);

260 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglChoo£C⁄fig
(
EGLDi•œy
 
dpy
, c⁄° 
EGLöt
 *
©åib_li°
,

261 
EGLC⁄fig
 *
c⁄figs
, 
EGLöt
 
c⁄fig_size
,

262 
EGLöt
 *
num_c⁄fig
);

263 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglGëC⁄figAârib
(
EGLDi•œy
 
dpy
, 
EGLC⁄fig
 
c⁄fig
,

264 
EGLöt
 
©åibuã
, EGLöà*
vÆue
);

266 
EGLAPI
 
EGLSurÁ˚
 
EGLAPIENTRY
 
eglCª©eWödowSurÁ˚
(
EGLDi•œy
 
dpy
, 
EGLC⁄fig
 
c⁄fig
,

267 
EGLN©iveWödowTy≥
 
wö
,

268 c⁄° 
EGLöt
 *
©åib_li°
);

269 
EGLAPI
 
EGLSurÁ˚
 
EGLAPIENTRY
 
eglCª©ePbuf„rSurÁ˚
(
EGLDi•œy
 
dpy
, 
EGLC⁄fig
 
c⁄fig
,

270 c⁄° 
EGLöt
 *
©åib_li°
);

271 
EGLAPI
 
EGLSurÁ˚
 
EGLAPIENTRY
 
eglCª©ePixm≠SurÁ˚
(
EGLDi•œy
 
dpy
, 
EGLC⁄fig
 
c⁄fig
,

272 
EGLN©ivePixm≠Ty≥
 
pixm≠
,

273 c⁄° 
EGLöt
 *
©åib_li°
);

274 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglDe°roySurÁ˚
(
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
);

275 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglQuîySurÁ˚
(
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
,

276 
EGLöt
 
©åibuã
, EGLöà*
vÆue
);

278 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglBödAPI
(
EGLíum
 
≠i
);

279 
EGLAPI
 
EGLíum
 
EGLAPIENTRY
 
eglQuîyAPI
();

281 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglWaôClõ¡
();

283 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglRñó£Thªad
();

285 
EGLAPI
 
EGLSurÁ˚
 
EGLAPIENTRY
 
eglCª©ePbuf„rFromClõ¡Buf„r
(

286 
EGLDi•œy
 
dpy
, 
EGLíum
 
bu·y≥
, 
EGLClõ¡Buf„r
 
buf„r
,

287 
EGLC⁄fig
 
c⁄fig
, c⁄° 
EGLöt
 *
©åib_li°
);

289 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglSurÁ˚Aârib
(
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
,

290 
EGLöt
 
©åibuã
, EGLöà
vÆue
);

291 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglBödTexImage
(
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
, 
EGLöt
 
buf„r
);

292 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglRñó£TexImage
(
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
, 
EGLöt
 
buf„r
);

295 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglSw≠I¡îvÆ
(
EGLDi•œy
 
dpy
, 
EGLöt
 
öãrvÆ
);

298 
EGLAPI
 
EGLC⁄ãxt
 
EGLAPIENTRY
 
eglCª©eC⁄ãxt
(
EGLDi•œy
 
dpy
, 
EGLC⁄fig
 
c⁄fig
,

299 
EGLC⁄ãxt
 
sh¨e_c⁄ãxt
,

300 c⁄° 
EGLöt
 *
©åib_li°
);

301 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglDe°royC⁄ãxt
(
EGLDi•œy
 
dpy
, 
EGLC⁄ãxt
 
˘x
);

302 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglMakeCuºít
(
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
døw
,

303 
EGLSurÁ˚
 
ªad
, 
EGLC⁄ãxt
 
˘x
);

305 
EGLAPI
 
EGLC⁄ãxt
 
EGLAPIENTRY
 
eglGëCuºítC⁄ãxt
();

306 
EGLAPI
 
EGLSurÁ˚
 
EGLAPIENTRY
 
eglGëCuºítSurÁ˚
(
EGLöt
 
ªaddøw
);

307 
EGLAPI
 
EGLDi•œy
 
EGLAPIENTRY
 
eglGëCuºítDi•œy
();

308 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglQuîyC⁄ãxt
(
EGLDi•œy
 
dpy
, 
EGLC⁄ãxt
 
˘x
,

309 
EGLöt
 
©åibuã
, EGLöà*
vÆue
);

311 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglWaôGL
();

312 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglWaôN©ive
(
EGLöt
 
ígöe
);

313 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglSw≠Buf„rs
(
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
);

314 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglC›yBuf„rs
(
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
,

315 
EGLN©ivePixm≠Ty≥
 
èrgë
);

320 (*
__eglMu°Ca°ToPr›îFun˘i⁄PoöãrTy≥
)();

323 
EGLAPI
 
__eglMu°Ca°ToPr›îFun˘i⁄PoöãrTy≥
 
EGLAPIENTRY


324 
eglGëProcAddªss
(c⁄° *
¥o˙ame
);

326 #ifde‡
__˝lu•lus


	@jni/include/EGL/eglext.h

1 #i‚de‡
__egÀxt_h_


2 
	#__egÀxt_h_


	)

4 #ifde‡
__˝lu•lus


31 
	~<EGL/egÕœtf‹m.h
>

38 
	#EGL_EGLEXT_VERSION
 3

	)

40 #i‚de‡
EGL_KHR_c⁄fig_©åibs


41 
	#EGL_KHR_c⁄fig_©åibs
 1

	)

42 
	#EGL_CONFORMANT_KHR
 0x3042

	)

43 
	#EGL_VG_COLORSPACE_LINEAR_BIT_KHR
 0x0020

	)

44 
	#EGL_VG_ALPHA_FORMAT_PRE_BIT_KHR
 0x0040

	)

47 #i‚de‡
EGL_KHR_lock_surÁ˚


48 
	#EGL_KHR_lock_surÁ˚
 1

	)

49 
	#EGL_READ_SURFACE_BIT_KHR
 0x0001

	)

50 
	#EGL_WRITE_SURFACE_BIT_KHR
 0x0002

	)

51 
	#EGL_LOCK_SURFACE_BIT_KHR
 0x0080

	)

52 
	#EGL_OPTIMAL_FORMAT_BIT_KHR
 0x0100

	)

53 
	#EGL_MATCH_FORMAT_KHR
 0x3043

	)

54 
	#EGL_FORMAT_RGB_565_EXACT_KHR
 0x30C0

	)

55 
	#EGL_FORMAT_RGB_565_KHR
 0x30C1

	)

56 
	#EGL_FORMAT_RGBA_8888_EXACT_KHR
 0x30C2

	)

57 
	#EGL_FORMAT_RGBA_8888_KHR
 0x30C3

	)

58 
	#EGL_MAP_PRESERVE_PIXELS_KHR
 0x30C4

	)

59 
	#EGL_LOCK_USAGE_HINT_KHR
 0x30C5

	)

60 
	#EGL_BITMAP_POINTER_KHR
 0x30C6

	)

61 
	#EGL_BITMAP_PITCH_KHR
 0x30C7

	)

62 
	#EGL_BITMAP_ORIGIN_KHR
 0x30C8

	)

63 
	#EGL_BITMAP_PIXEL_RED_OFFSET_KHR
 0x30C9

	)

64 
	#EGL_BITMAP_PIXEL_GREEN_OFFSET_KHR
 0x30CA

	)

65 
	#EGL_BITMAP_PIXEL_BLUE_OFFSET_KHR
 0x30CB

	)

66 
	#EGL_BITMAP_PIXEL_ALPHA_OFFSET_KHR
 0x30CC

	)

67 
	#EGL_BITMAP_PIXEL_LUMINANCE_OFFSET_KHR
 0x30CD

	)

68 
	#EGL_LOWER_LEFT_KHR
 0x30CE

	)

69 
	#EGL_UPPER_LEFT_KHR
 0x30CF

	)

70 #ifde‡
EGL_EGLEXT_PROTOTYPES


71 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglLockSurÁ˚KHR
 (
EGLDi•œy
 
di•œy
, 
EGLSurÁ˚
 
surÁ˚
, c⁄° 
EGLöt
 *
©åib_li°
);

72 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglU∆ockSurÁ˚KHR
 (
EGLDi•œy
 
di•œy
, 
EGLSurÁ˚
 
surÁ˚
);

74 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLLOCKSURFACEKHRPROC
Ë(
	tEGLDi•œy
 
	tdi•œy
, 
	tEGLSurÁ˚
 
	tsurÁ˚
, c⁄° 
	tEGLöt
 *
	t©åib_li°
);

75 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLUNLOCKSURFACEKHRPROC
Ë(
	tEGLDi•œy
 
	tdi•œy
, 
	tEGLSurÁ˚
 
	tsurÁ˚
);

78 #i‚de‡
EGL_KHR_image


79 
	#EGL_KHR_image
 1

	)

80 
	#EGL_NATIVE_PIXMAP_KHR
 0x30B0

	)

81 *
	tEGLImageKHR
;

82 
	#EGL_NO_IMAGE_KHR
 ((
EGLImageKHR
)0)

	)

83 #ifde‡
EGL_EGLEXT_PROTOTYPES


84 
EGLAPI
 
EGLImageKHR
 
EGLAPIENTRY
 
eglCª©eImageKHR
 (
EGLDi•œy
 
dpy
, 
EGLC⁄ãxt
 
˘x
, 
EGLíum
 
èrgë
, 
EGLClõ¡Buf„r
 
buf„r
, c⁄° 
EGLöt
 *
©åib_li°
);

85 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglDe°royImageKHR
 (
EGLDi•œy
 
dpy
, 
EGLImageKHR
 
image
);

87 
EGLImageKHR
 (
	tEGLAPIENTRYP
 
	tPFNEGLCREATEIMAGEKHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLC⁄ãxt
 
	t˘x
, 
	tEGLíum
 
	tèrgë
, 
	tEGLClõ¡Buf„r
 
	tbuf„r
, c⁄° 
	tEGLöt
 *
	t©åib_li°
);

88 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLDESTROYIMAGEKHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLImageKHR
 
	timage
);

91 #i‚de‡
EGL_KHR_vg_∑ª¡_image


92 
	#EGL_KHR_vg_∑ª¡_image
 1

	)

93 
	#EGL_VG_PARENT_IMAGE_KHR
 0x30BA

	)

96 #i‚de‡
EGL_KHR_gl_ãxtuª_2D_image


97 
	#EGL_KHR_gl_ãxtuª_2D_image
 1

	)

98 
	#EGL_GL_TEXTURE_2D_KHR
 0x30B1

	)

99 
	#EGL_GL_TEXTURE_LEVEL_KHR
 0x30BC

	)

102 #i‚de‡
EGL_KHR_gl_ãxtuª_cubem≠_image


103 
	#EGL_KHR_gl_ãxtuª_cubem≠_image
 1

	)

104 
	#EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X_KHR
 0x30B3

	)

105 
	#EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X_KHR
 0x30B4

	)

106 
	#EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y_KHR
 0x30B5

	)

107 
	#EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_KHR
 0x30B6

	)

108 
	#EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z_KHR
 0x30B7

	)

109 
	#EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_KHR
 0x30B8

	)

112 #i‚de‡
EGL_KHR_gl_ãxtuª_3D_image


113 
	#EGL_KHR_gl_ãxtuª_3D_image
 1

	)

114 
	#EGL_GL_TEXTURE_3D_KHR
 0x30B2

	)

115 
	#EGL_GL_TEXTURE_ZOFFSET_KHR
 0x30BD

	)

118 #i‚de‡
EGL_KHR_gl_ªndîbuf„r_image


119 
	#EGL_KHR_gl_ªndîbuf„r_image
 1

	)

120 
	#EGL_GL_RENDERBUFFER_KHR
 0x30B9

	)

123 #i‚de‡
EGL_KHR_image_ba£


124 
	#EGL_KHR_image_ba£
 1

	)

126 
	#EGL_IMAGE_PRESERVED_KHR
 0x30D2

	)

129 #i‚de‡
EGL_KHR_image_pixm≠


130 
	#EGL_KHR_image_pixm≠
 1

	)

134 #ifde‡
__˝lu•lus


	@jni/include/EGL/eglnatives.h

17 #i‚de‡
ANDROID_EGLNATIVES_H


18 
	#ANDROID_EGLNATIVES_H


	)

20 
	~<sys/ty≥s.h
>

22 #ifde‡
__˝lu•lus


29 
	#EGL_NATIVES_FLAG_SIZE_CHANGED
 0x00000001

	)

32 
	#EGL_NATIVES_FLAG_DESTROY_BACKBUFFER
 0x00000001

	)

34 
	e«tive_pixñ_f‹m©_t


36 
NATIVE_PIXEL_FORMAT_RGBA_8888
 = 1,

37 
NATIVE_PIXEL_FORMAT_RGB_565
 = 4,

38 
NATIVE_PIXEL_FORMAT_BGRA_8888
 = 5,

39 
NATIVE_PIXEL_FORMAT_RGBA_5551
 = 6,

40 
NATIVE_PIXEL_FORMAT_RGBA_4444
 = 7,

41 
NATIVE_PIXEL_FORMAT_YCbCr_422_SP
= 0x10,

42 
NATIVE_PIXEL_FORMAT_YCbCr_420_SP
= 0x11,

45 
	e«tive_mem‹y_ty≥_t


47 
NATIVE_MEMORY_TYPE_PMEM
 = 0,

48 
NATIVE_MEMORY_TYPE_GPU
 = 1,

49 
NATIVE_MEMORY_TYPE_FB
 = 2,

50 
NATIVE_MEMORY_TYPE_HEAP
 = 128

54 
	segl_«tive_wödow_t


59 
uöt32_t
 
magic
;

64 
uöt32_t
 
vîsi⁄
;

69 
uöt32_t
 
idít
;

76 
width
;

77 
height
;

78 
°ride
;

83 
f‹m©
;

88 
öçå_t
 
off£t
;

95 
uöt32_t
 
Êags
;

100 
xdpi
;

101 
ydpi
;

106 
Âs
;

112 
öçå_t
 
ba£
;

117 
fd
;

122 
uöt8_t
 
mem‹y_ty≥
;

127 
uöt8_t
 
ª£rved_∑d
[3];

128 
ª£rved
[8];

134 
v°ride
;

139 (*
öcRef
)(
egl_«tive_wödow_t
* 
wödow
);

144 (*
decRef
)(
egl_«tive_wödow_t
* 
wödow
);

151 
uöt32_t
 (*
sw≠Buf„rs
)(
egl_«tive_wödow_t
* 
wödow
);

156 (*
ª£rved_¥oc_0
)();

161 (*
ª£rved_¥oc_1
)();

166 (*
ª£rved_¥oc_2
)();

173 (*
c⁄√˘
)(
egl_«tive_wödow_t
* 
wödow
);

178 (*
disc⁄√˘
)(
egl_«tive_wödow_t
* 
wödow
);

183 (*
ª£rved_¥oc
[11])();

188 
öçå_t
 
€m
[4];

192 
	segl_«tive_pixm≠_t


194 
öt32_t
 
vîsi⁄
;

195 
öt32_t
 
width
;

196 
öt32_t
 
height
;

197 
öt32_t
 
°ride
;

198 
uöt8_t
* 
d©a
;

199 
uöt8_t
 
f‹m©
;

200 
uöt8_t
 
rfu
[3];

202 
uöt32_t
 
com¥es£dF‹m©
;

203 
öt32_t
 
v°ride
;

205 
öt32_t
 
ª£rved
;

216 
egl_«tive_wödow_t
* 
™droid_¸óãDi•œySurÁ˚
();

230 * 
u£r
;

232 * 
ba£
;

234 
size_t
 
size
;

236 * 
phys
;

238 
size_t
 
off£t
;

240 
fd
;

241 } 
	tgpu_¨ó_t
;

246 
gpu_¨ó_t
 
ªgs
;

248 
öt32_t
 
cou¡
;

250 
gpu_¨ó_t
 
gpu
[2];

251 } 
	tªque°_gpu_t
;

254 
ªque°_gpu_t
* (*
	tOEM_EGL_acquúe_gpu_t
)(* 
	tu£r
);

255 (*
OEM_EGL_ªÀa£_gpu_t
)(* 
	tu£r
, 
	tªque°_gpu_t
* 
	th™dÀ
);

256 (*
ªgi°î_gpu_t
)

257 (* 
	tu£r
, 
	tOEM_EGL_acquúe_gpu_t
, 
	tOEM_EGL_ªÀa£_gpu_t
);

259 
€m_ªgi°î_gpu
(

260 * 
u£r
,

261 
OEM_EGL_acquúe_gpu_t
 
acquúe
,

262 
OEM_EGL_ªÀa£_gpu_t
 
ªÀa£
);

267 #ifde‡
__˝lu•lus


	@jni/include/EGL/eglplatform.h

1 #i‚de‡
__egÕœtf‹m_h_


2 
	#__egÕœtf‹m_h_


	)

37 
	~<KHR/khΩœtf‹m.h
>

49 #i‚de‡
EGLAPI


50 
	#EGLAPI
 
KHRONOS_APICALL


	)

53 
	#EGLAPIENTRY
 
KHRONOS_APIENTRY


	)

54 
	#EGLAPIENTRYP
 
KHRONOS_APIENTRY
*

	)

63 #i‡
deföed
(
_WIN32
Ë|| deföed(
__VC32__
Ë&& !deföed(
__CYGWIN__
Ë&& !deföed(
__SCITECH_SNAP__
)

64 #i‚de‡
WIN32_LEAN_AND_MEAN


65 
	#WIN32_LEAN_AND_MEAN
 1

	)

67 
	~<wödows.h
>

69 
HDC
 
	tEGLN©iveDi•œyTy≥
;

70 
HBITMAP
 
	tEGLN©ivePixm≠Ty≥
;

71 
HWND
 
	tEGLN©iveWödowTy≥
;

73 #ñi‡
deföed
(
__WINSCW__
Ë|| deföed(
__SYMBIAN32__
)

75 
	tEGLN©iveDi•œyTy≥
;

76 *
	tEGLN©iveWödowTy≥
;

77 *
	tEGLN©ivePixm≠Ty≥
;

79 #ñi‡
deföed
(
__unix__
Ë&& !deföed(
ANDROID
)

82 
	~<X11/Xlib.h
>

83 
	~<X11/Xutû.h
>

85 
Di•œy
 *
	tEGLN©iveDi•œyTy≥
;

86 
Pixm≠
 
	tEGLN©ivePixm≠Ty≥
;

87 
Wödow
 
	tEGLN©iveWödowTy≥
;

90 #ñi‡
deföed
(
ANDROID
)

92 
	~<EGL/eg ©ives.h
>

94 
egl_«tive_wödow_t
* 
	tEGLN©iveWödowTy≥
;

95 
egl_«tive_pixm≠_t
* 
	tEGLN©ivePixm≠Ty≥
;

96 * 
	tEGLN©iveDi•œyTy≥
;

103 
EGLN©iveDi•œyTy≥
 
	tN©iveDi•œyTy≥
;

104 
EGLN©ivePixm≠Ty≥
 
	tN©ivePixm≠Ty≥
;

105 
EGLN©iveWödowTy≥
 
	tN©iveWödowTy≥
;

115 
khr⁄os_öt32_t
 
	tEGLöt
;

	@jni/include/GLES2/gl2.h

1 #i‚de‡
__gl2_h_


2 
	#__gl2_h_


	)

6 
	~<GLES2/gl2∂©f‹m.h
>

8 #ifde‡
__˝lu•lus


21 
	tGLvoid
;

22 
	tGLch¨
;

23 
	tGLíum
;

24 
	tGLboﬁón
;

25 
	tGLbôfõld
;

26 
khr⁄os_öt8_t
 
	tGLbyã
;

27 
	tGLsh‹t
;

28 
	tGLöt
;

29 
	tGLsizei
;

30 
khr⁄os_uöt8_t
 
	tGLubyã
;

31 
	tGLush‹t
;

32 
	tGLuöt
;

33 
khr⁄os_Êﬂt_t
 
	tGLÊﬂt
;

34 
khr⁄os_Êﬂt_t
 
	tGL˛ampf
;

35 
khr⁄os_öt32_t
 
	tGLfixed
;

38 
khr⁄os_öçå_t
 
	tGLöçå
;

39 
khr⁄os_ssize_t
 
	tGLsizeùå
;

42 
	#GL_ES_VERSION_2_0
 1

	)

45 
	#GL_DEPTH_BUFFER_BIT
 0x00000100

	)

46 
	#GL_STENCIL_BUFFER_BIT
 0x00000400

	)

47 
	#GL_COLOR_BUFFER_BIT
 0x00004000

	)

50 
	#GL_FALSE
 0

	)

51 
	#GL_TRUE
 1

	)

54 
	#GL_POINTS
 0x0000

	)

55 
	#GL_LINES
 0x0001

	)

56 
	#GL_LINE_LOOP
 0x0002

	)

57 
	#GL_LINE_STRIP
 0x0003

	)

58 
	#GL_TRIANGLES
 0x0004

	)

59 
	#GL_TRIANGLE_STRIP
 0x0005

	)

60 
	#GL_TRIANGLE_FAN
 0x0006

	)

73 
	#GL_ZERO
 0

	)

74 
	#GL_ONE
 1

	)

75 
	#GL_SRC_COLOR
 0x0300

	)

76 
	#GL_ONE_MINUS_SRC_COLOR
 0x0301

	)

77 
	#GL_SRC_ALPHA
 0x0302

	)

78 
	#GL_ONE_MINUS_SRC_ALPHA
 0x0303

	)

79 
	#GL_DST_ALPHA
 0x0304

	)

80 
	#GL_ONE_MINUS_DST_ALPHA
 0x0305

	)

85 
	#GL_DST_COLOR
 0x0306

	)

86 
	#GL_ONE_MINUS_DST_COLOR
 0x0307

	)

87 
	#GL_SRC_ALPHA_SATURATE
 0x0308

	)

94 
	#GL_FUNC_ADD
 0x8006

	)

95 
	#GL_BLEND_EQUATION
 0x8009

	)

96 
	#GL_BLEND_EQUATION_RGB
 0x8009

	)

97 
	#GL_BLEND_EQUATION_ALPHA
 0x883D

	)

100 
	#GL_FUNC_SUBTRACT
 0x800A

	)

101 
	#GL_FUNC_REVERSE_SUBTRACT
 0x800B

	)

104 
	#GL_BLEND_DST_RGB
 0x80C8

	)

105 
	#GL_BLEND_SRC_RGB
 0x80C9

	)

106 
	#GL_BLEND_DST_ALPHA
 0x80CA

	)

107 
	#GL_BLEND_SRC_ALPHA
 0x80CB

	)

108 
	#GL_CONSTANT_COLOR
 0x8001

	)

109 
	#GL_ONE_MINUS_CONSTANT_COLOR
 0x8002

	)

110 
	#GL_CONSTANT_ALPHA
 0x8003

	)

111 
	#GL_ONE_MINUS_CONSTANT_ALPHA
 0x8004

	)

112 
	#GL_BLEND_COLOR
 0x8005

	)

115 
	#GL_ARRAY_BUFFER
 0x8892

	)

116 
	#GL_ELEMENT_ARRAY_BUFFER
 0x8893

	)

117 
	#GL_ARRAY_BUFFER_BINDING
 0x8894

	)

118 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING
 0x8895

	)

120 
	#GL_STREAM_DRAW
 0x88E0

	)

121 
	#GL_STATIC_DRAW
 0x88E4

	)

122 
	#GL_DYNAMIC_DRAW
 0x88E8

	)

124 
	#GL_BUFFER_SIZE
 0x8764

	)

125 
	#GL_BUFFER_USAGE
 0x8765

	)

127 
	#GL_CURRENT_VERTEX_ATTRIB
 0x8626

	)

130 
	#GL_FRONT
 0x0404

	)

131 
	#GL_BACK
 0x0405

	)

132 
	#GL_FRONT_AND_BACK
 0x0408

	)

145 
	#GL_TEXTURE_2D
 0x0DE1

	)

146 
	#GL_CULL_FACE
 0x0B44

	)

147 
	#GL_BLEND
 0x0BE2

	)

148 
	#GL_DITHER
 0x0BD0

	)

149 
	#GL_STENCIL_TEST
 0x0B90

	)

150 
	#GL_DEPTH_TEST
 0x0B71

	)

151 
	#GL_SCISSOR_TEST
 0x0C11

	)

152 
	#GL_POLYGON_OFFSET_FILL
 0x8037

	)

153 
	#GL_SAMPLE_ALPHA_TO_COVERAGE
 0x809E

	)

154 
	#GL_SAMPLE_COVERAGE
 0x80A0

	)

157 
	#GL_NO_ERROR
 0

	)

158 
	#GL_INVALID_ENUM
 0x0500

	)

159 
	#GL_INVALID_VALUE
 0x0501

	)

160 
	#GL_INVALID_OPERATION
 0x0502

	)

161 
	#GL_OUT_OF_MEMORY
 0x0505

	)

164 
	#GL_CW
 0x0900

	)

165 
	#GL_CCW
 0x0901

	)

168 
	#GL_LINE_WIDTH
 0x0B21

	)

169 
	#GL_ALIASED_POINT_SIZE_RANGE
 0x846D

	)

170 
	#GL_ALIASED_LINE_WIDTH_RANGE
 0x846E

	)

171 
	#GL_CULL_FACE_MODE
 0x0B45

	)

172 
	#GL_FRONT_FACE
 0x0B46

	)

173 
	#GL_DEPTH_RANGE
 0x0B70

	)

174 
	#GL_DEPTH_WRITEMASK
 0x0B72

	)

175 
	#GL_DEPTH_CLEAR_VALUE
 0x0B73

	)

176 
	#GL_DEPTH_FUNC
 0x0B74

	)

177 
	#GL_STENCIL_CLEAR_VALUE
 0x0B91

	)

178 
	#GL_STENCIL_FUNC
 0x0B92

	)

179 
	#GL_STENCIL_FAIL
 0x0B94

	)

180 
	#GL_STENCIL_PASS_DEPTH_FAIL
 0x0B95

	)

181 
	#GL_STENCIL_PASS_DEPTH_PASS
 0x0B96

	)

182 
	#GL_STENCIL_REF
 0x0B97

	)

183 
	#GL_STENCIL_VALUE_MASK
 0x0B93

	)

184 
	#GL_STENCIL_WRITEMASK
 0x0B98

	)

185 
	#GL_STENCIL_BACK_FUNC
 0x8800

	)

186 
	#GL_STENCIL_BACK_FAIL
 0x8801

	)

187 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL
 0x8802

	)

188 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS
 0x8803

	)

189 
	#GL_STENCIL_BACK_REF
 0x8CA3

	)

190 
	#GL_STENCIL_BACK_VALUE_MASK
 0x8CA4

	)

191 
	#GL_STENCIL_BACK_WRITEMASK
 0x8CA5

	)

192 
	#GL_VIEWPORT
 0x0BA2

	)

193 
	#GL_SCISSOR_BOX
 0x0C10

	)

195 
	#GL_COLOR_CLEAR_VALUE
 0x0C22

	)

196 
	#GL_COLOR_WRITEMASK
 0x0C23

	)

197 
	#GL_UNPACK_ALIGNMENT
 0x0CF5

	)

198 
	#GL_PACK_ALIGNMENT
 0x0D05

	)

199 
	#GL_MAX_TEXTURE_SIZE
 0x0D33

	)

200 
	#GL_MAX_VIEWPORT_DIMS
 0x0D3A

	)

201 
	#GL_SUBPIXEL_BITS
 0x0D50

	)

202 
	#GL_RED_BITS
 0x0D52

	)

203 
	#GL_GREEN_BITS
 0x0D53

	)

204 
	#GL_BLUE_BITS
 0x0D54

	)

205 
	#GL_ALPHA_BITS
 0x0D55

	)

206 
	#GL_DEPTH_BITS
 0x0D56

	)

207 
	#GL_STENCIL_BITS
 0x0D57

	)

208 
	#GL_POLYGON_OFFSET_UNITS
 0x2A00

	)

210 
	#GL_POLYGON_OFFSET_FACTOR
 0x8038

	)

211 
	#GL_TEXTURE_BINDING_2D
 0x8069

	)

212 
	#GL_SAMPLE_BUFFERS
 0x80A8

	)

213 
	#GL_SAMPLES
 0x80A9

	)

214 
	#GL_SAMPLE_COVERAGE_VALUE
 0x80AA

	)

215 
	#GL_SAMPLE_COVERAGE_INVERT
 0x80AB

	)

223 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS
 0x86A2

	)

224 
	#GL_COMPRESSED_TEXTURE_FORMATS
 0x86A3

	)

227 
	#GL_DONT_CARE
 0x1100

	)

228 
	#GL_FASTEST
 0x1101

	)

229 
	#GL_NICEST
 0x1102

	)

232 
	#GL_GENERATE_MIPMAP_HINT
 0x8192

	)

235 
	#GL_BYTE
 0x1400

	)

236 
	#GL_UNSIGNED_BYTE
 0x1401

	)

237 
	#GL_SHORT
 0x1402

	)

238 
	#GL_UNSIGNED_SHORT
 0x1403

	)

239 
	#GL_INT
 0x1404

	)

240 
	#GL_UNSIGNED_INT
 0x1405

	)

241 
	#GL_FLOAT
 0x1406

	)

242 
	#GL_FIXED
 0x140C

	)

245 
	#GL_DEPTH_COMPONENT
 0x1902

	)

246 
	#GL_ALPHA
 0x1906

	)

247 
	#GL_RGB
 0x1907

	)

248 
	#GL_RGBA
 0x1908

	)

249 
	#GL_LUMINANCE
 0x1909

	)

250 
	#GL_LUMINANCE_ALPHA
 0x190A

	)

254 
	#GL_UNSIGNED_SHORT_4_4_4_4
 0x8033

	)

255 
	#GL_UNSIGNED_SHORT_5_5_5_1
 0x8034

	)

256 
	#GL_UNSIGNED_SHORT_5_6_5
 0x8363

	)

259 
	#GL_FRAGMENT_SHADER
 0x8B30

	)

260 
	#GL_VERTEX_SHADER
 0x8B31

	)

261 
	#GL_MAX_VERTEX_ATTRIBS
 0x8869

	)

262 
	#GL_MAX_VERTEX_UNIFORM_VECTORS
 0x8DFB

	)

263 
	#GL_MAX_VARYING_VECTORS
 0x8DFC

	)

264 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
 0x8B4D

	)

265 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
 0x8B4C

	)

266 
	#GL_MAX_TEXTURE_IMAGE_UNITS
 0x8872

	)

267 
	#GL_MAX_FRAGMENT_UNIFORM_VECTORS
 0x8DFD

	)

268 
	#GL_SHADER_TYPE
 0x8B4F

	)

269 
	#GL_DELETE_STATUS
 0x8B80

	)

270 
	#GL_LINK_STATUS
 0x8B82

	)

271 
	#GL_VALIDATE_STATUS
 0x8B83

	)

272 
	#GL_ATTACHED_SHADERS
 0x8B85

	)

273 
	#GL_ACTIVE_UNIFORMS
 0x8B86

	)

274 
	#GL_ACTIVE_UNIFORM_MAX_LENGTH
 0x8B87

	)

275 
	#GL_ACTIVE_ATTRIBUTES
 0x8B89

	)

276 
	#GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
 0x8B8A

	)

277 
	#GL_SHADING_LANGUAGE_VERSION
 0x8B8C

	)

278 
	#GL_CURRENT_PROGRAM
 0x8B8D

	)

281 
	#GL_NEVER
 0x0200

	)

282 
	#GL_LESS
 0x0201

	)

283 
	#GL_EQUAL
 0x0202

	)

284 
	#GL_LEQUAL
 0x0203

	)

285 
	#GL_GREATER
 0x0204

	)

286 
	#GL_NOTEQUAL
 0x0205

	)

287 
	#GL_GEQUAL
 0x0206

	)

288 
	#GL_ALWAYS
 0x0207

	)

292 
	#GL_KEEP
 0x1E00

	)

293 
	#GL_REPLACE
 0x1E01

	)

294 
	#GL_INCR
 0x1E02

	)

295 
	#GL_DECR
 0x1E03

	)

296 
	#GL_INVERT
 0x150A

	)

297 
	#GL_INCR_WRAP
 0x8507

	)

298 
	#GL_DECR_WRAP
 0x8508

	)

301 
	#GL_VENDOR
 0x1F00

	)

302 
	#GL_RENDERER
 0x1F01

	)

303 
	#GL_VERSION
 0x1F02

	)

304 
	#GL_EXTENSIONS
 0x1F03

	)

307 
	#GL_NEAREST
 0x2600

	)

308 
	#GL_LINEAR
 0x2601

	)

313 
	#GL_NEAREST_MIPMAP_NEAREST
 0x2700

	)

314 
	#GL_LINEAR_MIPMAP_NEAREST
 0x2701

	)

315 
	#GL_NEAREST_MIPMAP_LINEAR
 0x2702

	)

316 
	#GL_LINEAR_MIPMAP_LINEAR
 0x2703

	)

319 
	#GL_TEXTURE_MAG_FILTER
 0x2800

	)

320 
	#GL_TEXTURE_MIN_FILTER
 0x2801

	)

321 
	#GL_TEXTURE_WRAP_S
 0x2802

	)

322 
	#GL_TEXTURE_WRAP_T
 0x2803

	)

326 
	#GL_TEXTURE
 0x1702

	)

328 
	#GL_TEXTURE_CUBE_MAP
 0x8513

	)

329 
	#GL_TEXTURE_BINDING_CUBE_MAP
 0x8514

	)

330 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X
 0x8515

	)

331 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X
 0x8516

	)

332 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y
 0x8517

	)

333 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
 0x8518

	)

334 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z
 0x8519

	)

335 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
 0x851A

	)

336 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE
 0x851C

	)

339 
	#GL_TEXTURE0
 0x84C0

	)

340 
	#GL_TEXTURE1
 0x84C1

	)

341 
	#GL_TEXTURE2
 0x84C2

	)

342 
	#GL_TEXTURE3
 0x84C3

	)

343 
	#GL_TEXTURE4
 0x84C4

	)

344 
	#GL_TEXTURE5
 0x84C5

	)

345 
	#GL_TEXTURE6
 0x84C6

	)

346 
	#GL_TEXTURE7
 0x84C7

	)

347 
	#GL_TEXTURE8
 0x84C8

	)

348 
	#GL_TEXTURE9
 0x84C9

	)

349 
	#GL_TEXTURE10
 0x84CA

	)

350 
	#GL_TEXTURE11
 0x84CB

	)

351 
	#GL_TEXTURE12
 0x84CC

	)

352 
	#GL_TEXTURE13
 0x84CD

	)

353 
	#GL_TEXTURE14
 0x84CE

	)

354 
	#GL_TEXTURE15
 0x84CF

	)

355 
	#GL_TEXTURE16
 0x84D0

	)

356 
	#GL_TEXTURE17
 0x84D1

	)

357 
	#GL_TEXTURE18
 0x84D2

	)

358 
	#GL_TEXTURE19
 0x84D3

	)

359 
	#GL_TEXTURE20
 0x84D4

	)

360 
	#GL_TEXTURE21
 0x84D5

	)

361 
	#GL_TEXTURE22
 0x84D6

	)

362 
	#GL_TEXTURE23
 0x84D7

	)

363 
	#GL_TEXTURE24
 0x84D8

	)

364 
	#GL_TEXTURE25
 0x84D9

	)

365 
	#GL_TEXTURE26
 0x84DA

	)

366 
	#GL_TEXTURE27
 0x84DB

	)

367 
	#GL_TEXTURE28
 0x84DC

	)

368 
	#GL_TEXTURE29
 0x84DD

	)

369 
	#GL_TEXTURE30
 0x84DE

	)

370 
	#GL_TEXTURE31
 0x84DF

	)

371 
	#GL_ACTIVE_TEXTURE
 0x84E0

	)

374 
	#GL_REPEAT
 0x2901

	)

375 
	#GL_CLAMP_TO_EDGE
 0x812F

	)

376 
	#GL_MIRRORED_REPEAT
 0x8370

	)

379 
	#GL_FLOAT_VEC2
 0x8B50

	)

380 
	#GL_FLOAT_VEC3
 0x8B51

	)

381 
	#GL_FLOAT_VEC4
 0x8B52

	)

382 
	#GL_INT_VEC2
 0x8B53

	)

383 
	#GL_INT_VEC3
 0x8B54

	)

384 
	#GL_INT_VEC4
 0x8B55

	)

385 
	#GL_BOOL
 0x8B56

	)

386 
	#GL_BOOL_VEC2
 0x8B57

	)

387 
	#GL_BOOL_VEC3
 0x8B58

	)

388 
	#GL_BOOL_VEC4
 0x8B59

	)

389 
	#GL_FLOAT_MAT2
 0x8B5A

	)

390 
	#GL_FLOAT_MAT3
 0x8B5B

	)

391 
	#GL_FLOAT_MAT4
 0x8B5C

	)

392 
	#GL_SAMPLER_2D
 0x8B5E

	)

393 
	#GL_SAMPLER_CUBE
 0x8B60

	)

396 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED
 0x8622

	)

397 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE
 0x8623

	)

398 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE
 0x8624

	)

399 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE
 0x8625

	)

400 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
 0x886A

	)

401 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER
 0x8645

	)

402 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
 0x889F

	)

405 
	#GL_IMPLEMENTATION_COLOR_READ_TYPE
 0x8B9A

	)

406 
	#GL_IMPLEMENTATION_COLOR_READ_FORMAT
 0x8B9B

	)

409 
	#GL_COMPILE_STATUS
 0x8B81

	)

410 
	#GL_INFO_LOG_LENGTH
 0x8B84

	)

411 
	#GL_SHADER_SOURCE_LENGTH
 0x8B88

	)

412 
	#GL_SHADER_COMPILER
 0x8DFA

	)

415 
	#GL_SHADER_BINARY_FORMATS
 0x8DF8

	)

416 
	#GL_NUM_SHADER_BINARY_FORMATS
 0x8DF9

	)

419 
	#GL_LOW_FLOAT
 0x8DF0

	)

420 
	#GL_MEDIUM_FLOAT
 0x8DF1

	)

421 
	#GL_HIGH_FLOAT
 0x8DF2

	)

422 
	#GL_LOW_INT
 0x8DF3

	)

423 
	#GL_MEDIUM_INT
 0x8DF4

	)

424 
	#GL_HIGH_INT
 0x8DF5

	)

427 
	#GL_FRAMEBUFFER
 0x8D40

	)

428 
	#GL_RENDERBUFFER
 0x8D41

	)

430 
	#GL_RGBA4
 0x8056

	)

431 
	#GL_RGB5_A1
 0x8057

	)

432 
	#GL_RGB565
 0x8D62

	)

433 
	#GL_DEPTH_COMPONENT16
 0x81A5

	)

434 
	#GL_STENCIL_INDEX
 0x1901

	)

435 
	#GL_STENCIL_INDEX8
 0x8D48

	)

437 
	#GL_RENDERBUFFER_WIDTH
 0x8D42

	)

438 
	#GL_RENDERBUFFER_HEIGHT
 0x8D43

	)

439 
	#GL_RENDERBUFFER_INTERNAL_FORMAT
 0x8D44

	)

440 
	#GL_RENDERBUFFER_RED_SIZE
 0x8D50

	)

441 
	#GL_RENDERBUFFER_GREEN_SIZE
 0x8D51

	)

442 
	#GL_RENDERBUFFER_BLUE_SIZE
 0x8D52

	)

443 
	#GL_RENDERBUFFER_ALPHA_SIZE
 0x8D53

	)

444 
	#GL_RENDERBUFFER_DEPTH_SIZE
 0x8D54

	)

445 
	#GL_RENDERBUFFER_STENCIL_SIZE
 0x8D55

	)

447 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
 0x8CD0

	)

448 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
 0x8CD1

	)

449 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
 0x8CD2

	)

450 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
 0x8CD3

	)

452 
	#GL_COLOR_ATTACHMENT0
 0x8CE0

	)

453 
	#GL_DEPTH_ATTACHMENT
 0x8D00

	)

454 
	#GL_STENCIL_ATTACHMENT
 0x8D20

	)

456 
	#GL_NONE
 0

	)

458 
	#GL_FRAMEBUFFER_COMPLETE
 0x8CD5

	)

459 
	#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
 0x8CD6

	)

460 
	#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
 0x8CD7

	)

461 
	#GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS
 0x8CD9

	)

462 
	#GL_FRAMEBUFFER_UNSUPPORTED
 0x8CDD

	)

464 
	#GL_FRAMEBUFFER_BINDING
 0x8CA6

	)

465 
	#GL_RENDERBUFFER_BINDING
 0x8CA7

	)

466 
	#GL_MAX_RENDERBUFFER_SIZE
 0x84E8

	)

468 
	#GL_INVALID_FRAMEBUFFER_OPERATION
 0x0506

	)

474 
GL_APICALL
 
GL_APIENTRY
 
glA˘iveTextuª
 (
GLíum
 
ãxtuª
);

475 
GL_APICALL
 
GL_APIENTRY
 
glAâachShadî
 (
GLuöt
 
¥ogøm
, GLuöà
shadî
);

476 
GL_APICALL
 
GL_APIENTRY
 
glBödAâribLoˇti⁄
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, c⁄° 
GLch¨
* 
«me
);

477 
GL_APICALL
 
GL_APIENTRY
 
glBödBuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
buf„r
);

478 
GL_APICALL
 
GL_APIENTRY
 
glBödFømebuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
‰amebuf„r
);

479 
GL_APICALL
 
GL_APIENTRY
 
glBödRídîbuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

480 
GL_APICALL
 
GL_APIENTRY
 
glBödTextuª
 (
GLíum
 
èrgë
, 
GLuöt
 
ãxtuª
);

481 
GL_APICALL
 
GL_APIENTRY
 
glBÀndCﬁ‹
 (
GL˛ampf
 
ªd
, GL˛amp‡
gªí
, GL˛amp‡
blue
, GL˛amp‡
Æpha
);

482 
GL_APICALL
 
GL_APIENTRY
 
glBÀndEqu©i⁄
 ( 
GLíum
 
mode
 );

483 
GL_APICALL
 
GL_APIENTRY
 
glBÀndEqu©i⁄Sï¨©e
 (
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

484 
GL_APICALL
 
GL_APIENTRY
 
glBÀndFunc
 (
GLíum
 
sÁ˘‹
, GLíum 
dÁ˘‹
);

485 
GL_APICALL
 
GL_APIENTRY
 
glBÀndFuncSï¨©e
 (
GLíum
 
§cRGB
, GLíum 
d°RGB
, GLíum 
§cAÕha
, GLíum 
d°AÕha
);

486 
GL_APICALL
 
GL_APIENTRY
 
glBuf„rD©a
 (
GLíum
 
èrgë
, 
GLsizeùå
 
size
, c⁄° 
GLvoid
* 
d©a
, GLíum 
ußge
);

487 
GL_APICALL
 
GL_APIENTRY
 
glBuf„rSubD©a
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, c⁄° 
GLvoid
* 
d©a
);

488 
GL_APICALL
 
GLíum
 
GL_APIENTRY
 
glCheckFømebuf„rSètus
 (GLíum 
èrgë
);

489 
GL_APICALL
 
GL_APIENTRY
 
glCÀ¨
 (
GLbôfõld
 
mask
);

490 
GL_APICALL
 
GL_APIENTRY
 
glCÀ¨Cﬁ‹
 (
GL˛ampf
 
ªd
, GL˛amp‡
gªí
, GL˛amp‡
blue
, GL˛amp‡
Æpha
);

491 
GL_APICALL
 
GL_APIENTRY
 
glCÀ¨Dïthf
 (
GL˛ampf
 
dïth
);

492 
GL_APICALL
 
GL_APIENTRY
 
glCÀ¨Sãncû
 (
GLöt
 
s
);

493 
GL_APICALL
 
GL_APIENTRY
 
glCﬁ‹Mask
 (
GLboﬁón
 
ªd
, GLboﬁó¿
gªí
, GLboﬁó¿
blue
, GLboﬁó¿
Æpha
);

494 
GL_APICALL
 
GL_APIENTRY
 
glCompûeShadî
 (
GLuöt
 
shadî
);

495 
GL_APICALL
 
GL_APIENTRY
 
glCom¥es£dTexImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
* 
d©a
);

496 
GL_APICALL
 
GL_APIENTRY
 
glCom¥es£dTexSubImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
* 
d©a
);

497 
GL_APICALL
 
GL_APIENTRY
 
glC›yTexImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
);

498 
GL_APICALL
 
GL_APIENTRY
 
glC›yTexSubImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

499 
GL_APICALL
 
GLuöt
 
GL_APIENTRY
 
glCª©eProgøm
 ();

500 
GL_APICALL
 
GLuöt
 
GL_APIENTRY
 
glCª©eShadî
 (
GLíum
 
ty≥
);

501 
GL_APICALL
 
GL_APIENTRY
 
glCuŒFa˚
 (
GLíum
 
mode
);

502 
GL_APICALL
 
GL_APIENTRY
 
glDñëeBuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
* 
buf„rs
);

503 
GL_APICALL
 
GL_APIENTRY
 
glDñëeFømebuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
* 
‰amebuf„rs
);

504 
GL_APICALL
 
GL_APIENTRY
 
glDñëeProgøm
 (
GLuöt
 
¥ogøm
);

505 
GL_APICALL
 
GL_APIENTRY
 
glDñëeRídîbuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
* 
ªndîbuf„rs
);

506 
GL_APICALL
 
GL_APIENTRY
 
glDñëeShadî
 (
GLuöt
 
shadî
);

507 
GL_APICALL
 
GL_APIENTRY
 
glDñëeTextuªs
 (
GLsizei
 
n
, c⁄° 
GLuöt
* 
ãxtuªs
);

508 
GL_APICALL
 
GL_APIENTRY
 
glDïthFunc
 (
GLíum
 
func
);

509 
GL_APICALL
 
GL_APIENTRY
 
glDïthMask
 (
GLboﬁón
 
Êag
);

510 
GL_APICALL
 
GL_APIENTRY
 
glDïthR™gef
 (
GL˛ampf
 
zNór
, GL˛amp‡
zF¨
);

511 
GL_APICALL
 
GL_APIENTRY
 
glDëachShadî
 (
GLuöt
 
¥ogøm
, GLuöà
shadî
);

512 
GL_APICALL
 
GL_APIENTRY
 
glDißbÀ
 (
GLíum
 
ˇp
);

513 
GL_APICALL
 
GL_APIENTRY
 
glDißbÀVîãxAâribAºay
 (
GLuöt
 
ödex
);

514 
GL_APICALL
 
GL_APIENTRY
 
glDøwAºays
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

515 
GL_APICALL
 
GL_APIENTRY
 
glDøwEÀmíts
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
* 
ödi˚s
);

516 
GL_APICALL
 
GL_APIENTRY
 
glE«bÀ
 (
GLíum
 
ˇp
);

517 
GL_APICALL
 
GL_APIENTRY
 
glE«bÀVîãxAâribAºay
 (
GLuöt
 
ödex
);

518 
GL_APICALL
 
GL_APIENTRY
 
glFöish
 ();

519 
GL_APICALL
 
GL_APIENTRY
 
glFlush
 ();

520 
GL_APICALL
 
GL_APIENTRY
 
glFømebuf„rRídîbuf„r
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, 
GLuöt
 
ªndîbuf„r
);

521 
GL_APICALL
 
GL_APIENTRY
 
glFømebuf„rTextuª2D
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

522 
GL_APICALL
 
GL_APIENTRY
 
glFr⁄tFa˚
 (
GLíum
 
mode
);

523 
GL_APICALL
 
GL_APIENTRY
 
glGíBuf„rs
 (
GLsizei
 
n
, 
GLuöt
* 
buf„rs
);

524 
GL_APICALL
 
GL_APIENTRY
 
glGíî©eMùm≠
 (
GLíum
 
èrgë
);

525 
GL_APICALL
 
GL_APIENTRY
 
glGíFømebuf„rs
 (
GLsizei
 
n
, 
GLuöt
* 
‰amebuf„rs
);

526 
GL_APICALL
 
GL_APIENTRY
 
glGíRídîbuf„rs
 (
GLsizei
 
n
, 
GLuöt
* 
ªndîbuf„rs
);

527 
GL_APICALL
 
GL_APIENTRY
 
glGíTextuªs
 (
GLsizei
 
n
, 
GLuöt
* 
ãxtuªs
);

528 
GL_APICALL
 
GL_APIENTRY
 
glGëA˘iveAârib
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufsize
, GLsizei* 
Àngth
, 
GLöt
* 
size
, 
GLíum
* 
ty≥
, 
GLch¨
* 
«me
);

529 
GL_APICALL
 
GL_APIENTRY
 
glGëA˘iveUnif‹m
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufsize
, GLsizei* 
Àngth
, 
GLöt
* 
size
, 
GLíum
* 
ty≥
, 
GLch¨
* 
«me
);

530 
GL_APICALL
 
GL_APIENTRY
 
glGëAâachedShadîs
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
maxcou¡
, GLsizei* 
cou¡
, GLuöt* 
shadîs
);

531 
GL_APICALL
 
GL_APIENTRY
 
glGëAâribLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
* 
«me
);

532 
GL_APICALL
 
GL_APIENTRY
 
glGëBoﬁónv
 (
GLíum
 
≤ame
, 
GLboﬁón
* 
∑øms
);

533 
GL_APICALL
 
GL_APIENTRY
 
glGëBuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
* 
∑øms
);

534 
GL_APICALL
 
GLíum
 
GL_APIENTRY
 
glGëEº‹
 ();

535 
GL_APICALL
 
GL_APIENTRY
 
glGëFlﬂtv
 (
GLíum
 
≤ame
, 
GLÊﬂt
* 
∑øms
);

536 
GL_APICALL
 
GL_APIENTRY
 
glGëFømebuf„rAâachmítP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
≤ame
, 
GLöt
* 
∑øms
);

537 
GL_APICALL
 
GL_APIENTRY
 
glGëI¡egîv
 (
GLíum
 
≤ame
, 
GLöt
* 
∑øms
);

538 
GL_APICALL
 
GL_APIENTRY
 
glGëProgømiv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
* 
∑øms
);

539 
GL_APICALL
 
GL_APIENTRY
 
glGëProgømInfoLog
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
bufsize
, GLsizei* 
Àngth
, 
GLch¨
* 
öfﬁog
);

540 
GL_APICALL
 
GL_APIENTRY
 
glGëRídîbuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
* 
∑øms
);

541 
GL_APICALL
 
GL_APIENTRY
 
glGëShadîiv
 (
GLuöt
 
shadî
, 
GLíum
 
≤ame
, 
GLöt
* 
∑øms
);

542 
GL_APICALL
 
GL_APIENTRY
 
glGëShadîInfoLog
 (
GLuöt
 
shadî
, 
GLsizei
 
bufsize
, GLsizei* 
Àngth
, 
GLch¨
* 
öfﬁog
);

543 
GL_APICALL
 
GL_APIENTRY
 
glGëShadîPªcisi⁄F‹m©
 (
GLíum
 
shadîty≥
, GLíum 
¥ecisi⁄ty≥
, 
GLöt
* 
ønge
, GLöt* 
¥ecisi⁄
);

544 
GL_APICALL
 
GL_APIENTRY
 
glGëShadîSour˚
 (
GLuöt
 
shadî
, 
GLsizei
 
bufsize
, GLsizei* 
Àngth
, 
GLch¨
* 
sour˚
);

545 
GL_APICALL
 c⁄° 
GLubyã
* 
GL_APIENTRY
 
glGëSåög
 (
GLíum
 
«me
);

546 
GL_APICALL
 
GL_APIENTRY
 
glGëTexP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
* 
∑øms
);

547 
GL_APICALL
 
GL_APIENTRY
 
glGëTexP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
* 
∑øms
);

548 
GL_APICALL
 
GL_APIENTRY
 
glGëUnif‹mfv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
* 
∑øms
);

549 
GL_APICALL
 
GL_APIENTRY
 
glGëUnif‹miv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöt* 
∑øms
);

550 
GL_APICALL
 
GL_APIENTRY
 
glGëUnif‹mLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
* 
«me
);

551 
GL_APICALL
 
GL_APIENTRY
 
glGëVîãxAâribfv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
* 
∑øms
);

552 
GL_APICALL
 
GL_APIENTRY
 
glGëVîãxAâribiv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
* 
∑øms
);

553 
GL_APICALL
 
GL_APIENTRY
 
glGëVîãxAâribPoöãrv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLvoid
** 
poöãr
);

554 
GL_APICALL
 
GL_APIENTRY
 
glHöt
 (
GLíum
 
èrgë
, GLíum 
mode
);

555 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
glIsBuf„r
 (
GLuöt
 
buf„r
);

556 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
glIsE«bÀd
 (
GLíum
 
ˇp
);

557 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
glIsFømebuf„r
 (
GLuöt
 
‰amebuf„r
);

558 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
glIsProgøm
 (
GLuöt
 
¥ogøm
);

559 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
glIsRídîbuf„r
 (
GLuöt
 
ªndîbuf„r
);

560 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
glIsShadî
 (
GLuöt
 
shadî
);

561 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
glIsTextuª
 (
GLuöt
 
ãxtuª
);

562 
GL_APICALL
 
GL_APIENTRY
 
glLöeWidth
 (
GLÊﬂt
 
width
);

563 
GL_APICALL
 
GL_APIENTRY
 
glLökProgøm
 (
GLuöt
 
¥ogøm
);

564 
GL_APICALL
 
GL_APIENTRY
 
glPixñSt‹ei
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

565 
GL_APICALL
 
GL_APIENTRY
 
glPﬁyg⁄Off£t
 (
GLÊﬂt
 
Á˘‹
, GLÊﬂà
unôs
);

566 
GL_APICALL
 
GL_APIENTRY
 
glRódPixñs
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, 
GLvoid
* 
pixñs
);

567 
GL_APICALL
 
GL_APIENTRY
 
glRñó£ShadîCompûî
 ();

568 
GL_APICALL
 
GL_APIENTRY
 
glRídîbuf„rSt‹age
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

569 
GL_APICALL
 
GL_APIENTRY
 
glSam∂eCovîage
 (
GL˛ampf
 
vÆue
, 
GLboﬁón
 
övît
);

570 
GL_APICALL
 
GL_APIENTRY
 
glSciss‹
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

571 
GL_APICALL
 
GL_APIENTRY
 
glShadîBö¨y
 (
GLsizei
 
n
, c⁄° 
GLuöt
* 
shadîs
, 
GLíum
 
bö¨yf‹m©
, c⁄° 
GLvoid
* 
bö¨y
, GLsizeò
Àngth
);

572 
GL_APICALL
 
GL_APIENTRY
 
glShadîSour˚
 (
GLuöt
 
shadî
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
** 
°rög
, c⁄° 
GLöt
* 
Àngth
);

573 
GL_APICALL
 
GL_APIENTRY
 
glSãncûFunc
 (
GLíum
 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

574 
GL_APICALL
 
GL_APIENTRY
 
glSãncûFuncSï¨©e
 (
GLíum
 
Á˚
, GLíum 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

575 
GL_APICALL
 
GL_APIENTRY
 
glSãncûMask
 (
GLuöt
 
mask
);

576 
GL_APICALL
 
GL_APIENTRY
 
glSãncûMaskSï¨©e
 (
GLíum
 
Á˚
, 
GLuöt
 
mask
);

577 
GL_APICALL
 
GL_APIENTRY
 
glSãncûOp
 (
GLíum
 
Áû
, GLíum 
zÁû
, GLíum 
z∑ss
);

578 
GL_APICALL
 
GL_APIENTRY
 
glSãncûOpSï¨©e
 (
GLíum
 
Á˚
, GLíum 
Áû
, GLíum 
zÁû
, GLíum 
z∑ss
);

579 
GL_APICALL
 
GL_APIENTRY
 
glTexImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
* 
pixñs
);

580 
GL_APICALL
 
GL_APIENTRY
 
glTexP¨amëîf
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

581 
GL_APICALL
 
GL_APIENTRY
 
glTexP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
* 
∑øms
);

582 
GL_APICALL
 
GL_APIENTRY
 
glTexP¨amëîi
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

583 
GL_APICALL
 
GL_APIENTRY
 
glTexP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
* 
∑øms
);

584 
GL_APICALL
 
GL_APIENTRY
 
glTexSubImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
* 
pixñs
);

585 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m1f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
x
);

586 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m1fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
* 
v
);

587 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m1i
 (
GLöt
 
loˇti⁄
, GLöà
x
);

588 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m1iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöt* 
v
);

589 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m2f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

590 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
* 
v
);

591 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m2i
 (
GLöt
 
loˇti⁄
, GLöà
x
, GLöà
y
);

592 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m2iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöt* 
v
);

593 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m3f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

594 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
* 
v
);

595 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m3i
 (
GLöt
 
loˇti⁄
, GLöà
x
, GLöà
y
, GLöà
z
);

596 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m3iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöt* 
v
);

597 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m4f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

598 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
* 
v
);

599 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m4i
 (
GLöt
 
loˇti⁄
, GLöà
x
, GLöà
y
, GLöà
z
, GLöà
w
);

600 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m4iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöt* 
v
);

601 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹mM©rix2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
* 
vÆue
);

602 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹mM©rix3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
* 
vÆue
);

603 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹mM©rix4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
* 
vÆue
);

604 
GL_APICALL
 
GL_APIENTRY
 
glU£Progøm
 (
GLuöt
 
¥ogøm
);

605 
GL_APICALL
 
GL_APIENTRY
 
glVÆid©eProgøm
 (
GLuöt
 
¥ogøm
);

606 
GL_APICALL
 
GL_APIENTRY
 
glVîãxAârib1f
 (
GLuöt
 
ödx
, 
GLÊﬂt
 
x
);

607 
GL_APICALL
 
GL_APIENTRY
 
glVîãxAârib1fv
 (
GLuöt
 
ödx
, c⁄° 
GLÊﬂt
* 
vÆues
);

608 
GL_APICALL
 
GL_APIENTRY
 
glVîãxAârib2f
 (
GLuöt
 
ödx
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

609 
GL_APICALL
 
GL_APIENTRY
 
glVîãxAârib2fv
 (
GLuöt
 
ödx
, c⁄° 
GLÊﬂt
* 
vÆues
);

610 
GL_APICALL
 
GL_APIENTRY
 
glVîãxAârib3f
 (
GLuöt
 
ödx
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

611 
GL_APICALL
 
GL_APIENTRY
 
glVîãxAârib3fv
 (
GLuöt
 
ödx
, c⁄° 
GLÊﬂt
* 
vÆues
);

612 
GL_APICALL
 
GL_APIENTRY
 
glVîãxAârib4f
 (
GLuöt
 
ödx
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

613 
GL_APICALL
 
GL_APIENTRY
 
glVîãxAârib4fv
 (
GLuöt
 
ödx
, c⁄° 
GLÊﬂt
* 
vÆues
);

614 
GL_APICALL
 
GL_APIENTRY
 
glVîãxAâribPoöãr
 (
GLuöt
 
ödx
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
* 
±r
);

615 
GL_APICALL
 
GL_APIENTRY
 
glVõwp‹t
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

617 #ifde‡
__˝lu•lus


	@jni/include/GLES2/gl2ext.h

1 #i‚de‡
__gl2ext_h_


2 
	#__gl2ext_h_


	)

6 #ifde‡
__˝lu•lus


15 #i‚de‡
GL_APIENTRYP


16 
	#GL_APIENTRYP
 
GL_APIENTRY
*

	)

24 #i‚de‡
GL_OES_com¥es£d_ETC1_RGB8_ãxtuª


25 
	#GL_ETC1_RGB8_OES
 0x8D64

	)

29 #i‚de‡
GL_OES_com¥es£d_∑Àâed_ãxtuª


30 
	#GL_PALETTE4_RGB8_OES
 0x8B90

	)

31 
	#GL_PALETTE4_RGBA8_OES
 0x8B91

	)

32 
	#GL_PALETTE4_R5_G6_B5_OES
 0x8B92

	)

33 
	#GL_PALETTE4_RGBA4_OES
 0x8B93

	)

34 
	#GL_PALETTE4_RGB5_A1_OES
 0x8B94

	)

35 
	#GL_PALETTE8_RGB8_OES
 0x8B95

	)

36 
	#GL_PALETTE8_RGBA8_OES
 0x8B96

	)

37 
	#GL_PALETTE8_R5_G6_B5_OES
 0x8B97

	)

38 
	#GL_PALETTE8_RGBA4_OES
 0x8B98

	)

39 
	#GL_PALETTE8_RGB5_A1_OES
 0x8B99

	)

43 #i‚de‡
GL_OES_dïth24


44 
	#GL_DEPTH_COMPONENT24_OES
 0x81A6

	)

48 #i‚de‡
GL_OES_dïth32


49 
	#GL_DEPTH_COMPONENT32_OES
 0x81A7

	)

56 #i‚de‡
GL_OES_EGL_image


57 * 
	tGLeglImageOES
;

61 #i‚de‡
GL_OES_ñemít_ödex_uöt


62 
	#GL_UNSIGNED_INT
 0x1405

	)

66 #i‚de‡
GL_OES_gë_¥ogøm_bö¨y


67 
	#GL_PROGRAM_BINARY_LENGTH_OES
 0x8741

	)

68 
	#GL_NUM_PROGRAM_BINARY_FORMATS_OES
 0x87FE

	)

69 
	#GL_PROGRAM_BINARY_FORMATS_OES
 0x87FF

	)

73 #i‚de‡
GL_OES_m≠buf„r


74 
	#GL_WRITE_ONLY_OES
 0x88B9

	)

75 
	#GL_BUFFER_ACCESS_OES
 0x88BB

	)

76 
	#GL_BUFFER_MAPPED_OES
 0x88BC

	)

77 
	#GL_BUFFER_MAP_POINTER_OES
 0x88BD

	)

81 #i‚de‡
GL_OES_∑cked_dïth_°ícû


82 
	#GL_DEPTH_STENCIL_OES
 0x84F9

	)

83 
	#GL_UNSIGNED_INT_24_8_OES
 0x84FA

	)

84 
	#GL_DEPTH24_STENCIL8_OES
 0x88F0

	)

88 #i‚de‡
GL_OES_rgb8_rgba8


89 
	#GL_RGB8_OES
 0x8051

	)

90 
	#GL_RGBA8_OES
 0x8058

	)

94 #i‚de‡
GL_OES_°™d¨d_dîiv©ives


95 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES
 0x8B8B

	)

99 #i‚de‡
GL_OES_°ícû1


100 
	#GL_STENCIL_INDEX1_OES
 0x8D46

	)

104 #i‚de‡
GL_OES_°ícû4


105 
	#GL_STENCIL_INDEX4_OES
 0x8D47

	)

109 #i‚de‡
GL_OES_ãxtuª_3D


110 
	#GL_TEXTURE_WRAP_R_OES
 0x8072

	)

111 
	#GL_TEXTURE_3D_OES
 0x806F

	)

112 
	#GL_TEXTURE_BINDING_3D_OES
 0x806A

	)

113 
	#GL_MAX_3D_TEXTURE_SIZE_OES
 0x8073

	)

114 
	#GL_SAMPLER_3D_OES
 0x8B5F

	)

115 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES
 0x8CD4

	)

125 #i‚de‡
GL_OES_ãxtuª_hÆf_Êﬂt


126 
	#GL_HALF_FLOAT_OES
 0x8D61

	)

136 #i‚de‡
GL_OES_vîãx_¨øy_obje˘


137 
	#GL_VERTEX_ARRAY_BINDING_OES
 0x85B5

	)

144 #i‚de‡
GL_OES_vîãx_ty≥_10_10_10_2


145 
	#GL_UNSIGNED_INT_10_10_10_2_OES
 0x8DF6

	)

146 
	#GL_INT_10_10_10_2_OES
 0x8DF7

	)

150 #i‚de‡
GL_OES_EGL_image_exã∫Æ


151 
	#GL_TEXTURE_EXTERNAL_OES
 0x8D65

	)

152 
	#GL_SAMPLER_EXTERNAL_OES
 0x8D66

	)

153 
	#GL_TEXTURE_BINDING_EXTERNAL_OES
 0x8D67

	)

154 
	#GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES
 0x8D68

	)

162 #i‚de‡
GL_AMD_com¥es£d_3DC_ãxtuª


163 
	#GL_3DC_X_AMD
 0x87F9

	)

164 
	#GL_3DC_XY_AMD
 0x87FA

	)

168 #i‚de‡
GL_AMD_com¥es£d_ATC_ãxtuª


169 
	#GL_ATC_RGB_AMD
 0x8C92

	)

170 
	#GL_ATC_RGBA_EXPLICIT_ALPHA_AMD
 0x8C93

	)

171 
	#GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD
 0x87EE

	)

175 #i‚de‡
GL_AMD_≥rf‹m™˚_m⁄ô‹


176 
	#GL_COUNTER_TYPE_AMD
 0x8BC0

	)

177 
	#GL_COUNTER_RANGE_AMD
 0x8BC1

	)

178 
	#GL_UNSIGNED_INT64_AMD
 0x8BC2

	)

179 
	#GL_PERCENTAGE_AMD
 0x8BC3

	)

180 
	#GL_PERFMON_RESULT_AVAILABLE_AMD
 0x8BC4

	)

181 
	#GL_PERFMON_RESULT_SIZE_AMD
 0x8BC5

	)

182 
	#GL_PERFMON_RESULT_AMD
 0x8BC6

	)

186 #i‚de‡
GL_AMD_¥ogøm_bö¨y_Z400


187 
	#GL_Z400_BINARY_AMD
 0x8740

	)

195 #i‚de‡
GL_EXT_bÀnd_mömax


196 
	#GL_MIN_EXT
 0x8007

	)

197 
	#GL_MAX_EXT
 0x8008

	)

201 #i‚de‡
GL_EXT_disˇrd_‰amebuf„r


202 
	#GL_COLOR_EXT
 0x1800

	)

203 
	#GL_DEPTH_EXT
 0x1801

	)

204 
	#GL_STENCIL_EXT
 0x1802

	)

211 #i‚de‡
GL_EXT_ªad_f‹m©_bgø


212 
	#GL_BGRA_EXT
 0x80E1

	)

213 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT
 0x8365

	)

214 
	#GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT
 0x8366

	)

218 #i‚de‡
GL_EXT_ãxtuª_fûãr_™isŸr›ic


219 
	#GL_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FE

	)

220 
	#GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FF

	)

224 #i‚de‡
GL_EXT_ãxtuª_f‹m©_BGRA8888


225 
	#GL_BGRA_EXT
 0x80E1

	)

229 #i‚de‡
GL_EXT_ãxtuª_ty≥_2_10_10_10_REV


230 
	#GL_UNSIGNED_INT_2_10_10_10_REV_EXT
 0x8368

	)

234 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_dxt1


235 
	#GL_COMPRESSED_RGB_S3TC_DXT1_EXT
 0x83F0

	)

236 
	#GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
 0x83F1

	)

244 #i‚de‡
GL_IMG_¥ogøm_bö¨y


245 
	#GL_SGX_PROGRAM_BINARY_IMG
 0x9130

	)

249 #i‚de‡
GL_IMG_ªad_f‹m©


250 
	#GL_BGRA_IMG
 0x80E1

	)

251 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG
 0x8365

	)

255 #i‚de‡
GL_IMG_shadî_bö¨y


256 
	#GL_SGX_BINARY_IMG
 0x8C0A

	)

260 #i‚de‡
GL_IMG_ãxtuª_com¥essi⁄_pvπc


261 
	#GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG
 0x8C00

	)

262 
	#GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG
 0x8C01

	)

263 
	#GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG
 0x8C02

	)

264 
	#GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG
 0x8C03

	)

268 #i‚de‡
GL_IMG_mu…ißm∂ed_ªndî_to_ãxtuª


269 
	#GL_RENDERBUFFER_SAMPLES_IMG
 0x9133

	)

270 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG
 0x9134

	)

271 
	#GL_MAX_SAMPLES_IMG
 0x9135

	)

272 
	#GL_TEXTURE_SAMPLES_IMG
 0x9136

	)

280 #i‚de‡
GL_NV_„n˚


281 
	#GL_ALL_COMPLETED_NV
 0x84F2

	)

282 
	#GL_FENCE_STATUS_NV
 0x84F3

	)

283 
	#GL_FENCE_CONDITION_NV
 0x84F4

	)

287 #i‚de‡
GL_NV_covîage_ßm∂e


288 
	#GL_COVERAGE_COMPONENT_NV
 0x8ED0

	)

289 
	#GL_COVERAGE_COMPONENT4_NV
 0x8ED1

	)

290 
	#GL_COVERAGE_ATTACHMENT_NV
 0x8ED2

	)

291 
	#GL_COVERAGE_BUFFERS_NV
 0x8ED3

	)

292 
	#GL_COVERAGE_SAMPLES_NV
 0x8ED4

	)

293 
	#GL_COVERAGE_ALL_FRAGMENTS_NV
 0x8ED5

	)

294 
	#GL_COVERAGE_EDGE_FRAGMENTS_NV
 0x8ED6

	)

295 
	#GL_COVERAGE_AUTOMATIC_NV
 0x8ED7

	)

296 
	#GL_COVERAGE_BUFFER_BIT_NV
 0x8000

	)

300 #i‚de‡
GL_NV_dïth_n⁄löór


301 
	#GL_DEPTH_COMPONENT16_NONLINEAR_NV
 0x8E2C

	)

312 #i‚de‡
GL_QCOM_exãnded_gë


313 
	#GL_TEXTURE_WIDTH_QCOM
 0x8BD2

	)

314 
	#GL_TEXTURE_HEIGHT_QCOM
 0x8BD3

	)

315 
	#GL_TEXTURE_DEPTH_QCOM
 0x8BD4

	)

316 
	#GL_TEXTURE_INTERNAL_FORMAT_QCOM
 0x8BD5

	)

317 
	#GL_TEXTURE_FORMAT_QCOM
 0x8BD6

	)

318 
	#GL_TEXTURE_TYPE_QCOM
 0x8BD7

	)

319 
	#GL_TEXTURE_IMAGE_VALID_QCOM
 0x8BD8

	)

320 
	#GL_TEXTURE_NUM_LEVELS_QCOM
 0x8BD9

	)

321 
	#GL_TEXTURE_TARGET_QCOM
 0x8BDA

	)

322 
	#GL_TEXTURE_OBJECT_VALID_QCOM
 0x8BDB

	)

323 
	#GL_STATE_RESTORE
 0x8BDC

	)

330 #i‚de‡
GL_QCOM_≥rfm⁄_globÆ_mode


331 
	#GL_PERFMON_GLOBAL_MODE_QCOM
 0x8FA0

	)

335 #i‚de‡
GL_QCOM_wrôe⁄ly_ªndîög


336 
	#GL_WRITEONLY_RENDERING_QCOM
 0x8823

	)

340 #i‚de‡
GL_QCOM_tûed_ªndîög


341 
	#GL_COLOR_BUFFER_BIT0_QCOM
 0x00000001

	)

342 
	#GL_COLOR_BUFFER_BIT1_QCOM
 0x00000002

	)

343 
	#GL_COLOR_BUFFER_BIT2_QCOM
 0x00000004

	)

344 
	#GL_COLOR_BUFFER_BIT3_QCOM
 0x00000008

	)

345 
	#GL_COLOR_BUFFER_BIT4_QCOM
 0x00000010

	)

346 
	#GL_COLOR_BUFFER_BIT5_QCOM
 0x00000020

	)

347 
	#GL_COLOR_BUFFER_BIT6_QCOM
 0x00000040

	)

348 
	#GL_COLOR_BUFFER_BIT7_QCOM
 0x00000080

	)

349 
	#GL_DEPTH_BUFFER_BIT0_QCOM
 0x00000100

	)

350 
	#GL_DEPTH_BUFFER_BIT1_QCOM
 0x00000200

	)

351 
	#GL_DEPTH_BUFFER_BIT2_QCOM
 0x00000400

	)

352 
	#GL_DEPTH_BUFFER_BIT3_QCOM
 0x00000800

	)

353 
	#GL_DEPTH_BUFFER_BIT4_QCOM
 0x00001000

	)

354 
	#GL_DEPTH_BUFFER_BIT5_QCOM
 0x00002000

	)

355 
	#GL_DEPTH_BUFFER_BIT6_QCOM
 0x00004000

	)

356 
	#GL_DEPTH_BUFFER_BIT7_QCOM
 0x00008000

	)

357 
	#GL_STENCIL_BUFFER_BIT0_QCOM
 0x00010000

	)

358 
	#GL_STENCIL_BUFFER_BIT1_QCOM
 0x00020000

	)

359 
	#GL_STENCIL_BUFFER_BIT2_QCOM
 0x00040000

	)

360 
	#GL_STENCIL_BUFFER_BIT3_QCOM
 0x00080000

	)

361 
	#GL_STENCIL_BUFFER_BIT4_QCOM
 0x00100000

	)

362 
	#GL_STENCIL_BUFFER_BIT5_QCOM
 0x00200000

	)

363 
	#GL_STENCIL_BUFFER_BIT6_QCOM
 0x00400000

	)

364 
	#GL_STENCIL_BUFFER_BIT7_QCOM
 0x00800000

	)

365 
	#GL_MULTISAMPLE_BUFFER_BIT0_QCOM
 0x01000000

	)

366 
	#GL_MULTISAMPLE_BUFFER_BIT1_QCOM
 0x02000000

	)

367 
	#GL_MULTISAMPLE_BUFFER_BIT2_QCOM
 0x04000000

	)

368 
	#GL_MULTISAMPLE_BUFFER_BIT3_QCOM
 0x08000000

	)

369 
	#GL_MULTISAMPLE_BUFFER_BIT4_QCOM
 0x10000000

	)

370 
	#GL_MULTISAMPLE_BUFFER_BIT5_QCOM
 0x20000000

	)

371 
	#GL_MULTISAMPLE_BUFFER_BIT6_QCOM
 0x40000000

	)

372 
	#GL_MULTISAMPLE_BUFFER_BIT7_QCOM
 0x80000000

	)

384 #i‚de‡
GL_OES_com¥es£d_ETC1_RGB8_ãxtuª


385 
	#GL_OES_com¥es£d_ETC1_RGB8_ãxtuª
 1

	)

389 #i‚de‡
GL_OES_com¥es£d_∑Àâed_ãxtuª


390 
	#GL_OES_com¥es£d_∑Àâed_ãxtuª
 1

	)

394 #i‚de‡
GL_OES_dïth24


395 
	#GL_OES_dïth24
 1

	)

399 #i‚de‡
GL_OES_dïth32


400 
	#GL_OES_dïth32
 1

	)

404 #i‚de‡
GL_OES_dïth_ãxtuª


405 
	#GL_OES_dïth_ãxtuª
 1

	)

409 #i‚de‡
GL_OES_EGL_image


410 
	#GL_OES_EGL_image
 1

	)

411 #ifde‡
GL_GLEXT_PROTOTYPES


412 
GL_APICALL
 
GL_APIENTRY
 
glEGLImageT¨gëTextuª2DOES
 (
GLíum
 
èrgë
, 
GLeglImageOES
 
image
);

413 
GL_APICALL
 
GL_APIENTRY
 
glEGLImageT¨gëRídîbuf„rSt‹ageOES
 (
GLíum
 
èrgë
, 
GLeglImageOES
 
image
);

415 (
	tGL_APIENTRYP
 
	tPFNGLEGLIMAGETARGETTEXTURE2DOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLeglImageOES
 
	timage
);

416 (
	tGL_APIENTRYP
 
	tPFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLeglImageOES
 
	timage
);

420 #i‚de‡
GL_OES_ñemít_ödex_uöt


421 
	#GL_OES_ñemít_ödex_uöt
 1

	)

425 #i‚de‡
GL_OES_fbo_ªndî_mùm≠


426 
	#GL_OES_fbo_ªndî_mùm≠
 1

	)

430 #i‚de‡
GL_OES_‰agmít_¥ecisi⁄_high


431 
	#GL_OES_‰agmít_¥ecisi⁄_high
 1

	)

435 #i‚de‡
GL_OES_gë_¥ogøm_bö¨y


436 
	#GL_OES_gë_¥ogøm_bö¨y
 1

	)

437 #ifde‡
GL_GLEXT_PROTOTYPES


438 
GL_APICALL
 
GL_APIENTRY
 
	`glGëProgømBö¨yOES
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLíum
 *
bö¨yF‹m©
, 
GLvoid
 *
bö¨y
);

439 
GL_APICALL
 
GL_APIENTRY
 
	`glProgømBö¨yOES
 (
GLuöt
 
¥ogøm
, 
GLíum
 
bö¨yF‹m©
, c⁄° 
GLvoid
 *
bö¨y
, 
GLöt
 
Àngth
);

441 (
	tGL_APIENTRYP
 
	tPFNGLGETPROGRAMBINARYOESPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLíum
 *
	tbö¨yF‹m©
, 
	tGLvoid
 *
	tbö¨y
);

442 (
	tGL_APIENTRYP
 
	tPFNGLPROGRAMBINARYOESPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tbö¨yF‹m©
, c⁄° 
	tGLvoid
 *
	tbö¨y
, 
	tGLöt
 
	tÀngth
);

446 #i‚de‡
GL_OES_m≠buf„r


447 
	#GL_OES_m≠buf„r
 1

	)

448 #ifde‡
GL_GLEXT_PROTOTYPES


449 
GL_APICALL
 * 
GL_APIENTRY
 
	`glM≠Buf„rOES
 (
GLíum
 
èrgë
, GLíum 
ac˚ss
);

450 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
	`glUnm≠Buf„rOES
 (
GLíum
 
èrgë
);

451 
GL_APICALL
 
GL_APIENTRY
 
	`glGëBuf„rPoöãrvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLvoid
** 
∑øms
);

453 * (
	tGL_APIENTRYP
 
	tPFNGLMAPBUFFEROESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

454 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLUNMAPBUFFEROESPROC
Ë(
	tGLíum
 
	tèrgë
);

455 (
	tGL_APIENTRYP
 
	tPFNGLGETBUFFERPOINTERVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
** 
	t∑øms
);

459 #i‚de‡
GL_OES_∑cked_dïth_°ícû


460 
	#GL_OES_∑cked_dïth_°ícû
 1

	)

464 #i‚de‡
GL_OES_rgb8_rgba8


465 
	#GL_OES_rgb8_rgba8
 1

	)

469 #i‚de‡
GL_OES_°™d¨d_dîiv©ives


470 
	#GL_OES_°™d¨d_dîiv©ives
 1

	)

474 #i‚de‡
GL_OES_°ícû1


475 
	#GL_OES_°ícû1
 1

	)

479 #i‚de‡
GL_OES_°ícû4


480 
	#GL_OES_°ícû4
 1

	)

484 #i‚de‡
GL_OES_ãxtuª_3D


485 
	#GL_OES_ãxtuª_3D
 1

	)

486 #ifde‡
GL_GLEXT_PROTOTYPES


487 
GL_APICALL
 
GL_APIENTRY
 
	`glTexImage3DOES
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
* 
pixñs
);

488 
GL_APICALL
 
GL_APIENTRY
 
	`glTexSubImage3DOES
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
* 
pixñs
);

489 
GL_APICALL
 
GL_APIENTRY
 
	`glC›yTexSubImage3DOES
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

490 
GL_APICALL
 
GL_APIENTRY
 
	`glCom¥es£dTexImage3DOES
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
* 
d©a
);

491 
GL_APICALL
 
GL_APIENTRY
 
	`glCom¥es£dTexSubImage3DOES
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
* 
d©a
);

492 
GL_APICALL
 
GL_APIENTRY
 
	`glFømebuf„rTextuª3DOES
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
zoff£t
);

494 (
	tGL_APIENTRYP
 
	tPFNGLTEXIMAGE3DOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* 
	tpixñs
);

495 (
	tGL_APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* 
	tpixñs
);

496 (
	tGL_APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

497 (
	tGL_APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
* 
	td©a
);

498 (
	tGL_APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
* 
	td©a
);

499 (
	tGL_APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE3DOES
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

503 #i‚de‡
GL_OES_ãxtuª_Êﬂt


504 
	#GL_OES_ãxtuª_Êﬂt
 1

	)

508 #i‚de‡
GL_OES_ãxtuª_Êﬂt_löór


509 
	#GL_OES_ãxtuª_Êﬂt_löór
 1

	)

513 #i‚de‡
GL_OES_ãxtuª_hÆf_Êﬂt


514 
	#GL_OES_ãxtuª_hÆf_Êﬂt
 1

	)

518 #i‚de‡
GL_OES_ãxtuª_hÆf_Êﬂt_löór


519 
	#GL_OES_ãxtuª_hÆf_Êﬂt_löór
 1

	)

523 #i‚de‡
GL_OES_ãxtuª_≈Ÿ


524 
	#GL_OES_ãxtuª_≈Ÿ
 1

	)

528 #i‚de‡
GL_OES_vîãx_¨øy_obje˘


529 
	#GL_OES_vîãx_¨øy_obje˘
 1

	)

530 #ifde‡
GL_GLEXT_PROTOTYPES


531 
GL_APICALL
 
GL_APIENTRY
 
	`glBödVîãxAºayOES
 (
GLuöt
 
¨øy
);

532 
GL_APICALL
 
GL_APIENTRY
 
	`glDñëeVîãxAºaysOES
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¨øys
);

533 
GL_APICALL
 
GL_APIENTRY
 
	`glGíVîãxAºaysOES
 (
GLsizei
 
n
, 
GLuöt
 *
¨øys
);

534 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
	`glIsVîãxAºayOES
 (
GLuöt
 
¨øy
);

536 (
	tGL_APIENTRYP
 
	tPFNGLBINDVERTEXARRAYOESPROC
Ë(
	tGLuöt
 
	t¨øy
);

537 (
	tGL_APIENTRYP
 
	tPFNGLDELETEVERTEXARRAYSOESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¨øys
);

538 (
	tGL_APIENTRYP
 
	tPFNGLGENVERTEXARRAYSOESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¨øys
);

539 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLISVERTEXARRAYOESPROC
Ë(
	tGLuöt
 
	t¨øy
);

543 #i‚de‡
GL_OES_vîãx_hÆf_Êﬂt


544 
	#GL_OES_vîãx_hÆf_Êﬂt
 1

	)

548 #i‚de‡
GL_OES_vîãx_ty≥_10_10_10_2


549 
	#GL_OES_vîãx_ty≥_10_10_10_2
 1

	)

553 #i‚de‡
GL_OES_EGL_image_exã∫Æ


554 
	#GL_OES_EGL_image_exã∫Æ
 1

	)

562 #i‚de‡
GL_AMD_com¥es£d_3DC_ãxtuª


563 
	#GL_AMD_com¥es£d_3DC_ãxtuª
 1

	)

567 #i‚de‡
GL_AMD_com¥es£d_ATC_ãxtuª


568 
	#GL_AMD_com¥es£d_ATC_ãxtuª
 1

	)

572 #i‚de‡
GL_AMD_≥rf‹m™˚_m⁄ô‹


573 
	#GL_AMD_≥rf‹m™˚_m⁄ô‹
 1

	)

574 #ifde‡
GL_GLEXT_PROTOTYPES


575 
GL_APICALL
 
GL_APIENTRY
 
	`glGëPîfM⁄ô‹GroupsAMD
 (
GLöt
 *
numGroups
, 
GLsizei
 
groupsSize
, 
GLuöt
 *
groups
);

576 
GL_APICALL
 
GL_APIENTRY
 
	`glGëPîfM⁄ô‹Cou¡îsAMD
 (
GLuöt
 
group
, 
GLöt
 *
numCou¡îs
, GLöà*
maxA˘iveCou¡îs
, 
GLsizei
 
cou¡îSize
, GLuöà*
cou¡îs
);

577 
GL_APICALL
 
GL_APIENTRY
 
	`glGëPîfM⁄ô‹GroupSåögAMD
 (
GLuöt
 
group
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
groupSåög
);

578 
GL_APICALL
 
GL_APIENTRY
 
	`glGëPîfM⁄ô‹Cou¡îSåögAMD
 (
GLuöt
 
group
, GLuöà
cou¡î
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
cou¡îSåög
);

579 
GL_APICALL
 
GL_APIENTRY
 
	`glGëPîfM⁄ô‹Cou¡îInfoAMD
 (
GLuöt
 
group
, GLuöà
cou¡î
, 
GLíum
 
≤ame
, 
GLvoid
 *
d©a
);

580 
GL_APICALL
 
GL_APIENTRY
 
	`glGíPîfM⁄ô‹sAMD
 (
GLsizei
 
n
, 
GLuöt
 *
m⁄ô‹s
);

581 
GL_APICALL
 
GL_APIENTRY
 
	`glDñëePîfM⁄ô‹sAMD
 (
GLsizei
 
n
, 
GLuöt
 *
m⁄ô‹s
);

582 
GL_APICALL
 
GL_APIENTRY
 
	`glSñe˘PîfM⁄ô‹Cou¡îsAMD
 (
GLuöt
 
m⁄ô‹
, 
GLboﬁón
 
íabÀ
, GLuöà
group
, 
GLöt
 
numCou¡îs
, GLuöà*
cou¡îsLi°
);

583 
GL_APICALL
 
GL_APIENTRY
 
	`glBegöPîfM⁄ô‹AMD
 (
GLuöt
 
m⁄ô‹
);

584 
GL_APICALL
 
GL_APIENTRY
 
	`glEndPîfM⁄ô‹AMD
 (
GLuöt
 
m⁄ô‹
);

585 
GL_APICALL
 
GL_APIENTRY
 
	`glGëPîfM⁄ô‹Cou¡îD©aAMD
 (
GLuöt
 
m⁄ô‹
, 
GLíum
 
≤ame
, 
GLsizei
 
d©aSize
, GLuöà*
d©a
, 
GLöt
 *
byãsWrôãn
);

587 (
	tGL_APIENTRYP
 
	tPFNGLGETPERFMONITORGROUPSAMDPROC
Ë(
	tGLöt
 *
	tnumGroups
, 
	tGLsizei
 
	tgroupsSize
, 
	tGLuöt
 *
	tgroups
);

588 (
	tGL_APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERSAMDPROC
Ë(
	tGLuöt
 
	tgroup
, 
	tGLöt
 *
	tnumCou¡îs
, GLöà*
	tmaxA˘iveCou¡îs
, 
	tGLsizei
 
	tcou¡îSize
, GLuöà*
	tcou¡îs
);

589 (
	tGL_APIENTRYP
 
	tPFNGLGETPERFMONITORGROUPSTRINGAMDPROC
Ë(
	tGLuöt
 
	tgroup
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tgroupSåög
);

590 (
	tGL_APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC
Ë(
	tGLuöt
 
	tgroup
, GLuöà
	tcou¡î
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tcou¡îSåög
);

591 (
	tGL_APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERINFOAMDPROC
Ë(
	tGLuöt
 
	tgroup
, GLuöà
	tcou¡î
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
 *
	td©a
);

592 (
	tGL_APIENTRYP
 
	tPFNGLGENPERFMONITORSAMDPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tm⁄ô‹s
);

593 (
	tGL_APIENTRYP
 
	tPFNGLDELETEPERFMONITORSAMDPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tm⁄ô‹s
);

594 (
	tGL_APIENTRYP
 
	tPFNGLSELECTPERFMONITORCOUNTERSAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
, 
	tGLboﬁón
 
	tíabÀ
, GLuöà
	tgroup
, 
	tGLöt
 
	tnumCou¡îs
, GLuöà*
	tcou¡îsLi°
);

595 (
	tGL_APIENTRYP
 
	tPFNGLBEGINPERFMONITORAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
);

596 (
	tGL_APIENTRYP
 
	tPFNGLENDPERFMONITORAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
);

597 (
	tGL_APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERDATAAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	td©aSize
, GLuöà*
	td©a
, 
	tGLöt
 *
	tbyãsWrôãn
);

601 #i‚de‡
GL_AMD_¥ogøm_bö¨y_Z400


602 
	#GL_AMD_¥ogøm_bö¨y_Z400
 1

	)

610 #i‚de‡
GL_EXT_bÀnd_mömax


611 
	#GL_EXT_bÀnd_mömax
 1

	)

615 #i‚de‡
GL_EXT_disˇrd_‰amebuf„r


616 
	#GL_EXT_disˇrd_‰amebuf„r
 1

	)

617 #ifde‡
GL_GLEXT_PROTOTYPES


618 
GL_APICALL
 
GL_APIENTRY
 
	`glDisˇrdFømebuf„rEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
numAâachmíts
, c⁄° GLíum *
©èchmíts
);

620 (
	tGL_APIENTRYP
 
	tPFNGLDISCARDFRAMEBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° GLíum *
	t©èchmíts
);

623 #i‚de‡
GL_EXT_mu…i_døw_¨øys


624 
	#GL_EXT_mu…i_døw_¨øys
 1

	)

625 #ifde‡
GL_GLEXT_PROTOTYPES


626 
GL_APICALL
 
GL_APIENTRY
 
	`glMu…iDøwAºaysEXT
 (
GLíum
 
mode
, 
GLöt
 *
fú°
, 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
);

627 
GL_APICALL
 
GL_APIENTRY
 
	`glMu…iDøwEÀmítsEXT
 (
GLíum
 
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
* *
ödi˚s
, GLsizeò
¥imcou¡
);

629 (
	tGL_APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 *
	tfú°
, 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

630 (
	tGL_APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

634 #i‚de‡
GL_EXT_ªad_f‹m©_bgø


635 
	#GL_EXT_ªad_f‹m©_bgø
 1

	)

639 #i‚de‡
GL_EXT_ãxtuª_fûãr_™isŸr›ic


640 
	#GL_EXT_ãxtuª_fûãr_™isŸr›ic
 1

	)

644 #i‚de‡
GL_EXT_ãxtuª_f‹m©_BGRA8888


645 
	#GL_EXT_ãxtuª_f‹m©_BGRA8888
 1

	)

649 #i‚de‡
GL_EXT_ãxtuª_ty≥_2_10_10_10_REV


650 
	#GL_EXT_ãxtuª_ty≥_2_10_10_10_REV
 1

	)

654 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_dxt1


655 
	#GL_EXT_ãxtuª_com¥essi⁄_dxt1
 1

	)

663 #i‚de‡
GL_IMG_¥ogøm_bö¨y


664 
	#GL_IMG_¥ogøm_bö¨y
 1

	)

668 #i‚de‡
GL_IMG_ªad_f‹m©


669 
	#GL_IMG_ªad_f‹m©
 1

	)

673 #i‚de‡
GL_IMG_shadî_bö¨y


674 
	#GL_IMG_shadî_bö¨y
 1

	)

678 #i‚de‡
GL_IMG_ãxtuª_com¥essi⁄_pvπc


679 
	#GL_IMG_ãxtuª_com¥essi⁄_pvπc
 1

	)

683 #i‚de‡
GL_IMG_mu…ißm∂ed_ªndî_to_ãxtuª


684 
	#GL_IMG_mu…ißm∂ed_ªndî_to_ãxtuª
 1

	)

685 #ifde‡
GL_GLEXT_PROTOTYPES


686 
GL_APICALL
 
GL_APIENTRY
 
	`glRídîbuf„rSt‹ageMu…ißm∂eIMG
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

687 
GL_APICALL
 
GL_APIENTRY
 
	`glFømebuf„rTextuª2DMu…ißm∂eIMG
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLsizei
 
ßm∂es
);

689 (
	tGL_APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMG
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

690 (
	tGL_APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMG
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLsizei
 
	tßm∂es
);

698 #i‚de‡
GL_NV_„n˚


699 
	#GL_NV_„n˚
 1

	)

700 #ifde‡
GL_GLEXT_PROTOTYPES


701 
GL_APICALL
 
GL_APIENTRY
 
	`glDñëeFí˚sNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
„n˚s
);

702 
GL_APICALL
 
GL_APIENTRY
 
	`glGíFí˚sNV
 (
GLsizei
 
n
, 
GLuöt
 *
„n˚s
);

703 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
	`glIsFí˚NV
 (
GLuöt
 
„n˚
);

704 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
	`glTe°Fí˚NV
 (
GLuöt
 
„n˚
);

705 
GL_APICALL
 
GL_APIENTRY
 
	`glGëFí˚ivNV
 (
GLuöt
 
„n˚
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

706 
GL_APICALL
 
GL_APIENTRY
 
	`glFöishFí˚NV
 (
GLuöt
 
„n˚
);

707 
GL_APICALL
 
GL_APIENTRY
 
	`glSëFí˚NV
 (
GLuöt
 
„n˚
, 
GLíum
 
c⁄dôi⁄
);

709 (
	tGL_APIENTRYP
 
	tPFNGLDELETEFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t„n˚s
);

710 (
	tGL_APIENTRYP
 
	tPFNGLGENFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t„n˚s
);

711 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLISFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

712 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLTESTFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

713 (
	tGL_APIENTRYP
 
	tPFNGLGETFENCEIVNVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

714 (
	tGL_APIENTRYP
 
	tPFNGLFINISHFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

715 (
	tGL_APIENTRYP
 
	tPFNGLSETFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	tc⁄dôi⁄
);

719 #i‚de‡
GL_NV_covîage_ßm∂e


720 
	#GL_NV_covîage_ßm∂e
 1

	)

721 #ifde‡
GL_GLEXT_PROTOTYPES


722 
GL_APICALL
 
GL_APIENTRY
 
	`glCovîageMaskNV
 (
GLboﬁón
 
mask
);

723 
GL_APICALL
 
GL_APIENTRY
 
	`glCovîageO≥øti⁄NV
 (
GLíum
 
›î©i⁄
);

725 (
	tGL_APIENTRYP
 
	tPFNGLCOVERAGEMASKNVPROC
Ë(
	tGLboﬁón
 
	tmask
);

726 (
	tGL_APIENTRYP
 
	tPFNGLCOVERAGEOPERATIONNVPROC
Ë(
	tGLíum
 
	t›î©i⁄
);

730 #i‚de‡
GL_NV_dïth_n⁄löór


731 
	#GL_NV_dïth_n⁄löór
 1

	)

739 #i‚de‡
GL_QCOM_drivî_c⁄åﬁ


740 
	#GL_QCOM_drivî_c⁄åﬁ
 1

	)

741 #ifde‡
GL_GLEXT_PROTOTYPES


742 
GL_APICALL
 
GL_APIENTRY
 
	`glGëDrivîC⁄åﬁsQCOM
 (
GLöt
 *
num
, 
GLsizei
 
size
, 
GLuöt
 *
drivîC⁄åﬁs
);

743 
GL_APICALL
 
GL_APIENTRY
 
	`glGëDrivîC⁄åﬁSåögQCOM
 (
GLuöt
 
drivîC⁄åﬁ
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
drivîC⁄åﬁSåög
);

744 
GL_APICALL
 
GL_APIENTRY
 
	`glE«bÀDrivîC⁄åﬁQCOM
 (
GLuöt
 
drivîC⁄åﬁ
);

745 
GL_APICALL
 
GL_APIENTRY
 
	`glDißbÀDrivîC⁄åﬁQCOM
 (
GLuöt
 
drivîC⁄åﬁ
);

747 (
	tGL_APIENTRYP
 
	tPFNGLGETDRIVERCONTROLSQCOMPROC
Ë(
	tGLöt
 *
	tnum
, 
	tGLsizei
 
	tsize
, 
	tGLuöt
 *
	tdrivîC⁄åﬁs
);

748 (
	tGL_APIENTRYP
 
	tPFNGLGETDRIVERCONTROLSTRINGQCOMPROC
Ë(
	tGLuöt
 
	tdrivîC⁄åﬁ
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tdrivîC⁄åﬁSåög
);

749 (
	tGL_APIENTRYP
 
	tPFNGLENABLEDRIVERCONTROLQCOMPROC
Ë(
	tGLuöt
 
	tdrivîC⁄åﬁ
);

750 (
	tGL_APIENTRYP
 
	tPFNGLDISABLEDRIVERCONTROLQCOMPROC
Ë(
	tGLuöt
 
	tdrivîC⁄åﬁ
);

754 #i‚de‡
GL_QCOM_exãnded_gë


755 
	#GL_QCOM_exãnded_gë
 1

	)

756 #ifde‡
GL_GLEXT_PROTOTYPES


757 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëTextuªsQCOM
 (
GLuöt
 *
ãxtuªs
, 
GLöt
 
maxTextuªs
, GLöà*
numTextuªs
);

758 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëBuf„rsQCOM
 (
GLuöt
 *
buf„rs
, 
GLöt
 
maxBuf„rs
, GLöà*
numBuf„rs
);

759 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëRídîbuf„rsQCOM
 (
GLuöt
 *
ªndîbuf„rs
, 
GLöt
 
maxRídîbuf„rs
, GLöà*
numRídîbuf„rs
);

760 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëFømebuf„rsQCOM
 (
GLuöt
 *
‰amebuf„rs
, 
GLöt
 
maxFømebuf„rs
, GLöà*
numFømebuf„rs
);

761 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëTexLevñP¨amëîivQCOM
 (
GLuöt
 
ãxtuª
, 
GLíum
 
Á˚
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, GLöà*
∑øms
);

762 
GL_APICALL
 
GL_APIENTRY
 
	`glExtTexObje˘SèãOvîrideiQCOM
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

763 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëTexSubImageQCOM
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
ãxñs
);

764 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëBuf„rPoöãrvQCOM
 (
GLíum
 
èrgë
, 
GLvoid
 **
∑øms
);

766 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETTEXTURESQCOMPROC
Ë(
	tGLuöt
 *
	tãxtuªs
, 
	tGLöt
 
	tmaxTextuªs
, GLöà*
	tnumTextuªs
);

767 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETBUFFERSQCOMPROC
Ë(
	tGLuöt
 *
	tbuf„rs
, 
	tGLöt
 
	tmaxBuf„rs
, GLöà*
	tnumBuf„rs
);

768 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETRENDERBUFFERSQCOMPROC
Ë(
	tGLuöt
 *
	tªndîbuf„rs
, 
	tGLöt
 
	tmaxRídîbuf„rs
, GLöà*
	tnumRídîbuf„rs
);

769 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETFRAMEBUFFERSQCOMPROC
Ë(
	tGLuöt
 *
	t‰amebuf„rs
, 
	tGLöt
 
	tmaxFømebuf„rs
, GLöà*
	tnumFømebuf„rs
);

770 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tÁ˚
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, GLöà*
	t∑øms
);

771 (
	tGL_APIENTRYP
 
	tPFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

772 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETTEXSUBIMAGEQCOMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tãxñs
);

773 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETBUFFERPOINTERVQCOMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLvoid
 **
	t∑øms
);

777 #i‚de‡
GL_QCOM_exãnded_gë2


778 
	#GL_QCOM_exãnded_gë2
 1

	)

779 #ifde‡
GL_GLEXT_PROTOTYPES


780 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëShadîsQCOM
 (
GLuöt
 *
shadîs
, 
GLöt
 
maxShadîs
, GLöà*
numShadîs
);

781 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëProgømsQCOM
 (
GLuöt
 *
¥ogøms
, 
GLöt
 
maxProgøms
, GLöà*
numProgøms
);

782 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
	`glExtIsProgømBö¨yQCOM
 (
GLuöt
 
¥ogøm
);

783 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëProgømBö¨ySour˚QCOM
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, 
GLch¨
 *
sour˚
, 
GLöt
 *
Àngth
);

785 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETSHADERSQCOMPROC
Ë(
	tGLuöt
 *
	tshadîs
, 
	tGLöt
 
	tmaxShadîs
, GLöà*
	tnumShadîs
);

786 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETPROGRAMSQCOMPROC
Ë(
	tGLuöt
 *
	t¥ogøms
, 
	tGLöt
 
	tmaxProgøms
, GLöà*
	tnumProgøms
);

787 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLEXTISPROGRAMBINARYQCOMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

788 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, 
	tGLch¨
 *
	tsour˚
, 
	tGLöt
 *
	tÀngth
);

792 #i‚de‡
GL_QCOM_≥rfm⁄_globÆ_mode


793 
	#GL_QCOM_≥rfm⁄_globÆ_mode
 1

	)

797 #i‚de‡
GL_QCOM_wrôe⁄ly_ªndîög


798 
	#GL_QCOM_wrôe⁄ly_ªndîög
 1

	)

802 #i‚de‡
GL_QCOM_tûed_ªndîög


803 
	#GL_QCOM_tûed_ªndîög
 1

	)

804 #ifde‡
GL_GLEXT_PROTOTYPES


805 
GL_APICALL
 
GL_APIENTRY
 
	`glSèπTûögQCOM
 (
GLuöt
 
x
, GLuöà
y
, GLuöà
width
, GLuöà
height
, 
GLbôfõld
 
¥e£rveMask
);

806 
GL_APICALL
 
GL_APIENTRY
 
	`glEndTûögQCOM
 (
GLbôfõld
 
¥e£rveMask
);

808 (
	tGL_APIENTRYP
 
	tPFNGLSTARTTILINGQCOMPROC
Ë(
	tGLuöt
 
	tx
, GLuöà
	ty
, GLuöà
	twidth
, GLuöà
	theight
, 
	tGLbôfõld
 
	t¥e£rveMask
);

809 (
	tGL_APIENTRYP
 
	tPFNGLENDTILINGQCOMPROC
Ë(
	tGLbôfõld
 
	t¥e£rveMask
);

812 #ifde‡
__˝lu•lus


813 
	}
}

	@jni/include/GLES2/gl2platform.h

1 #i‚de‡
__gl2∂©f‹m_h_


2 
	#__gl2∂©f‹m_h_


	)

20 
	~<KHR/khΩœtf‹m.h
>

22 #i‚de‡
GL_APICALL


23 
	#GL_APICALL
 
KHRONOS_APICALL


	)

26 #i‚de‡
GL_APIENTRY


27 
	#GL_APIENTRY
 
KHRONOS_APIENTRY


	)

	@jni/include/JNIHelp.h

23 #i‚de‡
_NATIVEHELPER_JNIHELP_H


24 
	#_NATIVEHELPER_JNIHELP_H


	)

26 
	~<jni.h
>

27 
	~<utûs/Log.h
>

28 
	~<uni°d.h
>

30 #i‚de‡
NELEM


31 
	#NELEM
(
x
Ë((Ë((xË/ ((x)[0])))

	)

34 #ifde‡
__˝lu•lus


41 
jniRegi°îN©iveMëhods
(
C_JNIEnv
* 
ív
, c⁄° * 
˛assName
,

42 c⁄° 
JNIN©iveMëhod
* 
gMëhods
, 
numMëhods
);

54 
jniThrowEx˚±i⁄
(
C_JNIEnv
* 
ív
, c⁄° * 
˛assName
, c⁄° * 
msg
);

59 
jniThrowNuŒPoöãrEx˚±i⁄
(
C_JNIEnv
* 
ív
, c⁄° * 
msg
);

64 
jniThrowRu¡imeEx˚±i⁄
(
C_JNIEnv
* 
ív
, c⁄° * 
msg
);

69 
jniThrowIOEx˚±i⁄
(
C_JNIEnv
* 
ív
, 
î∫um
);

77 c⁄° * 
jniSåEº‹
(
î∫um
, * 
buf
, 
size_t
 
buÊí
);

82 
jobje˘
 
jniCª©eFûeDes¸ùt‹
(
C_JNIEnv
* 
ív
, 
fd
);

87 
jniGëFDFromFûeDes¸ùt‹
(
C_JNIEnv
* 
ív
, 
jobje˘
 
fûeDes¸ùt‹
);

92 
jniSëFûeDes¸ùt‹OfFD
(
C_JNIEnv
* 
ív
, 
jobje˘
 
fûeDes¸ùt‹
, 
vÆue
);

94 #ifde‡
__˝lu•lus


103 #i‡
deföed
(
__˝lu•lus
Ë&& !deföed(
JNI_FORCE_C
)

104 
ölöe
 
jniRegi°îN©iveMëhods
(
JNIEnv
* 
ív
, c⁄° * 
˛assName
,

105 c⁄° 
JNIN©iveMëhod
* 
gMëhods
, 
numMëhods
)

107  
jniRegi°îN©iveMëhods
(&
ív
->
fun˘i⁄s
, 
˛assName
, 
gMëhods
,

108 
numMëhods
);

110 
ölöe
 
jniThrowEx˚±i⁄
(
JNIEnv
* 
ív
, c⁄° * 
˛assName
,

111 c⁄° * 
msg
)

113  
jniThrowEx˚±i⁄
(&
ív
->
fun˘i⁄s
, 
˛assName
, 
msg
);

115 
ölöe
 
jniThrowNuŒPoöãrEx˚±i⁄
(
JNIEnv
* 
ív
, c⁄° * 
msg
)

117  
jniThrowNuŒPoöãrEx˚±i⁄
(&
ív
->
fun˘i⁄s
, 
msg
);

119 
ölöe
 
jniThrowRu¡imeEx˚±i⁄
(
JNIEnv
* 
ív
, c⁄° * 
msg
)

121  
jniThrowRu¡imeEx˚±i⁄
(&
ív
->
fun˘i⁄s
, 
msg
);

123 
ölöe
 
jniThrowIOEx˚±i⁄
(
JNIEnv
* 
ív
, 
î∫um
)

125  
jniThrowIOEx˚±i⁄
(&
ív
->
fun˘i⁄s
, 
î∫um
);

127 
ölöe
 
jobje˘
 
jniCª©eFûeDes¸ùt‹
(
JNIEnv
* 
ív
, 
fd
)

129  
jniCª©eFûeDes¸ùt‹
(&
ív
->
fun˘i⁄s
, 
fd
);

131 
ölöe
 
jniGëFDFromFûeDes¸ùt‹
(
JNIEnv
* 
ív
, 
jobje˘
 
fûeDes¸ùt‹
)

133  
jniGëFDFromFûeDes¸ùt‹
(&
ív
->
fun˘i⁄s
, 
fûeDes¸ùt‹
);

135 
ölöe
 
jniSëFûeDes¸ùt‹OfFD
(
JNIEnv
* 
ív
, 
jobje˘
 
fûeDes¸ùt‹
,

136 
vÆue
)

138  
jniSëFûeDes¸ùt‹OfFD
(&
ív
->
fun˘i⁄s
, 
fûeDes¸ùt‹
, 
vÆue
);

147 #i‚de‡
TEMP_FAILURE_RETRY


149 
	#TEMP_FAILURE_RETRY
(
exp
) ({ \

150 
	`ty≥of
 (
exp
Ë
_rc
; \

152 
_rc
 = (
exp
); \

153 } 
_rc
 =-1 && 
î∫o
 =
EINTR
); \

154 
_rc
; })

	)

	@jni/include/android/native_window.h

17 #i‚de‡
ANDROID_NATIVE_WINDOW_H


18 
	#ANDROID_NATIVE_WINDOW_H


	)

20 
	~<™droid/ª˘.h
>

22 #ifde‡
__˝lu•lus


30 
WINDOW_FORMAT_RGBA_8888
 = 1,

31 
WINDOW_FORMAT_RGBX_8888
 = 2,

32 
WINDOW_FORMAT_RGB_565
 = 4,

35 
AN©iveWödow
;

36 
AN©iveWödow
 
	tAN©iveWödow
;

38 
	sAN©iveWödow_Buf„r
 {

40 
öt32_t
 
width
;

43 
öt32_t
 
height
;

47 
öt32_t
 
°ride
;

50 
öt32_t
 
f‹m©
;

53 * 
bôs
;

56 
uöt32_t
 
ª£rved
[6];

57 } 
	tAN©iveWödow_Buf„r
;

63 
AN©iveWödow_acquúe
(
AN©iveWödow
* 
wödow
);

68 
AN©iveWödow_ªÀa£
(
AN©iveWödow
* 
wödow
);

74 
öt32_t
 
AN©iveWödow_gëWidth
(
AN©iveWödow
* 
wödow
);

80 
öt32_t
 
AN©iveWödow_gëHeight
(
AN©iveWödow
* 
wödow
);

86 
öt32_t
 
AN©iveWödow_gëF‹m©
(
AN©iveWödow
* 
wödow
);

102 
öt32_t
 
AN©iveWödow_£tBuf„rsGeomëry
(
AN©iveWödow
* 
wödow
,

103 
öt32_t
 
width
, i¡32_à
height
, i¡32_à
f‹m©
);

113 
öt32_t
 
AN©iveWödow_lock
(
AN©iveWödow
* 
wödow
, 
AN©iveWödow_Buf„r
* 
outBuf„r
,

114 
ARe˘
* 
öOutDútyBounds
);

120 
öt32_t
 
AN©iveWödow_u∆ockAndPo°
(
AN©iveWödow
* 
wödow
);

122 #ifde‡
__˝lu•lus


	@jni/include/android/rect.h

18 #i‚de‡
ANDROID_RECT_H


19 
	#ANDROID_RECT_H


	)

21 #ifde‡
__˝lu•lus


25 
	sARe˘
 {

26 #ifde‡
__˝lu•lus


27 
öt32_t
 
	tvÆue_ty≥
;

29 
öt32_t
 
À·
;

30 
öt32_t
 
t›
;

31 
öt32_t
 
right
;

32 
öt32_t
 
bŸtom
;

33 } 
ARe˘
;

35 #ifde‡
__˝lu•lus


	@jni/include/android_runtime/ActivityManager.h

17 #i‚de‡
A˘ivôyM™agî_H


18 
	#A˘ivôyM™agî_H


	)

20 
	~<utûs/Såög16.h
>

22 
«me•a˚
 
	g™droid
 {

27 
›íC⁄ã¡ProvidîFûe
(c⁄° 
Såög16
& 
uri
);

	@jni/include/android_runtime/AndroidRuntime.h

19 #i‚de‡
_RUNTIME_ANDROID_RUNTIME_H


20 
	#_RUNTIME_ANDROID_RUNTIME_H


	)

22 
	~<utûs/Eº‹s.h
>

23 
	~<bödî/IBödî.h
>

24 
	~<utûs/Såög8.h
>

25 
	~<utûs/Såög16.h
>

26 
	~<utûs/Ve˘‹.h
>

27 
	~<utûs/thªads.h
>

28 
	~<±hªad.h
>

29 
	~<jni.h
>

32 
«me•a˚
 
	g™droid
 {

34 ˛as†
	cAndroidRu¡ime


36 
	gpublic
:

37 
AndroidRu¡ime
();

38 
	gvútuÆ
 ~
AndroidRu¡ime
();

43 
ªgi°îN©iveMëhods
(
JNIEnv
* 
ív
,

44 c⁄° * 
˛assName
, c⁄° 
JNIN©iveMëhod
* 
gMëhods
, 
numMëhods
);

49 
°©us_t
 
ˇŒSètic
(c⁄° * 
˛assName
, c⁄° * 
mëhodName
);

54 
°©us_t
 
ˇŒMaö
(c⁄° * 
˛assName
, 
¨gc
, c⁄° * c⁄° 
¨gv
[]);

60 
j˛ass
 
födCœss
(
JNIEnv
* 
ív
, c⁄° * 
˛assName
);

62 
addVmArgumíts
(
¨gc
, c⁄° * c⁄° 
¨gv
[]);

64 
°¨t
(c⁄° *
˛as¢ame
, c⁄° 
boﬁ
 
°¨tSy°emSîvî
);

65 
°¨t
();

67 
AndroidRu¡ime
* 
gëRu¡ime
();

73 
vútuÆ
 
⁄Sèπed
() = 0;

80 
vútuÆ
 
⁄ZygŸeInô
() {};

87 
vútuÆ
 
⁄Exô
(
code
);

90 
¸óãJavaThªad
(c⁄° * 
«me
, (*
°¨t
)(*),

91 * 
¨g
);

94 
JavaVM
* 
gëJavaVM
(Ë{  
	gmJavaVM
; }

97 
JNIEnv
* 
gëJNIEnv
();

99 
	g¥iv©e
:

100 
°¨tReg
(
JNIEnv
* 
ív
);

101 
°¨tVm
(
JavaVM
** 
pJavaVM
, 
JNIEnv
** 
pEnv
);

103 
	gVe˘‹
<
	gJavaVMO±i⁄
> 
	gmO±i⁄s
;

106 
JavaVM
* 
	gmJavaVM
;

111 
javaCª©eThªadEtc
(

112 
™droid_thªad_func_t
 
íåyFun˘i⁄
,

113 * 
u£rD©a
,

114 c⁄° * 
thªadName
,

115 
öt32_t
 
thªadPri‹ôy
,

116 
size_t
 
thªadSèckSize
,

117 
™droid_thªad_id_t
* 
thªadId
);

118 
javaThªadShñl
(* 
¨gs
);

122 
gëP¨˚lFûeDes¸ùt‹FD
(
JNIEnv
* 
ív
, 
jobje˘
 
obje˘
);

	@jni/include/android_runtime/android_util_AssetManager.h

17 #i‚de‡
™droid_utû_As£tM™agî_H


18 
	#™droid_utû_As£tM™agî_H


	)

20 
	~<utûs/As£tM™agî.h
>

22 
	~"jni.h
"

24 
«me•a˚
 
	g™droid
 {

26 
As£tM™agî
* 
as£tM™agîF‹JavaObje˘
(
JNIEnv
* 
ív
, 
jobje˘
 
as£tMgr
);

	@jni/include/binder/Binder.h

17 #i‚de‡
ANDROID_BINDER_H


18 
	#ANDROID_BINDER_H


	)

20 
	~<bödî/IBödî.h
>

23 
«me•a˚
 
	g™droid
 {

25 ˛as†
	cBBödî
 : 
public
 
IBödî


27 
public
:

28 
BBödî
();

30 
vútuÆ
 c⁄° 
	gSåög16
& 
gëI¡îÁ˚Des¸ùt‹
() const;

31 
vútuÆ
 
boﬁ
 
isBödîAlive
() const;

32 
vútuÆ
 
°©us_t
 
pögBödî
();

33 
vútuÆ
 
°©us_t
 
dump
(
fd
, c⁄° 
Ve˘‹
<
Såög16
>& 
¨gs
);

35 
vútuÆ
 
°©us_t
 
å™ß˘
–
uöt32_t
 
code
,

36 c⁄° 
P¨˚l
& 
d©a
,

37 
P¨˚l
* 
ª∂y
,

38 
uöt32_t
 
Êags
 = 0);

40 
vútuÆ
 
°©us_t
 
lökToDóth
(c⁄° 
•
<
DóthRecùõ¡
>& 
ªcùõ¡
,

41 * 
cookõ
 = 
NULL
,

42 
uöt32_t
 
Êags
 = 0);

44 
vútuÆ
 
°©us_t
 
u∆ökToDóth
–c⁄° 
wp
<
DóthRecùõ¡
>& 
ªcùõ¡
,

45 * 
cookõ
 = 
NULL
,

46 
uöt32_t
 
Êags
 = 0,

47 
wp
<
DóthRecùõ¡
>* 
outRecùõ¡
 = 
NULL
);

49 
vútuÆ
 
©èchObje˘
–c⁄° * 
obje˘ID
,

50 * 
obje˘
,

51 * 
˛ónupCookõ
,

52 
obje˘_˛ónup_func
 
func
);

53 
vútuÆ
 * 
födObje˘
(c⁄° * 
obje˘ID
) const;

54 
vútuÆ
 
dëachObje˘
(c⁄° * 
obje˘ID
);

56 
vútuÆ
 
BBödî
* 
loˇlBödî
();

58 
	g¥Ÿe˘ed
:

59 
vútuÆ
 ~
BBödî
();

61 
vútuÆ
 
°©us_t
 
⁄Tønß˘
–
uöt32_t
 
code
,

62 c⁄° 
P¨˚l
& 
d©a
,

63 
P¨˚l
* 
ª∂y
,

64 
uöt32_t
 
Êags
 = 0);

66 
	g¥iv©e
:

67 
BBödî
(c⁄° BBödî& 
o
);

68 
	gBBödî
& 
	g›î©‹
=(c⁄° 
BBödî
& 
o
);

70 
˛ass
 
	gExåas
;

72 
Exåas
* 
	gmExåas
;

73 * 
	gmRe£rved0
;

78 ˛as†
	cBpRefBa£
 : 
public
 
vútuÆ
 
RefBa£


80 
¥Ÿe˘ed
:

81 
BpRefBa£
(c⁄° 
•
<
IBödî
>& 
o
);

82 
	gvútuÆ
 ~
BpRefBa£
();

83 
vútuÆ
 
⁄Fú°Ref
();

84 
vútuÆ
 
⁄La°Så⁄gRef
(c⁄° * 
id
);

85 
vútuÆ
 
boﬁ
 
⁄IncSå⁄gAâem±ed
(
uöt32_t
 
Êags
, c⁄° * 
id
);

87 
ölöe
 
IBödî
* 
ªmŸe
(Ë{  
	gmRemŸe
; }

88 
ölöe
 
IBödî
* 
ªmŸe
(Ëc⁄° {  
	gmRemŸe
; }

90 
	g¥iv©e
:

91 
BpRefBa£
(c⁄° BpRefBa£& 
o
);

92 
	gBpRefBa£
& 
	g›î©‹
=(c⁄° 
BpRefBa£
& 
o
);

94 
IBödî
* c⁄° 
	gmRemŸe
;

95 
	gRefBa£
::
wókªf_ty≥
* 
mRefs
;

96 vﬁ©ûê
öt32_t
 
	gmSèã
;

	@jni/include/binder/BpBinder.h

17 #i‚de‡
ANDROID_BPBINDER_H


18 
	#ANDROID_BPBINDER_H


	)

20 
	~<bödî/IBödî.h
>

21 
	~<utûs/KeyedVe˘‹.h
>

22 
	~<utûs/thªads.h
>

25 
«me•a˚
 
	g™droid
 {

27 ˛as†
	cBpBödî
 : 
public
 
IBödî


29 
public
:

30 
BpBödî
(
öt32_t
 
h™dÀ
);

32 
ölöe
 
öt32_t
 
h™dÀ
(Ëc⁄° {  
	gmH™dÀ
; }

34 
vútuÆ
 c⁄° 
	gSåög16
& 
gëI¡îÁ˚Des¸ùt‹
() const;

35 
vútuÆ
 
boﬁ
 
isBödîAlive
() const;

36 
vútuÆ
 
°©us_t
 
pögBödî
();

37 
vútuÆ
 
°©us_t
 
dump
(
fd
, c⁄° 
Ve˘‹
<
Såög16
>& 
¨gs
);

39 
vútuÆ
 
°©us_t
 
å™ß˘
–
uöt32_t
 
code
,

40 c⁄° 
P¨˚l
& 
d©a
,

41 
P¨˚l
* 
ª∂y
,

42 
uöt32_t
 
Êags
 = 0);

44 
vútuÆ
 
°©us_t
 
lökToDóth
(c⁄° 
•
<
DóthRecùõ¡
>& 
ªcùõ¡
,

45 * 
cookõ
 = 
NULL
,

46 
uöt32_t
 
Êags
 = 0);

47 
vútuÆ
 
°©us_t
 
u∆ökToDóth
–c⁄° 
wp
<
DóthRecùõ¡
>& 
ªcùõ¡
,

48 * 
cookõ
 = 
NULL
,

49 
uöt32_t
 
Êags
 = 0,

50 
wp
<
DóthRecùõ¡
>* 
outRecùõ¡
 = 
NULL
);

52 
vútuÆ
 
©èchObje˘
–c⁄° * 
obje˘ID
,

53 * 
obje˘
,

54 * 
˛ónupCookõ
,

55 
obje˘_˛ónup_func
 
func
);

56 
vútuÆ
 * 
födObje˘
(c⁄° * 
obje˘ID
) const;

57 
vútuÆ
 
dëachObje˘
(c⁄° * 
obje˘ID
);

59 
vútuÆ
 
BpBödî
* 
ªmŸeBödî
();

61 
°©us_t
 
£tC⁄°™tD©a
(c⁄° * 
d©a
, 
size_t
 
size
);

62 
£ndObôu¨y
();

64 ˛as†
	cObje˘M™agî


66 
	gpublic
:

67 
Obje˘M™agî
();

68 ~
Obje˘M™agî
();

70 
©èch
–c⁄° * 
obje˘ID
,

71 * 
obje˘
,

72 * 
˛ónupCookõ
,

73 
IBödî
::
obje˘_˛ónup_func
 
func
);

74 * 
föd
(c⁄° * 
obje˘ID
) const;

75 
dëach
(c⁄° * 
obje˘ID
);

77 
kûl
();

79 
	g¥iv©e
:

80 
Obje˘M™agî
(const ObjectManager&);

81 
	gObje˘M™agî
& 
	g›î©‹
=(c⁄° 
Obje˘M™agî
&);

83 
	síåy_t


85 * 
	gobje˘
;

86 * 
	g˛ónupCookõ
;

87 
	gIBödî
::
obje˘_˛ónup_func
 
func
;

90 
	gKeyedVe˘‹
<c⁄° *, 
	gíåy_t
> 
	gmObje˘s
;

93 
	g¥Ÿe˘ed
:

94 
vútuÆ
 ~
BpBödî
();

95 
vútuÆ
 
⁄Fú°Ref
();

96 
vútuÆ
 
⁄La°Så⁄gRef
(c⁄° * 
id
);

97 
vútuÆ
 
boﬁ
 
⁄IncSå⁄gAâem±ed
(
uöt32_t
 
Êags
, c⁄° * 
id
);

99 
	g¥iv©e
:

100 c⁄° 
öt32_t
 
mH™dÀ
;

102 
	sObôu¨y
 {

103 
	gwp
<
	gDóthRecùõ¡
> 
	gªcùõ¡
;

104 * 
	gcookõ
;

105 
uöt32_t
 
	gÊags
;

108 
ªp‹tO√Dóth
(c⁄° 
Obôu¨y
& 
obô
);

109 
boﬁ
 
isDes¸ùt‹Cached
() const;

111 
muèbÀ
 
Muãx
 
	gmLock
;

112 vﬁ©ûê
öt32_t
 
	gmAlive
;

113 vﬁ©ûê
öt32_t
 
	gmObôsSít
;

114 
	gVe˘‹
<
	gObôu¨y
>* 
	gmObôu¨õs
;

115 
Obje˘M™agî
 
	gmObje˘s
;

116 
P¨˚l
* 
	gmC⁄°™tD©a
;

117 
muèbÀ
 
Såög16
 
	gmDes¸ùt‹Cache
;

	@jni/include/binder/IBinder.h

17 #i‚de‡
ANDROID_IBINDER_H


18 
	#ANDROID_IBINDER_H


	)

20 
	~<utûs/Eº‹s.h
>

21 
	~<utûs/RefBa£.h
>

22 
	~<utûs/Såög16.h
>

23 
	~<utûs/Ve˘‹.h
>

26 
	#B_PACK_CHARS
(
c1
, 
c2
, 
c3
, 
c4
) \

27 ((((
c1
)<<24)Ë| (((
c2
)<<16)Ë| (((
c3
)<<8)Ë| (
c4
))

	)

30 
«me•a˚
 
	g™droid
 {

32 
˛ass
 
	gBBödî
;

33 
˛ass
 
	gBpBödî
;

34 
˛ass
 
	gII¡îÁ˚
;

35 
˛ass
 
	gP¨˚l
;

44 ˛as†
	cIBödî
 : 
public
 
vútuÆ
 
RefBa£


46 
public
:

48 
FIRST_CALL_TRANSACTION
 = 0x00000001,

49 
	gLAST_CALL_TRANSACTION
 = 0x00ffffff,

51 
	gPING_TRANSACTION
 = 
B_PACK_CHARS
('_','P','N','G'),

52 
	gDUMP_TRANSACTION
 = 
B_PACK_CHARS
('_','D','M','P'),

53 
	gINTERFACE_TRANSACTION
 = 
B_PACK_CHARS
('_', 'N', 'T', 'F'),

56 
	gFLAG_ONEWAY
 = 0x00000001

59 
IBödî
();

66 
vútuÆ
 
	g•
<
	gII¡îÁ˚
> 
quîyLoˇlI¡îÁ˚
(c⁄° 
Såög16
& 
des¸ùt‹
);

72 
vútuÆ
 c⁄° 
	gSåög16
& 
gëI¡îÁ˚Des¸ùt‹
() const = 0;

74 
vútuÆ
 
boﬁ
 
isBödîAlive
() const = 0;

75 
vútuÆ
 
°©us_t
 
pögBödî
() = 0;

76 
vútuÆ
 
°©us_t
 
dump
(
fd
, c⁄° 
Ve˘‹
<
Såög16
>& 
¨gs
) = 0;

78 
vútuÆ
 
°©us_t
 
å™ß˘
–
uöt32_t
 
code
,

79 c⁄° 
P¨˚l
& 
d©a
,

80 
P¨˚l
* 
ª∂y
,

81 
uöt32_t
 
Êags
 = 0) = 0;

91 ˛as†
	cDóthRecùõ¡
 : 
public
 
vútuÆ
 
RefBa£


93 
public
:

94 
vútuÆ
 
bödîDõd
(c⁄° 
wp
<
IBödî
>& 
who
) = 0;

119 
vútuÆ
 
°©us_t
 
lökToDóth
(c⁄° 
•
<
DóthRecùõ¡
>& 
ªcùõ¡
,

120 * 
cookõ
 = 
NULL
,

121 
uöt32_t
 
Êags
 = 0) = 0;

130 
vútuÆ
 
°©us_t
 
u∆ökToDóth
–c⁄° 
wp
<
DóthRecùõ¡
>& 
ªcùõ¡
,

131 * 
cookõ
 = 
NULL
,

132 
uöt32_t
 
Êags
 = 0,

133 
wp
<
DóthRecùõ¡
>* 
outRecùõ¡
 = 
NULL
) = 0;

135 
vútuÆ
 
boﬁ
 
checkSub˛ass
(c⁄° * 
sub˛assID
) const;

137 (*
	gobje˘_˛ónup_func
)(c⁄° * 
	tid
, * 
	tobj
, * 
	t˛ónupCookõ
);

139 
vútuÆ
 
©èchObje˘
–c⁄° * 
obje˘ID
,

140 * 
obje˘
,

141 * 
˛ónupCookõ
,

142 
obje˘_˛ónup_func
 
func
) = 0;

143 
vútuÆ
 * 
födObje˘
(c⁄° * 
obje˘ID
) const = 0;

144 
vútuÆ
 
dëachObje˘
(c⁄° * 
obje˘ID
) = 0;

146 
vútuÆ
 
BBödî
* 
loˇlBödî
();

147 
vútuÆ
 
BpBödî
* 
ªmŸeBödî
();

149 
	g¥Ÿe˘ed
:

150 
vútuÆ
 ~
IBödî
();

152 
	g¥iv©e
:

	@jni/include/binder/IInterface.h

18 #i‚de‡
ANDROID_IINTERFACE_H


19 
	#ANDROID_IINTERFACE_H


	)

21 
	~<bödî/Bödî.h
>

23 
«me•a˚
 
	g™droid
 {

27 ˛as†
	cII¡îÁ˚
 : 
public
 
vútuÆ
 
RefBa£


29 
public
:

30 
II¡îÁ˚
();

31 
	g•
<
	gIBödî
> 
asBödî
();

32 
	g•
<c⁄° 
	gIBödî
> 
asBödî
() const;

34 
	g¥Ÿe˘ed
:

35 
vútuÆ
 ~
II¡îÁ˚
();

36 
vútuÆ
 
IBödî
* 
⁄AsBödî
() = 0;

41 
	gãm∂©e
<
ty≥«me
 
	gINTERFACE
>

42 
ölöe
 
	g•
<
	gINTERFACE
> 
öãrÁ˚_ˇ°
(c⁄° 
•
<
IBödî
>& 
obj
)

44  
	gINTERFACE
::
asI¡îÁ˚
(
obj
);

49 
	gãm∂©e
<
ty≥«me
 
	gINTERFACE
>

50 
˛ass
 
	gBnI¡îÁ˚
 : 
public
 
INTERFACE
,Öubli¯
	gBBödî


52 
	gpublic
:

53 
vútuÆ
 
•
<
II¡îÁ˚
> 
quîyLoˇlI¡îÁ˚
(c⁄° 
Såög16
& 
_des¸ùt‹
);

54 
vútuÆ
 c⁄° 
	gSåög16
& 
gëI¡îÁ˚Des¸ùt‹
() const;

56 
	g¥Ÿe˘ed
:

57 
vútuÆ
 
IBödî
* 
⁄AsBödî
();

62 
	gãm∂©e
<
ty≥«me
 
	gINTERFACE
>

63 
˛ass
 
	gBpI¡îÁ˚
 : 
public
 
INTERFACE
,Öubli¯
	gBpRefBa£


65 
	gpublic
:

66 
BpI¡îÁ˚
(c⁄° 
•
<
IBödî
>& 
ªmŸe
);

68 
	g¥Ÿe˘ed
:

69 
vútuÆ
 
IBödî
* 
⁄AsBödî
();

74 
	#DECLARE_META_INTERFACE
(
INTERFACE
) \

75 c⁄° 
™droid
::
Såög16
 
des¸ùt‹
; \

76 
™droid
::
•
<
I
##
INTERFACE
> 
	`asI¡îÁ˚
( \

77 c⁄° 
™droid
::
•
<™droid::
IBödî
>& 
obj
); \

78 
vútuÆ
 c⁄° 
™droid
::
Såög16
& 
	$gëI¡îÁ˚Des¸ùt‹
() const; \

79 
I
##
	`INTERFACE
(); \

80 
vútuÆ
 ~
I
##
	`INTERFACE
(); \

81 

	)

83 
	#IMPLEMENT_META_INTERFACE
(
INTERFACE
, 
NAME
) \

84 c⁄° 
™droid
::
Såög16
 
I
##
INTERFACE
::
	`des¸ùt‹
(
NAME
); \

85 c⁄° 
™droid
::
Såög16
& \

86 
I
##
INTERFACE
::
	$gëI¡îÁ˚Des¸ùt‹
() const { \

87  
I
##
INTERFACE
::
des¸ùt‹
; \

88 
	}
} \

89 
™droid
::
•
<
I
##
INTERFACE
> I##INTERFACE::
	`asI¡îÁ˚
( \

90 c⁄° 
™droid
::
•
<™droid::
IBödî
>& 
obj
) \

92 
™droid
::
•
<
I
##
INTERFACE
> 
öå
; \

93 i‡(
obj
 !
NULL
) { \

94 
öå
 = 
°©ic_ˇ°
<
I
##
INTERFACE
*>( \

95 
obj
->
	`quîyLoˇlI¡îÁ˚
( \

96 
I
##
INTERFACE
::
des¸ùt‹
).
	`gë
()); \

97 i‡(
öå
 =
NULL
) { \

98 
öå
 = 
√w
 
Bp
##
	`INTERFACE
(
obj
); \

101  
öå
; \

103 
I
##
INTERFACE
::I##
	$INTERFACE
(Ë{ 
	}
} \

104 
I
##
INTERFACE
::~I##
	$INTERFACE
(Ë{ 
	}
} \

105 

	)

107 
	#CHECK_INTERFACE
(
öãrÁ˚
, 
d©a
, 
ª∂y
) \

108 i‡(!
d©a
.
	$checkI¡îÁ˚
(
this
)Ë{  
PERMISSION_DENIED
; 
	}
} \

109 

	)

114 
	gãm∂©e
<
ty≥«me
 
	gINTERFACE
>

115 
ölöe
 
	g•
<
	gII¡îÁ˚
> 
	gBnI¡îÁ˚
<
	gINTERFACE
>::
	$quîyLoˇlI¡îÁ˚
(

116 c⁄° 
Såög16
& 
_des¸ùt‹
)

118 i‡(
_des¸ùt‹
 =
INTERFACE
::
des¸ùt‹
Ë 
this
;

119  
NULL
;

120 
	}
}

122 
	gãm∂©e
<
ty≥«me
 
	gINTERFACE
>

123 
ölöe
 c⁄° 
	gSåög16
& 
	gBnI¡îÁ˚
<
	gINTERFACE
>::
	$gëI¡îÁ˚Des¸ùt‹
() const

125  
INTERFACE
::
	`gëI¡îÁ˚Des¸ùt‹
();

126 
	}
}

128 
	gãm∂©e
<
ty≥«me
 
	gINTERFACE
>

129 
IBödî
* 
	gBnI¡îÁ˚
<
	gINTERFACE
>::
	$⁄AsBödî
()

131  
this
;

132 
	}
}

134 
	gãm∂©e
<
ty≥«me
 
	gINTERFACE
>

135 
ölöe
 
	gBpI¡îÁ˚
<
	gINTERFACE
>::
BpI¡îÁ˚
(c⁄° 
•
<
IBödî
>& 
ªmŸe
)

136 : 
	$BpRefBa£
(
ªmŸe
)

138 
	}
}

140 
ãm∂©e
<
ty≥«me
 
INTERFACE
>

141 
ölöe
 
IBödî
* 
BpI¡îÁ˚
<
INTERFACE
>::
	$⁄AsBödî
()

143  
	`ªmŸe
();

144 
	}
}

	@jni/include/binder/IMemory.h

17 #i‚de‡
ANDROID_IMEMORY_H


18 
	#ANDROID_IMEMORY_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<sys/mm™.h
>

24 
	~<utûs/RefBa£.h
>

25 
	~<utûs/Eº‹s.h
>

26 
	~<bödî/II¡îÁ˚.h
>

28 
«me•a˚
 
	g™droid
 {

32 ˛as†
	cIMem‹yHóp
 : 
public
 
II¡îÁ˚


34 
public
:

35 
DECLARE_META_INTERFACE
(
Mem‹yHóp
);

39 
	gREAD_ONLY
 = 0x00000001

42 
vútuÆ
 
gëHópID
() const = 0;

43 
vútuÆ
 * 
gëBa£
() const = 0;

44 
vútuÆ
 
size_t
 
gëSize
() const = 0;

45 
vútuÆ
 
uöt32_t
 
gëFœgs
() const = 0;

48 
öt32_t
 
hópID
(Ëc⁄° {  
gëHópID
(); }

49 * 
ba£
(Ëc⁄° {  
gëBa£
(); }

50 
size_t
 
vútuÆSize
(Ëc⁄° {  
gëSize
(); }

53 
˛ass
 
	gBnMem‹yHóp
 : 
public
 
BnI¡îÁ˚
<
IMem‹yHóp
>

55 
public
:

56 
vútuÆ
 
°©us_t
 
⁄Tønß˘
(

57 
uöt32_t
 
code
,

58 c⁄° 
P¨˚l
& 
d©a
,

59 
P¨˚l
* 
ª∂y
,

60 
uöt32_t
 
Êags
 = 0);

62 
BnMem‹yHóp
();

63 
	g¥Ÿe˘ed
:

64 
vútuÆ
 ~
BnMem‹yHóp
();

69 ˛as†
	cIMem‹y
 : 
public
 
II¡îÁ˚


71 
public
:

72 
DECLARE_META_INTERFACE
(
Mem‹y
);

74 
vútuÆ
 
	g•
<
	gIMem‹yHóp
> 
gëMem‹y
(
ssize_t
* 
off£t
=0, 
size_t
* 
size
=0) const = 0;

77 * 
Á°Poöãr
(c⁄° 
•
<
IBödî
>& 
hóp
, 
ssize_t
 
off£t
) const;

78 * 
poöãr
() const;

79 
size_t
 
size
() const;

80 
ssize_t
 
off£t
() const;

83 
˛ass
 
	gBnMem‹y
 : 
public
 
BnI¡îÁ˚
<
IMem‹y
>

85 
public
:

86 
vútuÆ
 
°©us_t
 
⁄Tønß˘
(

87 
uöt32_t
 
code
,

88 c⁄° 
P¨˚l
& 
d©a
,

89 
P¨˚l
* 
ª∂y
,

90 
uöt32_t
 
Êags
 = 0);

92 
BnMem‹y
();

93 
	g¥Ÿe˘ed
:

94 
vútuÆ
 ~
BnMem‹y
();

	@jni/include/binder/IPCThreadState.h

17 #i‚de‡
ANDROID_IPC_THREAD_STATE_H


18 
	#ANDROID_IPC_THREAD_STATE_H


	)

20 
	~<utûs/Eº‹s.h
>

21 
	~<bödî/P¨˚l.h
>

22 
	~<bödî/Pro˚ssSèã.h
>

23 
	~<utûs/Ve˘‹.h
>

25 #ifde‡
HAVE_WIN32_PROC


26 
	tuid_t
;

30 
«me•a˚
 
	g™droid
 {

32 ˛as†
	cIPCThªadSèã


34 
	gpublic
:

35 
IPCThªadSèã
* 
£lf
();

37 
	g•
<
	gPro˚ssSèã
> 
¥o˚ss
();

39 
°©us_t
 
˛órLa°Eº‹
();

41 
gëCÆlögPid
();

42 
gëCÆlögUid
();

44 
öt64_t
 
˛órCÆlögIdítôy
();

45 
ª°‹eCÆlögIdítôy
(
öt64_t
 
tokí
);

47 
ÊushComm™ds
();

49 
joöThªadPoﬁ
(
boﬁ
 
isMaö
 = 
åue
);

52 
°›Pro˚ss
(
boﬁ
 
immedüã
 = 
åue
);

54 
°©us_t
 
å™ß˘
(
öt32_t
 
h™dÀ
,

55 
uöt32_t
 
code
, c⁄° 
P¨˚l
& 
d©a
,

56 
P¨˚l
* 
ª∂y
, 
uöt32_t
 
Êags
);

58 
öcSå⁄gH™dÀ
(
öt32_t
 
h™dÀ
);

59 
decSå⁄gH™dÀ
(
öt32_t
 
h™dÀ
);

60 
öcWókH™dÀ
(
öt32_t
 
h™dÀ
);

61 
decWókH™dÀ
(
öt32_t
 
h™dÀ
);

62 
°©us_t
 
©ãm±IncSå⁄gH™dÀ
(
öt32_t
 
h™dÀ
);

63 
expungeH™dÀ
(
öt32_t
 
h™dÀ
, 
IBödî
* 
bödî
);

64 
°©us_t
 
ªque°DóthNŸifiˇti⁄
–
öt32_t
 
h™dÀ
,

65 
BpBödî
* 
¥oxy
);

66 
°©us_t
 
˛órDóthNŸifiˇti⁄
–
öt32_t
 
h™dÀ
,

67 
BpBödî
* 
¥oxy
);

69 
shutdown
();

76 
dißbÀBackgroundSchedulög
(
boﬁ
 
dißbÀ
);

78 
	g¥iv©e
:

79 
IPCThªadSèã
();

80 ~
IPCThªadSèã
();

82 
°©us_t
 
£ndRïly
(c⁄° 
P¨˚l
& 
ª∂y
, 
uöt32_t
 
Êags
);

83 
°©us_t
 
waôF‹Re•⁄£
(
P¨˚l
 *
ª∂y
,

84 
°©us_t
 *
acquúeResu…
=
NULL
);

85 
°©us_t
 
èlkWôhDrivî
(
boﬁ
 
doRe˚ive
=
åue
);

86 
°©us_t
 
wrôeTønß˘i⁄D©a
(
öt32_t
 
cmd
,

87 
uöt32_t
 
bödîFœgs
,

88 
öt32_t
 
h™dÀ
,

89 
uöt32_t
 
code
,

90 c⁄° 
P¨˚l
& 
d©a
,

91 
°©us_t
* 
°©usBuf„r
);

92 
°©us_t
 
execuãComm™d
(
öt32_t
 
comm™d
);

94 
˛órCÆÀr
();

96 
thªadDe°ru˘‹
(*
°
);

97 
‰ìBuf„r
(
P¨˚l
* 
∑r˚l
,

98 c⁄° 
uöt8_t
* 
d©a
, 
size_t
 
d©aSize
,

99 c⁄° 
size_t
* 
obje˘s
, size_à
obje˘sSize
,

100 * 
cookõ
);

102 c⁄° 
	g•
<
	gPro˚ssSèã
> 
	gmPro˚ss
;

103 c⁄° 
pid_t
 
	gmMyThªadId
;

104 
	gVe˘‹
<
	gBBödî
*> 
	gmPídögSå⁄gDîefs
;

105 
	gVe˘‹
<
	gRefBa£
::
wókªf_ty≥
*> 
mPídögWókDîefs
;

107 
P¨˚l
 
	gmIn
;

108 
P¨˚l
 
	gmOut
;

109 
°©us_t
 
	gmLa°Eº‹
;

110 
pid_t
 
	gmCÆlögPid
;

111 
uid_t
 
	gmCÆlögUid
;

	@jni/include/binder/IPermissionController.h

18 #i‚de‡
ANDROID_IPERMISSION_CONTROLLER_H


19 
	#ANDROID_IPERMISSION_CONTROLLER_H


	)

21 
	~<bödî/II¡îÁ˚.h
>

23 
«me•a˚
 
	g™droid
 {

27 ˛as†
	cIPîmissi⁄C⁄åﬁÀr
 : 
public
 
II¡îÁ˚


29 
public
:

30 
DECLARE_META_INTERFACE
(
Pîmissi⁄C⁄åﬁÀr
);

32 
vútuÆ
 
boﬁ
 
checkPîmissi⁄
(c⁄° 
Såög16
& 
≥rmissi⁄
,

33 
öt32_t
 
pid
, i¡32_à
uid
) = 0;

36 
	gCHECK_PERMISSION_TRANSACTION
 = 
IBödî
::
FIRST_CALL_TRANSACTION


42 
˛ass
 
	gBnPîmissi⁄C⁄åﬁÀr
 : 
public
 
BnI¡îÁ˚
<
IPîmissi⁄C⁄åﬁÀr
>

44 
public
:

45 
vútuÆ
 
°©us_t
 
⁄Tønß˘
–
uöt32_t
 
code
,

46 c⁄° 
P¨˚l
& 
d©a
,

47 
P¨˚l
* 
ª∂y
,

48 
uöt32_t
 
Êags
 = 0);

	@jni/include/binder/IServiceManager.h

18 #i‚de‡
ANDROID_ISERVICE_MANAGER_H


19 
	#ANDROID_ISERVICE_MANAGER_H


	)

21 
	~<bödî/II¡îÁ˚.h
>

22 
	~<bödî/IPîmissi⁄C⁄åﬁÀr.h
>

23 
	~<utûs/Ve˘‹.h
>

24 
	~<utûs/Såög16.h
>

26 
«me•a˚
 
	g™droid
 {

30 ˛as†
	cISîvi˚M™agî
 : 
public
 
II¡îÁ˚


32 
public
:

33 
DECLARE_META_INTERFACE
(
Sîvi˚M™agî
);

39 
vútuÆ
 
	g•
<
	gIBödî
> 
gëSîvi˚
–c⁄° 
Såög16
& 
«me
) const = 0;

44 
vútuÆ
 
	g•
<
	gIBödî
> 
checkSîvi˚
–c⁄° 
Såög16
& 
«me
) const = 0;

49 
vútuÆ
 
°©us_t
 
addSîvi˚
–c⁄° 
Såög16
& 
«me
,

50 c⁄° 
•
<
IBödî
>& 
£rvi˚
) = 0;

55 
vútuÆ
 
	gVe˘‹
<
	gSåög16
> 
li°Sîvi˚s
() = 0;

58 
	gGET_SERVICE_TRANSACTION
 = 
IBödî
::
FIRST_CALL_TRANSACTION
,

59 
	gCHECK_SERVICE_TRANSACTION
,

60 
	gADD_SERVICE_TRANSACTION
,

61 
	gLIST_SERVICES_TRANSACTION
,

65 
	g•
<
	gISîvi˚M™agî
> 
deÁu…Sîvi˚M™agî
();

67 
	gãm∂©e
<
ty≥«me
 
	gINTERFACE
>

68 
°©us_t
 
gëSîvi˚
(c⁄° 
Såög16
& 
«me
, 
•
<
INTERFACE
>* 
outSîvi˚
)

70 c⁄° 
	g•
<
	gISîvi˚M™agî
> 
	gsm
 = 
deÁu…Sîvi˚M™agî
();

71 i‡(
	gsm
 !
NULL
) {

72 *
outSîvi˚
 = 
öãrÁ˚_ˇ°
<
INTERFACE
>(
sm
->
gëSîvi˚
(
«me
));

73 i‡((*
	goutSîvi˚
Ë!
NULL
Ë 
NO_ERROR
;

75  
	gNAME_NOT_FOUND
;

78 
boﬁ
 
checkCÆlögPîmissi⁄
(c⁄° 
Såög16
& 
≥rmissi⁄
);

79 
boﬁ
 
checkCÆlögPîmissi⁄
(c⁄° 
Såög16
& 
≥rmissi⁄
,

80 
öt32_t
* 
outPid
, i¡32_t* 
outUid
);

81 
boﬁ
 
checkPîmissi⁄
(c⁄° 
Såög16
& 
≥rmissi⁄
, 
pid_t
 
pid
, 
uid_t
 
uid
);

86 
˛ass
 
	gBnSîvi˚M™agî
 : 
public
 
BnI¡îÁ˚
<
ISîvi˚M™agî
>

88 
public
:

89 
vútuÆ
 
°©us_t
 
⁄Tønß˘
–
uöt32_t
 
code
,

90 c⁄° 
P¨˚l
& 
d©a
,

91 
P¨˚l
* 
ª∂y
,

92 
uöt32_t
 
Êags
 = 0);

	@jni/include/binder/MemoryBase.h

17 #i‚de‡
ANDROID_MEMORY_BASE_H


18 
	#ANDROID_MEMORY_BASE_H


	)

20 
	~<°dlib.h
>

21 
	~<°döt.h
>

23 
	~<bödî/IMem‹y.h
>

26 
«me•a˚
 
	g™droid
 {

30 ˛as†
	cMem‹yBa£
 : 
public
 
BnMem‹y


32 
public
:

33 
Mem‹yBa£
(c⁄° 
•
<
IMem‹yHóp
>& 
hóp
, 
ssize_t
 
off£t
, 
size_t
 
size
);

34 
	gvútuÆ
 ~
Mem‹yBa£
();

35 
vútuÆ
 
	g•
<
	gIMem‹yHóp
> 
gëMem‹y
(
ssize_t
* 
off£t
, 
size_t
* 
size
) const;

37 
	g¥Ÿe˘ed
:

38 
size_t
 
gëSize
(Ëc⁄° {  
mSize
; }

39 
ssize_t
 
gëOff£t
(Ëc⁄° {  
	gmOff£t
; }

40 c⁄° 
	g•
<
	gIMem‹yHóp
>& 
gëHóp
(Ëc⁄° {  
	gmHóp
; }

42 
	g¥iv©e
:

43 
size_t
 
mSize
;

44 
ssize_t
 
	gmOff£t
;

45 
	g•
<
	gIMem‹yHóp
> 
	gmHóp
;

	@jni/include/binder/MemoryDealer.h

17 #i‚de‡
ANDROID_MEMORY_DEALER_H


18 
	#ANDROID_MEMORY_DEALER_H


	)

21 
	~<°döt.h
>

22 
	~<sys/ty≥s.h
>

24 
	~<bödî/IMem‹y.h
>

25 
	~<bödî/Mem‹yHópBa£.h
>

27 
«me•a˚
 
	g™droid
 {

30 
˛ass
 
	gSim∂eBe°FôAŒoˇt‹
;

34 ˛as†
	cMem‹yDóÀr
 : 
public
 
RefBa£


36 
public
:

37 
Mem‹yDóÀr
(
size_t
 
size
, c⁄° * 
«me
 = 0);

39 
vútuÆ
 
	g•
<
	gIMem‹y
> 
Æloˇã
(
size_t
 
size
);

40 
vútuÆ
 
dóŒoˇã
(
size_t
 
off£t
);

41 
vútuÆ
 
dump
(c⁄° * 
wh©
) const;

43 
	g•
<
	gIMem‹yHóp
> 
gëMem‹yHóp
(Ëc⁄° {  
hóp
(); }

45 
	g¥Ÿe˘ed
:

46 
vútuÆ
 ~
Mem‹yDóÀr
();

48 
	g¥iv©e
:

49 c⁄° 
•
<
IMem‹yHóp
>& 
hóp
() const;

50 
Sim∂eBe°FôAŒoˇt‹
* 
Æloˇt‹
() const;

52 
	g•
<
	gIMem‹yHóp
> 
	gmHóp
;

53 
Sim∂eBe°FôAŒoˇt‹
* 
	gmAŒoˇt‹
;

	@jni/include/binder/MemoryHeapBase.h

17 #i‚de‡
ANDROID_MEMORY_HEAP_BASE_H


18 
	#ANDROID_MEMORY_HEAP_BASE_H


	)

20 
	~<°dlib.h
>

21 
	~<°döt.h
>

23 
	~<bödî/IMem‹y.h
>

26 
«me•a˚
 
	g™droid
 {

30 ˛as†
	cMem‹yHópBa£
 : 
public
 
vútuÆ
 
BnMem‹yHóp


32 
public
:

34 
READ_ONLY
 = 
IMem‹yHóp
::READ_ONLY,

37 
	gDONT_MAP_LOCALLY
 = 0x00000100,

38 
	gNO_CACHING
 = 0x00000200

45 
Mem‹yHópBa£
(
fd
, 
size_t
 
size
, 
uöt32_t
 
Êags
 = 0, uöt32_à
off£t
 = 0);

50 
Mem‹yHópBa£
(c⁄° * 
devi˚
, 
size_t
 
size
 = 0, 
uöt32_t
 
Êags
 = 0);

55 
Mem‹yHópBa£
(
size_t
 
size
, 
uöt32_t
 
Êags
 = 0, c⁄°* 
«me
 = 
NULL
);

57 
	gvútuÆ
 ~
Mem‹yHópBa£
();

60 
vútuÆ
 
gëHópID
() const;

61 
vútuÆ
 * 
gëBa£
() const;

62 
vútuÆ
 
size_t
 
gëSize
() const;

63 
vútuÆ
 
uöt32_t
 
gëFœgs
() const;

65 c⁄° * 
gëDevi˚
() const;

68 
di•o£
();

72 
°©us_t
 
£tDevi˚
(c⁄° * 
devi˚
) {

73 i‡(
	gmDevi˚
 == 0)

74 
mDevi˚
 = 
devi˚
;

75  
	gmDevi˚
 ? 
	gNO_ERROR
 : 
ALREADY_EXISTS
;

78 
	g¥Ÿe˘ed
:

79 
Mem‹yHópBa£
();

81 
°©us_t
 
öô
(
fd
, *
ba£
, 
size
,

82 
Êags
 = 0, c⁄° * 
devi˚
 = 
NULL
);

84 
	g¥iv©e
:

85 
°©us_t
 
m≠fd
(
fd
, 
size_t
 
size
, 
uöt32_t
 
off£t
 = 0);

87 
	gmFD
;

88 
size_t
 
	gmSize
;

89 * 
	gmBa£
;

90 
uöt32_t
 
	gmFœgs
;

91 c⁄° * 
	gmDevi˚
;

92 
boﬁ
 
	gmNìdUnm≠
;

	@jni/include/binder/MemoryHeapPmem.h

17 #i‚de‡
ANDROID_MEMORY_HEAP_PMEM_H


18 
	#ANDROID_MEMORY_HEAP_PMEM_H


	)

20 
	~<°dlib.h
>

21 
	~<°döt.h
>

23 
	~<bödî/Mem‹yHópBa£.h
>

24 
	~<bödî/IMem‹y.h
>

25 
	~<utûs/S‹ãdVe˘‹.h
>

26 
	~<utûs/thªads.h
>

28 
«me•a˚
 
	g™droid
 {

30 
˛ass
 
	gMem‹yHópBa£
;

34 ˛as†
	cMem‹yHópPmem
 : 
public
 
Mem‹yHópBa£


36 
public
:

37 ˛as†
	cMem‹yPmem
 : 
public
 
BnMem‹y
 {

38 
public
:

39 
Mem‹yPmem
(c⁄° 
•
<
Mem‹yHópPmem
>& 
hóp
);

40 ~
Mem‹yPmem
();

41 
	g¥Ÿe˘ed
:

42 c⁄° 
•
<
Mem‹yHópPmem
>& 
gëHóp
(Ëc⁄° {  
mClõ¡Hóp
; }

43 
	g¥iv©e
:

44 
‰õnd
 
˛ass
 
Mem‹yHópPmem
;

45 
vútuÆ
 
ªvoke
() = 0;

46 
	g•
<
	gMem‹yHópPmem
> 
	gmClõ¡Hóp
;

49 
Mem‹yHópPmem
(c⁄° 
•
<
Mem‹yHópBa£
>& 
pmemHóp
, 
uöt32_t
 
Êags
 = 0);

50 ~
Mem‹yHópPmem
();

53 
vútuÆ
 
	g•
<
	gIMem‹y
> 
m≠Mem‹y
(
size_t
 
off£t
, size_à
size
);

56 
vútuÆ
 
°©us_t
 
¶≠
();

59 
vútuÆ
 
°©us_t
 
un¶≠
();

62 
vútuÆ
 
ªvoke
();

64 
	g¥iv©e
:

66 
vútuÆ
 
•
<
Mem‹yPmem
> 
¸óãMem‹y
(
size_t
 
off£t
, size_à
size
);

67 
ªmove
(c⁄° 
wp
<
Mem‹yPmem
>& 
mem‹y
);

69 
	g¥iv©e
:

70 
•
<
Mem‹yHópBa£
> 
mP¨ítHóp
;

71 
muèbÀ
 
Muãx
 
	gmLock
;

72 
	gS‹ãdVe˘‹
< 
	gwp
<
	gMem‹yPmem
> > 
	gmAŒoˇti⁄s
;

	@jni/include/binder/Parcel.h

17 #i‚de‡
ANDROID_PARCEL_H


18 
	#ANDROID_PARCEL_H


	)

20 
	~<cutûs/«tive_h™dÀ.h
>

21 
	~<utûs/Eº‹s.h
>

22 
	~<utûs/RefBa£.h
>

23 
	~<utûs/Såög16.h
>

24 
	~<utûs/Ve˘‹.h
>

27 
«me•a˚
 
	g™droid
 {

29 
˛ass
 
	gIBödî
;

30 
˛ass
 
	gPro˚ssSèã
;

31 
˛ass
 
	gSåög8
;

32 
˛ass
 
	gTextOuçut
;

33 
˛ass
 
	gFœâíabÀ
;

35 
	gÊ©_bödî_obje˘
;

37 ˛as†
	cP¨˚l


39 
	gpublic
:

40 
P¨˚l
();

41 ~
P¨˚l
();

43 c⁄° 
uöt8_t
* 
d©a
() const;

44 
size_t
 
d©aSize
() const;

45 
size_t
 
d©aAvaû
() const;

46 
size_t
 
d©aPosôi⁄
() const;

47 
size_t
 
d©aC≠acôy
() const;

49 
°©us_t
 
£tD©aSize
(
size_t
 
size
);

50 
£tD©aPosôi⁄
(
size_t
 
pos
) const;

51 
°©us_t
 
£tD©aC≠acôy
(
size_t
 
size
);

53 
°©us_t
 
£tD©a
(c⁄° 
uöt8_t
* 
buf„r
, 
size_t
 
Àn
);

55 
°©us_t
 
≠≥ndFrom
(
P¨˚l
 *
∑r˚l
, 
size_t
 
°¨t
, size_à
Àn
);

57 
boﬁ
 
hasFûeDes¸ùt‹s
() const;

59 
°©us_t
 
wrôeI¡îÁ˚Tokí
(c⁄° 
Såög16
& 
öãrÁ˚
);

60 
boﬁ
 
íf‹˚I¡îÁ˚
(c⁄° 
Såög16
& 
öãrÁ˚
) const;

61 
boﬁ
 
checkI¡îÁ˚
(
IBödî
*) const;

63 
‰ìD©a
();

65 c⁄° 
size_t
* 
obje˘s
() const;

66 
size_t
 
obje˘sCou¡
() const;

68 
°©us_t
 
îr‹Check
() const;

69 
£tEº‹
(
°©us_t
 
îr
);

71 
°©us_t
 
wrôe
(c⁄° * 
d©a
, 
size_t
 
Àn
);

72 * 
wrôeI≈œ˚
(
size_t
 
Àn
);

73 
°©us_t
 
wrôeU≈added
(c⁄° * 
d©a
, 
size_t
 
Àn
);

74 
°©us_t
 
wrôeI¡32
(
öt32_t
 
vÆ
);

75 
°©us_t
 
wrôeI¡64
(
öt64_t
 
vÆ
);

76 
°©us_t
 
wrôeFlﬂt
(
vÆ
);

77 
°©us_t
 
wrôeDoubÀ
(
vÆ
);

78 
°©us_t
 
wrôeI¡På
(
öçå_t
 
vÆ
);

79 
°©us_t
 
wrôeCSåög
(c⁄° * 
°r
);

80 
°©us_t
 
wrôeSåög8
(c⁄° 
Såög8
& 
°r
);

81 
°©us_t
 
wrôeSåög16
(c⁄° 
Såög16
& 
°r
);

82 
°©us_t
 
wrôeSåög16
(c⁄° 
ch¨16_t
* 
°r
, 
size_t
 
Àn
);

83 
°©us_t
 
wrôeSå⁄gBödî
(c⁄° 
•
<
IBödî
>& 
vÆ
);

84 
°©us_t
 
wrôeWókBödî
(c⁄° 
wp
<
IBödî
>& 
vÆ
);

85 
°©us_t
 
wrôe
(c⁄° 
FœâíabÀ
& 
vÆ
);

91 
°©us_t
 
wrôeN©iveH™dÀ
(c⁄° 
«tive_h™dÀ
* 
h™dÀ
);

95 
°©us_t
 
wrôeFûeDes¸ùt‹
(
fd
);

99 
°©us_t
 
wrôeDupFûeDes¸ùt‹
(
fd
);

101 
°©us_t
 
wrôeObje˘
(c⁄° 
Ê©_bödî_obje˘
& 
vÆ
, 
boﬁ
 
nuŒMëaD©a
);

103 
ªmove
(
size_t
 
°¨t
, size_à
amt
);

105 
°©us_t
 
ªad
(* 
outD©a
, 
size_t
 
Àn
) const;

106 c⁄° * 
ªadI≈œ˚
(
size_t
 
Àn
) const;

107 
öt32_t
 
ªadI¡32
() const;

108 
°©us_t
 
ªadI¡32
(
öt32_t
 *
pArg
) const;

109 
öt64_t
 
ªadI¡64
() const;

110 
°©us_t
 
ªadI¡64
(
öt64_t
 *
pArg
) const;

111 
ªadFlﬂt
() const;

112 
°©us_t
 
ªadFlﬂt
(*
pArg
) const;

113 
ªadDoubÀ
() const;

114 
°©us_t
 
ªadDoubÀ
(*
pArg
) const;

115 
öçå_t
 
ªadI¡På
() const;

116 
°©us_t
 
ªadI¡På
(
öçå_t
 *
pArg
) const;

118 c⁄° * 
ªadCSåög
() const;

119 
Såög8
 
ªadSåög8
() const;

120 
Såög16
 
ªadSåög16
() const;

121 c⁄° 
ch¨16_t
* 
ªadSåög16I≈œ˚
(
size_t
* 
outLí
) const;

122 
	g•
<
	gIBödî
> 
ªadSå⁄gBödî
() const;

123 
	gwp
<
	gIBödî
> 
ªadWókBödî
() const;

124 
°©us_t
 
ªad
(
FœâíabÀ
& 
vÆ
) const;

130 
«tive_h™dÀ
* 
ªadN©iveH™dÀ
() const;

135 
ªadFûeDes¸ùt‹
() const;

137 c⁄° 
Ê©_bödî_obje˘
* 
ªadObje˘
(
boﬁ
 
nuŒMëaD©a
) const;

140 
˛o£FûeDes¸ùt‹s
();

142 (*
	gªÀa£_func
)(
	tP¨˚l
* 
	t∑r˚l
,

143 c⁄° 
	tuöt8_t
* 
	td©a
, 
	tsize_t
 
	td©aSize
,

144 c⁄° 
	tsize_t
* 
	tobje˘s
, size_à
	tobje˘sSize
,

145 * 
	tcookõ
);

147 c⁄° 
uöt8_t
* 
ùcD©a
() const;

148 
size_t
 
ùcD©aSize
() const;

149 c⁄° 
size_t
* 
ùcObje˘s
() const;

150 
size_t
 
ùcObje˘sCou¡
() const;

151 
ùcSëD©aRe„ªn˚
(c⁄° 
uöt8_t
* 
d©a
, 
size_t
 
d©aSize
,

152 c⁄° 
size_t
* 
obje˘s
, size_à
obje˘sCou¡
,

153 
ªÀa£_func
 
ªlFunc
, * 
ªlCookõ
);

155 
¥öt
(
TextOuçut
& 
to
, 
uöt32_t
 
Êags
 = 0) const;

157 
	g¥iv©e
:

158 
P¨˚l
(c⁄° P¨˚l& 
o
);

159 
	gP¨˚l
& 
	g›î©‹
=(c⁄° 
P¨˚l
& 
o
);

161 
°©us_t
 
föishWrôe
(
size_t
 
Àn
);

162 
ªÀa£Obje˘s
();

163 
acquúeObje˘s
();

164 
°©us_t
 
growD©a
(
size_t
 
Àn
);

165 
°©us_t
 
ª°¨tWrôe
(
size_t
 
desúed
);

166 
°©us_t
 
c⁄töueWrôe
(
size_t
 
desúed
);

167 
‰ìD©aNoInô
();

168 
öôSèã
();

169 
sˇnF‹Fds
() const;

171 
	gãm∂©e
<
˛ass
 
	gT
>

172 
°©us_t
 
ªadAlig√d
(
T
 *
pArg
) const;

174 
	gãm∂©e
<
˛ass
 
	gT
> 
T
 
ªadAlig√d
() const;

176 
	gãm∂©e
<
˛ass
 
	gT
>

177 
°©us_t
 
wrôeAlig√d
(
T
 
vÆ
);

179 
°©us_t
 
	gmEº‹
;

180 
uöt8_t
* 
	gmD©a
;

181 
size_t
 
	gmD©aSize
;

182 
size_t
 
	gmD©aC≠acôy
;

183 
muèbÀ
 
size_t
 
	gmD©aPos
;

184 
size_t
* 
	gmObje˘s
;

185 
size_t
 
	gmObje˘sSize
;

186 
size_t
 
	gmObje˘sC≠acôy
;

187 
muèbÀ
 
size_t
 
	gmNextObje˘Höt
;

189 
muèbÀ
 
boﬁ
 
	gmFdsKnown
;

190 
muèbÀ
 
boﬁ
 
	gmHasFds
;

192 
ªÀa£_func
 
	gmOw√r
;

193 * 
	gmOw√rCookõ
;

198 
ölöe
 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, c⁄° 
	gP¨˚l
& 
	g∑r˚l
)

200 
	g∑r˚l
.
¥öt
(
to
);

201  
	gto
;

207 
acquúe_obje˘
(c⁄° 
•
<
Pro˚ssSèã
>& 
¥oc
,

208 c⁄° 
Ê©_bödî_obje˘
& 
obj
, c⁄° * 
who
);

209 
ªÀa£_obje˘
(c⁄° 
•
<
Pro˚ssSèã
>& 
¥oc
,

210 c⁄° 
Ê©_bödî_obje˘
& 
obj
, c⁄° * 
who
);

212 
Ê©ãn_bödî
(c⁄° 
•
<
Pro˚ssSèã
>& 
¥oc
,

213 c⁄° 
•
<
IBödî
>& 
bödî
, 
Ê©_bödî_obje˘
* 
out
);

214 
Ê©ãn_bödî
(c⁄° 
•
<
Pro˚ssSèã
>& 
¥oc
,

215 c⁄° 
wp
<
IBödî
>& 
bödî
, 
Ê©_bödî_obje˘
* 
out
);

216 
°©us_t
 
unÊ©ãn_bödî
(c⁄° 
•
<
Pro˚ssSèã
>& 
¥oc
,

217 c⁄° 
Ê©_bödî_obje˘
& 
Ê©
, 
•
<
IBödî
>* 
out
);

218 
°©us_t
 
unÊ©ãn_bödî
(c⁄° 
•
<
Pro˚ssSèã
>& 
¥oc
,

219 c⁄° 
Ê©_bödî_obje˘
& 
Ê©
, 
wp
<
IBödî
>* 
out
);

	@jni/include/binder/Permission.h

17 #i‚de‡
BINDER_PERMISSION_H


18 
	#BINDER_PERMISSION_H


	)

20 
	~<°döt.h
>

21 
	~<uni°d.h
>

23 
	~<utûs/S‹ãdVe˘‹.h
>

24 
	~<utûs/Såög16.h
>

25 
	~<utûs/thªads.h
>

27 
«me•a˚
 
	g™droid
 {

38 ˛as†
	cPîmissi⁄


40 
	gpublic
:

41 
Pîmissi⁄
(c⁄°* 
«me
);

42 
Pîmissi⁄
(c⁄° 
Såög16
& 
«me
);

43 
Pîmissi⁄
(c⁄° Pîmissi⁄& 
rhs
);

44 
	gvútuÆ
 ~
Pîmissi⁄
();

46 
boﬁ
 
	g›î©‹
 < (c⁄° 
	gPîmissi⁄
& 
	grhs
) const;

49 
boﬁ
 
checkCÆlög
() const;

52 
boﬁ
 
check
(
pid_t
 
pid
, 
uid_t
 
uid
) const;

54 
	g¥Ÿe˘ed
:

55 
vútuÆ
 
boﬁ
 
doCheckPîmissi⁄
(
pid_t
 
pid
, 
uid_t
 
uid
) const;

57 
	g¥iv©e
:

58 
Pîmissi⁄
& 
›î©‹
 = (c⁄° Pîmissi⁄& 
rhs
) const;

59 c⁄° 
Såög16
 
	gmPîmissi⁄Name
;

60 
muèbÀ
 
	gS‹ãdVe˘‹
<
	guid_t
> 
	gmGø¡ed
;

61 c⁄° 
pid_t
 
	gmPid
;

62 
muèbÀ
 
Muãx
 
	gmLock
;

	@jni/include/binder/ProcessState.h

17 #i‚de‡
ANDROID_PROCESS_STATE_H


18 
	#ANDROID_PROCESS_STATE_H


	)

20 
	~<bödî/IBödî.h
>

21 
	~<utûs/KeyedVe˘‹.h
>

22 
	~<utûs/Såög8.h
>

23 
	~<utûs/Såög16.h
>

25 
	~<utûs/thªads.h
>

28 
«me•a˚
 
	g™droid
 {

31 
mArgC
;

32 c⁄° * c⁄°* 
mArgV
;

33 
mArgLí
;

35 
˛ass
 
	gIPCThªadSèã
;

37 ˛as†
	cPro˚ssSèã
 : 
public
 
vútuÆ
 
RefBa£


39 
public
:

40 
•
<
Pro˚ssSèã
> 
£lf
();

42 
£tSögÀPro˚ss
(
boﬁ
 
sögÀPro˚ss
);

44 
£tC⁄ãxtObje˘
(c⁄° 
•
<
IBödî
>& 
obje˘
);

45 
	g•
<
	gIBödî
> 
gëC⁄ãxtObje˘
(c⁄° 
•
<
IBödî
>& 
ˇŒî
);

47 
£tC⁄ãxtObje˘
(c⁄° 
•
<
IBödî
>& 
obje˘
,

48 c⁄° 
Såög16
& 
«me
);

49 
	g•
<
	gIBödî
> 
gëC⁄ãxtObje˘
(c⁄° 
Såög16
& 
«me
,

50 c⁄° 
•
<
IBödî
>& 
ˇŒî
);

52 
boﬁ
 
suµ‹tsPro˚s£s
() const;

54 
°¨tThªadPoﬁ
();

56 
boﬁ
 (*
	tc⁄ãxt_check_func
)(c⁄° 
	tSåög16
& 
	t«me
,

57 c⁄° 
	t•
<
	tIBödî
>& 
	tˇŒî
,

58 * 
	tu£rD©a
);

60 
boﬁ
 
isC⁄ãxtM™agî
() const;

61 
boﬁ
 
becomeC⁄ãxtM™agî
(

62 
c⁄ãxt_check_func
 
checkFunc
,

63 * 
u£rD©a
);

65 
	g•
<
	gIBödî
> 
gëSå⁄gProxyF‹H™dÀ
(
öt32_t
 
h™dÀ
);

66 
	gwp
<
	gIBödî
> 
gëWókProxyF‹H™dÀ
(
öt32_t
 
h™dÀ
);

67 
expungeH™dÀ
(
öt32_t
 
h™dÀ
, 
IBödî
* 
bödî
);

69 
£tArgs
(
¨gc
, c⁄° * c⁄° 
¨gv
[]);

70 
gëArgC
() const;

71 c⁄° * c⁄°* 
gëArgV
() const;

73 
£tArgV0
(c⁄° * 
txt
);

75 
•awnPoﬁedThªad
(
boﬁ
 
isMaö
);

77 
	g¥iv©e
:

78 
‰õnd
 
˛ass
 
IPCThªadSèã
;

80 
Pro˚ssSèã
();

81 ~
Pro˚ssSèã
();

83 
Pro˚ssSèã
(c⁄° Pro˚ssSèã& 
o
);

84 
	gPro˚ssSèã
& 
	g›î©‹
=(c⁄° 
Pro˚ssSèã
& 
o
);

86 
	sh™dÀ_íåy
 {

87 
IBödî
* 
	gbödî
;

88 
	gRefBa£
::
wókªf_ty≥
* 
ªfs
;

91 
h™dÀ_íåy
* 
lookupH™dÀLocked
(
öt32_t
 
h™dÀ
);

93 
	gmDrivîFD
;

94 * 
	gmVMSèπ
;

96 
muèbÀ
 
Muãx
 
	gmLock
;

98 
	gVe˘‹
<
	gh™dÀ_íåy
>
	gmH™dÀToObje˘
;

100 
boﬁ
 
	gmM™agesC⁄ãxts
;

101 
c⁄ãxt_check_func
 
	gmBödîC⁄ãxtCheckFunc
;

102 * 
	gmBödîC⁄ãxtU£rD©a
;

104 
	gKeyedVe˘‹
<
	gSåög16
, 
	g•
<
	gIBödî
> >

105 
	gmC⁄ãxts
;

108 
Såög8
 
	gmRoŸDú
;

109 
boﬁ
 
	gmThªadPoﬁSèπed
;

110 vﬁ©ûê
öt32_t
 
	gmThªadPoﬁSeq
;

	@jni/include/cutils/abort_socket.h

49 
	~<°dlib.h
>

50 
	~<sys/sockë.h
>

52 #i‚de‡
__CUTILS_ABORT_SOCKET_H__


53 
	#__CUTILS_ABORT_SOCKET_H__


	)

54 #ifde‡
__˝lu•lus


58 
	sasockë
 {

59 
fd
;

60 
ab‹t_fd
[2];

67 
asockë
 *
asockë_öô
(
fd
);

77 
asockë_c⁄√˘
(
asockë
 *
s
, c⁄° 
sockaddr
 *
addr
,

78 
sockÀn_t
 
addæí
, 
timeout
);

80 
asockë_ac˚±
(
asockë
 *
s
, 
sockaddr
 *
addr
,

81 
sockÀn_t
 *
addæí
, 
timeout
);

83 
asockë_ªad
(
asockë
 *
s
, *
buf
, 
size_t
 
cou¡
, 
timeout
);

85 
asockë_wrôe
(
asockë
 *
s
, c⁄° *
buf
, 
size_t
 
cou¡
,

86 
timeout
);

93 
asockë_ab‹t
(
asockë
 *
s
);

98 
asockë_de°roy
(
asockë
 *
s
);

100 #ifde‡
__˝lu•lus


	@jni/include/cutils/array.h

21 #i‚de‡
__ARRAY_H


22 
	#__ARRAY_H


	)

24 #ifde‡
__˝lu•lus


28 
	~<°dlib.h
>

31 
Aºay
 
	tAºay
;

34 
Aºay
* 
¨øyCª©e
();

37 
¨øyFªe
(
Aºay
* 
¨øy
);

40 
¨øyAdd
(
Aºay
* 
¨øy
, * 
poöãr
);

43 * 
¨øyGë
(
Aºay
* 
¨øy
, 
ödex
);

46 * 
¨øyRemove
(
Aºay
* 
¨øy
, 
ödex
);

49 * 
¨øySë
(
Aºay
* 
¨øy
, 
ödex
, * 
poöãr
);

52 
¨øySëSize
(
Aºay
* 
¨øy
, 
size
);

55 
¨øySize
(
Aºay
* 
¨øy
);

61 c⁄° ** 
¨øyUnwøp
(
Aºay
* 
¨øy
);

63 #ifde‡
__˝lu•lus


	@jni/include/cutils/ashmem.h

10 #i‚de‡
_CUTILS_ASHMEM_H


11 
	#_CUTILS_ASHMEM_H


	)

13 
	~<°döt.h
>

15 #ifde‡
__˝lu•lus


19 
ashmem_¸óã_ªgi⁄
(c⁄° *
«me
, 
size_t
 
size
);

20 
ashmem_£t_¥Ÿ_ªgi⁄
(
fd
, 
¥Ÿ
);

21 
ashmem_pö_ªgi⁄
(
fd
, 
size_t
 
off£t
, size_à
Àn
);

22 
ashmem_u≈ö_ªgi⁄
(
fd
, 
size_t
 
off£t
, size_à
Àn
);

23 
ashmem_gë_size_ªgi⁄
(
fd
);

25 #ifde‡
__˝lu•lus


29 #i‚de‡
__ASHMEMIOC


31 
	#ASHMEM_NAME_LEN
 256

	)

33 
	#ASHMEM_NAME_DEF
 "dev/ashmem"

	)

36 
	#ASHMEM_NOT_PURGED
 0

	)

37 
	#ASHMEM_WAS_PURGED
 1

	)

40 
	#ASHMEM_IS_UNPINNED
 0

	)

41 
	#ASHMEM_IS_PINNED
 1

	)

	@jni/include/cutils/atomic.h

17 #i‚de‡
ANDROID_CUTILS_ATOMIC_H


18 
	#ANDROID_CUTILS_ATOMIC_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 #ifde‡
__˝lu•lus


34 
™droid_©omic_wrôe
(
öt32_t
 
vÆue
, vﬁ©ûêöt32_t* 
addr
);

41 
öt32_t
 
™droid_©omic_öc
(vﬁ©ûêöt32_t* 
addr
);

42 
öt32_t
 
™droid_©omic_dec
(vﬁ©ûêöt32_t* 
addr
);

44 
öt32_t
 
™droid_©omic_add
(öt32_à
vÆue
, vﬁ©ûêöt32_t* 
addr
);

45 
öt32_t
 
™droid_©omic_™d
(öt32_à
vÆue
, vﬁ©ûêöt32_t* 
addr
);

46 
öt32_t
 
™droid_©omic_‹
(öt32_à
vÆue
, vﬁ©ûêöt32_t* 
addr
);

48 
öt32_t
 
™droid_©omic_sw≠
(öt32_à
vÆue
, vﬁ©ûêöt32_t* 
addr
);

59 
öt64_t
 
™droid_quasütomic_sw≠_64
(öt64_à
vÆue
, vﬁ©ûêöt64_t* 
addr
);

60 
öt64_t
 
™droid_quasütomic_ªad_64
(vﬁ©ûêöt64_t* 
addr
);

67 
™droid_©omic_cmpxchg
(
öt32_t
 
ﬁdvÆue
, i¡32_à
√wvÆue
,

68 vﬁ©ûê
öt32_t
* 
addr
);

70 
™droid_quasütomic_cmpxchg_64
(
öt64_t
 
ﬁdvÆue
, i¡64_à
√wvÆue
,

71 vﬁ©ûê
öt64_t
* 
addr
);

75 #ifde‡
__˝lu•lus


	@jni/include/cutils/compiler.h

17 #i‚de‡
ANDROID_CUTILS_COMPILER_H


18 
	#ANDROID_CUTILS_COMPILER_H


	)

24 #ifde‡
__˝lu•lus


25 
	#CC_LIKELY
–
exp
 ) (
	`__buûtö_ex≥˘
–!!”xp), 
åue
 ))

	)

26 
	#CC_UNLIKELY
–
exp
 ) (
	`__buûtö_ex≥˘
–!!”xp), 
Ál£
 ))

	)

28 
	#CC_LIKELY
–
exp
 ) (
	`__buûtö_ex≥˘
–!!”xp), 1 ))

	)

29 
	#CC_UNLIKELY
–
exp
 ) (
	`__buûtö_ex≥˘
–!!”xp), 0 ))

	)

	@jni/include/cutils/config_utils.h

17 #i‚de‡
__CUTILS_CONFIG_UTILS_H


18 
	#__CUTILS_CONFIG_UTILS_H


	)

20 #ifde‡
__˝lu•lus


24 
˙ode
 
	t˙ode
;

27 
	s˙ode


29 
˙ode
 *
√xt
;

30 
˙ode
 *
fú°_chûd
;

31 
˙ode
 *
œ°_chûd
;

32 c⁄° *
«me
;

33 c⁄° *
vÆue
;

37 
c⁄fig_lﬂd
(
˙ode
 *
roŸ
, *
d©a
);

40 
c⁄fig_lﬂd_fûe
(
˙ode
 *
roŸ
, c⁄° *
‚
);

43 
˙ode
* 
c⁄fig_node
(c⁄° *
«me
, c⁄° *
vÆue
);

46 
˙ode
* 
c⁄fig_föd
(˙odê*
roŸ
, c⁄° *
«me
);

49 
c⁄fig_boﬁ
(
˙ode
 *
roŸ
, c⁄° *
«me
, 
_deÁu…
);

52 c⁄° * 
c⁄fig_°r
(
˙ode
 *
roŸ
, c⁄° *
«me
, c⁄° *
_deÁu…
);

55 
c⁄fig_£t
(
˙ode
 *
roŸ
, c⁄° *
«me
, c⁄° *
vÆue
);

57 #ifde‡
__˝lu•lus


	@jni/include/cutils/cpu_info.h

17 #i‚de‡
__CUTILS_CPU_INFO_H


18 
	#__CUTILS_CPU_INFO_H


	)

20 #ifde‡
__˝lu•lus


28 c⁄° * 
gë_˝u_£rül_numbî
();

30 #ifde‡
__˝lu•lus


	@jni/include/cutils/dir_hash.h

18 
	mSHA_1
,

19 } 
	tHashAlg‹ôhm
;

21 
gë_fûe_hash
(
HashAlg‹ôhm
 
Æg‹ôhm
, c⁄° *
∑th
,

22 *
ouçut_°rög
, 
size_t
 
max_ouçut_°rög
);

24 
gë_ªcursive_hash_m™i„°
(
HashAlg‹ôhm
 
Æg‹ôhm
,

25 c⁄° *
dúe˘‹y_∑th
,

26 **
ouçut_°rög
);

	@jni/include/cutils/event_tag_map.h

17 #i‚de‡
_LIBS_CUTILS_EVENTTAGMAP_H


18 
	#_LIBS_CUTILS_EVENTTAGMAP_H


	)

20 #ifde‡
__˝lu•lus


24 
	#EVENT_TAG_MAP_FILE
 "/sy°em/ëc/evít-log-ègs"

	)

26 
EvítTagM≠
;

27 
EvítTagM≠
 
	tEvítTagM≠
;

34 
EvítTagM≠
* 
™droid_›íEvítTagM≠
(c⁄° * 
fûeName
);

39 
™droid_˛o£EvítTagM≠
(
EvítTagM≠
* 
m≠
);

44 c⁄° * 
™droid_lookupEvítTag
(c⁄° 
EvítTagM≠
* 
m≠
, 
èg
);

46 #ifde‡
__˝lu•lus


	@jni/include/cutils/hashmap.h

21 #i‚de‡
__HASHMAP_H


22 
	#__HASHMAP_H


	)

24 
	~<°dboﬁ.h
>

25 
	~<°dlib.h
>

27 #ifde‡
__˝lu•lus


32 
Hashm≠
 
	tHashm≠
;

41 
Hashm≠
* 
hashm≠Cª©e
(
size_t
 
öôülC≠acôy
,

42 (*
hash
)(* 
key
), 
boﬁ
 (*
equÆs
)(* 
keyA
, * 
keyB
));

47 
hashm≠Fªe
(
Hashm≠
* 
m≠
);

53 
hashm≠Hash
(* 
key
, 
size_t
 
keySize
);

62 * 
hashm≠Put
(
Hashm≠
* 
m≠
, * 
key
, * 
vÆue
);

68 * 
hashm≠Gë
(
Hashm≠
* 
m≠
, * 
key
);

73 
boﬁ
 
hashm≠C⁄èösKey
(
Hashm≠
* 
m≠
, * 
key
);

82 * 
hashm≠Memoize
(
Hashm≠
* 
m≠
, * 
key
,

83 * (*
öôülVÆue
)(* 
key
, * 
c⁄ãxt
), * context);

89 * 
hashm≠Remove
(
Hashm≠
* 
m≠
, * 
key
);

94 
size_t
 
hashm≠Size
(
Hashm≠
* 
m≠
);

100 
hashm≠F‹Each
(
Hashm≠
* 
m≠
,

101 
boﬁ
 (*
ˇŒback
)(* 
key
, * 
vÆue
, * 
c⁄ãxt
),

102 * 
c⁄ãxt
);

111 
hashm≠Lock
(
Hashm≠
* 
m≠
);

116 
hashm≠U∆ock
(
Hashm≠
* 
m≠
);

125 
hashm≠I¡Hash
(* 
key
);

130 
boﬁ
 
hashm≠I¡EquÆs
(* 
keyA
, * 
keyB
);

139 
size_t
 
hashm≠CuºítC≠acôy
(
Hashm≠
* 
m≠
);

144 
size_t
 
hashm≠Cou¡Cﬁlisi⁄s
(
Hashm≠
* 
m≠
);

146 #ifde‡
__˝lu•lus


	@jni/include/cutils/iosched_policy.h

17 #i‚de‡
__CUTILS_IOSCHED_POLICY_H


18 
	#__CUTILS_IOSCHED_POLICY_H


	)

20 #ifde‡
__˝lu•lus


25 
IoSchedCœss_NONE
,

26 
IoSchedCœss_RT
,

27 
IoSchedCœss_BE
,

28 
IoSchedCœss_IDLE
,

29 } 
	tIoSchedCœss
;

31 
™droid_£t_i›rio
(
pid
, 
IoSchedCœss
 
˛azz
, 
i›rio
);

32 
™droid_gë_i›rio
(
pid
, 
IoSchedCœss
 *
˛azz
, *
i›rio
);

34 #ifde‡
__˝lu•lus


	@jni/include/cutils/jstring.h

17 #i‚de‡
__CUTILS_STRING16_H


18 
	#__CUTILS_STRING16_H


	)

20 
	~<°döt.h
>

21 
	~<°ddef.h
>

23 #ifde‡
__˝lu•lus


27 
uöt16_t
 
	tch¨16_t
;

29 * 
°∫dup16to8
 (c⁄° 
ch¨16_t
* 
s
, 
size_t
 
n
);

30 
size_t
 
°∫Àn16to8
 (c⁄° 
ch¨16_t
* 
s
, size_à
n
);

31 * 
°∫˝y16to8
 (*
de°
, c⁄° 
ch¨16_t
*
s
, 
size_t
 
n
);

33 
ch¨16_t
 * 
°rdup8to16
 (c⁄° * 
s
, 
size_t
 *
out_Àn
);

34 
size_t
 
°æí8to16
 (c⁄° * 
utf8Så
);

35 
ch¨16_t
 * 
°r˝y8to16
 (ch¨16_à*
de°
, c⁄° *
s
, 
size_t
 *
out_Àn
);

36 
ch¨16_t
 * 
°r˝yÀn8to16
 (ch¨16_à*
de°
, c⁄° *
s
, 
Àngth
,

37 
size_t
 *
out_Àn
);

39 #ifde‡
__˝lu•lus


	@jni/include/cutils/log.h

28 #i‚de‡
_LIBS_CUTILS_LOG_H


29 
	#_LIBS_CUTILS_LOG_H


	)

31 
	~<°dio.h
>

32 
	~<time.h
>

33 
	~<sys/ty≥s.h
>

34 
	~<uni°d.h
>

35 #ifde‡
HAVE_PTHREADS


36 
	~<±hªad.h
>

38 
	~<°d¨g.h
>

40 
	~<cutûs/uio.h
>

41 
	~<cutûs/logd.h
>

43 #ifde‡
__˝lu•lus


54 #i‚de‡
LOG_NDEBUG


55 #ifde‡
NDEBUG


56 
	#LOG_NDEBUG
 1

	)

58 
	#LOG_NDEBUG
 0

	)

67 #i‚de‡
LOG_TAG


68 
	#LOG_TAG
 
NULL


	)

76 #i‚de‡
LOGV


77 #i‡
LOG_NDEBUG


78 
	#LOGV
(...Ë(()0)

	)

80 
	#LOGV
(...Ë(()
	`LOG
(
LOG_VERBOSE
, 
LOG_TAG
, 
__VA_ARGS__
))

	)

84 
	#CONDITION
(
c⁄d
Ë(
	`__buûtö_ex≥˘
((c⁄d)!=0, 0))

	)

86 #i‚de‡
LOGV_IF


87 #i‡
LOG_NDEBUG


88 
	#LOGV_IF
(
c⁄d
, ...Ë(()0)

	)

90 
	#LOGV_IF
(
c⁄d
, ...) \

91 –(
	`CONDITION
(
c⁄d
)) \

92 ? (()
	`LOG
(
LOG_VERBOSE
, 
LOG_TAG
, 
__VA_ARGS__
)) \

93 : ()0 )

	)

100 #i‚de‡
LOGD


101 
	#LOGD
(...Ë(()
	`LOG
(
LOG_DEBUG
, 
LOG_TAG
, 
__VA_ARGS__
))

	)

104 #i‚de‡
LOGD_IF


105 
	#LOGD_IF
(
c⁄d
, ...) \

106 –(
	`CONDITION
(
c⁄d
)) \

107 ? (()
	`LOG
(
LOG_DEBUG
, 
LOG_TAG
, 
__VA_ARGS__
)) \

108 : ()0 )

	)

114 #i‚de‡
LOGI


115 
	#LOGI
(...Ë(()
	`LOG
(
LOG_INFO
, 
LOG_TAG
, 
__VA_ARGS__
))

	)

118 #i‚de‡
LOGI_IF


119 
	#LOGI_IF
(
c⁄d
, ...) \

120 –(
	`CONDITION
(
c⁄d
)) \

121 ? (()
	`LOG
(
LOG_INFO
, 
LOG_TAG
, 
__VA_ARGS__
)) \

122 : ()0 )

	)

128 #i‚de‡
LOGW


129 
	#LOGW
(...Ë(()
	`LOG
(
LOG_WARN
, 
LOG_TAG
, 
__VA_ARGS__
))

	)

132 #i‚de‡
LOGW_IF


133 
	#LOGW_IF
(
c⁄d
, ...) \

134 –(
	`CONDITION
(
c⁄d
)) \

135 ? (()
	`LOG
(
LOG_WARN
, 
LOG_TAG
, 
__VA_ARGS__
)) \

136 : ()0 )

	)

142 #i‚de‡
LOGE


143 
	#LOGE
(...Ë(()
	`LOG
(
LOG_ERROR
, 
LOG_TAG
, 
__VA_ARGS__
))

	)

146 #i‚de‡
LOGE_IF


147 
	#LOGE_IF
(
c⁄d
, ...) \

148 –(
	`CONDITION
(
c⁄d
)) \

149 ? (()
	`LOG
(
LOG_ERROR
, 
LOG_TAG
, 
__VA_ARGS__
)) \

150 : ()0 )

	)

159 #i‚de‡
IF_LOGV


160 #i‡
LOG_NDEBUG


161 
	#IF_LOGV
(Ëi‡(
Ál£
)

	)

163 
	#IF_LOGV
(Ë
	`IF_LOG
(
LOG_VERBOSE
, 
LOG_TAG
)

	)

171 #i‚de‡
IF_LOGD


172 
	#IF_LOGD
(Ë
	`IF_LOG
(
LOG_DEBUG
, 
LOG_TAG
)

	)

179 #i‚de‡
IF_LOGI


180 
	#IF_LOGI
(Ë
	`IF_LOG
(
LOG_INFO
, 
LOG_TAG
)

	)

187 #i‚de‡
IF_LOGW


188 
	#IF_LOGW
(Ë
	`IF_LOG
(
LOG_WARN
, 
LOG_TAG
)

	)

195 #i‚de‡
IF_LOGE


196 
	#IF_LOGE
(Ë
	`IF_LOG
(
LOG_ERROR
, 
LOG_TAG
)

	)

205 #i‚de‡
SLOGV


206 #i‡
LOG_NDEBUG


207 
	#SLOGV
(...Ë(()0)

	)

209 
	#SLOGV
(...Ë(()
	`__™droid_log_buf_¥öt
(
LOG_ID_SYSTEM
, 
ANDROID_LOG_VERBOSE
, 
LOG_TAG
, 
__VA_ARGS__
))

	)

213 
	#CONDITION
(
c⁄d
Ë(
	`__buûtö_ex≥˘
((c⁄d)!=0, 0))

	)

215 #i‚de‡
SLOGV_IF


216 #i‡
LOG_NDEBUG


217 
	#SLOGV_IF
(
c⁄d
, ...Ë(()0)

	)

219 
	#SLOGV_IF
(
c⁄d
, ...) \

220 –(
	`CONDITION
(
c⁄d
)) \

221 ? (()
	`__™droid_log_buf_¥öt
(
LOG_ID_SYSTEM
, 
ANDROID_LOG_VERBOSE
, 
LOG_TAG
, 
__VA_ARGS__
)) \

222 : ()0 )

	)

229 #i‚de‡
SLOGD


230 
	#SLOGD
(...Ë(()
	`__™droid_log_buf_¥öt
(
LOG_ID_SYSTEM
, 
ANDROID_LOG_DEBUG
, 
LOG_TAG
, 
__VA_ARGS__
))

	)

233 #i‚de‡
SLOGD_IF


234 
	#SLOGD_IF
(
c⁄d
, ...) \

235 –(
	`CONDITION
(
c⁄d
)) \

236 ? (()
	`__™droid_log_buf_¥öt
(
LOG_ID_SYSTEM
, 
ANDROID_LOG_DEBUG
, 
LOG_TAG
, 
__VA_ARGS__
)) \

237 : ()0 )

	)

243 #i‚de‡
SLOGI


244 
	#SLOGI
(...Ë(()
	`__™droid_log_buf_¥öt
(
LOG_ID_SYSTEM
, 
ANDROID_LOG_INFO
, 
LOG_TAG
, 
__VA_ARGS__
))

	)

247 #i‚de‡
SLOGI_IF


248 
	#SLOGI_IF
(
c⁄d
, ...) \

249 –(
	`CONDITION
(
c⁄d
)) \

250 ? (()
	`__™droid_log_buf_¥öt
(
LOG_ID_SYSTEM
, 
ANDROID_LOG_INFO
, 
LOG_TAG
, 
__VA_ARGS__
)) \

251 : ()0 )

	)

257 #i‚de‡
SLOGW


258 
	#SLOGW
(...Ë(()
	`__™droid_log_buf_¥öt
(
LOG_ID_SYSTEM
, 
ANDROID_LOG_WARN
, 
LOG_TAG
, 
__VA_ARGS__
))

	)

261 #i‚de‡
SLOGW_IF


262 
	#SLOGW_IF
(
c⁄d
, ...) \

263 –(
	`CONDITION
(
c⁄d
)) \

264 ? (()
	`__™droid_log_buf_¥öt
(
LOG_ID_SYSTEM
, 
ANDROID_LOG_WARN
, 
LOG_TAG
, 
__VA_ARGS__
)) \

265 : ()0 )

	)

271 #i‚de‡
SLOGE


272 
	#SLOGE
(...Ë(()
	`__™droid_log_buf_¥öt
(
LOG_ID_SYSTEM
, 
ANDROID_LOG_ERROR
, 
LOG_TAG
, 
__VA_ARGS__
))

	)

275 #i‚de‡
SLOGE_IF


276 
	#SLOGE_IF
(
c⁄d
, ...) \

277 –(
	`CONDITION
(
c⁄d
)) \

278 ? (()
	`__™droid_log_buf_¥öt
(
LOG_ID_SYSTEM
, 
ANDROID_LOG_ERROR
, 
LOG_TAG
, 
__VA_ARGS__
)) \

279 : ()0 )

	)

292 
	#LOG_ALWAYS_FATAL_IF
(
c⁄d
, ...) \

293 –(
	`CONDITION
(
c⁄d
)) \

294 ? (()
	`™droid_¥ötAs£π
(#c⁄d, 
LOG_TAG
, ## 
__VA_ARGS__
)) \

295 : ()0 )

	)

297 
	#LOG_ALWAYS_FATAL
(...) \

298 –(()
	`™droid_¥ötAs£π
(
NULL
, 
LOG_TAG
, ## 
__VA_ARGS__
)Ë)

	)

304 #i‡
LOG_NDEBUG


306 
	#LOG_FATAL_IF
(
c⁄d
, ...Ë(()0)

	)

307 
	#LOG_FATAL
(...Ë(()0)

	)

311 
	#LOG_FATAL_IF
(
c⁄d
, ...Ë
	`LOG_ALWAYS_FATAL_IF
(c⁄d, ## 
__VA_ARGS__
)

	)

312 
	#LOG_FATAL
(...Ë
	`LOG_ALWAYS_FATAL
(
__VA_ARGS__
)

	)

320 
	#LOG_ASSERT
(
c⁄d
, ...Ë
	`LOG_FATAL_IF
(!(c⁄d), ## 
__VA_ARGS__
)

	)

333 #i‚de‡
LOG


334 
	#LOG
(
¥i‹ôy
, 
èg
, ...) \

335 
	`LOG_PRI
(
ANDROID_
##
¥i‹ôy
, 
èg
, 
__VA_ARGS__
)

	)

341 #i‚de‡
LOG_PRI


342 
	#LOG_PRI
(
¥i‹ôy
, 
èg
, ...) \

343 
	`™droid_¥ötLog
(
¥i‹ôy
, 
èg
, 
__VA_ARGS__
)

	)

349 #i‚de‡
LOG_PRI_VA


350 
	#LOG_PRI_VA
(
¥i‹ôy
, 
èg
, 
fmt
, 
¨gs
) \

351 
	`™droid_v¥ötLog
(
¥i‹ôy
, 
NULL
, 
èg
, 
fmt
, 
¨gs
)

	)

357 #i‚de‡
IF_LOG


358 
	#IF_LOG
(
¥i‹ôy
, 
èg
) \

359 i‡(
	`™droid_ã°Log
(
ANDROID_
##
¥i‹ôy
, 
èg
))

	)

373 
EVENT_TYPE_INT
 = 0,

374 
EVENT_TYPE_LONG
 = 1,

375 
EVENT_TYPE_STRING
 = 2,

376 
EVENT_TYPE_LIST
 = 3,

377 } 
	tAndroidEvítLogTy≥
;

380 
	#LOG_EVENT_INT
(
_èg
, 
_vÆue
) { \

381 
ötBuf
 = 
_vÆue
; \

382 (Ë
	`™droid_btWrôeLog
(
_èg
, 
EVENT_TYPE_INT
, &
ötBuf
, \

383 (
ötBuf
)); \

384 }

	)

385 
	#LOG_EVENT_LONG
(
_èg
, 
_vÆue
) { \

386 
l⁄gBuf
 = 
_vÆue
; \

387 (Ë
	`™droid_btWrôeLog
(
_èg
, 
EVENT_TYPE_LONG
, &
l⁄gBuf
, \

388 (
l⁄gBuf
)); \

389 }

	)

390 
	#LOG_EVENT_STRING
(
_èg
, 
_vÆue
) \

391 ((Ë0Ë

	)

400 
	#™droid_¥ötLog
(
¥io
, 
èg
, 
fmt
...) \

401 
	`__™droid_log_¥öt
(
¥io
, 
èg
, 
fmt
)

	)

403 
	#™droid_v¥ötLog
(
¥io
, 
c⁄d
, 
èg
, 
fmt
...) \

404 
	`__™droid_log_v¥öt
(
¥io
, 
èg
, 
fmt
)

	)

414 
	#__™droid_£c⁄d
(
dummy
, 
£c⁄d
, ...Ë
	)
second

419 
	#__™droid_ª°
(
fú°
, ...Ë, ## 
__VA_ARGS__


	)

421 
	#™droid_¥ötAs£π
(
c⁄d
, 
èg
, 
fmt
...) \

422 
	`__™droid_log_as£π
(
c⁄d
, 
èg
, \

423 
	`__™droid_£c⁄d
(0, ## 
fmt
, 
NULL
Ë
	`__™droid_ª°
(fmt))

	)

425 
	#™droid_wrôeLog
(
¥io
, 
èg
, 
ãxt
) \

426 
	`__™droid_log_wrôe
(
¥io
, 
èg
, 
ãxt
)

	)

428 
	#™droid_bWrôeLog
(
èg
, 
∑ylﬂd
, 
Àn
) \

429 
	`__™droid_log_bwrôe
(
èg
, 
∑ylﬂd
, 
Àn
)

	)

430 
	#™droid_btWrôeLog
(
èg
, 
ty≥
, 
∑ylﬂd
, 
Àn
) \

431 
	`__™droid_log_btwrôe
(
èg
, 
ty≥
, 
∑ylﬂd
, 
Àn
)

	)

434 
	#™droid_ã°Log
(
¥io
, 
èg
Ë(1)

	)

435 
	#™droid_wrôevLog
(
vec
,
num
Ëdo{}0)

	)

436 
	#™droid_wrôe1Log
(
°r
,
Àn
Ëdo{}0)

	)

437 
	#™droid_£tMöPri‹ôy
(
èg
, 
¥io
Ëdo{}0)

	)

439 
	#™droid_logToFûe
(
èg
, 
fûe
Ë(0)

	)

440 
	#™droid_logToFd
(
èg
, 
fd
Ë(0)

	)

443 
LOG_ID_MAIN
 = 0,

444 
LOG_ID_RADIO
 = 1,

445 
LOG_ID_EVENTS
 = 2,

446 
LOG_ID_SYSTEM
 = 3,

448 
LOG_ID_MAX


449 } 
	tlog_id_t
;

454 
__™droid_log_buf_wrôe
(
bufID
, 
¥io
, c⁄° *
èg
, c⁄° *
ãxt
);

455 
__™droid_log_buf_¥öt
(
bufID
, 
¥io
, c⁄° *
èg
, c⁄° *
fmt
, ...);

458 #ifde‡
__˝lu•lus


	@jni/include/cutils/logd.h

17 #i‚de‡
_ANDROID_CUTILS_LOGD_H


18 
	#_ANDROID_CUTILS_LOGD_H


	)

23 
	~<™droid/log.h
>

26 
	~<time.h
>

27 
	~<°dio.h
>

28 
	~<uni°d.h
>

29 
	~<°döt.h
>

30 
	~<sys/ty≥s.h
>

31 #ifde‡
HAVE_PTHREADS


32 
	~<±hªad.h
>

34 
	~<cutûs/uio.h
>

35 
	~<°d¨g.h
>

37 #ifde‡
__˝lu•lus


41 
__™droid_log_bwrôe
(
öt32_t
 
èg
, c⁄° *
∑ylﬂd
, 
size_t
 
Àn
);

42 
__™droid_log_btwrôe
(
öt32_t
 
èg
, 
ty≥
, c⁄° *
∑ylﬂd
,

43 
size_t
 
Àn
);

45 #ifde‡
__˝lu•lus


	@jni/include/cutils/logger.h

10 #i‚de‡
_UTILS_LOGGER_H


11 
	#_UTILS_LOGGER_H


	)

13 
	~<°döt.h
>

15 
	sloggî_íåy
 {

16 
uöt16_t
 
	mÀn
;

17 
uöt16_t
 
	m__∑d
;

18 
öt32_t
 
	mpid
;

19 
öt32_t
 
	mtid
;

20 
öt32_t
 
	m£c
;

21 
öt32_t
 
	mn£c
;

22 
	mmsg
[0];

25 
	#LOGGER_LOG_MAIN
 "log/maö"

	)

26 
	#LOGGER_LOG_RADIO
 "log/ødio"

	)

27 
	#LOGGER_LOG_EVENTS
 "log/evíts"

	)

28 
	#LOGGER_LOG_SYSTEM
 "log/sy°em"

	)

30 
	#LOGGER_ENTRY_MAX_LEN
 (4*1024)

	)

31 
	#LOGGER_ENTRY_MAX_PAYLOAD
 \

32 (
LOGGER_ENTRY_MAX_LEN
 - (
loggî_íåy
))

	)

34 #ifde‡
HAVE_IOCTL


36 
	~<sys/io˘l.h
>

38 
	#__LOGGERIO
 0xAE

	)

40 
	#LOGGER_GET_LOG_BUF_SIZE
 
	`_IO
(
__LOGGERIO
, 1Ë

	)

41 
	#LOGGER_GET_LOG_LEN
 
	`_IO
(
__LOGGERIO
, 2Ë

	)

42 
	#LOGGER_GET_NEXT_ENTRY_LEN
 
	`_IO
(
__LOGGERIO
, 3Ë

	)

43 
	#LOGGER_FLUSH_LOG
 
	`_IO
(
__LOGGERIO
, 4Ë

	)

	@jni/include/cutils/logprint.h

17 #i‚de‡
_LOGPRINT_H


18 
	#_LOGPRINT_H


	)

20 
	~<cutûs/log.h
>

21 
	~<cutûs/loggî.h
>

22 
	~<cutûs/evít_èg_m≠.h
>

23 
	~<±hªad.h
>

25 #ifde‡
__˝lu•lus


30 
FORMAT_OFF
 = 0,

31 
FORMAT_BRIEF
,

32 
FORMAT_PROCESS
,

33 
FORMAT_TAG
,

34 
FORMAT_THREAD
,

35 
FORMAT_RAW
,

36 
FORMAT_TIME
,

37 
FORMAT_THREADTIME
,

38 
FORMAT_LONG
,

39 } 
	tAndroidLogPrötF‹m©
;

41 
AndroidLogF‹m©_t
 
	tAndroidLogF‹m©
;

43 
	sAndroidLogE¡ry_t
 {

44 
time_t
 
tv_£c
;

45 
tv_n£c
;

46 
™droid_LogPri‹ôy
 
¥i‹ôy
;

47 
pid_t
 
pid
;

48 
±hªad_t
 
tid
;

49 c⁄° * 
èg
;

50 
size_t
 
mesßgeLí
;

51 c⁄° * 
mesßge
;

52 } 
	tAndroidLogE¡ry
;

54 
AndroidLogF‹m©
 *
™droid_log_f‹m©_√w
();

56 
™droid_log_f‹m©_‰ì
(
AndroidLogF‹m©
 *
p_f‹m©
);

58 
™droid_log_£tPrötF‹m©
(
AndroidLogF‹m©
 *
p_f‹m©
,

59 
AndroidLogPrötF‹m©
 
f‹m©
);

64 
AndroidLogPrötF‹m©
 
™droid_log_f‹m©FromSåög
(c⁄° *
s
);

76 
™droid_log_addFûãrRuÀ
(
AndroidLogF‹m©
 *
p_f‹m©
,

77 c⁄° *
fûãrEx¥essi⁄
);

90 
™droid_log_addFûãrSåög
(
AndroidLogF‹m©
 *
p_f‹m©
,

91 c⁄° *
fûãrSåög
);

98 
™droid_log_shouldPrötLöe
 (

99 
AndroidLogF‹m©
 *
p_f‹m©
, c⁄° *
èg
, 
™droid_LogPri‹ôy
 
¥i
);

109 
™droid_log_¥o˚ssLogBuf„r
(
loggî_íåy
 *
buf
,

110 
AndroidLogE¡ry
 *
íåy
);

118 
™droid_log_¥o˚ssBö¨yLogBuf„r
(
loggî_íåy
 *
buf
,

119 
AndroidLogE¡ry
 *
íåy
, c⁄° 
EvítTagM≠
* 
m≠
, * 
mesßgeBuf
,

120 
mesßgeBufLí
);

131 *
™droid_log_f‹m©LogLöe
 (

132 
AndroidLogF‹m©
 *
p_f‹m©
,

133 *
deÁu…Buf„r
,

134 
size_t
 
deÁu…Buf„rSize
,

135 c⁄° 
AndroidLogE¡ry
 *
p_löe
,

136 
size_t
 *
p_outLígth
);

145 
™droid_log_¥ötLogLöe
(

146 
AndroidLogF‹m©
 *
p_f‹m©
,

147 
fd
,

148 c⁄° 
AndroidLogE¡ry
 *
íåy
);

151 #ifde‡
__˝lu•lus


	@jni/include/cutils/memory.h

17 #i‚de‡
ANDROID_CUTILS_MEMORY_H


18 
	#ANDROID_CUTILS_MEMORY_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 #ifde‡
__˝lu•lus


28 
™droid_mem£t16
(
uöt16_t
* 
d°
, uöt16_à
vÆue
, 
size_t
 
size
);

31 
™droid_mem£t32
(
uöt32_t
* 
d°
, uöt32_à
vÆue
, 
size_t
 
size
);

33 #i‡!
HAVE_STRLCPY


35 
size_t
 
°æ˝y
(*
d°
, c⁄° *
§c
, size_à
size
);

38 #ifde‡
__˝lu•lus


	@jni/include/cutils/misc.h

17 #i‚de‡
__CUTILS_MISC_H


18 
	#__CUTILS_MISC_H


	)

20 #ifde‡
__˝lu•lus


29 *
lﬂd_fûe
(c⁄° *
‚
, *
sz
);

35 
debuggîd_c⁄√˘
();

41 
	#FIRST_APPLICATION_UID
 10000

	)

42 
	#LAST_APPLICATION_UID
 99999

	)

44 #ifde‡
__˝lu•lus


	@jni/include/cutils/mq.h

21 #i‚de‡
__MQ_H


22 
	#__MQ_H


	)

24 #ifde‡
__˝lu•lus


29 
MqMesßge
 
	tMqMesßge
;

32 
MqDe°ö©i⁄
 
	tMqDe°ö©i⁄
;

35 
MqByãs
 
	tMqByãs
;

43 
	tMqMesßgeLi°íî
(
	tMqDe°ö©i⁄
* 
	tde°ö©i⁄
, 
	tMqMesßge
* 
	tmesßge
);

50 
	tMqClo£Li°íî
(
	tMqDe°ö©i⁄
* 
	tde°ö©i⁄
);

61 
MqMesßge
* 
mqCª©eMesßge
(
MqByãs
 
hódî
, MqByã†
body
,

62 
MqDe°ö©i⁄
* 
ª∂yTo
);

65 
mqSídMesßge
(
MqMesßge
* 
mesßge
, 
MqDe°ö©i⁄
* 
de°ö©i⁄
);

77 
MqDe°ö©i⁄
* 
mqCª©eDe°ö©i⁄
(
MqMesßgeLi°íî
* 
mesßgeLi°íî
,

78 
MqClo£Li°íî
* 
˛o£Li°íî
, * 
u£rD©a
);

89 * 
mqGëU£rD©a
(
MqDe°ö©i⁄
* 
de°ö©i⁄
);

96 
mqIsDe°ö©i⁄Loˇl
(
MqDe°ö©i⁄
* 
de°ö©i⁄
);

101 
mqKìpDe°ö©i⁄
(
MqDesöèti⁄
* 
de°ö©i⁄
);

106 
mqFªeDe°ö©i⁄
(
MqDe°ö©i⁄
* 
desöèti⁄
);

113 
MqDe°ö©i⁄
* 
mqGëDe°ö©i⁄
(* 
«me
);

118 
mqPutDe°ö©i⁄
(* 
«me
, 
MqDe°ö©i⁄
* 
desöèti⁄
);

120 #ifde‡
__˝lu•lus


	@jni/include/cutils/mspace.h

22 #i‚de‡
MSPACE_H_


23 
	#MSPACE_H_


	)

30 
	#NO_MALLINFO
 1

	)

34 
	#USE_MAX_ALLOWED_FOOTPRINT
 1

	)

36 
	#USE_CONTIGUOUS_MSPACES
 1

	)

37 #i‡
USE_CONTIGUOUS_MSPACES


38 
	#HAVE_MMAP
 0

	)

39 
	#HAVE_MORECORE
 1

	)

40 
	#MORECORE_CONTIGUOUS
 0

	)

43 
	#MSPACES
 1

	)

44 
	#ONLY_MSPACES
 1

	)

45 
	~"../../../../bi⁄ic/libc/bi⁄ic/dlmÆloc.h
"

47 #ifde‡
__˝lu•lus


65 
size_t
 
m•a˚_ußbÀ_size
(
m•a˚
, const *);

67 #i‡
USE_CONTIGUOUS_MSPACES


73 
m•a˚
 
¸óã_c⁄tiguous_m•a˚
(
size_t
 
°¨tög_ˇ∑côy
, size_à
max_ˇ∑côy
,

74 
locked
);

80 
m•a˚
 
¸óã_c⁄tiguous_m•a˚_wôh_«me
(
size_t
 
°¨tög_ˇ∑côy
,

81 
size_t
 
max_ˇ∑côy
, 
locked
, c⁄° *
«me
);

86 
m•a˚
 
¸óã_c⁄tiguous_m•a˚_wôh_ba£
(
size_t
 
°¨tög_ˇ∑côy
,

87 
size_t
 
max_ˇ∑côy
, 
locked
, *
ba£
);

89 
size_t
 
de°roy_c⁄tiguous_m•a˚
(
m•a˚
 
m•
);

101 
m•a˚_wÆk_hóp
(
m•a˚
 
m•
,

102 (*
h™dÀr
)(c⁄° *
chunk±r
, 
size_t
 
chunkÀn
,

103 c⁄° *
u£Ωå
, 
size_t
 
u£æí
, *
¨g
), *
h¨g
);

116 
m•a˚_wÆk_‰ì_∑ges
(
m•a˚
 
m•
,

117 (*
h™dÀr
)(*
°¨t
, *
íd
, *
¨g
), *
h¨g
);

119 #ifde‡
__˝lu•lus


	@jni/include/cutils/native_handle.h

17 #i‚de‡
NATIVE_HANDLE_H_


18 
	#NATIVE_HANDLE_H_


	)

20 #ifde‡
__˝lu•lus


26 
vîsi⁄
;

27 
numFds
;

28 
numI¡s
;

29 
d©a
[0];

30 } 
	t«tive_h™dÀ_t
;

34 
«tive_h™dÀ_t
 
	t«tive_h™dÀ
;

44 
«tive_h™dÀ_˛o£
(c⁄° 
«tive_h™dÀ_t
* 
h
);

54 
«tive_h™dÀ_t
* 
«tive_h™dÀ_¸óã
(
numFds
, 
numI¡s
);

66 
«tive_h™dÀ_dñëe
(
«tive_h™dÀ_t
* 
h
);

69 #ifde‡
__˝lu•lus


	@jni/include/cutils/open_memstream.h

17 #i‚de‡
__CUTILS_OPEN_MEMSTREAM_H__


18 
	#__CUTILS_OPEN_MEMSTREAM_H__


	)

20 
	~<°dio.h
>

22 #i‚de‡
HAVE_OPEN_MEMSTREAM


24 #ifde‡
__˝lu•lus


28 
FILE
* 
›í_mem°ªam
(** 
buÂ
, 
size_t
* 
sizï
);

30 #ifde‡
__˝lu•lus


	@jni/include/cutils/process_name.h

21 #i‚de‡
__PROCESS_NAME_H


22 
	#__PROCESS_NAME_H


	)

24 #ifde‡
__˝lu•lus


33 
£t_¥o˚ss_«me
(c⁄° * 
¥o˚ss_«me
);

36 c⁄° * 
gë_¥o˚ss_«me
();

38 #ifde‡
__˝lu•lus


	@jni/include/cutils/properties.h

17 #i‚de‡
__CUTILS_PROPERTIES_H


18 
	#__CUTILS_PROPERTIES_H


	)

20 #ifde‡
__˝lu•lus


31 
	#PROPERTY_KEY_MAX
 32

	)

32 
	#PROPERTY_VALUE_MAX
 92

	)

41 
¥›îty_gë
(c⁄° *
key
, *
vÆue
, c⁄° *
deÁu…_vÆue
);

45 
¥›îty_£t
(c⁄° *
key
, c⁄° *
vÆue
);

47 
¥›îty_li°
((*
¥›‚
)(c⁄° *
key
, c⁄° *
vÆue
, *
cookõ
), *cookie);

50 #ifde‡
HAVE_SYSTEM_PROPERTY_SERVER


55 
	#SYSTEM_PROPERTY_PIPE_NAME
 "/tmp/™droid-sy•r›"

	)

58 
kSy°emPr›îtyUnknown
 = 0,

59 
kSy°emPr›îtyGë
,

60 
kSy°emPr›îtySë
,

61 
kSy°emPr›îtyLi°


66 #ifde‡
__˝lu•lus


	@jni/include/cutils/record_stream.h

21 #i‚de‡
_CUTILS_RECORD_STREAM_H


22 
	#_CUTILS_RECORD_STREAM_H


	)

24 #ifde‡
__˝lu•lus


29 
Rec‹dSåóm
 
	tRec‹dSåóm
;

31 
Rec‹dSåóm
 *
ªc‹d_°ªam_√w
(
fd
, 
size_t
 
maxRec‹dLí
);

32 
ªc‹d_°ªam_‰ì
(
Rec‹dSåóm
 *
p_rs
);

34 
ªc‹d_°ªam_gë_√xt
 (
Rec‹dSåóm
 *
p_rs
, ** 
p_outRec‹d
,

35 
size_t
 *
p_outRec‹dLí
);

37 #ifde‡
__˝lu•lus


	@jni/include/cutils/sched_policy.h

17 #i‚de‡
__CUTILS_SCHED_POLICY_H


18 
	#__CUTILS_SCHED_POLICY_H


	)

20 #ifde‡
__˝lu•lus


25 
SP_BACKGROUND
 = 0,

26 
SP_FOREGROUND
 = 1,

27 } 
	tSchedPﬁicy
;

29 
£t_sched_pﬁicy
(
tid
, 
SchedPﬁicy
 
pﬁicy
);

30 
gë_sched_pﬁicy
(
tid
, 
SchedPﬁicy
 *
pﬁicy
);

32 #ifde‡
__˝lu•lus


	@jni/include/cutils/selector.h

23 #i‚de‡
__SELECTOR_H


24 
	#__SELECTOR_H


	)

26 #ifde‡
__˝lu•lus


30 
	~<°dboﬁ.h
>

35 
Sñe˘‹
 
	tSñe˘‹
;

49 
Sñe˘abÀFd
 
	tSñe˘abÀFd
;

50 
	sSñe˘abÀFd
 {

53 
fd
;

56 * 
d©a
;

62 
boﬁ
 
ªmove
;

68 (*
bef‹eSñe˘
)(
Sñe˘abÀFd
* 
£lf
);

74 (*
⁄RódabÀ
)(
Sñe˘abÀFd
* 
£lf
);

80 (*
⁄WrôabÀ
)(
Sñe˘abÀFd
* 
£lf
);

86 (*
⁄Ex˚±
)(
Sñe˘abÀFd
* 
£lf
);

92 (*
⁄Remove
)(
Sñe˘abÀFd
* 
£lf
);

97 
Sñe˘‹
* 
£À˘‹
;

103 
Sñe˘‹
* 
£À˘‹Cª©e
();

112 
Sñe˘abÀFd
* 
£À˘‹Add
(
Sñe˘‹
* 
£À˘‹
, 
fd
);

118 
£À˘‹WakeUp
(
Sñe˘‹
* 
£À˘‹
);

124 
£À˘‹Lo›
(
Sñe˘‹
* 
£À˘‹
);

126 #ifde‡
__˝lu•lus


	@jni/include/cutils/sockets.h

17 #i‚de‡
__CUTILS_SOCKETS_H


18 
	#__CUTILS_SOCKETS_H


	)

20 
	~<î∫o.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

24 #ifde‡
HAVE_WINSOCK


25 
	~<wösock2.h
>

26 
	tsockÀn_t
;

27 #ñi‡
HAVE_SYS_SOCKET_H


28 
	~<sys/sockë.h
>

31 
	#ANDROID_SOCKET_ENV_PREFIX
 "ANDROID_SOCKET_"

	)

32 
	#ANDROID_SOCKET_DIR
 "/dev/sockë"

	)

34 #ifde‡
__˝lu•lus


46 
ölöe
 
™droid_gë_c⁄åﬁ_sockë
(c⁄° *
«me
)

48 
key
[64] = 
ANDROID_SOCKET_ENV_PREFIX
;

49 c⁄° *
vÆ
;

50 
fd
;

53 #i‡
HAVE_STRLCPY


54 
°æ˝y
(
key
 + (
ANDROID_SOCKET_ENV_PREFIX
) - 1,

55 
«me
,

56 (
key
Ë- (
ANDROID_SOCKET_ENV_PREFIX
));

58 
°∫˝y
(
key
 + (
ANDROID_SOCKET_ENV_PREFIX
) - 1,

59 
«me
,

60 (
key
Ë- (
ANDROID_SOCKET_ENV_PREFIX
));

61 
key
[(key)-1] = '\0';

64 
vÆ
 = 
gëív
(
key
);

65 i‡(!
vÆ
)

68 
î∫o
 = 0;

69 
fd
 = 
°πﬁ
(
vÆ
, 
NULL
, 10);

70 i‡(
î∫o
)

73  
fd
;

80 
	#ANDROID_SOCKET_NAMESPACE_ABSTRACT
 0

	)

82 
	#ANDROID_SOCKET_NAMESPACE_RESERVED
 1

	)

84 
	#ANDROID_SOCKET_NAMESPACE_FILESYSTEM
 2

	)

86 
sockë_lo›back_˛õ¡
(
p‹t
, 
ty≥
);

87 
sockë_√tw‹k_˛õ¡
(c⁄° *
ho°
, 
p‹t
, 
ty≥
);

88 
sockë_lo›back_£rvî
(
p‹t
, 
ty≥
);

89 
sockë_loˇl_£rvî
(c⁄° *
«me
, 
«me•a˚Id
, 
ty≥
);

90 
sockë_loˇl_£rvî_böd
(
s
, c⁄° *
«me
, 
«me•a˚Id
);

91 
sockë_loˇl_˛õ¡_c⁄√˘
(
fd
,

92 c⁄° *
«me
, 
«me•a˚Id
, 
ty≥
);

93 
sockë_loˇl_˛õ¡
(c⁄° *
«me
, 
«me•a˚Id
, 
ty≥
);

94 
sockë_öaddr_™y_£rvî
(
p‹t
, 
ty≥
);

96 #ifde‡
__˝lu•lus


	@jni/include/cutils/threads.h

17 #i‚de‡
_LIBS_CUTILS_THREADS_H


18 
	#_LIBS_CUTILS_THREADS_H


	)

20 #ifde‡
__˝lu•lus


32 #ifde‡
HAVE_PTHREADS


34 
	~<±hªad.h
>

37 
±hªad_muãx_t
 
lock
;

38 
has_és
;

39 
±hªad_key_t
 
és
;

41 } 
	tthªad_°‹e_t
;

43 
	#THREAD_STORE_INITIALIZER
 { 
PTHREAD_MUTEX_INITIALIZER
, 0, 0 }

	)

45 #ñi‡
deföed
 
HAVE_WIN32_THREADS


47 
	~<wödows.h
>

50 
lock_öô
;

51 
has_és
;

52 
DWORD
 
és
;

53 
CRITICAL_SECTION
 
lock
;

55 } 
	tthªad_°‹e_t
;

57 
	#THREAD_STORE_INITIALIZER
 { 0, 0, 0, {0, 0, 0, 0, 0, 0} }

	)

63 (*
thªad_°‹e_de°ru˘_t
)(* 
	tvÆue
);

65 * 
thªad_°‹e_gë
(
thªad_°‹e_t
* 
°‹e
);

67 
thªad_°‹e_£t
(
thªad_°‹e_t
* 
°‹e
,

68 * 
vÆue
,

69 
thªad_°‹e_de°ru˘_t
 
de°roy
);

79 #ifde‡
HAVE_PTHREADS


81 
±hªad_muãx_t
 
	tmuãx_t
;

83 
	#MUTEX_INITIALIZER
 
PTHREAD_MUTEX_INITIALIZER


	)

85 
__ölöe__
 
muãx_lock
(
muãx_t
* 
lock
)

87 
±hªad_muãx_lock
(
lock
);

89 
__ölöe__
 
muãx_u∆ock
(
muãx_t
* 
lock
)

91 
±hªad_muãx_u∆ock
(
lock
);

93 
__ölöe__
 
muãx_öô
(
muãx_t
* 
lock
)

95  
±hªad_muãx_öô
(
lock
, 
NULL
);

97 
__ölöe__
 
muãx_de°roy
(
muãx_t
* 
lock
)

99 
±hªad_muãx_de°roy
(
lock
);

103 #ifde‡
HAVE_WIN32_THREADS


105 
	göô
;

106 
CRITICAL_SECTION
 
	glock
[1];

107 } 
	tmuãx_t
;

109 
	#MUTEX_INITIALIZER
 { 0, {{ 
NULL
, 0, 0, NULL, NULL, 0 }} }

	)

111 
__ölöe__
 
muãx_lock
(
muãx_t
* 
lock
)

113 i‡(!
	glock
->
	göô
) {

114 
	glock
->
	göô
 = 1;

115 
InôülizeCrôiˇlSe˘i⁄
–
lock
->lock );

116 
	glock
->
	göô
 = 2;

117 } 
	glock
->
	göô
 != 2)

118 
SÀï
(10);

120 
E¡îCrôiˇlSe˘i⁄
(
lock
->lock);

123 
__ölöe__
 
muãx_u∆ock
(
muãx_t
* 
lock
)

125 
LóveCrôiˇlSe˘i⁄
(
lock
->lock);

127 
__ölöe__
 
muãx_öô
(
muãx_t
* 
lock
)

129 
InôülizeCrôiˇlSe˘i⁄
(
lock
->lock);

130 
	glock
->
	göô
 = 2;

133 
__ölöe__
 
muãx_de°roy
(
muãx_t
* 
lock
)

135 i‡(
	glock
->
	göô
) {

136 
	glock
->
	göô
 = 0;

137 
DñëeCrôiˇlSe˘i⁄
(
lock
->lock);

142 #ifde‡
__˝lu•lus


	@jni/include/cutils/tztime.h

17 #i‚de‡
_CUTILS_TZTIME_H


18 
	#_CUTILS_TZTIME_H


	)

20 
	~<time.h
>

22 #ifde‡
__˝lu•lus


26 
time_t
 
mktime_tz
(
tm
 * c⁄° 
tmp
, c⁄° * 
tz
);

27 
loˇ…ime_tz
(c⁄° 
time_t
 * c⁄° 
timï
, 
tm
 * 
tmp
, c⁄° * 
tz
);

29 #i‚de‡
HAVE_ANDROID_OS


32 
	s°r·ime_loˇÀ
 {

33 c⁄° *
m⁄
[12];

34 c⁄° *
m⁄th
[12];

35 c⁄° *
°™dÆ⁄e_m⁄th
[12];

36 c⁄° *
wday
[7];

37 c⁄° *
wìkday
[7];

38 c⁄° *
X_fmt
;

39 c⁄° *
x_fmt
;

40 c⁄° *
c_fmt
;

41 c⁄° *
am
;

42 c⁄° *
pm
;

43 c⁄° *
d©e_fmt
;

46 
size_t
 
°r·ime_tz
(*
s
, size_à
max
, c⁄° *
f‹m©
, c⁄° 
tm
 *tm, c⁄° 
°r·ime_loˇÀ
 *
loˇÀ
);

50 #ifde‡
__˝lu•lus


	@jni/include/cutils/uio.h

20 #i‚de‡
_LIBS_CUTILS_UIO_H


21 
	#_LIBS_CUTILS_UIO_H


	)

23 #ifde‡
HAVE_SYS_UIO_H


24 
	~<sys/uio.h
>

27 #ifde‡
__˝lu•lus


31 
	~<°ddef.h
>

33 
	siovec
 {

34 c⁄° * 
iov_ba£
;

35 
size_t
 
iov_Àn
;

38 
ªadv
–
fd
, 
iovec
* 
vecs
, 
cou¡
 );

39 
wrôev
–
fd
, c⁄° 
iovec
* 
vecs
, 
cou¡
 );

41 #ifde‡
__˝lu•lus


	@jni/include/cutils/zygote.h

17 #i‚de‡
__CUTILS_ZYGOTE_H


18 
	#__CUTILS_ZYGOTE_H


	)

20 #ifde‡
__˝lu•lus


24 
zygŸe_run_⁄eshŸ
(
£ndStdio
, 
¨gc
, c⁄° **
¨gv
);

25 
zygŸe_run
(
¨gc
, c⁄° **
¨gv
);

26 
zygŸe_run_waô
(
¨gc
, c⁄° **
¨gv
, (*
po°_run_func
)());

28 #ifde‡
__˝lu•lus


	@jni/include/gui/IGraphicBufferProducer.h

17 #i‚de‡
ANDROID_GUI_IGRAPHICBUFFERPRODUCER_H


18 
	#ANDROID_GUI_IGRAPHICBUFFERPRODUCER_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	~<utûs/Eº‹s.h
>

24 
	~<utûs/RefBa£.h
>

26 
	~<bödî/II¡îÁ˚.h
>

28 
	~<ui/Fí˚.h
>

29 
	~<ui/GøphicBuf„r.h
>

30 
	~<ui/Re˘.h
>

32 
«me•a˚
 
	g™droid
 {

35 
˛ass
 
	gSurÁ˚
;

51 ˛as†
	cIGøphicBuf„rProdu˚r
 : 
public
 
II¡îÁ˚


53 
public
:

54 
DECLARE_META_INTERFACE
(
GøphicBuf„rProdu˚r
);

57 
	gBUFFER_NEEDS_REALLOCATION
 = 0x1,

58 
	gRELEASE_ALL_BUFFERS
 = 0x2,

66 
vútuÆ
 
°©us_t
 
ªque°Buf„r
(
¶Ÿ
, 
•
<
GøphicBuf„r
>* 
buf
) = 0;

71 
vútuÆ
 
°©us_t
 
£tBuf„rCou¡
(
buf„rCou¡
) = 0;

87 
vútuÆ
 
°©us_t
 
dequeueBuf„r
(*
¶Ÿ
, 
•
<
Fí˚
>* 
„n˚
,

88 
uöt32_t
 
w
, uöt32_à
h
, uöt32_à
f‹m©
, uöt32_à
ußge
) = 0;

103 
	gQueueBuf„rI≈ut
 : 
public
 
FœâíabÀ
 {

104 
ölöe
 
QueueBuf„rI≈ut
(c⁄° 
P¨˚l
& 
∑r˚l
);

105 
ölöe
 
QueueBuf„rI≈ut
(
öt64_t
 
time°amp
,

106 c⁄° 
Re˘
& 
¸›
, 
sˇlögMode
, 
uöt32_t
 
å™sf‹m
,

107 
•
<
Fí˚
> 
„n˚
)

108 : 
time°amp
—ime°amp), 
¸›
(¸›), 
sˇlögMode
(scalingMode),

109 
å™sf‹m
—ønsf‹m), 
„n˚
(fence) { }

110 
ölöe
 
deÊ©e
(
öt64_t
* 
outTime°amp
, 
Re˘
* 
outCr›
,

111 * 
outSˇlögMode
, 
uöt32_t
* 
outTønsf‹m
,

112 
•
<
Fí˚
>* 
outFí˚
) const {

113 *
	goutTime°amp
 = 
time°amp
;

114 *
	goutCr›
 = 
¸›
;

115 *
	goutSˇlögMode
 = 
sˇlögMode
;

116 *
	goutTønsf‹m
 = 
å™sf‹m
;

117 *
	goutFí˚
 = 
„n˚
;

121 
vútuÆ
 
size_t
 
gëFœâíedSize
() const;

122 
vútuÆ
 
size_t
 
gëFdCou¡
() const;

123 
vútuÆ
 
°©us_t
 
Ê©ãn
(* 
buf„r
, 
size_t
 
size
,

124 
fds
[], 
size_t
 
cou¡
) const;

125 
vútuÆ
 
°©us_t
 
unÊ©ãn
(c⁄°* 
buf„r
, 
size_t
 
size
,

126 
fds
[], 
size_t
 
cou¡
);

128 
	g¥iv©e
:

129 
öt64_t
 
time°amp
;

130 
Re˘
 
	g¸›
;

131 
	gsˇlögMode
;

132 
uöt32_t
 
	gå™sf‹m
;

133 
	g•
<
	gFí˚
> 
	g„n˚
;

137 
	sQueueBuf„rOuçut
 {

138 
ölöe
 
QueueBuf„rOuçut
() { }

139 
ölöe
 
deÊ©e
(
uöt32_t
* 
outWidth
,

140 
uöt32_t
* 
outHeight
,

141 
uöt32_t
* 
outTønsf‹mHöt
,

142 
uöt32_t
* 
outNumPídögBuf„rs
) const {

143 *
	goutWidth
 = 
width
;

144 *
	goutHeight
 = 
height
;

145 *
	goutTønsf‹mHöt
 = 
å™sf‹mHöt
;

146 *
	goutNumPídögBuf„rs
 = 
numPídögBuf„rs
;

148 
ölöe
 
öÊ©e
(
uöt32_t
 
öWidth
, uöt32_à
öHeight
,

149 
uöt32_t
 
öTønsf‹mHöt
, uöt32_à
öNumPídögBuf„rs
) {

150 
	gwidth
 = 
öWidth
;

151 
	gheight
 = 
öHeight
;

152 
	gå™sf‹mHöt
 = 
öTønsf‹mHöt
;

153 
	gnumPídögBuf„rs
 = 
öNumPídögBuf„rs
;

155 
	g¥iv©e
:

156 
uöt32_t
 
width
;

157 
uöt32_t
 
	gheight
;

158 
uöt32_t
 
	gå™sf‹mHöt
;

159 
uöt32_t
 
	gnumPídögBuf„rs
;

162 
vútuÆ
 
°©us_t
 
queueBuf„r
(
¶Ÿ
,

163 c⁄° 
QueueBuf„rI≈ut
& 
öput
, 
QueueBuf„rOuçut
* 
ouçut
) = 0;

168 
vútuÆ
 
ˇn˚lBuf„r
(
¶Ÿ
, c⁄° 
•
<
Fí˚
>& 
„n˚
) = 0;

172 
vútuÆ
 
quîy
(
wh©
, * 
vÆue
) = 0;

179 
vútuÆ
 
°©us_t
 
£tSynchr⁄ousMode
(
boﬁ
 
íabÀd
) = 0;

191 
vútuÆ
 
°©us_t
 
c⁄√˘
(
≠i
, 
QueueBuf„rOuçut
* 
ouçut
) = 0;

201 
vútuÆ
 
°©us_t
 
disc⁄√˘
(
≠i
) = 0;

206 
˛ass
 
	gBnGøphicBuf„rProdu˚r
 : 
public
 
BnI¡îÁ˚
<
IGøphicBuf„rProdu˚r
>

208 
public
:

209 
vútuÆ
 
°©us_t
 
⁄Tønß˘
–
uöt32_t
 
code
,

210 c⁄° 
P¨˚l
& 
d©a
,

211 
P¨˚l
* 
ª∂y
,

212 
uöt32_t
 
Êags
 = 0);

	@jni/include/hardware/copybit.h

17 #i‚de‡
ANDROID_COPYBIT_INTERFACE_H


18 
	#ANDROID_COPYBIT_INTERFACE_H


	)

20 
	~<h¨dw¨e/h¨dw¨e.h
>

22 
	~<°döt.h
>

23 
	~<sys/cdefs.h
>

24 
	~<sys/ty≥s.h
>

26 
	g__BEGIN_DECLS


31 
	#COPYBIT_HARDWARE_MODULE_ID
 "c›ybô"

	)

36 
	#COPYBIT_HARDWARE_COPYBIT0
 "c›ybô0"

	)

42 
	mCOPYBIT_FORMAT_RGBA_8888
 = 
HAL_PIXEL_FORMAT_RGBA_8888
,

43 
	mCOPYBIT_FORMAT_RGBX_8888
 = 
HAL_PIXEL_FORMAT_RGBX_8888
,

44 
	mCOPYBIT_FORMAT_RGB_888
 = 
HAL_PIXEL_FORMAT_RGB_888
,

45 
	mCOPYBIT_FORMAT_RGB_565
 = 
HAL_PIXEL_FORMAT_RGB_565
,

46 
	mCOPYBIT_FORMAT_BGRA_8888
 = 
HAL_PIXEL_FORMAT_BGRA_8888
,

47 
	mCOPYBIT_FORMAT_RGBA_5551
 = 
HAL_PIXEL_FORMAT_RGBA_5551
,

48 
	mCOPYBIT_FORMAT_RGBA_4444
 = 
HAL_PIXEL_FORMAT_RGBA_4444
,

49 
	mCOPYBIT_FORMAT_YCbCr_422_SP
 = 
HAL_PIXEL_FORMAT_YCbCr_422_SP
,

50 
	mCOPYBIT_FORMAT_YCbCr_420_SP
 = 
HAL_PIXEL_FORMAT_YCbCr_420_SP
,

51 
	mCOPYBIT_FORMAT_YCrCb_422_SP
 = 
HAL_PIXEL_FORMAT_YCrCb_422_SP
,

52 
	mCOPYBIT_FORMAT_YCrCb_420_SP
 = 
HAL_PIXEL_FORMAT_YCrCb_420_SP
,

58 
	mCOPYBIT_ROTATION_DEG
 = 1,

60 
	mCOPYBIT_PLANE_ALPHA
 = 2,

62 
	mCOPYBIT_DITHER
 = 3,

64 
	mCOPYBIT_TRANSFORM
 = 4,

67 
	mCOPYBIT_BLUR
 = 5

73 
	mCOPYBIT_TRANSFORM_FLIP_H
 = 
HAL_TRANSFORM_FLIP_H
,

75 
	mCOPYBIT_TRANSFORM_FLIP_V
 = 
HAL_TRANSFORM_FLIP_V
,

77 
	mCOPYBIT_TRANSFORM_ROT_90
 = 
HAL_TRANSFORM_ROT_90
,

79 
	mCOPYBIT_TRANSFORM_ROT_180
 = 
HAL_TRANSFORM_ROT_180
,

81 
	mCOPYBIT_TRANSFORM_ROT_270
 = 
HAL_TRANSFORM_ROT_270
,

86 
	mCOPYBIT_DISABLE
 = 0,

87 
	mCOPYBIT_ENABLE
 = 1

93 
	mCOPYBIT_MINIFICATION_LIMIT
 = 1,

95 
	mCOPYBIT_MAGNIFICATION_LIMIT
 = 2,

97 
	mCOPYBIT_SCALING_FRAC_BITS
 = 3,

99 
	mCOPYBIT_ROTATION_STEP_DEG
 = 4,

103 
	sc›ybô_image_t
 {

105 
uöt32_t
 
	mw
;

107 
uöt32_t
 
	mh
;

109 
öt32_t
 
	mf‹m©
;

111 *
	mba£
;

113 
«tive_h™dÀ_t
* 
	mh™dÀ
;

117 
	sc›ybô_ª˘_t
 {

119 
	ml
;

121 
	mt
;

123 
	mr
;

125 
	mb
;

129 
	sc›ybô_ªgi⁄_t
 {

130 (*
	m√xt
)(
c›ybô_ªgi⁄_t
 c⁄° *
	mªgi⁄
, 
c›ybô_ª˘_t
 *
	mª˘
);

138 
	sc›ybô_moduÀ_t
 {

139 
hw_moduÀ_t
 
	mcomm⁄
;

146 
	sc›ybô_devi˚_t
 {

147 
hw_devi˚_t
 
	mcomm⁄
;

158 (*
	m£t_∑ømëî
)(
c›ybô_devi˚_t
 *
	mdev
, 
	m«me
, 
	mvÆue
);

168 (*
	mgë
)(
c›ybô_devi˚_t
 *
	mdev
, 
	m«me
);

180 (*
	mblô
)(
c›ybô_devi˚_t
 *
	mdev
,

181 
c›ybô_image_t
 c⁄° *
	md°
,

182 
c›ybô_image_t
 c⁄° *
	m§c
,

183 
c›ybô_ªgi⁄_t
 c⁄° *
	mªgi⁄
);

197 (*
	m°ªtch
)(
c›ybô_devi˚_t
 *
	mdev
,

198 
c›ybô_image_t
 c⁄° *
	md°
,

199 
c›ybô_image_t
 c⁄° *
	m§c
,

200 
c›ybô_ª˘_t
 c⁄° *
	md°_ª˘
,

201 
c›ybô_ª˘_t
 c⁄° *
	m§c_ª˘
,

202 
c›ybô_ªgi⁄_t
 c⁄° *
	mªgi⁄
);

208 
ölöe
 
	$c›ybô_›í
(c⁄° 
hw_moduÀ_t
* 
moduÀ
,

209 
c›ybô_devi˚_t
** 
devi˚
) {

210  
moduÀ
->
mëhods
->
	`›í
(module,

211 
COPYBIT_HARDWARE_COPYBIT0
, (
hw_devi˚_t
**)
devi˚
);

212 
	}
}

214 
ölöe
 
	$c›ybô_˛o£
(
c›ybô_devi˚_t
* 
devi˚
) {

215  
devi˚
->
comm⁄
.
	`˛o£
(&device->common);

216 
	}
}

219 
	g__END_DECLS


	@jni/include/hardware/gps.h

17 #i‚de‡
ANDROID_INCLUDE_HARDWARE_GPS_H


18 
	#ANDROID_INCLUDE_HARDWARE_GPS_H


	)

20 
	~<°döt.h
>

21 
	~<sys/cdefs.h
>

22 
	~<sys/ty≥s.h
>

24 
	~<h¨dw¨e/h¨dw¨e.h
>

26 
	g__BEGIN_DECLS


31 
	#GPS_HARDWARE_MODULE_ID
 "gps"

	)

35 
öt64_t
 
	tGpsUtcTime
;

38 
	#GPS_MAX_SVS
 32

	)

41 
uöt32_t
 
	tGpsPosôi⁄Mode
;

45 
	#GPS_POSITION_MODE_STANDALONE
 0

	)

47 
	#GPS_POSITION_MODE_MS_BASED
 1

	)

49 
	#GPS_POSITION_MODE_MS_ASSISTED
 2

	)

52 
uöt16_t
 
	tGpsSètusVÆue
;

56 
	#GPS_STATUS_NONE
 0

	)

58 
	#GPS_STATUS_SESSION_BEGIN
 1

	)

60 
	#GPS_STATUS_SESSION_END
 2

	)

62 
	#GPS_STATUS_ENGINE_ON
 3

	)

64 
	#GPS_STATUS_ENGINE_OFF
 4

	)

67 
uöt16_t
 
	tGpsLoˇti⁄Fœgs
;

71 
	#GPS_LOCATION_HAS_LAT_LONG
 0x0001

	)

73 
	#GPS_LOCATION_HAS_ALTITUDE
 0x0002

	)

75 
	#GPS_LOCATION_HAS_SPEED
 0x0004

	)

77 
	#GPS_LOCATION_HAS_BEARING
 0x0008

	)

79 
	#GPS_LOCATION_HAS_ACCURACY
 0x0010

	)

83 
uöt16_t
 
	tGpsAidögD©a
;

86 
	#GPS_DELETE_EPHEMERIS
 0x0001

	)

87 
	#GPS_DELETE_ALMANAC
 0x0002

	)

88 
	#GPS_DELETE_POSITION
 0x0004

	)

89 
	#GPS_DELETE_TIME
 0x0008

	)

90 
	#GPS_DELETE_IONO
 0x0010

	)

91 
	#GPS_DELETE_UTC
 0x0020

	)

92 
	#GPS_DELETE_HEALTH
 0x0040

	)

93 
	#GPS_DELETE_SVDIR
 0x0080

	)

94 
	#GPS_DELETE_SVSTEER
 0x0100

	)

95 
	#GPS_DELETE_SADATA
 0x0200

	)

96 
	#GPS_DELETE_RTI
 0x0400

	)

97 
	#GPS_DELETE_CELLDB_INFO
 0x8000

	)

98 
	#GPS_DELETE_ALL
 0xFFFF

	)

101 
uöt16_t
 
	tAGpsTy≥
;

102 
	#AGPS_TYPE_SUPL
 1

	)

103 
	#AGPS_TYPE_C2K
 2

	)

108 
	#GPS_NI_SHORT_STRING_MAXLEN
 256

	)

109 
	#GPS_NI_LONG_STRING_MAXLEN
 2048

	)

114 
uöt32_t
 
	tGpsNiTy≥
;

115 
	#GPS_NI_TYPE_VOICE
 1

	)

116 
	#GPS_NI_TYPE_UMTS_SUPL
 2

	)

117 
	#GPS_NI_TYPE_UMTS_CTRL_PLANE
 3

	)

122 
uöt32_t
 
	tGpsNiNŸifyFœgs
;

124 
	#GPS_NI_NEED_NOTIFY
 0x0001

	)

126 
	#GPS_NI_NEED_VERIFY
 0x0002

	)

128 
	#GPS_NI_PRIVACY_OVERRIDE
 0x0004

	)

134 
	tGpsU£rRe•⁄£Ty≥
;

135 
	#GPS_NI_RESPONSE_ACCEPT
 1

	)

136 
	#GPS_NI_RESPONSE_DENY
 2

	)

137 
	#GPS_NI_RESPONSE_NORESP
 3

	)

142 
	tGpsNiEncodögTy≥
;

143 
	#GPS_ENC_NONE
 0

	)

144 
	#GPS_ENC_SUPL_GSM_DEFAULT
 1

	)

145 
	#GPS_ENC_SUPL_UTF8
 2

	)

146 
	#GPS_ENC_SUPL_UCS2
 3

	)

147 
	#GPS_ENC_UNKNOWN
 -1

	)

150 
uöt16_t
 
	tAGpsSètusVÆue
;

152 
	#GPS_REQUEST_AGPS_DATA_CONN
 1

	)

154 
	#GPS_RELEASE_AGPS_DATA_CONN
 2

	)

156 
	#GPS_AGPS_DATA_CONNECTED
 3

	)

158 
	#GPS_AGPS_DATA_CONN_DONE
 4

	)

160 
	#GPS_AGPS_DATA_CONN_FAILED
 5

	)

165 
	#GPS_XTRA_INTERFACE
 "gps-xåa"

	)

170 
	#GPS_DEBUG_INTERFACE
 "gps-debug"

	)

175 
	#AGPS_INTERFACE
 "agps"

	)

180 
	#GPS_NI_INTERFACE
 "gps-ni"

	)

185 
size_t
 
	msize
;

187 
uöt16_t
 
	mÊags
;

189 
	mœtôude
;

191 
	ml⁄gôude
;

194 
	mÆtôude
;

196 
	m•ìd
;

198 
	mbórög
;

200 
	maccuøcy
;

202 
GpsUtcTime
 
	mtime°amp
;

203 } 
	tGpsLoˇti⁄
;

208 
size_t
 
	msize
;

209 
GpsSètusVÆue
 
	m°©us
;

210 } 
	tGpsSètus
;

215 
size_t
 
	msize
;

217 
	m¥n
;

219 
	m¢r
;

221 
	mñev©i⁄
;

223 
	mazimuth
;

224 } 
	tGpsSvInfo
;

229 
size_t
 
	msize
;

232 
	mnum_svs
;

235 
GpsSvInfo
 
	msv_li°
[
GPS_MAX_SVS
];

240 
uöt32_t
 
	mïhemîis_mask
;

245 
uöt32_t
 
	mÆm™ac_mask
;

251 
uöt32_t
 
	mu£d_ö_fix_mask
;

252 } 
	tGpsSvSètus
;

255 (* 
	tgps_loˇti⁄_ˇŒback
)(
	tGpsLoˇti⁄
* 
	tloˇti⁄
);

258 (* 
	tgps_°©us_ˇŒback
)(
	tGpsSètus
* 
	t°©us
);

261 (* 
	tgps_sv_°©us_ˇŒback
)(
	tGpsSvSètus
* 
	tsv_öfo
);

264 (* 
	tgps_nmó_ˇŒback
)(
	tGpsUtcTime
 
	ttime°amp
, c⁄° * 
	tnmó
, 
	tÀngth
);

268 
gps_loˇti⁄_ˇŒback
 
loˇti⁄_cb
;

269 
gps_°©us_ˇŒback
 
°©us_cb
;

270 
gps_sv_°©us_ˇŒback
 
sv_°©us_cb
;

271 
gps_nmó_ˇŒback
 
nmó_cb
;

272 } 
	tGpsCÆlbacks
;

278 
size_t
 
size
;

283 (*
öô
)–
GpsCÆlbacks
* 
ˇŒbacks
 );

286 (*
°¨t
)( );

289 (*
°›
)( );

292 (*
˛ónup
)( );

295 (*
öje˘_time
)(
GpsUtcTime
 
time
, 
öt64_t
 
timeRe„ªn˚
,

296 
un˚πaöty
);

303 (*
öje˘_loˇti⁄
)(
œtôude
, 
l⁄gôude
, 
accuøcy
);

310 (*
dñëe_aidög_d©a
)(
GpsAidögD©a
 
Êags
);

316 (*
£t_posôi⁄_mode
)(
GpsPosôi⁄Mode
 
mode
, 
fix_‰equícy
);

319 c⁄° * (*
gë_exãnsi⁄
)(c⁄° * 
«me
);

320 } 
	tGpsI¡îÁ˚
;

325 (* 
	tgps_xåa_dow∆ﬂd_ªque°
)();

329 
gps_xåa_dow∆ﬂd_ªque°
 
dow∆ﬂd_ªque°_cb
;

330 } 
	tGpsXåaCÆlbacks
;

335 
size_t
 
size
;

340 (*
öô
)–
GpsXåaCÆlbacks
* 
ˇŒbacks
 );

342 (*
öje˘_xåa_d©a
)–* 
d©a
, 
Àngth
 );

343 } 
	tGpsXåaI¡îÁ˚
;

348 
size_t
 
size
;

354 
	`size_t
 (*
gë_öã∫Æ_°©e
)(* 
buf„r
, 
size_t
 
buf„rSize
);

355 } 
	tGpsDebugI¡îÁ˚
;

360 
size_t
 
size
;

362 
AGpsTy≥
 
ty≥
;

363 
AGpsSètusVÆue
 
°©us
;

364 } 
	tAGpsSètus
;

367 (* 
	tagps_°©us_ˇŒback
)(
	tAGpsSètus
* 
	t°©us
);

371 
agps_°©us_ˇŒback
 
°©us_cb
;

372 } 
	tAGpsCÆlbacks
;

378 
size_t
 
size
;

384 (*
öô
)–
AGpsCÆlbacks
* 
ˇŒbacks
 );

389 (*
d©a_c⁄n_›í
)–c⁄° * 
≠n
 );

393 (*
d©a_c⁄n_˛o£d
)();

397 (*
d©a_c⁄n_Áûed
)();

401 (*
£t_£rvî
)–
AGpsTy≥
 
ty≥
, c⁄° * 
ho°«me
, 
p‹t
 );

402 } 
	tAGpsI¡îÁ˚
;

408 
size_t
 
size
;

414 
nŸifiˇti⁄_id
;

420 
GpsNiTy≥
 
ni_ty≥
;

425 
GpsNiNŸifyFœgs
 
nŸify_Êags
;

431 
timeout
;

436 
GpsU£rRe•⁄£Ty≥
 
deÁu…_ª•⁄£
;

441 
ªque°‹_id
[
GPS_NI_SHORT_STRING_MAXLEN
];

446 
ãxt
[
GPS_NI_LONG_STRING_MAXLEN
];

451 
GpsNiEncodögTy≥
 
ªque°‹_id_ícodög
;

456 
GpsNiEncodögTy≥
 
ãxt_ícodög
;

463 
exåas
[
GPS_NI_LONG_STRING_MAXLEN
];

465 } 
	tGpsNiNŸifiˇti⁄
;

468 (*
	tgps_ni_nŸify_ˇŒback
)(
	tGpsNiNŸifiˇti⁄
 *
	tnŸifiˇti⁄
);

476 
gps_ni_nŸify_ˇŒback
 
nŸify_cb
;

477 } 
	tGpsNiCÆlbacks
;

485 
size_t
 
size
;

488 (*
öô
Ë(
GpsNiCÆlbacks
 *
ˇŒbacks
);

491 (*
ª•⁄d
Ë(
nŸif_id
, 
GpsU£rRe•⁄£Ty≥
 
u£r_ª•⁄£
);

492 } 
	tGpsNiI¡îÁ˚
;

494 
	sgps_devi˚_t
 {

495 
hw_devi˚_t
 
comm⁄
;

502 c⁄° 
GpsI¡îÁ˚
* (*
gë_gps_öãrÁ˚
)(
gps_devi˚_t
* 
dev
);

505 
__END_DECLS


	@jni/include/hardware/gralloc.h

18 #i‚de‡
ANDROID_GRALLOC_INTERFACE_H


19 
	#ANDROID_GRALLOC_INTERFACE_H


	)

21 
	~<cutûs/«tive_h™dÀ.h
>

23 
	~<h¨dw¨e/h¨dw¨e.h
>

25 
	~<°döt.h
>

26 
	~<sys/cdefs.h
>

27 
	~<sys/ty≥s.h
>

29 
	g__BEGIN_DECLS


34 
	#GRALLOC_HARDWARE_MODULE_ID
 "gøŒoc"

	)

40 
	#GRALLOC_HARDWARE_FB0
 "fb0"

	)

41 
	#GRALLOC_HARDWARE_GPU0
 "gpu0"

	)

45 
	mGRALLOC_USAGE_SW_READ_NEVER
 = 0x00000000,

47 
	mGRALLOC_USAGE_SW_READ_RARELY
 = 0x00000002,

49 
	mGRALLOC_USAGE_SW_READ_OFTEN
 = 0x00000003,

51 
	mGRALLOC_USAGE_SW_READ_MASK
 = 0x0000000F,

54 
	mGRALLOC_USAGE_SW_WRITE_NEVER
 = 0x00000000,

56 
	mGRALLOC_USAGE_SW_WRITE_RARELY
 = 0x00000020,

58 
	mGRALLOC_USAGE_SW_WRITE_OFTEN
 = 0x00000030,

60 
	mGRALLOC_USAGE_SW_WRITE_MASK
 = 0x000000F0,

63 
	mGRALLOC_USAGE_HW_TEXTURE
 = 0x00000100,

65 
	mGRALLOC_USAGE_HW_RENDER
 = 0x00000200,

67 
	mGRALLOC_USAGE_HW_2D
 = 0x00000C00,

69 
	mGRALLOC_USAGE_HW_FB
 = 0x00001000,

71 
	mGRALLOC_USAGE_HW_MASK
 = 0x00001F00,

76 c⁄° 
	t«tive_h™dÀ
* 
	tbuf„r_h™dÀ_t
;

83 
	mGRALLOC_MODULE_PERFORM_CREATE_HANDLE_FROM_BUFFER
 = 0x080000001,

91 
	sgøŒoc_moduÀ_t
 {

92 
hw_moduÀ_t
 
	mcomm⁄
;

109 (*
	mªgi°îBuf„r
)(
gøŒoc_moduÀ_t
 c⁄°* 
	mmoduÀ
,

110 
buf„r_h™dÀ_t
 
	mh™dÀ
);

124 (*
	muƒegi°îBuf„r
)(
gøŒoc_moduÀ_t
 c⁄°* 
	mmoduÀ
,

125 
buf„r_h™dÀ_t
 
	mh™dÀ
);

158 (*
	mlock
)(
gøŒoc_moduÀ_t
 c⁄°* 
	mmoduÀ
,

159 
buf„r_h™dÀ_t
 
	mh™dÀ
, 
	mußge
,

160 
	ml
, 
	mt
, 
	mw
, 
	mh
,

161 ** 
	mvaddr
);

169 (*
	mu∆ock
)(
gøŒoc_moduÀ_t
 c⁄°* 
	mmoduÀ
,

170 
buf„r_h™dÀ_t
 
	mh™dÀ
);

174 (*
	m≥rf‹m
)(
gøŒoc_moduÀ_t
 c⁄°* 
	mmoduÀ
,

175 
	m›î©i⁄
, ... );

178 * 
	mª£rved_¥oc
[7];

179 } 
	tgøŒoc_moduÀ_t
;

188 
	sÆloc_devi˚_t
 {

189 
hw_devi˚_t
 
	mcomm⁄
;

201 (*
	mÆloc
)(
Æloc_devi˚_t
* 
	mdev
,

202 
	mw
, 
	mh
, 
	mf‹m©
, 
	mußge
,

203 
buf„r_h™dÀ_t
* 
	mh™dÀ
, * 
	m°ride
);

215 (*
	m‰ì
)(
Æloc_devi˚_t
* 
	mdev
,

216 
buf„r_h™dÀ_t
 
	mh™dÀ
);

218 } 
	tÆloc_devi˚_t
;

221 
	s‰amebuf„r_devi˚_t
 {

222 
hw_devi˚_t
 
	mcomm⁄
;

225 c⁄° 
uöt32_t
 
	mÊags
;

228 c⁄° 
uöt32_t
 
	mwidth
;

229 c⁄° 
uöt32_t
 
	mheight
;

232 c⁄° 
	m°ride
;

235 c⁄° 
	mf‹m©
;

238 c⁄° 
	mxdpi
;

239 c⁄° 
	mydpi
;

242 c⁄° 
	mÂs
;

245 c⁄° 
	mmöSw≠I¡îvÆ
;

248 c⁄° 
	mmaxSw≠I¡îvÆ
;

250 
	mª£rved
[8];

257 (*
	m£tSw≠I¡îvÆ
)(
‰amebuf„r_devi˚_t
* 
	mwödow
,

258 
	möãrvÆ
);

280 (*
	m£tUpd©eRe˘
)(
‰amebuf„r_devi˚_t
* 
	mwödow
,

281 
	mÀ·
, 
	mt›
, 
	mwidth
, 
	mheight
);

302 (*
	mpo°
)(
‰amebuf„r_devi˚_t
* 
	mdev
, 
buf„r_h™dÀ_t
 
	mbuf„r
);

310 (*
	mcomposôi⁄Com∂ëe
)(
‰amebuf„r_devi˚_t
* 
	mdev
);

313 * 
	mª£rved_¥oc
[8];

315 } 
	t‰amebuf„r_devi˚_t
;

320 
ölöe
 
	$gøŒoc_›í
(c⁄° 
hw_moduÀ_t
* 
moduÀ
,

321 
Æloc_devi˚_t
** 
devi˚
) {

322  
moduÀ
->
mëhods
->
	`›í
(module,

323 
GRALLOC_HARDWARE_GPU0
, (
hw_devi˚_t
**)
devi˚
);

324 
	}
}

326 
ölöe
 
	$gøŒoc_˛o£
(
Æloc_devi˚_t
* 
devi˚
) {

327  
devi˚
->
comm⁄
.
	`˛o£
(&device->common);

328 
	}
}

331 
ölöe
 
	$‰amebuf„r_›í
(c⁄° 
hw_moduÀ_t
* 
moduÀ
,

332 
‰amebuf„r_devi˚_t
** 
devi˚
) {

333  
moduÀ
->
mëhods
->
	`›í
(module,

334 
GRALLOC_HARDWARE_FB0
, (
hw_devi˚_t
**)
devi˚
);

335 
	}
}

337 
ölöe
 
	$‰amebuf„r_˛o£
(
‰amebuf„r_devi˚_t
* 
devi˚
) {

338  
devi˚
->
comm⁄
.
	`˛o£
(&device->common);

339 
	}
}

342 
	g__END_DECLS


	@jni/include/hardware/hardware.h

17 #i‚de‡
ANDROID_INCLUDE_HARDWARE_HARDWARE_H


18 
	#ANDROID_INCLUDE_HARDWARE_HARDWARE_H


	)

20 
	~<°döt.h
>

21 
	~<sys/cdefs.h
>

23 
	~<cutûs/«tive_h™dÀ.h
>

25 
	g__BEGIN_DECLS


31 
	#MAKE_TAG_CONSTANT
(
A
,
B
,
C
,
D
Ë(((AË<< 24Ë| ((BË<< 16Ë| ((CË<< 8Ë| (D))

	)

33 
	#HARDWARE_MODULE_TAG
 
	`MAKE_TAG_CONSTANT
('H', 'W', 'M', 'T')

	)

34 
	#HARDWARE_DEVICE_TAG
 
	`MAKE_TAG_CONSTANT
('H', 'W', 'D', 'T')

	)

36 
	ghw_moduÀ_t
;

37 
	ghw_moduÀ_mëhods_t
;

38 
	ghw_devi˚_t
;

45 
	shw_moduÀ_t
 {

47 
uöt32_t
 
	mèg
;

50 
uöt16_t
 
	mvîsi⁄_maj‹
;

53 
uöt16_t
 
	mvîsi⁄_mö‹
;

56 c⁄° *
	mid
;

59 c⁄° *
	m«me
;

62 c⁄° *
	mauth‹
;

65 
hw_moduÀ_mëhods_t
* 
	mmëhods
;

68 * 
	mdso
;

71 
uöt32_t
 
	mª£rved
[32-7];

73 } 
	thw_moduÀ_t
;

75 
	shw_moduÀ_mëhods_t
 {

77 (*
	m›í
)(c⁄° 
hw_moduÀ_t
* 
	mmoduÀ
, c⁄° * 
	mid
,

78 
hw_devi˚_t
** 
	mdevi˚
);

80 } 
	thw_moduÀ_mëhods_t
;

86 
	shw_devi˚_t
 {

88 
uöt32_t
 
	mèg
;

91 
uöt32_t
 
	mvîsi⁄
;

94 
hw_moduÀ_t
* 
	mmoduÀ
;

97 
uöt32_t
 
	mª£rved
[12];

100 (*
	m˛o£
)(
hw_devi˚_t
* 
	mdevi˚
);

102 } 
	thw_devi˚_t
;

107 
	#HAL_MODULE_INFO_SYM
 
HMI


	)

112 
	#HAL_MODULE_INFO_SYM_AS_STR
 "HMI"

	)

118 
hw_gë_moduÀ
(c⁄° *
id
, c⁄° 
hw_moduÀ_t
 **
moduÀ
);

126 
	mHAL_PIXEL_FORMAT_RGBA_8888
 = 1,

127 
	mHAL_PIXEL_FORMAT_RGBX_8888
 = 2,

128 
	mHAL_PIXEL_FORMAT_RGB_888
 = 3,

129 
	mHAL_PIXEL_FORMAT_RGB_565
 = 4,

130 
	mHAL_PIXEL_FORMAT_BGRA_8888
 = 5,

131 
	mHAL_PIXEL_FORMAT_RGBA_5551
 = 6,

132 
	mHAL_PIXEL_FORMAT_RGBA_4444
 = 7,

133 
	mHAL_PIXEL_FORMAT_YCbCr_422_SP
 = 0x10,

134 
	mHAL_PIXEL_FORMAT_YCrCb_420_SP
 = 0x11,

135 
	mHAL_PIXEL_FORMAT_YCbCr_422_P
 = 0x12,

136 
	mHAL_PIXEL_FORMAT_YCbCr_420_P
 = 0x13,

137 
	mHAL_PIXEL_FORMAT_YCbCr_422_I
 = 0x14,

138 
	mHAL_PIXEL_FORMAT_YCbCr_420_I
 = 0x15,

139 
	mHAL_PIXEL_FORMAT_CbYCrY_422_I
 = 0x16,

140 
	mHAL_PIXEL_FORMAT_CbYCrY_420_I
 = 0x17,

141 
	mHAL_PIXEL_FORMAT_YCbCr_420_SP_TILED
 = 0x20,

142 
	mHAL_PIXEL_FORMAT_YCbCr_420_SP
 = 0x21,

143 
	mHAL_PIXEL_FORMAT_YCrCb_420_SP_TILED
 = 0x22,

144 
	mHAL_PIXEL_FORMAT_YCrCb_422_SP
 = 0x23,

154 
	mHAL_TRANSFORM_FLIP_H
 = 0x01,

156 
	mHAL_TRANSFORM_FLIP_V
 = 0x02,

158 
	mHAL_TRANSFORM_ROT_90
 = 0x04,

160 
	mHAL_TRANSFORM_ROT_180
 = 0x03,

162 
	mHAL_TRANSFORM_ROT_270
 = 0x07,

165 
	g__END_DECLS


	@jni/include/hardware/lights.h

17 #i‚de‡
ANDROID_LIGHTS_INTERFACE_H


18 
	#ANDROID_LIGHTS_INTERFACE_H


	)

20 
	~<°döt.h
>

21 
	~<sys/cdefs.h
>

22 
	~<sys/ty≥s.h
>

24 
	~<h¨dw¨e/h¨dw¨e.h
>

26 
	g__BEGIN_DECLS


31 
	#LIGHTS_HARDWARE_MODULE_ID
 "lights"

	)

39 
	#LIGHT_ID_BACKLIGHT
 "backlight"

	)

40 
	#LIGHT_ID_KEYBOARD
 "keybﬂrd"

	)

41 
	#LIGHT_ID_BUTTONS
 "buâ⁄s"

	)

42 
	#LIGHT_ID_BATTERY
 "b©ãry"

	)

43 
	#LIGHT_ID_NOTIFICATIONS
 "nŸifiˇti⁄s"

	)

44 
	#LIGHT_ID_ATTENTION
 "©ã¡i⁄"

	)

51 
	#LIGHT_ID_BLUETOOTH
 "bluëoŸh"

	)

52 
	#LIGHT_ID_WIFI
 "wifi"

	)

58 
	#LIGHT_FLASH_NONE
 0

	)

66 
	#LIGHT_FLASH_TIMED
 1

	)

72 
	#LIGHT_FLASH_HARDWARE
 2

	)

77 
	#BRIGHTNESS_MODE_USER
 0

	)

82 
	#BRIGHTNESS_MODE_SENSOR
 1

	)

90 
	slight_°©e_t
 {

105 
	mcﬁ‹
;

110 
	mÊashMode
;

111 
	mÊashOnMS
;

112 
	mÊashOffMS
;

118 
	mbrighäessMode
;

121 
	slight_devi˚_t
 {

122 
hw_devi˚_t
 
	mcomm⁄
;

129 (*
	m£t_light
)(
light_devi˚_t
* 
	mdev
,

130 
light_°©e_t
 c⁄°* 
	m°©e
);

134 
	g__END_DECLS


	@jni/include/hardware/overlay.h

17 #i‚de‡
ANDROID_OVERLAY_INTERFACE_H


18 
	#ANDROID_OVERLAY_INTERFACE_H


	)

20 
	~<cutûs/«tive_h™dÀ.h
>

22 
	~<h¨dw¨e/h¨dw¨e.h
>

24 
	~<°döt.h
>

25 
	~<sys/cdefs.h
>

26 
	~<sys/ty≥s.h
>

28 
	g__BEGIN_DECLS


33 
	#OVERLAY_HARDWARE_MODULE_ID
 "ovîœy"

	)

38 
	#OVERLAY_HARDWARE_CONTROL
 "c⁄åﬁ"

	)

39 
	#OVERLAY_HARDWARE_DATA
 "d©a"

	)

45 
	mOVERLAY_FORMAT_RGBA_8888
 = 
HAL_PIXEL_FORMAT_RGBA_8888
,

46 
	mOVERLAY_FORMAT_RGB_565
 = 
HAL_PIXEL_FORMAT_RGB_565
,

47 
	mOVERLAY_FORMAT_BGRA_8888
 = 
HAL_PIXEL_FORMAT_BGRA_8888
,

48 
	mOVERLAY_FORMAT_YCbCr_422_SP
 = 
HAL_PIXEL_FORMAT_YCbCr_422_SP
,

49 
	mOVERLAY_FORMAT_YCbCr_420_SP
 = 
HAL_PIXEL_FORMAT_YCbCr_420_SP
,

50 
	mOVERLAY_FORMAT_YCbYCr_422_I
 = 
HAL_PIXEL_FORMAT_YCbCr_422_I
,

51 
	mOVERLAY_FORMAT_YCbYCr_420_I
 = 
HAL_PIXEL_FORMAT_YCbCr_420_I
,

52 
	mOVERLAY_FORMAT_CbYCrY_422_I
 = 
HAL_PIXEL_FORMAT_CbYCrY_422_I
,

53 
	mOVERLAY_FORMAT_CbYCrY_420_I
 = 
HAL_PIXEL_FORMAT_CbYCrY_420_I
,

54 
	mOVERLAY_FORMAT_DEFAULT
 = 99

61 
	mOVERLAY_TRANSFORM_FLIP_H
 = 
HAL_TRANSFORM_FLIP_V
,

63 
	mOVERLAY_TRANSFORM_FLIP_V
 = 
HAL_TRANSFORM_FLIP_H
,

65 
	mOVERLAY_TRANSFORM_ROT_90
 = 
HAL_TRANSFORM_ROT_90
,

67 
	mOVERLAY_TRANSFORM_ROT_180
 = 
HAL_TRANSFORM_ROT_180
,

69 
	mOVERLAY_TRANSFORM_ROT_270
 = 
HAL_TRANSFORM_ROT_270


75 
	mOVERLAY_ROTATION_DEG
 = 1,

77 
	mOVERLAY_DITHER
 = 3,

79 
	mOVERLAY_TRANSFORM
 = 4,

84 
	mOVERLAY_DISABLE
 = 0,

85 
	mOVERLAY_ENABLE
 = 1

91 
	mOVERLAY_MINIFICATION_LIMIT
 = 1,

93 
	mOVERLAY_MAGNIFICATION_LIMIT
 = 2,

95 
	mOVERLAY_SCALING_FRAC_BITS
 = 3,

97 
	mOVERLAY_ROTATION_STEP_DEG
 = 4,

99 
	mOVERLAY_HORIZONTAL_ALIGNMENT
 = 5,

101 
	mOVERLAY_VERTICAL_ALIGNMENT
 = 6,

103 
	mOVERLAY_WIDTH_ALIGNMENT
 = 7,

105 
	mOVERLAY_HEIGHT_ALIGNMENT
 = 8,

111 c⁄° 
	t«tive_h™dÀ
* 
	tovîœy_h™dÀ_t
;

113 
	sovîœy_t
 {

114 
uöt32_t
 
	mw
;

115 
uöt32_t
 
	mh
;

116 
öt32_t
 
	mf‹m©
;

117 
uöt32_t
 
	mw_°ride
;

118 
uöt32_t
 
	mh_°ride
;

119 
uöt32_t
 
	mª£rved
[3];

122 
ovîœy_h™dÀ_t
 (*
gëH™dÀRef
)(
ovîœy_t
* 
	movîœy
);

123 
uöt32_t
 
	mª£rved_¥ocs
[7];

124 } 
	tovîœy_t
;

126 * 
	tovîœy_buf„r_t
;

135 
	sovîœy_moduÀ_t
 {

136 
hw_moduÀ_t
 
	mcomm⁄
;

146 
	sovîœy_c⁄åﬁ_devi˚_t
 {

147 
hw_devi˚_t
 
	mcomm⁄
;

150 (*
	mgë
)(
ovîœy_c⁄åﬁ_devi˚_t
 *
	mdev
, 
	m«me
);

155 
	movîœy_t
* (*
	m¸óãOvîœy
)(
ovîœy_c⁄åﬁ_devi˚_t
 *
	mdev
,

156 
uöt32_t
 
	mw
, uöt32_à
	mh
, 
öt32_t
 
	mf‹m©
);

160 (*
	mde°royOvîœy
)(
ovîœy_c⁄åﬁ_devi˚_t
 *
	mdev
,

161 
ovîœy_t
* 
	movîœy
);

165 (*
	m£tPosôi⁄
)(
ovîœy_c⁄åﬁ_devi˚_t
 *
	mdev
,

166 
ovîœy_t
* 
	movîœy
,

167 
	mx
, 
	my
, 
uöt32_t
 
	mw
, uöt32_à
	mh
);

170 (*
	mgëPosôi⁄
)(
ovîœy_c⁄åﬁ_devi˚_t
 *
	mdev
,

171 
ovîœy_t
* 
	movîœy
,

172 * 
	mx
, * 
	my
, 
uöt32_t
* 
	mw
, uöt32_t* 
	mh
);

176 (*
	m£tP¨amëî
)(
ovîœy_c⁄åﬁ_devi˚_t
 *
	mdev
,

177 
ovîœy_t
* 
	movîœy
, 
	m∑øm
, 
	mvÆue
);

179 (*
	m°age
)(
ovîœy_c⁄åﬁ_devi˚_t
 *
	mdev
, 
ovîœy_t
* 
	movîœy
);

180 (*
	mcommô
)(
ovîœy_c⁄åﬁ_devi˚_t
 *
	mdev
, 
ovîœy_t
* 
	movîœy
);

184 
	sovîœy_d©a_devi˚_t
 {

185 
hw_devi˚_t
 
	mcomm⁄
;

189 (*
	möôülize
)(
ovîœy_d©a_devi˚_t
 *
	mdev
,

190 
ovîœy_h™dÀ_t
 
	mh™dÀ
);

193 (*
	mªsizeI≈ut
)(
ovîœy_d©a_devi˚_t
 *
	mdev
,

194 
uöt32_t
 
	mw
, uöt32_à
	mh
);

196 (*
	m£tCr›
)(
ovîœy_d©a_devi˚_t
 *
	mdev
,

197 
uöt32_t
 
	mx
, uöt32_à
	my
, uöt32_à
	mw
, uöt32_à
	mh
) ;

199 (*
	mgëCr›
)(
ovîœy_d©a_devi˚_t
 *
	mdev
,

200 
uöt32_t
* 
	mx
, uöt32_t* 
	my
, uöt32_t* 
	mw
, uöt32_t* 
	mh
) ;

202 (*
	m£tP¨amëî
)(
ovîœy_d©a_devi˚_t
 *
	mdev
,

203 
	m∑øm
, 
	mvÆue
);

206 (*
	mdequeueBuf„r
)(
ovîœy_d©a_devi˚_t
 *
	mdev
,

207 
ovîœy_buf„r_t
 *
	mbuf
);

210 (*
	mqueueBuf„r
)(
ovîœy_d©a_devi˚_t
 *
	mdev
,

211 
ovîœy_buf„r_t
 
	mbuf„r
);

214 * (*
	mgëBuf„rAddªss
)(
ovîœy_d©a_devi˚_t
 *
	mdev
,

215 
ovîœy_buf„r_t
 
	mbuf„r
);

217 (*
	mgëBuf„rCou¡
)(
ovîœy_d©a_devi˚_t
 *
	mdev
);

225 
ölöe
 
	$ovîœy_c⁄åﬁ_›í
(c⁄° 
hw_moduÀ_t
* 
moduÀ
,

226 
ovîœy_c⁄åﬁ_devi˚_t
** 
devi˚
) {

227  
moduÀ
->
mëhods
->
	`›í
(module,

228 
OVERLAY_HARDWARE_CONTROL
, (
hw_devi˚_t
**)
devi˚
);

229 
	}
}

231 
ölöe
 
	$ovîœy_c⁄åﬁ_˛o£
(
ovîœy_c⁄åﬁ_devi˚_t
* 
devi˚
) {

232  
devi˚
->
comm⁄
.
	`˛o£
(&device->common);

233 
	}
}

235 
ölöe
 
	$ovîœy_d©a_›í
(c⁄° 
hw_moduÀ_t
* 
moduÀ
,

236 
ovîœy_d©a_devi˚_t
** 
devi˚
) {

237  
moduÀ
->
mëhods
->
	`›í
(module,

238 
OVERLAY_HARDWARE_DATA
, (
hw_devi˚_t
**)
devi˚
);

239 
	}
}

241 
ölöe
 
	$ovîœy_d©a_˛o£
(
ovîœy_d©a_devi˚_t
* 
devi˚
) {

242  
devi˚
->
comm⁄
.
	`˛o£
(&device->common);

243 
	}
}

245 
	g__END_DECLS


	@jni/include/hardware/qemud.h

17 #i‚de‡
ANDROID_INCLUDE_HARDWARE_QEMUD_H


18 
	#ANDROID_INCLUDE_HARDWARE_QEMUD_H


	)

20 
	~<cutûs/sockës.h
>

37 #i‚de‡
D


38 
	#D
(...Ë(()0)

	)

41 
__ölöe__
 

42 
	$qemud_fd_wrôe
(
fd
, c⁄° * 
buff
, 
Àn
)

44 
Àn2
;

46 
Àn2
 = 
	`wrôe
(
fd
, 
buff
, 
Àn
);

47 } 
Àn2
 < 0 && 
î∫o
 =
EINTR
);

48  
Àn2
;

49 
	}
}

51 
__ölöe__
 

52 
	$qemud_fd_ªad
(
fd
, * 
buff
, 
Àn
)

54 
Àn2
;

56 
Àn2
 = 
	`ªad
(
fd
, 
buff
, 
Àn
);

57 } 
Àn2
 < 0 && 
î∫o
 =
EINTR
);

58  
Àn2
;

59 
	}
}

61 
__ölöe__
 

62 
	$qemud_ch™√l_›í
(c⁄° * 
«me
)

64 
fd
;

65 
«mñí
 = 
	`°æí
(
«me
);

66 
™swî
[2];

69 
fd
 = 
	`sockë_loˇl_˛õ¡
( "qemud",

70 
ANDROID_SOCKET_NAMESPACE_RESERVED
,

71 
SOCK_STREAM
 );

72 i‡(
fd
 < 0) {

73 
	`D
("nÿqemud c⁄åﬁ sockë: %s", 
	`°ªº‹
(
î∫o
));

78 i‡(
	`qemud_fd_wrôe
(
fd
, 
«me
, 
«mñí
) !=Çamelen) {

79 
	`D
("can't send serviceÇameÅo qemud: %s",

80 
	`°ªº‹
(
î∫o
));

81 
	`˛o£
(
fd
);

86 i‡(
	`qemud_fd_ªad
(
fd
, 
™swî
, 2) != 2 ||

87 
™swî
[0] != 'O' ||ánswer[1] != 'K') {

88 
	`D
("ˇ¡' c⁄√˘Åÿ%†£rvi˚Åhrough qemud", 
«me
);

89 
	`˛o£
(
fd
);

92  
fd
;

93 
	}
}

95 
__ölöe__
 

96 
	$qemud_ch™√l_£nd
(
fd
, c⁄° * 
msg
, 
msgÀn
)

98 
hódî
[5];

100 i‡(
msgÀn
 < 0)

101 
msgÀn
 = 
	`°æí
((c⁄° *)
msg
);

103 i‡(
msgÀn
 == 0)

106 
	`¢¥ötf
(
hódî
,  hódî, "%04x", 
msgÀn
);

107 i‡(
	`qemud_fd_wrôe
(
fd
, 
hódî
, 4) != 4) {

108 
	`D
("ˇn'àwrôêqemud fømêhódî: %s", 
	`°ªº‹
(
î∫o
));

112 i‡(
	`qemud_fd_wrôe
(
fd
, 
msg
, 
msgÀn
) != msglen) {

113 
	`D
("ˇn4àwrôêqemud fømê∑ylﬂd: %s", 
	`°ªº‹
(
î∫o
));

117 
	}
}

119 
__ölöe__
 

120 
	$qemud_ch™√l_ªcv
(
fd
, * 
msg
, 
msgsize
)

122 
hódî
[5];

123 
size
, 
avaû
;

125 i‡(
	`qemud_fd_ªad
(
fd
, 
hódî
, 4) != 4) {

126 
	`D
("ˇn'àªad qemud fømêhódî: %s", 
	`°ªº‹
(
î∫o
));

129 
hódî
[4] = 0;

130 i‡(
	`ssˇnf
(
hódî
, "%04x", &
size
) != 1) {

131 
	`D
("mÆf‹med qemud fømêhódî: '%.*s'", 4, 
hódî
);

134 i‡(
size
 > 
msgsize
)

137 i‡(
	`qemud_fd_ªad
(
fd
, 
msg
, 
size
) != size) {

138 
	`D
("ˇn'àªad qemud fømê∑ylﬂd: %s", 
	`°ªº‹
(
î∫o
));

141  
size
;

142 
	}
}

	@jni/include/hardware/sensors.h

17 #i‚de‡
ANDROID_SENSORS_INTERFACE_H


18 
	#ANDROID_SENSORS_INTERFACE_H


	)

20 
	~<°döt.h
>

21 
	~<sys/cdefs.h
>

22 
	~<sys/ty≥s.h
>

24 
	~<h¨dw¨e/h¨dw¨e.h
>

25 
	~<cutûs/«tive_h™dÀ.h
>

27 
	g__BEGIN_DECLS


32 
	#SENSORS_HARDWARE_MODULE_ID
 "£ns‹s"

	)

37 
	#SENSORS_HARDWARE_CONTROL
 "c⁄åﬁ"

	)

38 
	#SENSORS_HARDWARE_DATA
 "d©a"

	)

46 
	#SENSORS_HANDLE_BASE
 0

	)

47 
	#SENSORS_HANDLE_BITS
 8

	)

48 
	#SENSORS_HANDLE_COUNT
 (1<<
SENSORS_HANDLE_BITS
)

	)

54 
	#SENSOR_TYPE_ACCELEROMETER
 1

	)

55 
	#SENSOR_TYPE_MAGNETIC_FIELD
 2

	)

56 
	#SENSOR_TYPE_ORIENTATION
 3

	)

57 
	#SENSOR_TYPE_GYROSCOPE
 4

	)

58 
	#SENSOR_TYPE_LIGHT
 5

	)

59 
	#SENSOR_TYPE_PRESSURE
 6

	)

60 
	#SENSOR_TYPE_TEMPERATURE
 7

	)

61 
	#SENSOR_TYPE_PROXIMITY
 8

	)

68 
	#GRAVITY_SUN
 (275.0f)

	)

69 
	#GRAVITY_MERCURY
 (3.70f)

	)

70 
	#GRAVITY_VENUS
 (8.87f)

	)

71 
	#GRAVITY_EARTH
 (9.80665f)

	)

72 
	#GRAVITY_MOON
 (1.6f)

	)

73 
	#GRAVITY_MARS
 (3.71f)

	)

74 
	#GRAVITY_JUPITER
 (23.12f)

	)

75 
	#GRAVITY_SATURN
 (8.96f)

	)

76 
	#GRAVITY_URANUS
 (8.69f)

	)

77 
	#GRAVITY_NEPTUNE
 (11.0f)

	)

78 
	#GRAVITY_PLUTO
 (0.6f)

	)

79 
	#GRAVITY_DEATH_STAR_I
 (0.000000353036145f)

	)

80 
	#GRAVITY_THE_ISLAND
 (4.815162342f)

	)

83 
	#MAGNETIC_FIELD_EARTH_MAX
 (60.0f)

	)

86 
	#MAGNETIC_FIELD_EARTH_MIN
 (30.0f)

	)

93 
	#SENSOR_STATUS_UNRELIABLE
 0

	)

94 
	#SENSOR_STATUS_ACCURACY_LOW
 1

	)

95 
	#SENSOR_STATUS_ACCURACY_MEDIUM
 2

	)

96 
	#SENSOR_STATUS_ACCURACY_HIGH
 3

	)

208 
	mv
[3];

210 
	mx
;

211 
	my
;

212 
	mz
;

215 
	mazimuth
;

216 
	mpôch
;

217 
	mrﬁl
;

220 
öt8_t
 
	m°©us
;

221 
uöt8_t
 
	mª£rved
[3];

222 } 
	t£ns‹s_vec_t
;

230 
	m£ns‹
;

234 
£ns‹s_vec_t
 
	mve˘‹
;

237 
£ns‹s_vec_t
 
	m‹õ¡©i⁄
;

240 
£ns‹s_vec_t
 
	mac˚Àøti⁄
;

243 
£ns‹s_vec_t
 
	mmag√tic
;

246 
	mãm≥øtuª
;

249 
	mdi°™˚
;

252 
	mlight
;

256 
öt64_t
 
	mtime
;

258 
uöt32_t
 
	mª£rved
;

259 } 
	t£ns‹s_d©a_t
;

262 
	g£ns‹_t
;

269 
	s£ns‹s_moduÀ_t
 {

270 
hw_moduÀ_t
 
	mcomm⁄
;

276 (*
	mgë_£ns‹s_li°
)(
£ns‹s_moduÀ_t
* 
	mmoduÀ
,

277 
£ns‹_t
 c⁄°** 
	mli°
);

280 
	s£ns‹_t
 {

282 c⁄° * 
	m«me
;

284 c⁄° * 
	mvíd‹
;

289 
	mvîsi⁄
;

294 
	mh™dÀ
;

296 
	mty≥
;

298 
	mmaxR™ge
;

300 
	mªsﬁuti⁄
;

302 
	mpowî
;

304 * 
	mª£rved
[9];

312 
	s£ns‹s_c⁄åﬁ_devi˚_t
 {

313 
hw_devi˚_t
 
	mcomm⁄
;

323 
	m«tive_h™dÀ_t
* (*
	m›í_d©a_sour˚
)(
£ns‹s_c⁄åﬁ_devi˚_t
 *
	mdev
);

332 (*
	m˛o£_d©a_sour˚
)(
£ns‹s_c⁄åﬁ_devi˚_t
 *
	mdev
);

341 (*
	ma˘iv©e
)(
£ns‹s_c⁄åﬁ_devi˚_t
 *
	mdev
,

342 
	mh™dÀ
, 
	míabÀd
);

349 (*
	m£t_dñay
)(
£ns‹s_c⁄åﬁ_devi˚_t
 *
	mdev
, 
öt32_t
 
	mms
);

354 (*
	mwake
)(
£ns‹s_c⁄åﬁ_devi˚_t
 *
	mdev
);

357 
	s£ns‹s_d©a_devi˚_t
 {

358 
hw_devi˚_t
 
	mcomm⁄
;

371 (*
	md©a_›í
)(
£ns‹s_d©a_devi˚_t
 *
	mdev
, 
«tive_h™dÀ_t
* 
	mnh
);

380 (*
	md©a_˛o£
)(
£ns‹s_d©a_devi˚_t
 *
	mdev
);

389 (*
	mpﬁl
)(
£ns‹s_d©a_devi˚_t
 *
	mdev
,

390 
£ns‹s_d©a_t
* 
	md©a
);

396 
ölöe
 
	$£ns‹s_c⁄åﬁ_›í
(c⁄° 
hw_moduÀ_t
* 
moduÀ
,

397 
£ns‹s_c⁄åﬁ_devi˚_t
** 
devi˚
) {

398  
moduÀ
->
mëhods
->
	`›í
(module,

399 
SENSORS_HARDWARE_CONTROL
, (
hw_devi˚_t
**)
devi˚
);

400 
	}
}

402 
ölöe
 
	$£ns‹s_c⁄åﬁ_˛o£
(
£ns‹s_c⁄åﬁ_devi˚_t
* 
devi˚
) {

403  
devi˚
->
comm⁄
.
	`˛o£
(&device->common);

404 
	}
}

406 
ölöe
 
	$£ns‹s_d©a_›í
(c⁄° 
hw_moduÀ_t
* 
moduÀ
,

407 
£ns‹s_d©a_devi˚_t
** 
devi˚
) {

408  
moduÀ
->
mëhods
->
	`›í
(module,

409 
SENSORS_HARDWARE_DATA
, (
hw_devi˚_t
**)
devi˚
);

410 
	}
}

412 
ölöe
 
	$£ns‹s_d©a_˛o£
(
£ns‹s_d©a_devi˚_t
* 
devi˚
) {

413  
devi˚
->
comm⁄
.
	`˛o£
(&device->common);

414 
	}
}

417 
	g__END_DECLS


	@jni/include/hardware_legacy/AudioHardwareBase.h

17 #i‚de‡
ANDROID_AUDIO_HARDWARE_BASE_H


18 
	#ANDROID_AUDIO_HARDWARE_BASE_H


	)

20 
	~"h¨dw¨e_Àgacy/AudioH¨dw¨eI¡îÁ˚.h
"

23 
«me•a˚
 
	g™droid
 {

31 ˛as†
	cAudioH¨dw¨eBa£
 : 
public
 
AudioH¨dw¨eI¡îÁ˚


33 
public
:

34 
AudioH¨dw¨eBa£
();

35 
	gvútuÆ
 ~
AudioH¨dw¨eBa£
() { }

42 
vútuÆ
 
°©us_t
 
£tMode
(
mode
);

44 
vútuÆ
 
°©us_t
 
£tP¨amëîs
(c⁄° 
Såög8
& 
keyVÆuePaús
);

45 
vútuÆ
 
Såög8
 
gëP¨amëîs
(c⁄° Såög8& 
keys
);

47 
vútuÆ
 
size_t
 
gëI≈utBuf„rSize
(
uöt32_t
 
ßm∂eR©e
, 
f‹m©
, 
ch™√lCou¡
);

50 
vútuÆ
 
°©us_t
 
dumpSèã
(
fd
, c⁄° 
Ve˘‹
<
Såög16
>& 
¨gs
);

52 
	g¥Ÿe˘ed
:

53 
mMode
;

	@jni/include/hardware_legacy/AudioHardwareInterface.h

17 #i‚de‡
ANDROID_AUDIO_HARDWARE_INTERFACE_H


18 
	#ANDROID_AUDIO_HARDWARE_INTERFACE_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	~<utûs/Eº‹s.h
>

24 
	~<utûs/Ve˘‹.h
>

25 
	~<utûs/Såög16.h
>

26 
	~<utûs/Såög8.h
>

28 
	~<medü/IAudioFlögî.h
>

29 
	~"medü/AudioSy°em.h
"

32 
«me•a˚
 
	g™droid
 {

41 ˛as†
	cAudioSåómOut
 {

42 
	gpublic
:

43 
vútuÆ
 ~
AudioSåómOut
() = 0;

46 
vútuÆ
 
uöt32_t
 
ßm∂eR©e
() const = 0;

49 
vútuÆ
 
size_t
 
buf„rSize
() const = 0;

54 
vútuÆ
 
uöt32_t
 
ch™√ls
() const = 0;

60 
vútuÆ
 
f‹m©
() const = 0;

65 
uöt32_t
 
‰ameSize
(Ëc⁄° {  
	gAudioSy°em
::
p›Cou¡
(
ch™√ls
())*((
f‹m©
()==
AudioSy°em
::
PCM_16_BIT
)?(
öt16_t
):(
öt8_t
)); }

70 
vútuÆ
 
uöt32_t
 
œãncy
() const = 0;

79 
vútuÆ
 
°©us_t
 
£tVﬁume
(
À·
, 
right
) = 0;

82 
vútuÆ
 
ssize_t
 
wrôe
(c⁄° * 
buf„r
, 
size_t
 
byãs
) = 0;

88 
vútuÆ
 
°©us_t
 
°™dby
() = 0;

91 
vútuÆ
 
°©us_t
 
dump
(
fd
, c⁄° 
Ve˘‹
<
Såög16
>& 
¨gs
) = 0;

99 
vútuÆ
 
°©us_t
 
£tP¨amëîs
(c⁄° 
Såög8
& 
keyVÆuePaús
) = 0;

100 
vútuÆ
 
Såög8
 
gëP¨amëîs
(c⁄° Såög8& 
keys
) = 0;

104 
vútuÆ
 
°©us_t
 
gëRídîPosôi⁄
(
uöt32_t
 *
d•Fømes
) = 0;

112 ˛as†
	cAudioSåómIn
 {

113 
	gpublic
:

114 
vútuÆ
 ~
AudioSåómIn
() = 0;

117 
vútuÆ
 
uöt32_t
 
ßm∂eR©e
() const = 0;

120 
vútuÆ
 
size_t
 
buf„rSize
() const = 0;

123 
vútuÆ
 
uöt32_t
 
ch™√ls
() const = 0;

129 
vútuÆ
 
f‹m©
() const = 0;

134 
uöt32_t
 
‰ameSize
(Ëc⁄° {  
	gAudioSy°em
::
p›Cou¡
(
ch™√ls
())*((
f‹m©
()==
AudioSy°em
::
PCM_16_BIT
)?(
öt16_t
):(
öt8_t
)); }

138 
vútuÆ
 
°©us_t
 
£tGaö
(
gaö
) = 0;

141 
vútuÆ
 
ssize_t
 
ªad
(* 
buf„r
, ssize_à
byãs
) = 0;

144 
vútuÆ
 
°©us_t
 
dump
(
fd
, c⁄° 
Ve˘‹
<
Såög16
>& 
¨gs
) = 0;

150 
vútuÆ
 
°©us_t
 
°™dby
() = 0;

158 
vútuÆ
 
°©us_t
 
£tP¨amëîs
(c⁄° 
Såög8
& 
keyVÆuePaús
) = 0;

159 
vútuÆ
 
Såög8
 
gëP¨amëîs
(c⁄° Såög8& 
keys
) = 0;

166 
vútuÆ
 
gëI≈utFømesLo°
() const = 0;

182 ˛as†
	cAudioH¨dw¨eI¡îÁ˚


184 
	gpublic
:

185 
vútuÆ
 ~
AudioH¨dw¨eI¡îÁ˚
() {}

191 
vútuÆ
 
°©us_t
 
öôCheck
() = 0;

194 
vútuÆ
 
°©us_t
 
£tVoi˚Vﬁume
(
vﬁume
) = 0;

201 
vútuÆ
 
°©us_t
 
£tMa°îVﬁume
(
vﬁume
) = 0;

208 
vútuÆ
 
°©us_t
 
£tMode
(
mode
) = 0;

211 
vútuÆ
 
°©us_t
 
£tMicMuã
(
boﬁ
 
°©e
) = 0;

212 
vútuÆ
 
°©us_t
 
gëMicMuã
(
boﬁ
* 
°©e
) = 0;

215 
vútuÆ
 
°©us_t
 
£tP¨amëîs
(c⁄° 
Såög8
& 
keyVÆuePaús
) = 0;

216 
vútuÆ
 
Såög8
 
gëP¨amëîs
(c⁄° Såög8& 
keys
) = 0;

220 
vútuÆ
 
size_t
 
gëI≈utBuf„rSize
(
uöt32_t
 
ßm∂eR©e
, 
f‹m©
, 
ch™√lCou¡
) = 0;

223 
vútuÆ
 
AudioSåómOut
* 
›íOuçutSåóm
(

224 
uöt32_t
 
devi˚s
,

225 *
f‹m©
=0,

226 
uöt32_t
 *
ch™√ls
=0,

227 
uöt32_t
 *
ßm∂eR©e
=0,

228 
°©us_t
 *
°©us
=0) = 0;

229 
vútuÆ
 
˛o£OuçutSåóm
(
AudioSåómOut
* 
out
) = 0;

231 
vútuÆ
 
AudioSåómIn
* 
›íI≈utSåóm
(

232 
uöt32_t
 
devi˚s
,

233 *
f‹m©
,

234 
uöt32_t
 *
ch™√ls
,

235 
uöt32_t
 *
ßm∂eR©e
,

236 
°©us_t
 *
°©us
,

237 
AudioSy°em
::
audio_ö_acou°ics
 
acou°ics
) = 0;

238 
vútuÆ
 
˛o£I≈utSåóm
(
AudioSåómIn
* 
ö
) = 0;

241 
vútuÆ
 
°©us_t
 
dumpSèã
(
fd
, c⁄° 
Ve˘‹
<
Såög16
>& 
¨gs
) = 0;

243 
AudioH¨dw¨eI¡îÁ˚
* 
¸óã
();

245 
	g¥Ÿe˘ed
:

247 
vútuÆ
 
°©us_t
 
dump
(
fd
, c⁄° 
Ve˘‹
<
Såög16
>& 
¨gs
) = 0;

252 "C" 
AudioH¨dw¨eI¡îÁ˚
* 
¸óãAudioH¨dw¨e
();

	@jni/include/hardware_legacy/AudioPolicyInterface.h

17 #i‚de‡
ANDROID_AUDIOPOLICYINTERFACE_H


18 
	#ANDROID_AUDIOPOLICYINTERFACE_H


	)

20 
	~<medü/AudioSy°em.h
>

21 
	~<medü/T⁄eGíî©‹.h
>

22 
	~<utûs/Såög8.h
>

24 
«me•a˚
 
	g™droid
 {

55 ˛as†
	cAudioPﬁicyI¡îÁ˚


58 
	gpublic
:

59 
vútuÆ
 ~
AudioPﬁicyI¡îÁ˚
() {}

65 
vútuÆ
 
°©us_t
 
£tDevi˚C⁄√˘i⁄Sèã
(
AudioSy°em
::
audio_devi˚s
 
devi˚
,

66 
AudioSy°em
::
devi˚_c⁄√˘i⁄_°©e
 
°©e
,

67 c⁄° *
devi˚_addªss
) = 0;

69 
vútuÆ
 
	gAudioSy°em
::
devi˚_c⁄√˘i⁄_°©e
 
gëDevi˚C⁄√˘i⁄Sèã
(
AudioSy°em
::
audio_devi˚s
 
devi˚
,

70 c⁄° *
devi˚_addªss
) = 0;

72 
vútuÆ
 
£tPh⁄eSèã
(
°©e
) = 0;

74 
vútuÆ
 
£tRögîMode
(
uöt32_t
 
mode
, uöt32_à
mask
) = 0;

76 
vútuÆ
 
£tF‹˚U£
(
AudioSy°em
::
f‹˚_u£
 
ußge
, AudioSy°em::
f‹˚d_c⁄fig
 
c⁄fig
) = 0;

78 
vútuÆ
 
	gAudioSy°em
::
f‹˚d_c⁄fig
 
gëF‹˚U£
(
AudioSy°em
::
f‹˚_u£
 
ußge
) = 0;

80 
vútuÆ
 
£tSy°emPr›îty
(c⁄° * 
¥›îty
, c⁄° * 
vÆue
) = 0;

88 
vútuÆ
 
audio_io_h™dÀ_t
 
gëOuçut
(
AudioSy°em
::
°ªam_ty≥
 
°ªam
,

89 
uöt32_t
 
ßm∂ögR©e
 = 0,

90 
uöt32_t
 
f‹m©
 = 
AudioSy°em
::
FORMAT_DEFAULT
,

91 
uöt32_t
 
ch™√ls
 = 0,

92 
AudioSy°em
::
ouçut_Êags
 
Êags
 = AudioSy°em::
OUTPUT_FLAG_INDIRECT
) = 0;

94 
vútuÆ
 
°©us_t
 
°¨tOuçut
(
audio_io_h™dÀ_t
 
ouçut
, 
AudioSy°em
::
°ªam_ty≥
 
°ªam
) = 0;

96 
vútuÆ
 
°©us_t
 
°›Ouçut
(
audio_io_h™dÀ_t
 
ouçut
, 
AudioSy°em
::
°ªam_ty≥
 
°ªam
) = 0;

98 
vútuÆ
 
ªÀa£Ouçut
(
audio_io_h™dÀ_t
 
ouçut
) = 0;

101 
vútuÆ
 
audio_io_h™dÀ_t
 
gëI≈ut
(
öputSour˚
,

102 
uöt32_t
 
ßm∂ögR©e
 = 0,

103 
uöt32_t
 
F‹m©
 = 
AudioSy°em
::
FORMAT_DEFAULT
,

104 
uöt32_t
 
ch™√ls
 = 0,

105 
AudioSy°em
::
audio_ö_acou°ics
 
acou°ics
 = (AudioSystem::audio_in_acoustics)0) = 0;

107 
vútuÆ
 
°©us_t
 
°¨tI≈ut
(
audio_io_h™dÀ_t
 
öput
) = 0;

109 
vútuÆ
 
°©us_t
 
°›I≈ut
(
audio_io_h™dÀ_t
 
öput
) = 0;

111 
vútuÆ
 
ªÀa£I≈ut
(
audio_io_h™dÀ_t
 
öput
) = 0;

118 
vútuÆ
 
öôSåómVﬁume
(
AudioSy°em
::
°ªam_ty≥
 
°ªam
,

119 
ödexMö
,

120 
ödexMax
) = 0;

123 
vútuÆ
 
°©us_t
 
£tSåómVﬁumeIndex
(
AudioSy°em
::
°ªam_ty≥
 
°ªam
, 
ödex
) = 0;

125 
vútuÆ
 
°©us_t
 
gëSåómVﬁumeIndex
(
AudioSy°em
::
°ªam_ty≥
 
°ªam
, *
ödex
) = 0;

128 
vútuÆ
 
°©us_t
 
dump
(
fd
) = 0;

133 ˛as†
	cAudioPﬁicyClõ¡I¡îÁ˚


135 
	gpublic
:

136 
vútuÆ
 ~
AudioPﬁicyClõ¡I¡îÁ˚
() {}

146 
vútuÆ
 
audio_io_h™dÀ_t
 
›íOuçut
(
uöt32_t
 *
pDevi˚s
,

147 
uöt32_t
 *
pSam∂ögR©e
,

148 
uöt32_t
 *
pF‹m©
,

149 
uöt32_t
 *
pCh™√ls
,

150 
uöt32_t
 *
pL©ícyMs
,

151 
AudioSy°em
::
ouçut_Êags
 
Êags
) = 0;

154 
vútuÆ
 
audio_io_h™dÀ_t
 
›íDu∂iˇãOuçut
◊udio_io_h™dÀ_à
ouçut1
,áudio_io_h™dÀ_à
ouçut2
) = 0;

156 
vútuÆ
 
°©us_t
 
˛o£Ouçut
(
audio_io_h™dÀ_t
 
ouçut
) = 0;

159 
vútuÆ
 
°©us_t
 
su•ídOuçut
(
audio_io_h™dÀ_t
 
ouçut
) = 0;

161 
vútuÆ
 
°©us_t
 
ª°‹eOuçut
(
audio_io_h™dÀ_t
 
ouçut
) = 0;

168 
vútuÆ
 
audio_io_h™dÀ_t
 
›íI≈ut
(
uöt32_t
 *
pDevi˚s
,

169 
uöt32_t
 *
pSam∂ögR©e
,

170 
uöt32_t
 *
pF‹m©
,

171 
uöt32_t
 *
pCh™√ls
,

172 
uöt32_t
 
acou°ics
) = 0;

174 
vútuÆ
 
°©us_t
 
˛o£I≈ut
(
audio_io_h™dÀ_t
 
öput
) = 0;

181 
vútuÆ
 
°©us_t
 
£tSåómVﬁume
(
AudioSy°em
::
°ªam_ty≥
 
°ªam
, 
vﬁume
, 
audio_io_h™dÀ_t
 
ouçut
, 
dñayMs
 = 0) = 0;

184 
vútuÆ
 
°©us_t
 
£tSåómOuçut
(
AudioSy°em
::
°ªam_ty≥
 
°ªam
, 
audio_io_h™dÀ_t
 
ouçut
) = 0;

187 
vútuÆ
 
£tP¨amëîs
(
audio_io_h™dÀ_t
 
ioH™dÀ
, c⁄° 
Såög8
& 
keyVÆuePaús
, 
dñayMs
 = 0) = 0;

189 
vútuÆ
 
Såög8
 
gëP¨amëîs
(
audio_io_h™dÀ_t
 
ioH™dÀ
, c⁄° Såög8& 
keys
) = 0;

193 
vútuÆ
 
°©us_t
 
°¨tT⁄e
(
T⁄eGíî©‹
::
t⁄e_ty≥
 
t⁄e
, 
AudioSy°em
::
°ªam_ty≥
 
°ªam
) = 0;

194 
vútuÆ
 
°©us_t
 
°›T⁄e
() = 0;

197 
vútuÆ
 
°©us_t
 
£tVoi˚Vﬁume
(
vﬁume
, 
dñayMs
 = 0) = 0;

200 "C" 
AudioPﬁicyI¡îÁ˚
* 
¸óãAudioPﬁicyM™agî
(
AudioPﬁicyClõ¡I¡îÁ˚
 *
˛õ¡I¡îÁ˚
);

201 "C" 
de°royAudioPﬁicyM™agî
(
AudioPﬁicyI¡îÁ˚
 *
öãrÁ˚
);

	@jni/include/hardware_legacy/AudioPolicyManagerBase.h

18 
	~<°döt.h
>

19 
	~<sys/ty≥s.h
>

20 
	~<utûs/Timîs.h
>

21 
	~<utûs/Eº‹s.h
>

22 
	~<utûs/KeyedVe˘‹.h
>

23 
	~<h¨dw¨e_Àgacy/AudioPﬁicyI¡îÁ˚.h
>

26 
«me•a˚
 
	g™droid
 {

30 
	#MAX_DEVICE_ADDRESS_LEN
 20

	)

32 
	#SONIFICATION_HEADSET_VOLUME_FACTOR
 0.5

	)

34 
	#SONIFICATION_HEADSET_VOLUME_MIN
 0.016

	)

37 
	#SONIFICATION_HEADSET_MUSIC_DELAY
 5

	)

40 
	#MUTE_TIME_MS
 2000

	)

42 
	#NUM_TEST_OUTPUTS
 5

	)

53 
˛ass
 
	gAudioPﬁicyM™agîBa£
: 
public
 
AudioPﬁicyI¡îÁ˚


54 #ifde‡
AUDIO_POLICY_TEST


55 , 
public
 
	gThªad


59 
	gpublic
:

60 
AudioPﬁicyM™agîBa£
(
AudioPﬁicyClõ¡I¡îÁ˚
 *
˛õ¡I¡îÁ˚
);

61 
	gvútuÆ
 ~
AudioPﬁicyM™agîBa£
();

64 
vútuÆ
 
°©us_t
 
£tDevi˚C⁄√˘i⁄Sèã
(
AudioSy°em
::
audio_devi˚s
 
devi˚
,

65 
AudioSy°em
::
devi˚_c⁄√˘i⁄_°©e
 
°©e
,

66 c⁄° *
devi˚_addªss
);

67 
vútuÆ
 
	gAudioSy°em
::
devi˚_c⁄√˘i⁄_°©e
 
gëDevi˚C⁄√˘i⁄Sèã
(
AudioSy°em
::
audio_devi˚s
 
devi˚
,

68 c⁄° *
devi˚_addªss
);

69 
vútuÆ
 
£tPh⁄eSèã
(
°©e
);

70 
vútuÆ
 
£tRögîMode
(
uöt32_t
 
mode
, uöt32_à
mask
);

71 
vútuÆ
 
£tF‹˚U£
(
AudioSy°em
::
f‹˚_u£
 
ußge
, AudioSy°em::
f‹˚d_c⁄fig
 
c⁄fig
);

72 
vútuÆ
 
	gAudioSy°em
::
f‹˚d_c⁄fig
 
gëF‹˚U£
(
AudioSy°em
::
f‹˚_u£
 
ußge
);

73 
vútuÆ
 
£tSy°emPr›îty
(c⁄° * 
¥›îty
, c⁄° * 
vÆue
);

74 
vútuÆ
 
audio_io_h™dÀ_t
 
gëOuçut
(
AudioSy°em
::
°ªam_ty≥
 
°ªam
,

75 
uöt32_t
 
ßm∂ögR©e
,

76 
uöt32_t
 
f‹m©
,

77 
uöt32_t
 
ch™√ls
,

78 
AudioSy°em
::
ouçut_Êags
 
Êags
);

79 
vútuÆ
 
°©us_t
 
°¨tOuçut
(
audio_io_h™dÀ_t
 
ouçut
, 
AudioSy°em
::
°ªam_ty≥
 
°ªam
);

80 
vútuÆ
 
°©us_t
 
°›Ouçut
(
audio_io_h™dÀ_t
 
ouçut
, 
AudioSy°em
::
°ªam_ty≥
 
°ªam
);

81 
vútuÆ
 
ªÀa£Ouçut
(
audio_io_h™dÀ_t
 
ouçut
);

82 
vútuÆ
 
audio_io_h™dÀ_t
 
gëI≈ut
(
öputSour˚
,

83 
uöt32_t
 
ßm∂ögR©e
,

84 
uöt32_t
 
f‹m©
,

85 
uöt32_t
 
ch™√ls
,

86 
AudioSy°em
::
audio_ö_acou°ics
 
acou°ics
);

88 
vútuÆ
 
°©us_t
 
°¨tI≈ut
(
audio_io_h™dÀ_t
 
öput
);

90 
vútuÆ
 
°©us_t
 
°›I≈ut
(
audio_io_h™dÀ_t
 
öput
);

91 
vútuÆ
 
ªÀa£I≈ut
(
audio_io_h™dÀ_t
 
öput
);

92 
vútuÆ
 
öôSåómVﬁume
(
AudioSy°em
::
°ªam_ty≥
 
°ªam
,

93 
ödexMö
,

94 
ödexMax
);

95 
vútuÆ
 
°©us_t
 
£tSåómVﬁumeIndex
(
AudioSy°em
::
°ªam_ty≥
 
°ªam
, 
ödex
);

96 
vútuÆ
 
°©us_t
 
gëSåómVﬁumeIndex
(
AudioSy°em
::
°ªam_ty≥
 
°ªam
, *
ödex
);

98 
vútuÆ
 
°©us_t
 
dump
(
fd
);

100 
	g¥Ÿe˘ed
:

102 
	eroutög_°øãgy
 {

103 
STRATEGY_MEDIA
,

104 
	gSTRATEGY_PHONE
,

105 
	gSTRATEGY_SONIFICATION
,

106 
	gSTRATEGY_DTMF
,

107 
	gNUM_STRATEGIES


112 ˛as†
	cAudioOuçutDes¸ùt‹


114 
	gpublic
:

115 
AudioOuçutDes¸ùt‹
();

117 
°©us_t
 
dump
(
fd
);

119 
uöt32_t
 
devi˚
();

120 
ch™geRefCou¡
(
AudioSy°em
::
°ªam_ty≥
, 
dñè
);

121 
uöt32_t
 
ªfCou¡
();

122 
uöt32_t
 
°øãgyRefCou¡
(
routög_°øãgy
 
°øãgy
);

123 
boﬁ
 
isU£dBySå©egy
(
routög_°øãgy
 
°øãgy
Ë{  (
°øãgyRefCou¡
(strategy) != 0);}

124 
boﬁ
 
isDu∂iˇãd
(Ë{  (
	gmOuçut1
 !
NULL
 && 
mOuçut2
 != NULL); }

126 
audio_io_h™dÀ_t
 
	gmId
;

127 
uöt32_t
 
	gmSam∂ögR©e
;

128 
uöt32_t
 
	gmF‹m©
;

129 
uöt32_t
 
	gmCh™√ls
;

130 
uöt32_t
 
	gmL©ícy
;

131 
	gAudioSy°em
::
ouçut_Êags
 
mFœgs
;

132 
uöt32_t
 
	gmDevi˚
;

133 
uöt32_t
 
	gmRefCou¡
[
AudioSy°em
::
NUM_STREAM_TYPES
];

134 
AudioOuçutDes¸ùt‹
 *
	gmOuçut1
;

135 
AudioOuçutDes¸ùt‹
 *
	gmOuçut2
;

136 
	gmCurVﬁume
[
AudioSy°em
::
NUM_STREAM_TYPES
];

137 
	gmMuãCou¡
[
AudioSy°em
::
NUM_STREAM_TYPES
];

142 ˛as†
	cAudioI≈utDes¸ùt‹


144 
	gpublic
:

145 
AudioI≈utDes¸ùt‹
();

147 
°©us_t
 
dump
(
fd
);

149 
uöt32_t
 
	gmSam∂ögR©e
;

150 
uöt32_t
 
	gmF‹m©
;

151 
uöt32_t
 
	gmCh™√ls
;

152 
	gAudioSy°em
::
audio_ö_acou°ics
 
mAcou°ics
;

153 
uöt32_t
 
	gmDevi˚
;

154 
uöt32_t
 
	gmRefCou¡
;

155 
	gmI≈utSour˚
;

159 ˛as†
	cSåómDes¸ùt‹


161 
	gpublic
:

162 
SåómDes¸ùt‹
()

163 : 
mIndexMö
(0), 
mIndexMax
(1), 
mIndexCur
(1), 
mC™BeMuãd
(
åue
) {}

165 
dump
(* 
buf„r
, 
size_t
 
size
);

167 
	gmIndexMö
;

168 
	gmIndexMax
;

169 
	gmIndexCur
;

170 
boﬁ
 
	gmC™BeMuãd
;

173 
addOuçut
(
audio_io_h™dÀ_t
 
id
, 
AudioOuçutDes¸ùt‹
 *
ouçutDesc
);

176 
routög_°øãgy
 
gëSå©egy
(
AudioSy°em
::
°ªam_ty≥
 
°ªam
);

187 
vútuÆ
 
uöt32_t
 
gëDevi˚F‹Så©egy
(
routög_°øãgy
 
°øãgy
, 
boﬁ
 
‰omCache
 = 
åue
);

189 
£tOuçutDevi˚
(
audio_io_h™dÀ_t
 
ouçut
, 
uöt32_t
 
devi˚
, 
boﬁ
 
f‹˚
 = 
Ál£
, 
dñayMs
 = 0);

191 
vútuÆ
 
uöt32_t
 
gëDevi˚F‹I≈utSour˚
(
öputSour˚
);

193 
audio_io_h™dÀ_t
 
gëA˘iveI≈ut
();

196 
vútuÆ
 
compuãVﬁume
(
°ªam
, 
ödex
, 
audio_io_h™dÀ_t
 
ouçut
, 
uöt32_t
 
devi˚
);

198 
°©us_t
 
checkAndSëVﬁume
(
°ªam
, 
ödex
, 
audio_io_h™dÀ_t
 
ouçut
, 
uöt32_t
 
devi˚
, 
dñayMs
 = 0, 
boﬁ
 
f‹˚
 = 
Ál£
);

200 
≠∂ySåómVﬁumes
(
audio_io_h™dÀ_t
 
ouçut
, 
uöt32_t
 
devi˚
, 
dñayMs
 = 0);

202 
£tSå©egyMuã
(
routög_°øãgy
 
°øãgy
, 
boﬁ
 
⁄
, 
audio_io_h™dÀ_t
 
ouçut
, 
dñayMs
 = 0);

204 
£tSåómMuã
(
°ªam
, 
boﬁ
 
⁄
, 
audio_io_h™dÀ_t
 
ouçut
, 
dñayMs
 = 0);

207 
h™dÀInˇŒS⁄ifiˇti⁄
(
°ªam
, 
boﬁ
 
°¨tög
, boﬁ 
°©eCh™ge
);

209 
vútuÆ
 
boﬁ
 
hasBackMi¸›h⁄e
(Ëc⁄° {  
	gÁl£
; }

211 #ifde‡
WITH_A2DP


213 
vútuÆ
 
boﬁ
 
a2dpU£dF‹S⁄ifiˇti⁄
(Ëc⁄° {  
	gåue
; }

214 
°©us_t
 
h™dÀA2dpC⁄√˘i⁄
(
AudioSy°em
::
audio_devi˚s
 
devi˚
,

215 c⁄° *
devi˚_addªss
);

216 
°©us_t
 
h™dÀA2dpDisc⁄√˘i⁄
(
AudioSy°em
::
audio_devi˚s
 
devi˚
,

217 c⁄° *
devi˚_addªss
);

218 
˛o£A2dpOuçuts
();

223 
checkOuçutF‹Så©egy
(
routög_°øãgy
 
°øãgy
, 
uöt32_t
 &
√wDevi˚
);

225 
checkOuçutF‹AŒSå©egõs
(
uöt32_t
 &
√wDevi˚
);

232 
uöt32_t
 
gëNewDevi˚
(
audio_io_h™dÀ_t
 
ouçut
, 
boﬁ
 
‰omCache
 = 
åue
);

238 
upd©eDevi˚F‹Så©egy
();

242 
vútuÆ
 
boﬁ
 
√edsDúe˘Ouput
(
AudioSy°em
::
°ªam_ty≥
 
°ªam
,

243 
uöt32_t
 
ßm∂ögR©e
,

244 
uöt32_t
 
f‹m©
,

245 
uöt32_t
 
ch™√ls
,

246 
AudioSy°em
::
ouçut_Êags
 
Êags
,

247 
uöt32_t
 
devi˚
);

248 #ifde‡
AUDIO_POLICY_TEST


249 
vútuÆ
 
boﬁ
 
thªadLo›
();

250 
exô
();

251 
ã°OuçutIndex
(
audio_io_h™dÀ_t
 
ouçut
);

254 
AudioPﬁicyClõ¡I¡îÁ˚
 *
	gmpClõ¡I¡îÁ˚
;

255 
audio_io_h™dÀ_t
 
	gmH¨dw¨eOuçut
;

256 
audio_io_h™dÀ_t
 
	gmA2dpOuçut
;

257 
audio_io_h™dÀ_t
 
	gmDu∂iˇãdOuçut
;

259 
	gKeyedVe˘‹
<
	gaudio_io_h™dÀ_t
, 
	gAudioOuçutDes¸ùt‹
 *> 
	gmOuçuts
;

260 
	gKeyedVe˘‹
<
	gaudio_io_h™dÀ_t
, 
	gAudioI≈utDes¸ùt‹
 *> 
	gmI≈uts
;

261 
uöt32_t
 
	gmAvaûabÀOuçutDevi˚s
;

262 
uöt32_t
 
	gmAvaûabÀI≈utDevi˚s
;

263 
	gmPh⁄eSèã
;

264 
uöt32_t
 
	gmRögîMode
;

265 
	gAudioSy°em
::
f‹˚d_c⁄fig
 
mF‹˚U£
[
AudioSy°em
::
NUM_FORCE_USE
];

267 
SåómDes¸ùt‹
 
	gmSåóms
[
AudioSy°em
::
NUM_STREAM_TYPES
];

268 
Såög8
 
	gmA2dpDevi˚Addªss
;

269 
Såög8
 
	gmScoDevi˚Addªss
;

270 
n£cs_t
 
	gmMusicSt›Time
;

271 
boﬁ
 
	gmLimôRögt⁄eVﬁume
;

272 
uöt32_t
 
	gmDevi˚F‹Så©egy
[
NUM_STRATEGIES
];

274 #ifde‡
AUDIO_POLICY_TEST


275 
Muãx
 
	gmLock
;

276 
C⁄dôi⁄
 
	gmWaôW‹kCV
;

278 
	gmCurOuçut
;

279 
boﬁ
 
	gmDúe˘Ouçut
;

280 
audio_io_h™dÀ_t
 
	gmTe°Ouçuts
[
NUM_TEST_OUTPUTS
];

281 
	gmTe°I≈ut
;

282 
uöt32_t
 
	gmTe°Devi˚
;

283 
uöt32_t
 
	gmTe°Sam∂ögR©e
;

284 
uöt32_t
 
	gmTe°F‹m©
;

285 
uöt32_t
 
	gmTe°Ch™√ls
;

286 
uöt32_t
 
	gmTe°L©ícyMs
;

	@jni/include/hardware_legacy/IMountService.h

18 #i‚de‡
ANDROID_HARDWARE_IMOUNTSERVICE_H


19 
	#ANDROID_HARDWARE_IMOUNTSERVICE_H


	)

21 
	~<bödî/II¡îÁ˚.h
>

22 
	~<utûs/Såög16.h
>

24 
«me•a˚
 
	g™droid
 {

28 ˛as†
	cIMou¡Sîvi˚
 : 
public
 
II¡îÁ˚


30 
public
:

31 c⁄° 
O≥øti⁄Suc˚eded
 = 0;

32 c⁄° 
	gO≥øti⁄FaûedI¡î«lEº‹
 = -1;

33 c⁄° 
	gO≥øti⁄FaûedNoMedü
 = -2;

34 c⁄° 
	gO≥øti⁄FaûedMedüBœnk
 = -3;

35 c⁄° 
	gO≥øti⁄FaûedMedüC‹ru±
 = -4;

36 c⁄° 
	gO≥øti⁄FaûedVﬁumeNŸMou¡ed
 = -5;

39 
	gpublic
:

40 
DECLARE_META_INTERFACE
(
Mou¡Sîvi˚
);

42 
vútuÆ
 
gëSh¨eMëhodLi°
() = 0;

43 
vútuÆ
 
boﬁ
 
gëSh¨eMëhodAvaûabÀ
(
Såög16
 
mëhod
) = 0;

44 
vútuÆ
 
sh¨eVﬁume
(
Såög16
 
∑th
, Såög16 
mëhod
) = 0;

45 
vútuÆ
 
unsh¨eVﬁume
(
Såög16
 
∑th
, Såög16 
mëhod
) = 0;

46 
vútuÆ
 
boﬁ
 
gëVﬁumeSh¨ed
(
Såög16
 
∑th
, Såög16 
mëhod
) = 0;

47 
vútuÆ
 
mou¡Vﬁume
(
Såög16
 
∑th
) = 0;

48 
vútuÆ
 
unmou¡Vﬁume
(
Såög16
 
∑th
) = 0;

49 
vútuÆ
 
f‹m©Vﬁume
(
Såög16
 
∑th
) = 0;

50 
vútuÆ
 
Såög16
 
gëVﬁumeSèã
(Såög16 
mou¡Poöt
) = 0;

51 
vútuÆ
 
¸óãSecuªC⁄èöî
(
Såög16
 
id
, 
sizeMb
, Såög16 
f°y≥
, Såög16 
key
, 
ow√rUid
) = 0;

52 
vútuÆ
 
föÆizeSecuªC⁄èöî
(
Såög16
 
id
) = 0;

53 
vútuÆ
 
de°roySecuªC⁄èöî
(
Såög16
 
id
) = 0;

54 
vútuÆ
 
mou¡SecuªC⁄èöî
(
Såög16
 
id
, Såög16 
key
, 
ow√rUid
) = 0;

55 
vútuÆ
 
unmou¡SecuªC⁄èöî
(
Såög16
 
id
) = 0;

56 
vútuÆ
 
ª«meSecuªC⁄èöî
(
Såög16
 
ﬁdId
, Såög16 
√wId
) = 0;

57 
vútuÆ
 
Såög16
 
gëSecuªC⁄èöîP©h
(Såög16 
id
) = 0;

58 
vútuÆ
 
gëSecuªC⁄èöîLi°
() = 0;

59 
vútuÆ
 
shutdown
() = 0;

	@jni/include/hardware_legacy/gps.h

17 #i‚de‡
_HARDWARE_GPS_H


18 
	#_HARDWARE_GPS_H


	)

20 
	~<°döt.h
>

21 
	~<°dlib.h
>

23 #i‡
__˝lu•lus


28 
öt64_t
 
	tGpsUtcTime
;

31 
	#GPS_MAX_SVS
 32

	)

34 
uöt16_t
 
	tGpsPosôi⁄Mode
;

38 
	#GPS_POSITION_MODE_STANDALONE
 0

	)

40 
	#GPS_POSITION_MODE_MS_BASED
 1

	)

42 
	#GPS_POSITION_MODE_MS_ASSISTED
 2

	)

45 
uöt16_t
 
	tGpsSètusVÆue
;

49 
	#GPS_STATUS_NONE
 0

	)

51 
	#GPS_STATUS_SESSION_BEGIN
 1

	)

53 
	#GPS_STATUS_SESSION_END
 2

	)

55 
	#GPS_STATUS_ENGINE_ON
 3

	)

57 
	#GPS_STATUS_ENGINE_OFF
 4

	)

60 
uöt16_t
 
	tGpsLoˇti⁄Fœgs
;

64 
	#GPS_LOCATION_HAS_LAT_LONG
 0x0001

	)

66 
	#GPS_LOCATION_HAS_ALTITUDE
 0x0002

	)

68 
	#GPS_LOCATION_HAS_SPEED
 0x0004

	)

70 
	#GPS_LOCATION_HAS_BEARING
 0x0008

	)

72 
	#GPS_LOCATION_HAS_ACCURACY
 0x0010

	)

76 
uöt16_t
 
	tGpsAidögD©a
;

79 
	#GPS_DELETE_EPHEMERIS
 0x0001

	)

80 
	#GPS_DELETE_ALMANAC
 0x0002

	)

81 
	#GPS_DELETE_POSITION
 0x0004

	)

82 
	#GPS_DELETE_TIME
 0x0008

	)

83 
	#GPS_DELETE_IONO
 0x0010

	)

84 
	#GPS_DELETE_UTC
 0x0020

	)

85 
	#GPS_DELETE_HEALTH
 0x0040

	)

86 
	#GPS_DELETE_SVDIR
 0x0080

	)

87 
	#GPS_DELETE_SVSTEER
 0x0100

	)

88 
	#GPS_DELETE_SADATA
 0x0200

	)

89 
	#GPS_DELETE_RTI
 0x0400

	)

90 
	#GPS_DELETE_CELLDB_INFO
 0x8000

	)

91 
	#GPS_DELETE_ALL
 0xFFFF

	)

94 
uöt16_t
 
	tAGpsTy≥
;

95 
	#AGPS_TYPE_SUPL
 1

	)

96 
	#AGPS_TYPE_C2K
 2

	)

100 
uöt16_t
 
	tAGpsSètusVÆue
;

102 
	#GPS_REQUEST_AGPS_DATA_CONN
 1

	)

104 
	#GPS_RELEASE_AGPS_DATA_CONN
 2

	)

106 
	#GPS_AGPS_DATA_CONNECTED
 3

	)

108 
	#GPS_AGPS_DATA_CONN_DONE
 4

	)

110 
	#GPS_AGPS_DATA_CONN_FAILED
 5

	)

115 
	#GPS_XTRA_INTERFACE
 "gps-xåa"

	)

120 
	#GPS_DEBUG_INTERFACE
 "gps-debug"

	)

125 
	#AGPS_INTERFACE
 "agps"

	)

130 
	#GPS_PRIVACY_INTERFACE
 "¥ivacy"

	)

135 
uöt16_t
 
Êags
;

137 
œtôude
;

139 
l⁄gôude
;

142 
Ætôude
;

144 
•ìd
;

146 
bórög
;

148 
accuøcy
;

150 
GpsUtcTime
 
time°amp
;

151 } 
	tGpsLoˇti⁄
;

155 
GpsSètusVÆue
 
°©us
;

156 } 
	tGpsSètus
;

161 
¥n
;

163 
¢r
;

165 
ñev©i⁄
;

167 
azimuth
;

168 } 
	tGpsSvInfo
;

173 
num_svs
;

176 
GpsSvInfo
 
sv_li°
[
GPS_MAX_SVS
];

181 
uöt32_t
 
ïhemîis_mask
;

186 
uöt32_t
 
Æm™ac_mask
;

192 
uöt32_t
 
u£d_ö_fix_mask
;

193 } 
	tGpsSvSètus
;

196 (* 
gps_loˇti⁄_ˇŒback
)(
	tGpsLoˇti⁄
* 
	tloˇti⁄
);

199 (* 
gps_°©us_ˇŒback
)(
	tGpsSètus
* 
	t°©us
);

202 (* 
gps_sv_°©us_ˇŒback
)(
	tGpsSvSètus
* 
	tsv_öfo
);

205 (* 
gps_nmó_ˇŒback
)(
	tGpsUtcTime
 
	ttime°amp
, c⁄° * 
	tnmó
, 
	tÀngth
);

209 
gps_loˇti⁄_ˇŒback
 
loˇti⁄_cb
;

210 
gps_°©us_ˇŒback
 
°©us_cb
;

211 
gps_sv_°©us_ˇŒback
 
sv_°©us_cb
;

212 
gps_nmó_ˇŒback
 
nmó_cb
;

213 } 
	tGpsCÆlbacks
;

222 (*
öô
)–
GpsCÆlbacks
* 
ˇŒbacks
 );

225 (*
°¨t
)( );

228 (*
°›
)( );

231 (*
˛ónup
)( );

234 (*
öje˘_time
)(
GpsUtcTime
 
time
, 
öt64_t
 
timeRe„ªn˚
,

235 
un˚πaöty
);

242 (*
öje˘_loˇti⁄
)(
œtôude
, 
l⁄gôude
, 
accuøcy
);

249 (*
dñëe_aidög_d©a
)(
GpsAidögD©a
 
Êags
);

255 (*
£t_posôi⁄_mode
)(
GpsPosôi⁄Mode
 
mode
, 
fix_‰equícy
);

258 c⁄° * (*
gë_exãnsi⁄
)(c⁄° * 
«me
);

259 } 
	tGpsI¡îÁ˚
;

264 (* 
gps_xåa_dow∆ﬂd_ªque°
)();

268 
gps_xåa_dow∆ﬂd_ªque°
 
dow∆ﬂd_ªque°_cb
;

269 } 
	tGpsXåaCÆlbacks
;

277 (*
öô
)–
GpsXåaCÆlbacks
* 
ˇŒbacks
 );

279 (*
öje˘_xåa_d©a
)–* 
d©a
, 
Àngth
 );

280 } 
	tGpsXåaI¡îÁ˚
;

288 
size_t
 (*
gë_öã∫Æ_°©e
)(* 
buf„r
, size_à
buf„rSize
);

289 } 
	tGpsDebugI¡îÁ˚
;

293 
AGpsTy≥
 
ty≥
;

294 
AGpsSètusVÆue
 
°©us
;

295 } 
	tAGpsSètus
;

298 (* 
agps_°©us_ˇŒback
)(
	tAGpsSètus
* 
	t°©us
);

302 
agps_°©us_ˇŒback
 
°©us_cb
;

303 } 
	tAGpsCÆlbacks
;

312 (*
öô
)–
AGpsCÆlbacks
* 
ˇŒbacks
 );

317 (*
d©a_c⁄n_›í
)–c⁄° * 
≠n
 );

321 (*
d©a_c⁄n_˛o£d
)();

325 (*
d©a_c⁄n_Áûed
)();

329 (*
£t_£rvî
)–
AGpsTy≥
 
ty≥
, c⁄° * 
ho°«me
, 
p‹t
 );

330 } 
	tAGpsI¡îÁ˚
;

338 (*
£t_¥ivacy_lock
)–
íabÀ_lock
 );

339 } 
	tGpsPrivacyI¡îÁ˚
;

342 c⁄° 
GpsI¡îÁ˚
* 
gps_gë_h¨dw¨e_öãrÁ˚
();

347 c⁄° 
GpsI¡îÁ˚
* 
gps_gë_qemu_öãrÁ˚
();

352 c⁄° 
GpsI¡îÁ˚
* 
gps_gë_öãrÁ˚
();

354 #i‡
__˝lu•lus


	@jni/include/hardware_legacy/gps_ni.h

17 #i‚de‡
_HARDWARE_GPS_NI_H


18 
	#_HARDWARE_GPS_NI_H


	)

20 
	~<°döt.h
>

22 #i‡
__˝lu•lus


29 
	#GPS_NI_INTERFACE
 "gps-ni"

	)

34 
	#GPS_NI_SHORT_STRING_MAXLEN
 256

	)

35 
	#GPS_NI_LONG_STRING_MAXLEN
 2048

	)

40 
uöt32_t
 
	tGpsNiTy≥
;

41 
	#GPS_NI_TYPE_VOICE
 1

	)

42 
	#GPS_NI_TYPE_UMTS_SUPL
 2

	)

43 
	#GPS_NI_TYPE_UMTS_CTRL_PLANE
 3

	)

48 
uöt32_t
 
	tGpsNiNŸifyFœgs
;

50 
	#GPS_NI_NEED_NOTIFY
 0x0001

	)

52 
	#GPS_NI_NEED_VERIFY
 0x0002

	)

54 
	#GPS_NI_PRIVACY_OVERRIDE
 0x0004

	)

60 
	tGpsU£rRe•⁄£Ty≥
;

61 
	#GPS_NI_RESPONSE_ACCEPT
 1

	)

62 
	#GPS_NI_RESPONSE_DENY
 2

	)

63 
	#GPS_NI_RESPONSE_NORESP
 3

	)

68 
	tGpsNiEncodögTy≥
;

69 
	#GPS_ENC_NONE
 0

	)

70 
	#GPS_ENC_SUPL_GSM_DEFAULT
 1

	)

71 
	#GPS_ENC_SUPL_UTF8
 2

	)

72 
	#GPS_ENC_SUPL_UCS2
 3

	)

73 
	#GPS_ENC_UNKNOWN
 -1

	)

81 
nŸifiˇti⁄_id
;

87 
GpsNiTy≥
 
ni_ty≥
;

92 
GpsNiNŸifyFœgs
 
nŸify_Êags
;

98 
timeout
;

103 
GpsU£rRe•⁄£Ty≥
 
deÁu…_ª•⁄£
;

108 
ªque°‹_id
[
GPS_NI_SHORT_STRING_MAXLEN
];

113 
ãxt
[
GPS_NI_LONG_STRING_MAXLEN
];

118 
GpsNiEncodögTy≥
 
ªque°‹_id_ícodög
;

123 
GpsNiEncodögTy≥
 
ãxt_ícodög
;

130 
exåas
[
GPS_NI_LONG_STRING_MAXLEN
];

132 } 
	tGpsNiNŸifiˇti⁄
;

135 (*
gps_ni_nŸify_ˇŒback
)(
	tGpsNiNŸifiˇti⁄
 *
	tnŸifiˇti⁄
);

143 
gps_ni_nŸify_ˇŒback
 
nŸify_cb
;

144 } 
	tGpsNiCÆlbacks
;

152 (*
öô
Ë(
GpsNiCÆlbacks
 *
ˇŒbacks
);

155 (*
ª•⁄d
Ë(
nŸif_id
, 
GpsU£rRe•⁄£Ty≥
 
u£r_ª•⁄£
);

156 } 
	tGpsNiI¡îÁ˚
;

158 #i‡
__˝lu•lus


	@jni/include/hardware_legacy/power.h

17 #i‚de‡
_HARDWARE_POWER_H


18 
	#_HARDWARE_POWER_H


	)

20 
	~<°döt.h
>

22 #i‡
__˝lu•lus


27 
PARTIAL_WAKE_LOCK
 = 1,

28 
FULL_WAKE_LOCK
 = 2

33 
acquúe_wake_lock
(
lock
, c⁄° * 
id
);

34 
ªÀa£_wake_lock
(c⁄° * 
id
);

37 
£t_s¸ìn_°©e
(
⁄
);

40 
£t_œ°_u£r_a˘ivôy_timeout
(
öt64_t
 
dñay
);

43 #i‡
__˝lu•lus


	@jni/include/hardware_legacy/qemu_tracing.h

17 #i‚de‡
_HARDWARE_QEMU_TRACING_H


18 
	#_HARDWARE_QEMU_TRACING_H


	)

20 #i‡
__˝lu•lus


24 
qemu_°¨t_åacög
();

25 
qemu_°›_åacög
();

26 
qemu_add_m≠pög
(
addr
, c⁄° *
«me
);

27 
qemu_ªmove_m≠pög
(
addr
);

29 #i‡
__˝lu•lus


	@jni/include/hardware_legacy/uevent.h

17 #i‚de‡
_HARDWARE_UEVENT_H


18 
	#_HARDWARE_UEVENT_H


	)

20 #i‡
__˝lu•lus


24 
uevít_öô
();

25 
uevít_√xt_evít
(* 
buf„r
, 
buf„r_Àngth
);

27 #i‡
__˝lu•lus


	@jni/include/hardware_legacy/vibrator.h

17 #i‚de‡
_HARDWARE_VIBRATOR_H


18 
	#_HARDWARE_VIBRATOR_H


	)

20 #i‡
__˝lu•lus


31 
vibøt‹_⁄
(
timeout_ms
);

38 
vibøt‹_off
();

40 #i‡
__˝lu•lus


	@jni/include/hardware_legacy/wifi.h

17 #i‚de‡
_WIFI_H


18 
	#_WIFI_H


	)

20 #i‡
__˝lu•lus


29 
wifi_lﬂd_drivî
();

36 
wifi_u∆ﬂd_drivî
();

43 
wifi_°¨t_suµliˇ¡
();

50 
wifi_°›_suµliˇ¡
();

57 
wifi_c⁄√˘_to_suµliˇ¡
();

64 
wifi_˛o£_suµliˇ¡_c⁄√˘i⁄
();

78 
wifi_waô_f‹_evít
(*
buf
, 
size_t
 
Àn
);

141 
wifi_comm™d
(c⁄° *
comm™d
, *
ª∂y
, 
size_t
 *
ª∂y_Àn
);

159 
do_dh˝_ªque°
(*
ùaddr
, *
g©eway
, *
mask
,

160 *
dns1
, *
dns2
, *
£rvî
, *
Àa£
);

165 c⁄° *
gë_dh˝_îr‹_°rög
();

167 #i‡
__˝lu•lus


	@jni/include/include/EGL/egl.h

30 #i‚de‡
__egl_h_


31 
	#__egl_h_


	)

36 
	~<EGL/egÕœtf‹m.h
>

38 #ifde‡
__˝lu•lus


44 
	tEGLBoﬁón
;

45 
	tEGLíum
;

46 *
	tEGLC⁄fig
;

47 *
	tEGLC⁄ãxt
;

48 *
	tEGLDi•œy
;

49 *
	tEGLSurÁ˚
;

50 *
	tEGLClõ¡Buf„r
;

53 
	#EGL_VERSION_1_0
 1

	)

54 
	#EGL_VERSION_1_1
 1

	)

55 
	#EGL_VERSION_1_2
 1

	)

56 
	#EGL_VERSION_1_3
 1

	)

57 
	#EGL_VERSION_1_4
 1

	)

64 
	#EGL_FALSE
 0

	)

65 
	#EGL_TRUE
 1

	)

68 
	#EGL_DEFAULT_DISPLAY
 ((
EGLN©iveDi•œyTy≥
)0)

	)

69 
	#EGL_NO_CONTEXT
 ((
EGLC⁄ãxt
)0)

	)

70 
	#EGL_NO_DISPLAY
 ((
EGLDi•œy
)0)

	)

71 
	#EGL_NO_SURFACE
 ((
EGLSurÁ˚
)0)

	)

74 
	#EGL_DONT_CARE
 ((
EGLöt
)-1)

	)

77 
	#EGL_SUCCESS
 0x3000

	)

78 
	#EGL_NOT_INITIALIZED
 0x3001

	)

79 
	#EGL_BAD_ACCESS
 0x3002

	)

80 
	#EGL_BAD_ALLOC
 0x3003

	)

81 
	#EGL_BAD_ATTRIBUTE
 0x3004

	)

82 
	#EGL_BAD_CONFIG
 0x3005

	)

83 
	#EGL_BAD_CONTEXT
 0x3006

	)

84 
	#EGL_BAD_CURRENT_SURFACE
 0x3007

	)

85 
	#EGL_BAD_DISPLAY
 0x3008

	)

86 
	#EGL_BAD_MATCH
 0x3009

	)

87 
	#EGL_BAD_NATIVE_PIXMAP
 0x300A

	)

88 
	#EGL_BAD_NATIVE_WINDOW
 0x300B

	)

89 
	#EGL_BAD_PARAMETER
 0x300C

	)

90 
	#EGL_BAD_SURFACE
 0x300D

	)

91 
	#EGL_CONTEXT_LOST
 0x300E

	)

96 
	#EGL_BUFFER_SIZE
 0x3020

	)

97 
	#EGL_ALPHA_SIZE
 0x3021

	)

98 
	#EGL_BLUE_SIZE
 0x3022

	)

99 
	#EGL_GREEN_SIZE
 0x3023

	)

100 
	#EGL_RED_SIZE
 0x3024

	)

101 
	#EGL_DEPTH_SIZE
 0x3025

	)

102 
	#EGL_STENCIL_SIZE
 0x3026

	)

103 
	#EGL_CONFIG_CAVEAT
 0x3027

	)

104 
	#EGL_CONFIG_ID
 0x3028

	)

105 
	#EGL_LEVEL
 0x3029

	)

106 
	#EGL_MAX_PBUFFER_HEIGHT
 0x302A

	)

107 
	#EGL_MAX_PBUFFER_PIXELS
 0x302B

	)

108 
	#EGL_MAX_PBUFFER_WIDTH
 0x302C

	)

109 
	#EGL_NATIVE_RENDERABLE
 0x302D

	)

110 
	#EGL_NATIVE_VISUAL_ID
 0x302E

	)

111 
	#EGL_NATIVE_VISUAL_TYPE
 0x302F

	)

112 
	#EGL_PRESERVED_RESOURCES
 0x3030

	)

113 
	#EGL_SAMPLES
 0x3031

	)

114 
	#EGL_SAMPLE_BUFFERS
 0x3032

	)

115 
	#EGL_SURFACE_TYPE
 0x3033

	)

116 
	#EGL_TRANSPARENT_TYPE
 0x3034

	)

117 
	#EGL_TRANSPARENT_BLUE_VALUE
 0x3035

	)

118 
	#EGL_TRANSPARENT_GREEN_VALUE
 0x3036

	)

119 
	#EGL_TRANSPARENT_RED_VALUE
 0x3037

	)

120 
	#EGL_NONE
 0x3038

	)

121 
	#EGL_BIND_TO_TEXTURE_RGB
 0x3039

	)

122 
	#EGL_BIND_TO_TEXTURE_RGBA
 0x303A

	)

123 
	#EGL_MIN_SWAP_INTERVAL
 0x303B

	)

124 
	#EGL_MAX_SWAP_INTERVAL
 0x303C

	)

125 
	#EGL_LUMINANCE_SIZE
 0x303D

	)

126 
	#EGL_ALPHA_MASK_SIZE
 0x303E

	)

127 
	#EGL_COLOR_BUFFER_TYPE
 0x303F

	)

128 
	#EGL_RENDERABLE_TYPE
 0x3040

	)

129 
	#EGL_MATCH_NATIVE_PIXMAP
 0x3041

	)

130 
	#EGL_CONFORMANT
 0x3042

	)

135 
	#EGL_SLOW_CONFIG
 0x3050

	)

136 
	#EGL_NON_CONFORMANT_CONFIG
 0x3051

	)

137 
	#EGL_TRANSPARENT_RGB
 0x3052

	)

138 
	#EGL_RGB_BUFFER
 0x308E

	)

139 
	#EGL_LUMINANCE_BUFFER
 0x308F

	)

142 
	#EGL_NO_TEXTURE
 0x305C

	)

143 
	#EGL_TEXTURE_RGB
 0x305D

	)

144 
	#EGL_TEXTURE_RGBA
 0x305E

	)

145 
	#EGL_TEXTURE_2D
 0x305F

	)

148 
	#EGL_PBUFFER_BIT
 0x0001

	)

149 
	#EGL_PIXMAP_BIT
 0x0002

	)

150 
	#EGL_WINDOW_BIT
 0x0004

	)

151 
	#EGL_VG_COLORSPACE_LINEAR_BIT
 0x0020

	)

152 
	#EGL_VG_ALPHA_FORMAT_PRE_BIT
 0x0040

	)

153 
	#EGL_MULTISAMPLE_RESOLVE_BOX_BIT
 0x0200

	)

154 
	#EGL_SWAP_BEHAVIOR_PRESERVED_BIT
 0x0400

	)

156 
	#EGL_OPENGL_ES_BIT
 0x0001

	)

157 
	#EGL_OPENVG_BIT
 0x0002

	)

158 
	#EGL_OPENGL_ES2_BIT
 0x0004

	)

159 
	#EGL_OPENGL_BIT
 0x0008

	)

162 
	#EGL_VENDOR
 0x3053

	)

163 
	#EGL_VERSION
 0x3054

	)

164 
	#EGL_EXTENSIONS
 0x3055

	)

165 
	#EGL_CLIENT_APIS
 0x308D

	)

168 
	#EGL_HEIGHT
 0x3056

	)

169 
	#EGL_WIDTH
 0x3057

	)

170 
	#EGL_LARGEST_PBUFFER
 0x3058

	)

171 
	#EGL_TEXTURE_FORMAT
 0x3080

	)

172 
	#EGL_TEXTURE_TARGET
 0x3081

	)

173 
	#EGL_MIPMAP_TEXTURE
 0x3082

	)

174 
	#EGL_MIPMAP_LEVEL
 0x3083

	)

175 
	#EGL_RENDER_BUFFER
 0x3086

	)

176 
	#EGL_VG_COLORSPACE
 0x3087

	)

177 
	#EGL_VG_ALPHA_FORMAT
 0x3088

	)

178 
	#EGL_HORIZONTAL_RESOLUTION
 0x3090

	)

179 
	#EGL_VERTICAL_RESOLUTION
 0x3091

	)

180 
	#EGL_PIXEL_ASPECT_RATIO
 0x3092

	)

181 
	#EGL_SWAP_BEHAVIOR
 0x3093

	)

182 
	#EGL_MULTISAMPLE_RESOLVE
 0x3099

	)

185 
	#EGL_BACK_BUFFER
 0x3084

	)

186 
	#EGL_SINGLE_BUFFER
 0x3085

	)

189 
	#EGL_VG_COLORSPACE_sRGB
 0x3089

	)

190 
	#EGL_VG_COLORSPACE_LINEAR
 0x308A

	)

193 
	#EGL_VG_ALPHA_FORMAT_NONPRE
 0x308B

	)

194 
	#EGL_VG_ALPHA_FORMAT_PRE
 0x308C

	)

199 
	#EGL_DISPLAY_SCALING
 10000

	)

202 
	#EGL_UNKNOWN
 ((
EGLöt
)-1)

	)

205 
	#EGL_BUFFER_PRESERVED
 0x3094

	)

206 
	#EGL_BUFFER_DESTROYED
 0x3095

	)

209 
	#EGL_OPENVG_IMAGE
 0x3096

	)

212 
	#EGL_CONTEXT_CLIENT_TYPE
 0x3097

	)

215 
	#EGL_CONTEXT_CLIENT_VERSION
 0x3098

	)

218 
	#EGL_MULTISAMPLE_RESOLVE_DEFAULT
 0x309A

	)

219 
	#EGL_MULTISAMPLE_RESOLVE_BOX
 0x309B

	)

222 
	#EGL_OPENGL_ES_API
 0x30A0

	)

223 
	#EGL_OPENVG_API
 0x30A1

	)

224 
	#EGL_OPENGL_API
 0x30A2

	)

227 
	#EGL_DRAW
 0x3059

	)

228 
	#EGL_READ
 0x305A

	)

231 
	#EGL_CORE_NATIVE_ENGINE
 0x305B

	)

234 
	#EGL_COLORSPACE
 
EGL_VG_COLORSPACE


	)

235 
	#EGL_ALPHA_FORMAT
 
EGL_VG_ALPHA_FORMAT


	)

236 
	#EGL_COLORSPACE_sRGB
 
EGL_VG_COLORSPACE_sRGB


	)

237 
	#EGL_COLORSPACE_LINEAR
 
EGL_VG_COLORSPACE_LINEAR


	)

238 
	#EGL_ALPHA_FORMAT_NONPRE
 
EGL_VG_ALPHA_FORMAT_NONPRE


	)

239 
	#EGL_ALPHA_FORMAT_PRE
 
EGL_VG_ALPHA_FORMAT_PRE


	)

250 
EGLAPI
 
EGLöt
 
EGLAPIENTRY
 
eglGëEº‹
();

252 
EGLAPI
 
EGLDi•œy
 
EGLAPIENTRY
 
eglGëDi•œy
(
EGLN©iveDi•œyTy≥
 
di•œy_id
);

253 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglInôülize
(
EGLDi•œy
 
dpy
, 
EGLöt
 *
maj‹
, EGLöà*
mö‹
);

254 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglTîmö©e
(
EGLDi•œy
 
dpy
);

256 
EGLAPI
 c⁄° * 
EGLAPIENTRY
 
eglQuîySåög
(
EGLDi•œy
 
dpy
, 
EGLöt
 
«me
);

258 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglGëC⁄figs
(
EGLDi•œy
 
dpy
, 
EGLC⁄fig
 *
c⁄figs
,

259 
EGLöt
 
c⁄fig_size
, EGLöà*
num_c⁄fig
);

260 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglChoo£C⁄fig
(
EGLDi•œy
 
dpy
, c⁄° 
EGLöt
 *
©åib_li°
,

261 
EGLC⁄fig
 *
c⁄figs
, 
EGLöt
 
c⁄fig_size
,

262 
EGLöt
 *
num_c⁄fig
);

263 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglGëC⁄figAârib
(
EGLDi•œy
 
dpy
, 
EGLC⁄fig
 
c⁄fig
,

264 
EGLöt
 
©åibuã
, EGLöà*
vÆue
);

266 
EGLAPI
 
EGLSurÁ˚
 
EGLAPIENTRY
 
eglCª©eWödowSurÁ˚
(
EGLDi•œy
 
dpy
, 
EGLC⁄fig
 
c⁄fig
,

267 
EGLN©iveWödowTy≥
 
wö
,

268 c⁄° 
EGLöt
 *
©åib_li°
);

269 
EGLAPI
 
EGLSurÁ˚
 
EGLAPIENTRY
 
eglCª©ePbuf„rSurÁ˚
(
EGLDi•œy
 
dpy
, 
EGLC⁄fig
 
c⁄fig
,

270 c⁄° 
EGLöt
 *
©åib_li°
);

271 
EGLAPI
 
EGLSurÁ˚
 
EGLAPIENTRY
 
eglCª©ePixm≠SurÁ˚
(
EGLDi•œy
 
dpy
, 
EGLC⁄fig
 
c⁄fig
,

272 
EGLN©ivePixm≠Ty≥
 
pixm≠
,

273 c⁄° 
EGLöt
 *
©åib_li°
);

274 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglDe°roySurÁ˚
(
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
);

275 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglQuîySurÁ˚
(
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
,

276 
EGLöt
 
©åibuã
, EGLöà*
vÆue
);

278 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglBödAPI
(
EGLíum
 
≠i
);

279 
EGLAPI
 
EGLíum
 
EGLAPIENTRY
 
eglQuîyAPI
();

281 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglWaôClõ¡
();

283 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglRñó£Thªad
();

285 
EGLAPI
 
EGLSurÁ˚
 
EGLAPIENTRY
 
eglCª©ePbuf„rFromClõ¡Buf„r
(

286 
EGLDi•œy
 
dpy
, 
EGLíum
 
bu·y≥
, 
EGLClõ¡Buf„r
 
buf„r
,

287 
EGLC⁄fig
 
c⁄fig
, c⁄° 
EGLöt
 *
©åib_li°
);

289 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglSurÁ˚Aârib
(
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
,

290 
EGLöt
 
©åibuã
, EGLöà
vÆue
);

291 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglBödTexImage
(
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
, 
EGLöt
 
buf„r
);

292 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglRñó£TexImage
(
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
, 
EGLöt
 
buf„r
);

295 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglSw≠I¡îvÆ
(
EGLDi•œy
 
dpy
, 
EGLöt
 
öãrvÆ
);

298 
EGLAPI
 
EGLC⁄ãxt
 
EGLAPIENTRY
 
eglCª©eC⁄ãxt
(
EGLDi•œy
 
dpy
, 
EGLC⁄fig
 
c⁄fig
,

299 
EGLC⁄ãxt
 
sh¨e_c⁄ãxt
,

300 c⁄° 
EGLöt
 *
©åib_li°
);

301 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglDe°royC⁄ãxt
(
EGLDi•œy
 
dpy
, 
EGLC⁄ãxt
 
˘x
);

302 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglMakeCuºít
(
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
døw
,

303 
EGLSurÁ˚
 
ªad
, 
EGLC⁄ãxt
 
˘x
);

305 
EGLAPI
 
EGLC⁄ãxt
 
EGLAPIENTRY
 
eglGëCuºítC⁄ãxt
();

306 
EGLAPI
 
EGLSurÁ˚
 
EGLAPIENTRY
 
eglGëCuºítSurÁ˚
(
EGLöt
 
ªaddøw
);

307 
EGLAPI
 
EGLDi•œy
 
EGLAPIENTRY
 
eglGëCuºítDi•œy
();

308 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglQuîyC⁄ãxt
(
EGLDi•œy
 
dpy
, 
EGLC⁄ãxt
 
˘x
,

309 
EGLöt
 
©åibuã
, EGLöà*
vÆue
);

311 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglWaôGL
();

312 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglWaôN©ive
(
EGLöt
 
ígöe
);

313 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglSw≠Buf„rs
(
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
);

314 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglC›yBuf„rs
(
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
,

315 
EGLN©ivePixm≠Ty≥
 
èrgë
);

320 (*
__eglMu°Ca°ToPr›îFun˘i⁄PoöãrTy≥
)();

323 
EGLAPI
 
__eglMu°Ca°ToPr›îFun˘i⁄PoöãrTy≥
 
EGLAPIENTRY


324 
eglGëProcAddªss
(c⁄° *
¥o˙ame
);

326 #ifde‡
__˝lu•lus


	@jni/include/include/EGL/eglext.h

1 #i‚de‡
__egÀxt_h_


2 
	#__egÀxt_h_


	)

4 #ifde‡
__˝lu•lus


31 
	~<EGL/egÕœtf‹m.h
>

38 
	#EGL_EGLEXT_VERSION
 3

	)

40 #i‚de‡
EGL_KHR_c⁄fig_©åibs


41 
	#EGL_KHR_c⁄fig_©åibs
 1

	)

42 
	#EGL_CONFORMANT_KHR
 0x3042

	)

43 
	#EGL_VG_COLORSPACE_LINEAR_BIT_KHR
 0x0020

	)

44 
	#EGL_VG_ALPHA_FORMAT_PRE_BIT_KHR
 0x0040

	)

47 #i‚de‡
EGL_KHR_lock_surÁ˚


48 
	#EGL_KHR_lock_surÁ˚
 1

	)

49 
	#EGL_READ_SURFACE_BIT_KHR
 0x0001

	)

50 
	#EGL_WRITE_SURFACE_BIT_KHR
 0x0002

	)

51 
	#EGL_LOCK_SURFACE_BIT_KHR
 0x0080

	)

52 
	#EGL_OPTIMAL_FORMAT_BIT_KHR
 0x0100

	)

53 
	#EGL_MATCH_FORMAT_KHR
 0x3043

	)

54 
	#EGL_FORMAT_RGB_565_EXACT_KHR
 0x30C0

	)

55 
	#EGL_FORMAT_RGB_565_KHR
 0x30C1

	)

56 
	#EGL_FORMAT_RGBA_8888_EXACT_KHR
 0x30C2

	)

57 
	#EGL_FORMAT_RGBA_8888_KHR
 0x30C3

	)

58 
	#EGL_MAP_PRESERVE_PIXELS_KHR
 0x30C4

	)

59 
	#EGL_LOCK_USAGE_HINT_KHR
 0x30C5

	)

60 
	#EGL_BITMAP_POINTER_KHR
 0x30C6

	)

61 
	#EGL_BITMAP_PITCH_KHR
 0x30C7

	)

62 
	#EGL_BITMAP_ORIGIN_KHR
 0x30C8

	)

63 
	#EGL_BITMAP_PIXEL_RED_OFFSET_KHR
 0x30C9

	)

64 
	#EGL_BITMAP_PIXEL_GREEN_OFFSET_KHR
 0x30CA

	)

65 
	#EGL_BITMAP_PIXEL_BLUE_OFFSET_KHR
 0x30CB

	)

66 
	#EGL_BITMAP_PIXEL_ALPHA_OFFSET_KHR
 0x30CC

	)

67 
	#EGL_BITMAP_PIXEL_LUMINANCE_OFFSET_KHR
 0x30CD

	)

68 
	#EGL_LOWER_LEFT_KHR
 0x30CE

	)

69 
	#EGL_UPPER_LEFT_KHR
 0x30CF

	)

70 #ifde‡
EGL_EGLEXT_PROTOTYPES


71 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglLockSurÁ˚KHR
 (
EGLDi•œy
 
di•œy
, 
EGLSurÁ˚
 
surÁ˚
, c⁄° 
EGLöt
 *
©åib_li°
);

72 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglU∆ockSurÁ˚KHR
 (
EGLDi•œy
 
di•œy
, 
EGLSurÁ˚
 
surÁ˚
);

74 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLLOCKSURFACEKHRPROC
Ë(
	tEGLDi•œy
 
	tdi•œy
, 
	tEGLSurÁ˚
 
	tsurÁ˚
, c⁄° 
	tEGLöt
 *
	t©åib_li°
);

75 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLUNLOCKSURFACEKHRPROC
Ë(
	tEGLDi•œy
 
	tdi•œy
, 
	tEGLSurÁ˚
 
	tsurÁ˚
);

78 #i‚de‡
EGL_KHR_image


79 
	#EGL_KHR_image
 1

	)

80 
	#EGL_NATIVE_PIXMAP_KHR
 0x30B0

	)

81 *
	tEGLImageKHR
;

82 
	#EGL_NO_IMAGE_KHR
 ((
EGLImageKHR
)0)

	)

83 #ifde‡
EGL_EGLEXT_PROTOTYPES


84 
EGLAPI
 
EGLImageKHR
 
EGLAPIENTRY
 
eglCª©eImageKHR
 (
EGLDi•œy
 
dpy
, 
EGLC⁄ãxt
 
˘x
, 
EGLíum
 
èrgë
, 
EGLClõ¡Buf„r
 
buf„r
, c⁄° 
EGLöt
 *
©åib_li°
);

85 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglDe°royImageKHR
 (
EGLDi•œy
 
dpy
, 
EGLImageKHR
 
image
);

87 
EGLImageKHR
 (
	tEGLAPIENTRYP
 
	tPFNEGLCREATEIMAGEKHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLC⁄ãxt
 
	t˘x
, 
	tEGLíum
 
	tèrgë
, 
	tEGLClõ¡Buf„r
 
	tbuf„r
, c⁄° 
	tEGLöt
 *
	t©åib_li°
);

88 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLDESTROYIMAGEKHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLImageKHR
 
	timage
);

91 #i‚de‡
EGL_KHR_vg_∑ª¡_image


92 
	#EGL_KHR_vg_∑ª¡_image
 1

	)

93 
	#EGL_VG_PARENT_IMAGE_KHR
 0x30BA

	)

96 #i‚de‡
EGL_KHR_gl_ãxtuª_2D_image


97 
	#EGL_KHR_gl_ãxtuª_2D_image
 1

	)

98 
	#EGL_GL_TEXTURE_2D_KHR
 0x30B1

	)

99 
	#EGL_GL_TEXTURE_LEVEL_KHR
 0x30BC

	)

102 #i‚de‡
EGL_KHR_gl_ãxtuª_cubem≠_image


103 
	#EGL_KHR_gl_ãxtuª_cubem≠_image
 1

	)

104 
	#EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X_KHR
 0x30B3

	)

105 
	#EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X_KHR
 0x30B4

	)

106 
	#EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y_KHR
 0x30B5

	)

107 
	#EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_KHR
 0x30B6

	)

108 
	#EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z_KHR
 0x30B7

	)

109 
	#EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_KHR
 0x30B8

	)

112 #i‚de‡
EGL_KHR_gl_ãxtuª_3D_image


113 
	#EGL_KHR_gl_ãxtuª_3D_image
 1

	)

114 
	#EGL_GL_TEXTURE_3D_KHR
 0x30B2

	)

115 
	#EGL_GL_TEXTURE_ZOFFSET_KHR
 0x30BD

	)

118 #i‚de‡
EGL_KHR_gl_ªndîbuf„r_image


119 
	#EGL_KHR_gl_ªndîbuf„r_image
 1

	)

120 
	#EGL_GL_RENDERBUFFER_KHR
 0x30B9

	)

123 #i‚de‡
EGL_KHR_image_ba£


124 
	#EGL_KHR_image_ba£
 1

	)

126 
	#EGL_IMAGE_PRESERVED_KHR
 0x30D2

	)

129 #i‚de‡
EGL_KHR_image_pixm≠


130 
	#EGL_KHR_image_pixm≠
 1

	)

134 #ifde‡
__˝lu•lus


	@jni/include/include/EGL/eglnatives.h

17 #i‚de‡
ANDROID_EGLNATIVES_H


18 
	#ANDROID_EGLNATIVES_H


	)

20 
	~<sys/ty≥s.h
>

22 #ifde‡
__˝lu•lus


29 
	#EGL_NATIVES_FLAG_SIZE_CHANGED
 0x00000001

	)

32 
	#EGL_NATIVES_FLAG_DESTROY_BACKBUFFER
 0x00000001

	)

34 
	e«tive_pixñ_f‹m©_t


36 
NATIVE_PIXEL_FORMAT_RGBA_8888
 = 1,

37 
NATIVE_PIXEL_FORMAT_RGB_565
 = 4,

38 
NATIVE_PIXEL_FORMAT_BGRA_8888
 = 5,

39 
NATIVE_PIXEL_FORMAT_RGBA_5551
 = 6,

40 
NATIVE_PIXEL_FORMAT_RGBA_4444
 = 7,

41 
NATIVE_PIXEL_FORMAT_YCbCr_422_SP
= 0x10,

42 
NATIVE_PIXEL_FORMAT_YCbCr_420_SP
= 0x11,

45 
	e«tive_mem‹y_ty≥_t


47 
NATIVE_MEMORY_TYPE_PMEM
 = 0,

48 
NATIVE_MEMORY_TYPE_GPU
 = 1,

49 
NATIVE_MEMORY_TYPE_FB
 = 2,

50 
NATIVE_MEMORY_TYPE_HEAP
 = 128

54 
	segl_«tive_wödow_t


59 
uöt32_t
 
magic
;

64 
uöt32_t
 
vîsi⁄
;

69 
uöt32_t
 
idít
;

76 
width
;

77 
height
;

78 
°ride
;

83 
f‹m©
;

88 
öçå_t
 
off£t
;

95 
uöt32_t
 
Êags
;

100 
xdpi
;

101 
ydpi
;

106 
Âs
;

112 
öçå_t
 
ba£
;

117 
fd
;

122 
uöt8_t
 
mem‹y_ty≥
;

127 
uöt8_t
 
ª£rved_∑d
[3];

128 
ª£rved
[8];

134 
v°ride
;

139 (*
öcRef
)(
egl_«tive_wödow_t
* 
wödow
);

144 (*
decRef
)(
egl_«tive_wödow_t
* 
wödow
);

151 
uöt32_t
 (*
sw≠Buf„rs
)(
egl_«tive_wödow_t
* 
wödow
);

156 (*
ª£rved_¥oc_0
)();

161 (*
ª£rved_¥oc_1
)();

166 (*
ª£rved_¥oc_2
)();

173 (*
c⁄√˘
)(
egl_«tive_wödow_t
* 
wödow
);

178 (*
disc⁄√˘
)(
egl_«tive_wödow_t
* 
wödow
);

183 (*
ª£rved_¥oc
[11])();

188 
öçå_t
 
€m
[4];

192 
	segl_«tive_pixm≠_t


194 
öt32_t
 
vîsi⁄
;

195 
öt32_t
 
width
;

196 
öt32_t
 
height
;

197 
öt32_t
 
°ride
;

198 
uöt8_t
* 
d©a
;

199 
uöt8_t
 
f‹m©
;

200 
uöt8_t
 
rfu
[3];

202 
uöt32_t
 
com¥es£dF‹m©
;

203 
öt32_t
 
v°ride
;

205 
öt32_t
 
ª£rved
;

216 
egl_«tive_wödow_t
* 
™droid_¸óãDi•œySurÁ˚
();

230 * 
u£r
;

232 * 
ba£
;

234 
size_t
 
size
;

236 * 
phys
;

238 
size_t
 
off£t
;

240 
fd
;

241 } 
	tgpu_¨ó_t
;

246 
gpu_¨ó_t
 
ªgs
;

248 
öt32_t
 
cou¡
;

250 
gpu_¨ó_t
 
gpu
[2];

251 } 
	tªque°_gpu_t
;

254 
ªque°_gpu_t
* (*
	tOEM_EGL_acquúe_gpu_t
)(* 
	tu£r
);

255 (*
OEM_EGL_ªÀa£_gpu_t
)(* 
	tu£r
, 
	tªque°_gpu_t
* 
	th™dÀ
);

256 (*
ªgi°î_gpu_t
)

257 (* 
	tu£r
, 
	tOEM_EGL_acquúe_gpu_t
, 
	tOEM_EGL_ªÀa£_gpu_t
);

259 
€m_ªgi°î_gpu
(

260 * 
u£r
,

261 
OEM_EGL_acquúe_gpu_t
 
acquúe
,

262 
OEM_EGL_ªÀa£_gpu_t
 
ªÀa£
);

267 #ifde‡
__˝lu•lus


	@jni/include/include/EGL/eglplatform.h

1 #i‚de‡
__egÕœtf‹m_h_


2 
	#__egÕœtf‹m_h_


	)

37 
	~<KHR/khΩœtf‹m.h
>

49 #i‚de‡
EGLAPI


50 
	#EGLAPI
 
KHRONOS_APICALL


	)

53 
	#EGLAPIENTRY
 
KHRONOS_APIENTRY


	)

54 
	#EGLAPIENTRYP
 
KHRONOS_APIENTRY
*

	)

63 #i‡
deföed
(
_WIN32
Ë|| deföed(
__VC32__
Ë&& !deföed(
__CYGWIN__
Ë&& !deföed(
__SCITECH_SNAP__
)

64 #i‚de‡
WIN32_LEAN_AND_MEAN


65 
	#WIN32_LEAN_AND_MEAN
 1

	)

67 
	~<wödows.h
>

69 
HDC
 
	tEGLN©iveDi•œyTy≥
;

70 
HBITMAP
 
	tEGLN©ivePixm≠Ty≥
;

71 
HWND
 
	tEGLN©iveWödowTy≥
;

73 #ñi‡
deföed
(
__WINSCW__
Ë|| deföed(
__SYMBIAN32__
)

75 
	tEGLN©iveDi•œyTy≥
;

76 *
	tEGLN©iveWödowTy≥
;

77 *
	tEGLN©ivePixm≠Ty≥
;

79 #ñi‡
deföed
(
__unix__
Ë&& !deföed(
ANDROID
)

82 
	~<X11/Xlib.h
>

83 
	~<X11/Xutû.h
>

85 
Di•œy
 *
	tEGLN©iveDi•œyTy≥
;

86 
Pixm≠
 
	tEGLN©ivePixm≠Ty≥
;

87 
Wödow
 
	tEGLN©iveWödowTy≥
;

90 #ñi‡
deföed
(
ANDROID
)

92 
	~<EGL/eg ©ives.h
>

94 
egl_«tive_wödow_t
* 
	tEGLN©iveWödowTy≥
;

95 
egl_«tive_pixm≠_t
* 
	tEGLN©ivePixm≠Ty≥
;

96 * 
	tEGLN©iveDi•œyTy≥
;

103 
EGLN©iveDi•œyTy≥
 
	tN©iveDi•œyTy≥
;

104 
EGLN©ivePixm≠Ty≥
 
	tN©ivePixm≠Ty≥
;

105 
EGLN©iveWödowTy≥
 
	tN©iveWödowTy≥
;

115 
khr⁄os_öt32_t
 
	tEGLöt
;

	@jni/include/include/GLES2/gl2.h

1 #i‚de‡
__gl2_h_


2 
	#__gl2_h_


	)

6 
	~<GLES2/gl2∂©f‹m.h
>

8 #ifde‡
__˝lu•lus


21 
	tGLvoid
;

22 
	tGLch¨
;

23 
	tGLíum
;

24 
	tGLboﬁón
;

25 
	tGLbôfõld
;

26 
khr⁄os_öt8_t
 
	tGLbyã
;

27 
	tGLsh‹t
;

28 
	tGLöt
;

29 
	tGLsizei
;

30 
khr⁄os_uöt8_t
 
	tGLubyã
;

31 
	tGLush‹t
;

32 
	tGLuöt
;

33 
khr⁄os_Êﬂt_t
 
	tGLÊﬂt
;

34 
khr⁄os_Êﬂt_t
 
	tGL˛ampf
;

35 
khr⁄os_öt32_t
 
	tGLfixed
;

38 
khr⁄os_öçå_t
 
	tGLöçå
;

39 
khr⁄os_ssize_t
 
	tGLsizeùå
;

42 
	#GL_ES_VERSION_2_0
 1

	)

45 
	#GL_DEPTH_BUFFER_BIT
 0x00000100

	)

46 
	#GL_STENCIL_BUFFER_BIT
 0x00000400

	)

47 
	#GL_COLOR_BUFFER_BIT
 0x00004000

	)

50 
	#GL_FALSE
 0

	)

51 
	#GL_TRUE
 1

	)

54 
	#GL_POINTS
 0x0000

	)

55 
	#GL_LINES
 0x0001

	)

56 
	#GL_LINE_LOOP
 0x0002

	)

57 
	#GL_LINE_STRIP
 0x0003

	)

58 
	#GL_TRIANGLES
 0x0004

	)

59 
	#GL_TRIANGLE_STRIP
 0x0005

	)

60 
	#GL_TRIANGLE_FAN
 0x0006

	)

73 
	#GL_ZERO
 0

	)

74 
	#GL_ONE
 1

	)

75 
	#GL_SRC_COLOR
 0x0300

	)

76 
	#GL_ONE_MINUS_SRC_COLOR
 0x0301

	)

77 
	#GL_SRC_ALPHA
 0x0302

	)

78 
	#GL_ONE_MINUS_SRC_ALPHA
 0x0303

	)

79 
	#GL_DST_ALPHA
 0x0304

	)

80 
	#GL_ONE_MINUS_DST_ALPHA
 0x0305

	)

85 
	#GL_DST_COLOR
 0x0306

	)

86 
	#GL_ONE_MINUS_DST_COLOR
 0x0307

	)

87 
	#GL_SRC_ALPHA_SATURATE
 0x0308

	)

94 
	#GL_FUNC_ADD
 0x8006

	)

95 
	#GL_BLEND_EQUATION
 0x8009

	)

96 
	#GL_BLEND_EQUATION_RGB
 0x8009

	)

97 
	#GL_BLEND_EQUATION_ALPHA
 0x883D

	)

100 
	#GL_FUNC_SUBTRACT
 0x800A

	)

101 
	#GL_FUNC_REVERSE_SUBTRACT
 0x800B

	)

104 
	#GL_BLEND_DST_RGB
 0x80C8

	)

105 
	#GL_BLEND_SRC_RGB
 0x80C9

	)

106 
	#GL_BLEND_DST_ALPHA
 0x80CA

	)

107 
	#GL_BLEND_SRC_ALPHA
 0x80CB

	)

108 
	#GL_CONSTANT_COLOR
 0x8001

	)

109 
	#GL_ONE_MINUS_CONSTANT_COLOR
 0x8002

	)

110 
	#GL_CONSTANT_ALPHA
 0x8003

	)

111 
	#GL_ONE_MINUS_CONSTANT_ALPHA
 0x8004

	)

112 
	#GL_BLEND_COLOR
 0x8005

	)

115 
	#GL_ARRAY_BUFFER
 0x8892

	)

116 
	#GL_ELEMENT_ARRAY_BUFFER
 0x8893

	)

117 
	#GL_ARRAY_BUFFER_BINDING
 0x8894

	)

118 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING
 0x8895

	)

120 
	#GL_STREAM_DRAW
 0x88E0

	)

121 
	#GL_STATIC_DRAW
 0x88E4

	)

122 
	#GL_DYNAMIC_DRAW
 0x88E8

	)

124 
	#GL_BUFFER_SIZE
 0x8764

	)

125 
	#GL_BUFFER_USAGE
 0x8765

	)

127 
	#GL_CURRENT_VERTEX_ATTRIB
 0x8626

	)

130 
	#GL_FRONT
 0x0404

	)

131 
	#GL_BACK
 0x0405

	)

132 
	#GL_FRONT_AND_BACK
 0x0408

	)

145 
	#GL_TEXTURE_2D
 0x0DE1

	)

146 
	#GL_CULL_FACE
 0x0B44

	)

147 
	#GL_BLEND
 0x0BE2

	)

148 
	#GL_DITHER
 0x0BD0

	)

149 
	#GL_STENCIL_TEST
 0x0B90

	)

150 
	#GL_DEPTH_TEST
 0x0B71

	)

151 
	#GL_SCISSOR_TEST
 0x0C11

	)

152 
	#GL_POLYGON_OFFSET_FILL
 0x8037

	)

153 
	#GL_SAMPLE_ALPHA_TO_COVERAGE
 0x809E

	)

154 
	#GL_SAMPLE_COVERAGE
 0x80A0

	)

157 
	#GL_NO_ERROR
 0

	)

158 
	#GL_INVALID_ENUM
 0x0500

	)

159 
	#GL_INVALID_VALUE
 0x0501

	)

160 
	#GL_INVALID_OPERATION
 0x0502

	)

161 
	#GL_OUT_OF_MEMORY
 0x0505

	)

164 
	#GL_CW
 0x0900

	)

165 
	#GL_CCW
 0x0901

	)

168 
	#GL_LINE_WIDTH
 0x0B21

	)

169 
	#GL_ALIASED_POINT_SIZE_RANGE
 0x846D

	)

170 
	#GL_ALIASED_LINE_WIDTH_RANGE
 0x846E

	)

171 
	#GL_CULL_FACE_MODE
 0x0B45

	)

172 
	#GL_FRONT_FACE
 0x0B46

	)

173 
	#GL_DEPTH_RANGE
 0x0B70

	)

174 
	#GL_DEPTH_WRITEMASK
 0x0B72

	)

175 
	#GL_DEPTH_CLEAR_VALUE
 0x0B73

	)

176 
	#GL_DEPTH_FUNC
 0x0B74

	)

177 
	#GL_STENCIL_CLEAR_VALUE
 0x0B91

	)

178 
	#GL_STENCIL_FUNC
 0x0B92

	)

179 
	#GL_STENCIL_FAIL
 0x0B94

	)

180 
	#GL_STENCIL_PASS_DEPTH_FAIL
 0x0B95

	)

181 
	#GL_STENCIL_PASS_DEPTH_PASS
 0x0B96

	)

182 
	#GL_STENCIL_REF
 0x0B97

	)

183 
	#GL_STENCIL_VALUE_MASK
 0x0B93

	)

184 
	#GL_STENCIL_WRITEMASK
 0x0B98

	)

185 
	#GL_STENCIL_BACK_FUNC
 0x8800

	)

186 
	#GL_STENCIL_BACK_FAIL
 0x8801

	)

187 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL
 0x8802

	)

188 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS
 0x8803

	)

189 
	#GL_STENCIL_BACK_REF
 0x8CA3

	)

190 
	#GL_STENCIL_BACK_VALUE_MASK
 0x8CA4

	)

191 
	#GL_STENCIL_BACK_WRITEMASK
 0x8CA5

	)

192 
	#GL_VIEWPORT
 0x0BA2

	)

193 
	#GL_SCISSOR_BOX
 0x0C10

	)

195 
	#GL_COLOR_CLEAR_VALUE
 0x0C22

	)

196 
	#GL_COLOR_WRITEMASK
 0x0C23

	)

197 
	#GL_UNPACK_ALIGNMENT
 0x0CF5

	)

198 
	#GL_PACK_ALIGNMENT
 0x0D05

	)

199 
	#GL_MAX_TEXTURE_SIZE
 0x0D33

	)

200 
	#GL_MAX_VIEWPORT_DIMS
 0x0D3A

	)

201 
	#GL_SUBPIXEL_BITS
 0x0D50

	)

202 
	#GL_RED_BITS
 0x0D52

	)

203 
	#GL_GREEN_BITS
 0x0D53

	)

204 
	#GL_BLUE_BITS
 0x0D54

	)

205 
	#GL_ALPHA_BITS
 0x0D55

	)

206 
	#GL_DEPTH_BITS
 0x0D56

	)

207 
	#GL_STENCIL_BITS
 0x0D57

	)

208 
	#GL_POLYGON_OFFSET_UNITS
 0x2A00

	)

210 
	#GL_POLYGON_OFFSET_FACTOR
 0x8038

	)

211 
	#GL_TEXTURE_BINDING_2D
 0x8069

	)

212 
	#GL_SAMPLE_BUFFERS
 0x80A8

	)

213 
	#GL_SAMPLES
 0x80A9

	)

214 
	#GL_SAMPLE_COVERAGE_VALUE
 0x80AA

	)

215 
	#GL_SAMPLE_COVERAGE_INVERT
 0x80AB

	)

223 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS
 0x86A2

	)

224 
	#GL_COMPRESSED_TEXTURE_FORMATS
 0x86A3

	)

227 
	#GL_DONT_CARE
 0x1100

	)

228 
	#GL_FASTEST
 0x1101

	)

229 
	#GL_NICEST
 0x1102

	)

232 
	#GL_GENERATE_MIPMAP_HINT
 0x8192

	)

235 
	#GL_BYTE
 0x1400

	)

236 
	#GL_UNSIGNED_BYTE
 0x1401

	)

237 
	#GL_SHORT
 0x1402

	)

238 
	#GL_UNSIGNED_SHORT
 0x1403

	)

239 
	#GL_INT
 0x1404

	)

240 
	#GL_UNSIGNED_INT
 0x1405

	)

241 
	#GL_FLOAT
 0x1406

	)

242 
	#GL_FIXED
 0x140C

	)

245 
	#GL_DEPTH_COMPONENT
 0x1902

	)

246 
	#GL_ALPHA
 0x1906

	)

247 
	#GL_RGB
 0x1907

	)

248 
	#GL_RGBA
 0x1908

	)

249 
	#GL_LUMINANCE
 0x1909

	)

250 
	#GL_LUMINANCE_ALPHA
 0x190A

	)

254 
	#GL_UNSIGNED_SHORT_4_4_4_4
 0x8033

	)

255 
	#GL_UNSIGNED_SHORT_5_5_5_1
 0x8034

	)

256 
	#GL_UNSIGNED_SHORT_5_6_5
 0x8363

	)

259 
	#GL_FRAGMENT_SHADER
 0x8B30

	)

260 
	#GL_VERTEX_SHADER
 0x8B31

	)

261 
	#GL_MAX_VERTEX_ATTRIBS
 0x8869

	)

262 
	#GL_MAX_VERTEX_UNIFORM_VECTORS
 0x8DFB

	)

263 
	#GL_MAX_VARYING_VECTORS
 0x8DFC

	)

264 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
 0x8B4D

	)

265 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
 0x8B4C

	)

266 
	#GL_MAX_TEXTURE_IMAGE_UNITS
 0x8872

	)

267 
	#GL_MAX_FRAGMENT_UNIFORM_VECTORS
 0x8DFD

	)

268 
	#GL_SHADER_TYPE
 0x8B4F

	)

269 
	#GL_DELETE_STATUS
 0x8B80

	)

270 
	#GL_LINK_STATUS
 0x8B82

	)

271 
	#GL_VALIDATE_STATUS
 0x8B83

	)

272 
	#GL_ATTACHED_SHADERS
 0x8B85

	)

273 
	#GL_ACTIVE_UNIFORMS
 0x8B86

	)

274 
	#GL_ACTIVE_UNIFORM_MAX_LENGTH
 0x8B87

	)

275 
	#GL_ACTIVE_ATTRIBUTES
 0x8B89

	)

276 
	#GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
 0x8B8A

	)

277 
	#GL_SHADING_LANGUAGE_VERSION
 0x8B8C

	)

278 
	#GL_CURRENT_PROGRAM
 0x8B8D

	)

281 
	#GL_NEVER
 0x0200

	)

282 
	#GL_LESS
 0x0201

	)

283 
	#GL_EQUAL
 0x0202

	)

284 
	#GL_LEQUAL
 0x0203

	)

285 
	#GL_GREATER
 0x0204

	)

286 
	#GL_NOTEQUAL
 0x0205

	)

287 
	#GL_GEQUAL
 0x0206

	)

288 
	#GL_ALWAYS
 0x0207

	)

292 
	#GL_KEEP
 0x1E00

	)

293 
	#GL_REPLACE
 0x1E01

	)

294 
	#GL_INCR
 0x1E02

	)

295 
	#GL_DECR
 0x1E03

	)

296 
	#GL_INVERT
 0x150A

	)

297 
	#GL_INCR_WRAP
 0x8507

	)

298 
	#GL_DECR_WRAP
 0x8508

	)

301 
	#GL_VENDOR
 0x1F00

	)

302 
	#GL_RENDERER
 0x1F01

	)

303 
	#GL_VERSION
 0x1F02

	)

304 
	#GL_EXTENSIONS
 0x1F03

	)

307 
	#GL_NEAREST
 0x2600

	)

308 
	#GL_LINEAR
 0x2601

	)

313 
	#GL_NEAREST_MIPMAP_NEAREST
 0x2700

	)

314 
	#GL_LINEAR_MIPMAP_NEAREST
 0x2701

	)

315 
	#GL_NEAREST_MIPMAP_LINEAR
 0x2702

	)

316 
	#GL_LINEAR_MIPMAP_LINEAR
 0x2703

	)

319 
	#GL_TEXTURE_MAG_FILTER
 0x2800

	)

320 
	#GL_TEXTURE_MIN_FILTER
 0x2801

	)

321 
	#GL_TEXTURE_WRAP_S
 0x2802

	)

322 
	#GL_TEXTURE_WRAP_T
 0x2803

	)

326 
	#GL_TEXTURE
 0x1702

	)

328 
	#GL_TEXTURE_CUBE_MAP
 0x8513

	)

329 
	#GL_TEXTURE_BINDING_CUBE_MAP
 0x8514

	)

330 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X
 0x8515

	)

331 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X
 0x8516

	)

332 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y
 0x8517

	)

333 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
 0x8518

	)

334 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z
 0x8519

	)

335 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
 0x851A

	)

336 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE
 0x851C

	)

339 
	#GL_TEXTURE0
 0x84C0

	)

340 
	#GL_TEXTURE1
 0x84C1

	)

341 
	#GL_TEXTURE2
 0x84C2

	)

342 
	#GL_TEXTURE3
 0x84C3

	)

343 
	#GL_TEXTURE4
 0x84C4

	)

344 
	#GL_TEXTURE5
 0x84C5

	)

345 
	#GL_TEXTURE6
 0x84C6

	)

346 
	#GL_TEXTURE7
 0x84C7

	)

347 
	#GL_TEXTURE8
 0x84C8

	)

348 
	#GL_TEXTURE9
 0x84C9

	)

349 
	#GL_TEXTURE10
 0x84CA

	)

350 
	#GL_TEXTURE11
 0x84CB

	)

351 
	#GL_TEXTURE12
 0x84CC

	)

352 
	#GL_TEXTURE13
 0x84CD

	)

353 
	#GL_TEXTURE14
 0x84CE

	)

354 
	#GL_TEXTURE15
 0x84CF

	)

355 
	#GL_TEXTURE16
 0x84D0

	)

356 
	#GL_TEXTURE17
 0x84D1

	)

357 
	#GL_TEXTURE18
 0x84D2

	)

358 
	#GL_TEXTURE19
 0x84D3

	)

359 
	#GL_TEXTURE20
 0x84D4

	)

360 
	#GL_TEXTURE21
 0x84D5

	)

361 
	#GL_TEXTURE22
 0x84D6

	)

362 
	#GL_TEXTURE23
 0x84D7

	)

363 
	#GL_TEXTURE24
 0x84D8

	)

364 
	#GL_TEXTURE25
 0x84D9

	)

365 
	#GL_TEXTURE26
 0x84DA

	)

366 
	#GL_TEXTURE27
 0x84DB

	)

367 
	#GL_TEXTURE28
 0x84DC

	)

368 
	#GL_TEXTURE29
 0x84DD

	)

369 
	#GL_TEXTURE30
 0x84DE

	)

370 
	#GL_TEXTURE31
 0x84DF

	)

371 
	#GL_ACTIVE_TEXTURE
 0x84E0

	)

374 
	#GL_REPEAT
 0x2901

	)

375 
	#GL_CLAMP_TO_EDGE
 0x812F

	)

376 
	#GL_MIRRORED_REPEAT
 0x8370

	)

379 
	#GL_FLOAT_VEC2
 0x8B50

	)

380 
	#GL_FLOAT_VEC3
 0x8B51

	)

381 
	#GL_FLOAT_VEC4
 0x8B52

	)

382 
	#GL_INT_VEC2
 0x8B53

	)

383 
	#GL_INT_VEC3
 0x8B54

	)

384 
	#GL_INT_VEC4
 0x8B55

	)

385 
	#GL_BOOL
 0x8B56

	)

386 
	#GL_BOOL_VEC2
 0x8B57

	)

387 
	#GL_BOOL_VEC3
 0x8B58

	)

388 
	#GL_BOOL_VEC4
 0x8B59

	)

389 
	#GL_FLOAT_MAT2
 0x8B5A

	)

390 
	#GL_FLOAT_MAT3
 0x8B5B

	)

391 
	#GL_FLOAT_MAT4
 0x8B5C

	)

392 
	#GL_SAMPLER_2D
 0x8B5E

	)

393 
	#GL_SAMPLER_CUBE
 0x8B60

	)

396 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED
 0x8622

	)

397 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE
 0x8623

	)

398 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE
 0x8624

	)

399 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE
 0x8625

	)

400 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
 0x886A

	)

401 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER
 0x8645

	)

402 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
 0x889F

	)

405 
	#GL_IMPLEMENTATION_COLOR_READ_TYPE
 0x8B9A

	)

406 
	#GL_IMPLEMENTATION_COLOR_READ_FORMAT
 0x8B9B

	)

409 
	#GL_COMPILE_STATUS
 0x8B81

	)

410 
	#GL_INFO_LOG_LENGTH
 0x8B84

	)

411 
	#GL_SHADER_SOURCE_LENGTH
 0x8B88

	)

412 
	#GL_SHADER_COMPILER
 0x8DFA

	)

415 
	#GL_SHADER_BINARY_FORMATS
 0x8DF8

	)

416 
	#GL_NUM_SHADER_BINARY_FORMATS
 0x8DF9

	)

419 
	#GL_LOW_FLOAT
 0x8DF0

	)

420 
	#GL_MEDIUM_FLOAT
 0x8DF1

	)

421 
	#GL_HIGH_FLOAT
 0x8DF2

	)

422 
	#GL_LOW_INT
 0x8DF3

	)

423 
	#GL_MEDIUM_INT
 0x8DF4

	)

424 
	#GL_HIGH_INT
 0x8DF5

	)

427 
	#GL_FRAMEBUFFER
 0x8D40

	)

428 
	#GL_RENDERBUFFER
 0x8D41

	)

430 
	#GL_RGBA4
 0x8056

	)

431 
	#GL_RGB5_A1
 0x8057

	)

432 
	#GL_RGB565
 0x8D62

	)

433 
	#GL_DEPTH_COMPONENT16
 0x81A5

	)

434 
	#GL_STENCIL_INDEX
 0x1901

	)

435 
	#GL_STENCIL_INDEX8
 0x8D48

	)

437 
	#GL_RENDERBUFFER_WIDTH
 0x8D42

	)

438 
	#GL_RENDERBUFFER_HEIGHT
 0x8D43

	)

439 
	#GL_RENDERBUFFER_INTERNAL_FORMAT
 0x8D44

	)

440 
	#GL_RENDERBUFFER_RED_SIZE
 0x8D50

	)

441 
	#GL_RENDERBUFFER_GREEN_SIZE
 0x8D51

	)

442 
	#GL_RENDERBUFFER_BLUE_SIZE
 0x8D52

	)

443 
	#GL_RENDERBUFFER_ALPHA_SIZE
 0x8D53

	)

444 
	#GL_RENDERBUFFER_DEPTH_SIZE
 0x8D54

	)

445 
	#GL_RENDERBUFFER_STENCIL_SIZE
 0x8D55

	)

447 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
 0x8CD0

	)

448 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
 0x8CD1

	)

449 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
 0x8CD2

	)

450 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
 0x8CD3

	)

452 
	#GL_COLOR_ATTACHMENT0
 0x8CE0

	)

453 
	#GL_DEPTH_ATTACHMENT
 0x8D00

	)

454 
	#GL_STENCIL_ATTACHMENT
 0x8D20

	)

456 
	#GL_NONE
 0

	)

458 
	#GL_FRAMEBUFFER_COMPLETE
 0x8CD5

	)

459 
	#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
 0x8CD6

	)

460 
	#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
 0x8CD7

	)

461 
	#GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS
 0x8CD9

	)

462 
	#GL_FRAMEBUFFER_UNSUPPORTED
 0x8CDD

	)

464 
	#GL_FRAMEBUFFER_BINDING
 0x8CA6

	)

465 
	#GL_RENDERBUFFER_BINDING
 0x8CA7

	)

466 
	#GL_MAX_RENDERBUFFER_SIZE
 0x84E8

	)

468 
	#GL_INVALID_FRAMEBUFFER_OPERATION
 0x0506

	)

474 
GL_APICALL
 
GL_APIENTRY
 
glA˘iveTextuª
 (
GLíum
 
ãxtuª
);

475 
GL_APICALL
 
GL_APIENTRY
 
glAâachShadî
 (
GLuöt
 
¥ogøm
, GLuöà
shadî
);

476 
GL_APICALL
 
GL_APIENTRY
 
glBödAâribLoˇti⁄
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, c⁄° 
GLch¨
* 
«me
);

477 
GL_APICALL
 
GL_APIENTRY
 
glBödBuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
buf„r
);

478 
GL_APICALL
 
GL_APIENTRY
 
glBödFømebuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
‰amebuf„r
);

479 
GL_APICALL
 
GL_APIENTRY
 
glBödRídîbuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

480 
GL_APICALL
 
GL_APIENTRY
 
glBödTextuª
 (
GLíum
 
èrgë
, 
GLuöt
 
ãxtuª
);

481 
GL_APICALL
 
GL_APIENTRY
 
glBÀndCﬁ‹
 (
GL˛ampf
 
ªd
, GL˛amp‡
gªí
, GL˛amp‡
blue
, GL˛amp‡
Æpha
);

482 
GL_APICALL
 
GL_APIENTRY
 
glBÀndEqu©i⁄
 ( 
GLíum
 
mode
 );

483 
GL_APICALL
 
GL_APIENTRY
 
glBÀndEqu©i⁄Sï¨©e
 (
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

484 
GL_APICALL
 
GL_APIENTRY
 
glBÀndFunc
 (
GLíum
 
sÁ˘‹
, GLíum 
dÁ˘‹
);

485 
GL_APICALL
 
GL_APIENTRY
 
glBÀndFuncSï¨©e
 (
GLíum
 
§cRGB
, GLíum 
d°RGB
, GLíum 
§cAÕha
, GLíum 
d°AÕha
);

486 
GL_APICALL
 
GL_APIENTRY
 
glBuf„rD©a
 (
GLíum
 
èrgë
, 
GLsizeùå
 
size
, c⁄° 
GLvoid
* 
d©a
, GLíum 
ußge
);

487 
GL_APICALL
 
GL_APIENTRY
 
glBuf„rSubD©a
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, c⁄° 
GLvoid
* 
d©a
);

488 
GL_APICALL
 
GLíum
 
GL_APIENTRY
 
glCheckFømebuf„rSètus
 (GLíum 
èrgë
);

489 
GL_APICALL
 
GL_APIENTRY
 
glCÀ¨
 (
GLbôfõld
 
mask
);

490 
GL_APICALL
 
GL_APIENTRY
 
glCÀ¨Cﬁ‹
 (
GL˛ampf
 
ªd
, GL˛amp‡
gªí
, GL˛amp‡
blue
, GL˛amp‡
Æpha
);

491 
GL_APICALL
 
GL_APIENTRY
 
glCÀ¨Dïthf
 (
GL˛ampf
 
dïth
);

492 
GL_APICALL
 
GL_APIENTRY
 
glCÀ¨Sãncû
 (
GLöt
 
s
);

493 
GL_APICALL
 
GL_APIENTRY
 
glCﬁ‹Mask
 (
GLboﬁón
 
ªd
, GLboﬁó¿
gªí
, GLboﬁó¿
blue
, GLboﬁó¿
Æpha
);

494 
GL_APICALL
 
GL_APIENTRY
 
glCompûeShadî
 (
GLuöt
 
shadî
);

495 
GL_APICALL
 
GL_APIENTRY
 
glCom¥es£dTexImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
* 
d©a
);

496 
GL_APICALL
 
GL_APIENTRY
 
glCom¥es£dTexSubImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
* 
d©a
);

497 
GL_APICALL
 
GL_APIENTRY
 
glC›yTexImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
);

498 
GL_APICALL
 
GL_APIENTRY
 
glC›yTexSubImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

499 
GL_APICALL
 
GLuöt
 
GL_APIENTRY
 
glCª©eProgøm
 ();

500 
GL_APICALL
 
GLuöt
 
GL_APIENTRY
 
glCª©eShadî
 (
GLíum
 
ty≥
);

501 
GL_APICALL
 
GL_APIENTRY
 
glCuŒFa˚
 (
GLíum
 
mode
);

502 
GL_APICALL
 
GL_APIENTRY
 
glDñëeBuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
* 
buf„rs
);

503 
GL_APICALL
 
GL_APIENTRY
 
glDñëeFømebuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
* 
‰amebuf„rs
);

504 
GL_APICALL
 
GL_APIENTRY
 
glDñëeProgøm
 (
GLuöt
 
¥ogøm
);

505 
GL_APICALL
 
GL_APIENTRY
 
glDñëeRídîbuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
* 
ªndîbuf„rs
);

506 
GL_APICALL
 
GL_APIENTRY
 
glDñëeShadî
 (
GLuöt
 
shadî
);

507 
GL_APICALL
 
GL_APIENTRY
 
glDñëeTextuªs
 (
GLsizei
 
n
, c⁄° 
GLuöt
* 
ãxtuªs
);

508 
GL_APICALL
 
GL_APIENTRY
 
glDïthFunc
 (
GLíum
 
func
);

509 
GL_APICALL
 
GL_APIENTRY
 
glDïthMask
 (
GLboﬁón
 
Êag
);

510 
GL_APICALL
 
GL_APIENTRY
 
glDïthR™gef
 (
GL˛ampf
 
zNór
, GL˛amp‡
zF¨
);

511 
GL_APICALL
 
GL_APIENTRY
 
glDëachShadî
 (
GLuöt
 
¥ogøm
, GLuöà
shadî
);

512 
GL_APICALL
 
GL_APIENTRY
 
glDißbÀ
 (
GLíum
 
ˇp
);

513 
GL_APICALL
 
GL_APIENTRY
 
glDißbÀVîãxAâribAºay
 (
GLuöt
 
ödex
);

514 
GL_APICALL
 
GL_APIENTRY
 
glDøwAºays
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

515 
GL_APICALL
 
GL_APIENTRY
 
glDøwEÀmíts
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
* 
ödi˚s
);

516 
GL_APICALL
 
GL_APIENTRY
 
glE«bÀ
 (
GLíum
 
ˇp
);

517 
GL_APICALL
 
GL_APIENTRY
 
glE«bÀVîãxAâribAºay
 (
GLuöt
 
ödex
);

518 
GL_APICALL
 
GL_APIENTRY
 
glFöish
 ();

519 
GL_APICALL
 
GL_APIENTRY
 
glFlush
 ();

520 
GL_APICALL
 
GL_APIENTRY
 
glFømebuf„rRídîbuf„r
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, 
GLuöt
 
ªndîbuf„r
);

521 
GL_APICALL
 
GL_APIENTRY
 
glFømebuf„rTextuª2D
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

522 
GL_APICALL
 
GL_APIENTRY
 
glFr⁄tFa˚
 (
GLíum
 
mode
);

523 
GL_APICALL
 
GL_APIENTRY
 
glGíBuf„rs
 (
GLsizei
 
n
, 
GLuöt
* 
buf„rs
);

524 
GL_APICALL
 
GL_APIENTRY
 
glGíî©eMùm≠
 (
GLíum
 
èrgë
);

525 
GL_APICALL
 
GL_APIENTRY
 
glGíFømebuf„rs
 (
GLsizei
 
n
, 
GLuöt
* 
‰amebuf„rs
);

526 
GL_APICALL
 
GL_APIENTRY
 
glGíRídîbuf„rs
 (
GLsizei
 
n
, 
GLuöt
* 
ªndîbuf„rs
);

527 
GL_APICALL
 
GL_APIENTRY
 
glGíTextuªs
 (
GLsizei
 
n
, 
GLuöt
* 
ãxtuªs
);

528 
GL_APICALL
 
GL_APIENTRY
 
glGëA˘iveAârib
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufsize
, GLsizei* 
Àngth
, 
GLöt
* 
size
, 
GLíum
* 
ty≥
, 
GLch¨
* 
«me
);

529 
GL_APICALL
 
GL_APIENTRY
 
glGëA˘iveUnif‹m
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufsize
, GLsizei* 
Àngth
, 
GLöt
* 
size
, 
GLíum
* 
ty≥
, 
GLch¨
* 
«me
);

530 
GL_APICALL
 
GL_APIENTRY
 
glGëAâachedShadîs
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
maxcou¡
, GLsizei* 
cou¡
, GLuöt* 
shadîs
);

531 
GL_APICALL
 
GL_APIENTRY
 
glGëAâribLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
* 
«me
);

532 
GL_APICALL
 
GL_APIENTRY
 
glGëBoﬁónv
 (
GLíum
 
≤ame
, 
GLboﬁón
* 
∑øms
);

533 
GL_APICALL
 
GL_APIENTRY
 
glGëBuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
* 
∑øms
);

534 
GL_APICALL
 
GLíum
 
GL_APIENTRY
 
glGëEº‹
 ();

535 
GL_APICALL
 
GL_APIENTRY
 
glGëFlﬂtv
 (
GLíum
 
≤ame
, 
GLÊﬂt
* 
∑øms
);

536 
GL_APICALL
 
GL_APIENTRY
 
glGëFømebuf„rAâachmítP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
≤ame
, 
GLöt
* 
∑øms
);

537 
GL_APICALL
 
GL_APIENTRY
 
glGëI¡egîv
 (
GLíum
 
≤ame
, 
GLöt
* 
∑øms
);

538 
GL_APICALL
 
GL_APIENTRY
 
glGëProgømiv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
* 
∑øms
);

539 
GL_APICALL
 
GL_APIENTRY
 
glGëProgømInfoLog
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
bufsize
, GLsizei* 
Àngth
, 
GLch¨
* 
öfﬁog
);

540 
GL_APICALL
 
GL_APIENTRY
 
glGëRídîbuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
* 
∑øms
);

541 
GL_APICALL
 
GL_APIENTRY
 
glGëShadîiv
 (
GLuöt
 
shadî
, 
GLíum
 
≤ame
, 
GLöt
* 
∑øms
);

542 
GL_APICALL
 
GL_APIENTRY
 
glGëShadîInfoLog
 (
GLuöt
 
shadî
, 
GLsizei
 
bufsize
, GLsizei* 
Àngth
, 
GLch¨
* 
öfﬁog
);

543 
GL_APICALL
 
GL_APIENTRY
 
glGëShadîPªcisi⁄F‹m©
 (
GLíum
 
shadîty≥
, GLíum 
¥ecisi⁄ty≥
, 
GLöt
* 
ønge
, GLöt* 
¥ecisi⁄
);

544 
GL_APICALL
 
GL_APIENTRY
 
glGëShadîSour˚
 (
GLuöt
 
shadî
, 
GLsizei
 
bufsize
, GLsizei* 
Àngth
, 
GLch¨
* 
sour˚
);

545 
GL_APICALL
 c⁄° 
GLubyã
* 
GL_APIENTRY
 
glGëSåög
 (
GLíum
 
«me
);

546 
GL_APICALL
 
GL_APIENTRY
 
glGëTexP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
* 
∑øms
);

547 
GL_APICALL
 
GL_APIENTRY
 
glGëTexP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
* 
∑øms
);

548 
GL_APICALL
 
GL_APIENTRY
 
glGëUnif‹mfv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
* 
∑øms
);

549 
GL_APICALL
 
GL_APIENTRY
 
glGëUnif‹miv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöt* 
∑øms
);

550 
GL_APICALL
 
GL_APIENTRY
 
glGëUnif‹mLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
* 
«me
);

551 
GL_APICALL
 
GL_APIENTRY
 
glGëVîãxAâribfv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
* 
∑øms
);

552 
GL_APICALL
 
GL_APIENTRY
 
glGëVîãxAâribiv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
* 
∑øms
);

553 
GL_APICALL
 
GL_APIENTRY
 
glGëVîãxAâribPoöãrv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLvoid
** 
poöãr
);

554 
GL_APICALL
 
GL_APIENTRY
 
glHöt
 (
GLíum
 
èrgë
, GLíum 
mode
);

555 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
glIsBuf„r
 (
GLuöt
 
buf„r
);

556 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
glIsE«bÀd
 (
GLíum
 
ˇp
);

557 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
glIsFømebuf„r
 (
GLuöt
 
‰amebuf„r
);

558 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
glIsProgøm
 (
GLuöt
 
¥ogøm
);

559 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
glIsRídîbuf„r
 (
GLuöt
 
ªndîbuf„r
);

560 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
glIsShadî
 (
GLuöt
 
shadî
);

561 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
glIsTextuª
 (
GLuöt
 
ãxtuª
);

562 
GL_APICALL
 
GL_APIENTRY
 
glLöeWidth
 (
GLÊﬂt
 
width
);

563 
GL_APICALL
 
GL_APIENTRY
 
glLökProgøm
 (
GLuöt
 
¥ogøm
);

564 
GL_APICALL
 
GL_APIENTRY
 
glPixñSt‹ei
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

565 
GL_APICALL
 
GL_APIENTRY
 
glPﬁyg⁄Off£t
 (
GLÊﬂt
 
Á˘‹
, GLÊﬂà
unôs
);

566 
GL_APICALL
 
GL_APIENTRY
 
glRódPixñs
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, 
GLvoid
* 
pixñs
);

567 
GL_APICALL
 
GL_APIENTRY
 
glRñó£ShadîCompûî
 ();

568 
GL_APICALL
 
GL_APIENTRY
 
glRídîbuf„rSt‹age
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

569 
GL_APICALL
 
GL_APIENTRY
 
glSam∂eCovîage
 (
GL˛ampf
 
vÆue
, 
GLboﬁón
 
övît
);

570 
GL_APICALL
 
GL_APIENTRY
 
glSciss‹
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

571 
GL_APICALL
 
GL_APIENTRY
 
glShadîBö¨y
 (
GLsizei
 
n
, c⁄° 
GLuöt
* 
shadîs
, 
GLíum
 
bö¨yf‹m©
, c⁄° 
GLvoid
* 
bö¨y
, GLsizeò
Àngth
);

572 
GL_APICALL
 
GL_APIENTRY
 
glShadîSour˚
 (
GLuöt
 
shadî
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
** 
°rög
, c⁄° 
GLöt
* 
Àngth
);

573 
GL_APICALL
 
GL_APIENTRY
 
glSãncûFunc
 (
GLíum
 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

574 
GL_APICALL
 
GL_APIENTRY
 
glSãncûFuncSï¨©e
 (
GLíum
 
Á˚
, GLíum 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

575 
GL_APICALL
 
GL_APIENTRY
 
glSãncûMask
 (
GLuöt
 
mask
);

576 
GL_APICALL
 
GL_APIENTRY
 
glSãncûMaskSï¨©e
 (
GLíum
 
Á˚
, 
GLuöt
 
mask
);

577 
GL_APICALL
 
GL_APIENTRY
 
glSãncûOp
 (
GLíum
 
Áû
, GLíum 
zÁû
, GLíum 
z∑ss
);

578 
GL_APICALL
 
GL_APIENTRY
 
glSãncûOpSï¨©e
 (
GLíum
 
Á˚
, GLíum 
Áû
, GLíum 
zÁû
, GLíum 
z∑ss
);

579 
GL_APICALL
 
GL_APIENTRY
 
glTexImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
* 
pixñs
);

580 
GL_APICALL
 
GL_APIENTRY
 
glTexP¨amëîf
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

581 
GL_APICALL
 
GL_APIENTRY
 
glTexP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
* 
∑øms
);

582 
GL_APICALL
 
GL_APIENTRY
 
glTexP¨amëîi
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

583 
GL_APICALL
 
GL_APIENTRY
 
glTexP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
* 
∑øms
);

584 
GL_APICALL
 
GL_APIENTRY
 
glTexSubImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
* 
pixñs
);

585 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m1f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
x
);

586 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m1fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
* 
v
);

587 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m1i
 (
GLöt
 
loˇti⁄
, GLöà
x
);

588 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m1iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöt* 
v
);

589 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m2f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

590 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
* 
v
);

591 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m2i
 (
GLöt
 
loˇti⁄
, GLöà
x
, GLöà
y
);

592 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m2iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöt* 
v
);

593 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m3f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

594 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
* 
v
);

595 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m3i
 (
GLöt
 
loˇti⁄
, GLöà
x
, GLöà
y
, GLöà
z
);

596 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m3iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöt* 
v
);

597 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m4f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

598 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
* 
v
);

599 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m4i
 (
GLöt
 
loˇti⁄
, GLöà
x
, GLöà
y
, GLöà
z
, GLöà
w
);

600 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m4iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöt* 
v
);

601 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹mM©rix2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
* 
vÆue
);

602 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹mM©rix3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
* 
vÆue
);

603 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹mM©rix4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
* 
vÆue
);

604 
GL_APICALL
 
GL_APIENTRY
 
glU£Progøm
 (
GLuöt
 
¥ogøm
);

605 
GL_APICALL
 
GL_APIENTRY
 
glVÆid©eProgøm
 (
GLuöt
 
¥ogøm
);

606 
GL_APICALL
 
GL_APIENTRY
 
glVîãxAârib1f
 (
GLuöt
 
ödx
, 
GLÊﬂt
 
x
);

607 
GL_APICALL
 
GL_APIENTRY
 
glVîãxAârib1fv
 (
GLuöt
 
ödx
, c⁄° 
GLÊﬂt
* 
vÆues
);

608 
GL_APICALL
 
GL_APIENTRY
 
glVîãxAârib2f
 (
GLuöt
 
ödx
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

609 
GL_APICALL
 
GL_APIENTRY
 
glVîãxAârib2fv
 (
GLuöt
 
ödx
, c⁄° 
GLÊﬂt
* 
vÆues
);

610 
GL_APICALL
 
GL_APIENTRY
 
glVîãxAârib3f
 (
GLuöt
 
ödx
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

611 
GL_APICALL
 
GL_APIENTRY
 
glVîãxAârib3fv
 (
GLuöt
 
ödx
, c⁄° 
GLÊﬂt
* 
vÆues
);

612 
GL_APICALL
 
GL_APIENTRY
 
glVîãxAârib4f
 (
GLuöt
 
ödx
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

613 
GL_APICALL
 
GL_APIENTRY
 
glVîãxAârib4fv
 (
GLuöt
 
ödx
, c⁄° 
GLÊﬂt
* 
vÆues
);

614 
GL_APICALL
 
GL_APIENTRY
 
glVîãxAâribPoöãr
 (
GLuöt
 
ödx
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
* 
±r
);

615 
GL_APICALL
 
GL_APIENTRY
 
glVõwp‹t
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

617 #ifde‡
__˝lu•lus


	@jni/include/include/GLES2/gl2ext.h

1 #i‚de‡
__gl2ext_h_


2 
	#__gl2ext_h_


	)

6 #ifde‡
__˝lu•lus


15 #i‚de‡
GL_APIENTRYP


16 
	#GL_APIENTRYP
 
GL_APIENTRY
*

	)

24 #i‚de‡
GL_OES_com¥es£d_ETC1_RGB8_ãxtuª


25 
	#GL_ETC1_RGB8_OES
 0x8D64

	)

29 #i‚de‡
GL_OES_com¥es£d_∑Àâed_ãxtuª


30 
	#GL_PALETTE4_RGB8_OES
 0x8B90

	)

31 
	#GL_PALETTE4_RGBA8_OES
 0x8B91

	)

32 
	#GL_PALETTE4_R5_G6_B5_OES
 0x8B92

	)

33 
	#GL_PALETTE4_RGBA4_OES
 0x8B93

	)

34 
	#GL_PALETTE4_RGB5_A1_OES
 0x8B94

	)

35 
	#GL_PALETTE8_RGB8_OES
 0x8B95

	)

36 
	#GL_PALETTE8_RGBA8_OES
 0x8B96

	)

37 
	#GL_PALETTE8_R5_G6_B5_OES
 0x8B97

	)

38 
	#GL_PALETTE8_RGBA4_OES
 0x8B98

	)

39 
	#GL_PALETTE8_RGB5_A1_OES
 0x8B99

	)

43 #i‚de‡
GL_OES_dïth24


44 
	#GL_DEPTH_COMPONENT24_OES
 0x81A6

	)

48 #i‚de‡
GL_OES_dïth32


49 
	#GL_DEPTH_COMPONENT32_OES
 0x81A7

	)

56 #i‚de‡
GL_OES_EGL_image


57 * 
	tGLeglImageOES
;

61 #i‚de‡
GL_OES_ñemít_ödex_uöt


62 
	#GL_UNSIGNED_INT
 0x1405

	)

66 #i‚de‡
GL_OES_gë_¥ogøm_bö¨y


67 
	#GL_PROGRAM_BINARY_LENGTH_OES
 0x8741

	)

68 
	#GL_NUM_PROGRAM_BINARY_FORMATS_OES
 0x87FE

	)

69 
	#GL_PROGRAM_BINARY_FORMATS_OES
 0x87FF

	)

73 #i‚de‡
GL_OES_m≠buf„r


74 
	#GL_WRITE_ONLY_OES
 0x88B9

	)

75 
	#GL_BUFFER_ACCESS_OES
 0x88BB

	)

76 
	#GL_BUFFER_MAPPED_OES
 0x88BC

	)

77 
	#GL_BUFFER_MAP_POINTER_OES
 0x88BD

	)

81 #i‚de‡
GL_OES_∑cked_dïth_°ícû


82 
	#GL_DEPTH_STENCIL_OES
 0x84F9

	)

83 
	#GL_UNSIGNED_INT_24_8_OES
 0x84FA

	)

84 
	#GL_DEPTH24_STENCIL8_OES
 0x88F0

	)

88 #i‚de‡
GL_OES_rgb8_rgba8


89 
	#GL_RGB8_OES
 0x8051

	)

90 
	#GL_RGBA8_OES
 0x8058

	)

94 #i‚de‡
GL_OES_°™d¨d_dîiv©ives


95 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES
 0x8B8B

	)

99 #i‚de‡
GL_OES_°ícû1


100 
	#GL_STENCIL_INDEX1_OES
 0x8D46

	)

104 #i‚de‡
GL_OES_°ícû4


105 
	#GL_STENCIL_INDEX4_OES
 0x8D47

	)

109 #i‚de‡
GL_OES_ãxtuª_3D


110 
	#GL_TEXTURE_WRAP_R_OES
 0x8072

	)

111 
	#GL_TEXTURE_3D_OES
 0x806F

	)

112 
	#GL_TEXTURE_BINDING_3D_OES
 0x806A

	)

113 
	#GL_MAX_3D_TEXTURE_SIZE_OES
 0x8073

	)

114 
	#GL_SAMPLER_3D_OES
 0x8B5F

	)

115 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES
 0x8CD4

	)

125 #i‚de‡
GL_OES_ãxtuª_hÆf_Êﬂt


126 
	#GL_HALF_FLOAT_OES
 0x8D61

	)

136 #i‚de‡
GL_OES_vîãx_¨øy_obje˘


137 
	#GL_VERTEX_ARRAY_BINDING_OES
 0x85B5

	)

144 #i‚de‡
GL_OES_vîãx_ty≥_10_10_10_2


145 
	#GL_UNSIGNED_INT_10_10_10_2_OES
 0x8DF6

	)

146 
	#GL_INT_10_10_10_2_OES
 0x8DF7

	)

150 #i‚de‡
GL_OES_EGL_image_exã∫Æ


151 
	#GL_TEXTURE_EXTERNAL_OES
 0x8D65

	)

152 
	#GL_SAMPLER_EXTERNAL_OES
 0x8D66

	)

153 
	#GL_TEXTURE_BINDING_EXTERNAL_OES
 0x8D67

	)

154 
	#GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES
 0x8D68

	)

162 #i‚de‡
GL_AMD_com¥es£d_3DC_ãxtuª


163 
	#GL_3DC_X_AMD
 0x87F9

	)

164 
	#GL_3DC_XY_AMD
 0x87FA

	)

168 #i‚de‡
GL_AMD_com¥es£d_ATC_ãxtuª


169 
	#GL_ATC_RGB_AMD
 0x8C92

	)

170 
	#GL_ATC_RGBA_EXPLICIT_ALPHA_AMD
 0x8C93

	)

171 
	#GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD
 0x87EE

	)

175 #i‚de‡
GL_AMD_≥rf‹m™˚_m⁄ô‹


176 
	#GL_COUNTER_TYPE_AMD
 0x8BC0

	)

177 
	#GL_COUNTER_RANGE_AMD
 0x8BC1

	)

178 
	#GL_UNSIGNED_INT64_AMD
 0x8BC2

	)

179 
	#GL_PERCENTAGE_AMD
 0x8BC3

	)

180 
	#GL_PERFMON_RESULT_AVAILABLE_AMD
 0x8BC4

	)

181 
	#GL_PERFMON_RESULT_SIZE_AMD
 0x8BC5

	)

182 
	#GL_PERFMON_RESULT_AMD
 0x8BC6

	)

186 #i‚de‡
GL_AMD_¥ogøm_bö¨y_Z400


187 
	#GL_Z400_BINARY_AMD
 0x8740

	)

195 #i‚de‡
GL_EXT_bÀnd_mömax


196 
	#GL_MIN_EXT
 0x8007

	)

197 
	#GL_MAX_EXT
 0x8008

	)

201 #i‚de‡
GL_EXT_disˇrd_‰amebuf„r


202 
	#GL_COLOR_EXT
 0x1800

	)

203 
	#GL_DEPTH_EXT
 0x1801

	)

204 
	#GL_STENCIL_EXT
 0x1802

	)

211 #i‚de‡
GL_EXT_ªad_f‹m©_bgø


212 
	#GL_BGRA_EXT
 0x80E1

	)

213 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT
 0x8365

	)

214 
	#GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT
 0x8366

	)

218 #i‚de‡
GL_EXT_ãxtuª_fûãr_™isŸr›ic


219 
	#GL_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FE

	)

220 
	#GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FF

	)

224 #i‚de‡
GL_EXT_ãxtuª_f‹m©_BGRA8888


225 
	#GL_BGRA_EXT
 0x80E1

	)

229 #i‚de‡
GL_EXT_ãxtuª_ty≥_2_10_10_10_REV


230 
	#GL_UNSIGNED_INT_2_10_10_10_REV_EXT
 0x8368

	)

234 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_dxt1


235 
	#GL_COMPRESSED_RGB_S3TC_DXT1_EXT
 0x83F0

	)

236 
	#GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
 0x83F1

	)

244 #i‚de‡
GL_IMG_¥ogøm_bö¨y


245 
	#GL_SGX_PROGRAM_BINARY_IMG
 0x9130

	)

249 #i‚de‡
GL_IMG_ªad_f‹m©


250 
	#GL_BGRA_IMG
 0x80E1

	)

251 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG
 0x8365

	)

255 #i‚de‡
GL_IMG_shadî_bö¨y


256 
	#GL_SGX_BINARY_IMG
 0x8C0A

	)

260 #i‚de‡
GL_IMG_ãxtuª_com¥essi⁄_pvπc


261 
	#GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG
 0x8C00

	)

262 
	#GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG
 0x8C01

	)

263 
	#GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG
 0x8C02

	)

264 
	#GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG
 0x8C03

	)

268 #i‚de‡
GL_IMG_mu…ißm∂ed_ªndî_to_ãxtuª


269 
	#GL_RENDERBUFFER_SAMPLES_IMG
 0x9133

	)

270 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG
 0x9134

	)

271 
	#GL_MAX_SAMPLES_IMG
 0x9135

	)

272 
	#GL_TEXTURE_SAMPLES_IMG
 0x9136

	)

280 #i‚de‡
GL_NV_„n˚


281 
	#GL_ALL_COMPLETED_NV
 0x84F2

	)

282 
	#GL_FENCE_STATUS_NV
 0x84F3

	)

283 
	#GL_FENCE_CONDITION_NV
 0x84F4

	)

287 #i‚de‡
GL_NV_covîage_ßm∂e


288 
	#GL_COVERAGE_COMPONENT_NV
 0x8ED0

	)

289 
	#GL_COVERAGE_COMPONENT4_NV
 0x8ED1

	)

290 
	#GL_COVERAGE_ATTACHMENT_NV
 0x8ED2

	)

291 
	#GL_COVERAGE_BUFFERS_NV
 0x8ED3

	)

292 
	#GL_COVERAGE_SAMPLES_NV
 0x8ED4

	)

293 
	#GL_COVERAGE_ALL_FRAGMENTS_NV
 0x8ED5

	)

294 
	#GL_COVERAGE_EDGE_FRAGMENTS_NV
 0x8ED6

	)

295 
	#GL_COVERAGE_AUTOMATIC_NV
 0x8ED7

	)

296 
	#GL_COVERAGE_BUFFER_BIT_NV
 0x8000

	)

300 #i‚de‡
GL_NV_dïth_n⁄löór


301 
	#GL_DEPTH_COMPONENT16_NONLINEAR_NV
 0x8E2C

	)

312 #i‚de‡
GL_QCOM_exãnded_gë


313 
	#GL_TEXTURE_WIDTH_QCOM
 0x8BD2

	)

314 
	#GL_TEXTURE_HEIGHT_QCOM
 0x8BD3

	)

315 
	#GL_TEXTURE_DEPTH_QCOM
 0x8BD4

	)

316 
	#GL_TEXTURE_INTERNAL_FORMAT_QCOM
 0x8BD5

	)

317 
	#GL_TEXTURE_FORMAT_QCOM
 0x8BD6

	)

318 
	#GL_TEXTURE_TYPE_QCOM
 0x8BD7

	)

319 
	#GL_TEXTURE_IMAGE_VALID_QCOM
 0x8BD8

	)

320 
	#GL_TEXTURE_NUM_LEVELS_QCOM
 0x8BD9

	)

321 
	#GL_TEXTURE_TARGET_QCOM
 0x8BDA

	)

322 
	#GL_TEXTURE_OBJECT_VALID_QCOM
 0x8BDB

	)

323 
	#GL_STATE_RESTORE
 0x8BDC

	)

330 #i‚de‡
GL_QCOM_≥rfm⁄_globÆ_mode


331 
	#GL_PERFMON_GLOBAL_MODE_QCOM
 0x8FA0

	)

335 #i‚de‡
GL_QCOM_wrôe⁄ly_ªndîög


336 
	#GL_WRITEONLY_RENDERING_QCOM
 0x8823

	)

340 #i‚de‡
GL_QCOM_tûed_ªndîög


341 
	#GL_COLOR_BUFFER_BIT0_QCOM
 0x00000001

	)

342 
	#GL_COLOR_BUFFER_BIT1_QCOM
 0x00000002

	)

343 
	#GL_COLOR_BUFFER_BIT2_QCOM
 0x00000004

	)

344 
	#GL_COLOR_BUFFER_BIT3_QCOM
 0x00000008

	)

345 
	#GL_COLOR_BUFFER_BIT4_QCOM
 0x00000010

	)

346 
	#GL_COLOR_BUFFER_BIT5_QCOM
 0x00000020

	)

347 
	#GL_COLOR_BUFFER_BIT6_QCOM
 0x00000040

	)

348 
	#GL_COLOR_BUFFER_BIT7_QCOM
 0x00000080

	)

349 
	#GL_DEPTH_BUFFER_BIT0_QCOM
 0x00000100

	)

350 
	#GL_DEPTH_BUFFER_BIT1_QCOM
 0x00000200

	)

351 
	#GL_DEPTH_BUFFER_BIT2_QCOM
 0x00000400

	)

352 
	#GL_DEPTH_BUFFER_BIT3_QCOM
 0x00000800

	)

353 
	#GL_DEPTH_BUFFER_BIT4_QCOM
 0x00001000

	)

354 
	#GL_DEPTH_BUFFER_BIT5_QCOM
 0x00002000

	)

355 
	#GL_DEPTH_BUFFER_BIT6_QCOM
 0x00004000

	)

356 
	#GL_DEPTH_BUFFER_BIT7_QCOM
 0x00008000

	)

357 
	#GL_STENCIL_BUFFER_BIT0_QCOM
 0x00010000

	)

358 
	#GL_STENCIL_BUFFER_BIT1_QCOM
 0x00020000

	)

359 
	#GL_STENCIL_BUFFER_BIT2_QCOM
 0x00040000

	)

360 
	#GL_STENCIL_BUFFER_BIT3_QCOM
 0x00080000

	)

361 
	#GL_STENCIL_BUFFER_BIT4_QCOM
 0x00100000

	)

362 
	#GL_STENCIL_BUFFER_BIT5_QCOM
 0x00200000

	)

363 
	#GL_STENCIL_BUFFER_BIT6_QCOM
 0x00400000

	)

364 
	#GL_STENCIL_BUFFER_BIT7_QCOM
 0x00800000

	)

365 
	#GL_MULTISAMPLE_BUFFER_BIT0_QCOM
 0x01000000

	)

366 
	#GL_MULTISAMPLE_BUFFER_BIT1_QCOM
 0x02000000

	)

367 
	#GL_MULTISAMPLE_BUFFER_BIT2_QCOM
 0x04000000

	)

368 
	#GL_MULTISAMPLE_BUFFER_BIT3_QCOM
 0x08000000

	)

369 
	#GL_MULTISAMPLE_BUFFER_BIT4_QCOM
 0x10000000

	)

370 
	#GL_MULTISAMPLE_BUFFER_BIT5_QCOM
 0x20000000

	)

371 
	#GL_MULTISAMPLE_BUFFER_BIT6_QCOM
 0x40000000

	)

372 
	#GL_MULTISAMPLE_BUFFER_BIT7_QCOM
 0x80000000

	)

384 #i‚de‡
GL_OES_com¥es£d_ETC1_RGB8_ãxtuª


385 
	#GL_OES_com¥es£d_ETC1_RGB8_ãxtuª
 1

	)

389 #i‚de‡
GL_OES_com¥es£d_∑Àâed_ãxtuª


390 
	#GL_OES_com¥es£d_∑Àâed_ãxtuª
 1

	)

394 #i‚de‡
GL_OES_dïth24


395 
	#GL_OES_dïth24
 1

	)

399 #i‚de‡
GL_OES_dïth32


400 
	#GL_OES_dïth32
 1

	)

404 #i‚de‡
GL_OES_dïth_ãxtuª


405 
	#GL_OES_dïth_ãxtuª
 1

	)

409 #i‚de‡
GL_OES_EGL_image


410 
	#GL_OES_EGL_image
 1

	)

411 #ifde‡
GL_GLEXT_PROTOTYPES


412 
GL_APICALL
 
GL_APIENTRY
 
glEGLImageT¨gëTextuª2DOES
 (
GLíum
 
èrgë
, 
GLeglImageOES
 
image
);

413 
GL_APICALL
 
GL_APIENTRY
 
glEGLImageT¨gëRídîbuf„rSt‹ageOES
 (
GLíum
 
èrgë
, 
GLeglImageOES
 
image
);

415 (
	tGL_APIENTRYP
 
	tPFNGLEGLIMAGETARGETTEXTURE2DOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLeglImageOES
 
	timage
);

416 (
	tGL_APIENTRYP
 
	tPFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLeglImageOES
 
	timage
);

420 #i‚de‡
GL_OES_ñemít_ödex_uöt


421 
	#GL_OES_ñemít_ödex_uöt
 1

	)

425 #i‚de‡
GL_OES_fbo_ªndî_mùm≠


426 
	#GL_OES_fbo_ªndî_mùm≠
 1

	)

430 #i‚de‡
GL_OES_‰agmít_¥ecisi⁄_high


431 
	#GL_OES_‰agmít_¥ecisi⁄_high
 1

	)

435 #i‚de‡
GL_OES_gë_¥ogøm_bö¨y


436 
	#GL_OES_gë_¥ogøm_bö¨y
 1

	)

437 #ifde‡
GL_GLEXT_PROTOTYPES


438 
GL_APICALL
 
GL_APIENTRY
 
	`glGëProgømBö¨yOES
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLíum
 *
bö¨yF‹m©
, 
GLvoid
 *
bö¨y
);

439 
GL_APICALL
 
GL_APIENTRY
 
	`glProgømBö¨yOES
 (
GLuöt
 
¥ogøm
, 
GLíum
 
bö¨yF‹m©
, c⁄° 
GLvoid
 *
bö¨y
, 
GLöt
 
Àngth
);

441 (
	tGL_APIENTRYP
 
	tPFNGLGETPROGRAMBINARYOESPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLíum
 *
	tbö¨yF‹m©
, 
	tGLvoid
 *
	tbö¨y
);

442 (
	tGL_APIENTRYP
 
	tPFNGLPROGRAMBINARYOESPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tbö¨yF‹m©
, c⁄° 
	tGLvoid
 *
	tbö¨y
, 
	tGLöt
 
	tÀngth
);

446 #i‚de‡
GL_OES_m≠buf„r


447 
	#GL_OES_m≠buf„r
 1

	)

448 #ifde‡
GL_GLEXT_PROTOTYPES


449 
GL_APICALL
 * 
GL_APIENTRY
 
	`glM≠Buf„rOES
 (
GLíum
 
èrgë
, GLíum 
ac˚ss
);

450 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
	`glUnm≠Buf„rOES
 (
GLíum
 
èrgë
);

451 
GL_APICALL
 
GL_APIENTRY
 
	`glGëBuf„rPoöãrvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLvoid
** 
∑øms
);

453 * (
	tGL_APIENTRYP
 
	tPFNGLMAPBUFFEROESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

454 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLUNMAPBUFFEROESPROC
Ë(
	tGLíum
 
	tèrgë
);

455 (
	tGL_APIENTRYP
 
	tPFNGLGETBUFFERPOINTERVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
** 
	t∑øms
);

459 #i‚de‡
GL_OES_∑cked_dïth_°ícû


460 
	#GL_OES_∑cked_dïth_°ícû
 1

	)

464 #i‚de‡
GL_OES_rgb8_rgba8


465 
	#GL_OES_rgb8_rgba8
 1

	)

469 #i‚de‡
GL_OES_°™d¨d_dîiv©ives


470 
	#GL_OES_°™d¨d_dîiv©ives
 1

	)

474 #i‚de‡
GL_OES_°ícû1


475 
	#GL_OES_°ícû1
 1

	)

479 #i‚de‡
GL_OES_°ícû4


480 
	#GL_OES_°ícû4
 1

	)

484 #i‚de‡
GL_OES_ãxtuª_3D


485 
	#GL_OES_ãxtuª_3D
 1

	)

486 #ifde‡
GL_GLEXT_PROTOTYPES


487 
GL_APICALL
 
GL_APIENTRY
 
	`glTexImage3DOES
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
* 
pixñs
);

488 
GL_APICALL
 
GL_APIENTRY
 
	`glTexSubImage3DOES
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
* 
pixñs
);

489 
GL_APICALL
 
GL_APIENTRY
 
	`glC›yTexSubImage3DOES
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

490 
GL_APICALL
 
GL_APIENTRY
 
	`glCom¥es£dTexImage3DOES
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
* 
d©a
);

491 
GL_APICALL
 
GL_APIENTRY
 
	`glCom¥es£dTexSubImage3DOES
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
* 
d©a
);

492 
GL_APICALL
 
GL_APIENTRY
 
	`glFømebuf„rTextuª3DOES
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
zoff£t
);

494 (
	tGL_APIENTRYP
 
	tPFNGLTEXIMAGE3DOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* 
	tpixñs
);

495 (
	tGL_APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* 
	tpixñs
);

496 (
	tGL_APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

497 (
	tGL_APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
* 
	td©a
);

498 (
	tGL_APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
* 
	td©a
);

499 (
	tGL_APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE3DOES
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

503 #i‚de‡
GL_OES_ãxtuª_Êﬂt


504 
	#GL_OES_ãxtuª_Êﬂt
 1

	)

508 #i‚de‡
GL_OES_ãxtuª_Êﬂt_löór


509 
	#GL_OES_ãxtuª_Êﬂt_löór
 1

	)

513 #i‚de‡
GL_OES_ãxtuª_hÆf_Êﬂt


514 
	#GL_OES_ãxtuª_hÆf_Êﬂt
 1

	)

518 #i‚de‡
GL_OES_ãxtuª_hÆf_Êﬂt_löór


519 
	#GL_OES_ãxtuª_hÆf_Êﬂt_löór
 1

	)

523 #i‚de‡
GL_OES_ãxtuª_≈Ÿ


524 
	#GL_OES_ãxtuª_≈Ÿ
 1

	)

528 #i‚de‡
GL_OES_vîãx_¨øy_obje˘


529 
	#GL_OES_vîãx_¨øy_obje˘
 1

	)

530 #ifde‡
GL_GLEXT_PROTOTYPES


531 
GL_APICALL
 
GL_APIENTRY
 
	`glBödVîãxAºayOES
 (
GLuöt
 
¨øy
);

532 
GL_APICALL
 
GL_APIENTRY
 
	`glDñëeVîãxAºaysOES
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¨øys
);

533 
GL_APICALL
 
GL_APIENTRY
 
	`glGíVîãxAºaysOES
 (
GLsizei
 
n
, 
GLuöt
 *
¨øys
);

534 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
	`glIsVîãxAºayOES
 (
GLuöt
 
¨øy
);

536 (
	tGL_APIENTRYP
 
	tPFNGLBINDVERTEXARRAYOESPROC
Ë(
	tGLuöt
 
	t¨øy
);

537 (
	tGL_APIENTRYP
 
	tPFNGLDELETEVERTEXARRAYSOESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¨øys
);

538 (
	tGL_APIENTRYP
 
	tPFNGLGENVERTEXARRAYSOESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¨øys
);

539 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLISVERTEXARRAYOESPROC
Ë(
	tGLuöt
 
	t¨øy
);

543 #i‚de‡
GL_OES_vîãx_hÆf_Êﬂt


544 
	#GL_OES_vîãx_hÆf_Êﬂt
 1

	)

548 #i‚de‡
GL_OES_vîãx_ty≥_10_10_10_2


549 
	#GL_OES_vîãx_ty≥_10_10_10_2
 1

	)

553 #i‚de‡
GL_OES_EGL_image_exã∫Æ


554 
	#GL_OES_EGL_image_exã∫Æ
 1

	)

562 #i‚de‡
GL_AMD_com¥es£d_3DC_ãxtuª


563 
	#GL_AMD_com¥es£d_3DC_ãxtuª
 1

	)

567 #i‚de‡
GL_AMD_com¥es£d_ATC_ãxtuª


568 
	#GL_AMD_com¥es£d_ATC_ãxtuª
 1

	)

572 #i‚de‡
GL_AMD_≥rf‹m™˚_m⁄ô‹


573 
	#GL_AMD_≥rf‹m™˚_m⁄ô‹
 1

	)

574 #ifde‡
GL_GLEXT_PROTOTYPES


575 
GL_APICALL
 
GL_APIENTRY
 
	`glGëPîfM⁄ô‹GroupsAMD
 (
GLöt
 *
numGroups
, 
GLsizei
 
groupsSize
, 
GLuöt
 *
groups
);

576 
GL_APICALL
 
GL_APIENTRY
 
	`glGëPîfM⁄ô‹Cou¡îsAMD
 (
GLuöt
 
group
, 
GLöt
 *
numCou¡îs
, GLöà*
maxA˘iveCou¡îs
, 
GLsizei
 
cou¡îSize
, GLuöà*
cou¡îs
);

577 
GL_APICALL
 
GL_APIENTRY
 
	`glGëPîfM⁄ô‹GroupSåögAMD
 (
GLuöt
 
group
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
groupSåög
);

578 
GL_APICALL
 
GL_APIENTRY
 
	`glGëPîfM⁄ô‹Cou¡îSåögAMD
 (
GLuöt
 
group
, GLuöà
cou¡î
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
cou¡îSåög
);

579 
GL_APICALL
 
GL_APIENTRY
 
	`glGëPîfM⁄ô‹Cou¡îInfoAMD
 (
GLuöt
 
group
, GLuöà
cou¡î
, 
GLíum
 
≤ame
, 
GLvoid
 *
d©a
);

580 
GL_APICALL
 
GL_APIENTRY
 
	`glGíPîfM⁄ô‹sAMD
 (
GLsizei
 
n
, 
GLuöt
 *
m⁄ô‹s
);

581 
GL_APICALL
 
GL_APIENTRY
 
	`glDñëePîfM⁄ô‹sAMD
 (
GLsizei
 
n
, 
GLuöt
 *
m⁄ô‹s
);

582 
GL_APICALL
 
GL_APIENTRY
 
	`glSñe˘PîfM⁄ô‹Cou¡îsAMD
 (
GLuöt
 
m⁄ô‹
, 
GLboﬁón
 
íabÀ
, GLuöà
group
, 
GLöt
 
numCou¡îs
, GLuöà*
cou¡îsLi°
);

583 
GL_APICALL
 
GL_APIENTRY
 
	`glBegöPîfM⁄ô‹AMD
 (
GLuöt
 
m⁄ô‹
);

584 
GL_APICALL
 
GL_APIENTRY
 
	`glEndPîfM⁄ô‹AMD
 (
GLuöt
 
m⁄ô‹
);

585 
GL_APICALL
 
GL_APIENTRY
 
	`glGëPîfM⁄ô‹Cou¡îD©aAMD
 (
GLuöt
 
m⁄ô‹
, 
GLíum
 
≤ame
, 
GLsizei
 
d©aSize
, GLuöà*
d©a
, 
GLöt
 *
byãsWrôãn
);

587 (
	tGL_APIENTRYP
 
	tPFNGLGETPERFMONITORGROUPSAMDPROC
Ë(
	tGLöt
 *
	tnumGroups
, 
	tGLsizei
 
	tgroupsSize
, 
	tGLuöt
 *
	tgroups
);

588 (
	tGL_APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERSAMDPROC
Ë(
	tGLuöt
 
	tgroup
, 
	tGLöt
 *
	tnumCou¡îs
, GLöà*
	tmaxA˘iveCou¡îs
, 
	tGLsizei
 
	tcou¡îSize
, GLuöà*
	tcou¡îs
);

589 (
	tGL_APIENTRYP
 
	tPFNGLGETPERFMONITORGROUPSTRINGAMDPROC
Ë(
	tGLuöt
 
	tgroup
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tgroupSåög
);

590 (
	tGL_APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC
Ë(
	tGLuöt
 
	tgroup
, GLuöà
	tcou¡î
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tcou¡îSåög
);

591 (
	tGL_APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERINFOAMDPROC
Ë(
	tGLuöt
 
	tgroup
, GLuöà
	tcou¡î
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
 *
	td©a
);

592 (
	tGL_APIENTRYP
 
	tPFNGLGENPERFMONITORSAMDPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tm⁄ô‹s
);

593 (
	tGL_APIENTRYP
 
	tPFNGLDELETEPERFMONITORSAMDPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tm⁄ô‹s
);

594 (
	tGL_APIENTRYP
 
	tPFNGLSELECTPERFMONITORCOUNTERSAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
, 
	tGLboﬁón
 
	tíabÀ
, GLuöà
	tgroup
, 
	tGLöt
 
	tnumCou¡îs
, GLuöà*
	tcou¡îsLi°
);

595 (
	tGL_APIENTRYP
 
	tPFNGLBEGINPERFMONITORAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
);

596 (
	tGL_APIENTRYP
 
	tPFNGLENDPERFMONITORAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
);

597 (
	tGL_APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERDATAAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	td©aSize
, GLuöà*
	td©a
, 
	tGLöt
 *
	tbyãsWrôãn
);

601 #i‚de‡
GL_AMD_¥ogøm_bö¨y_Z400


602 
	#GL_AMD_¥ogøm_bö¨y_Z400
 1

	)

610 #i‚de‡
GL_EXT_bÀnd_mömax


611 
	#GL_EXT_bÀnd_mömax
 1

	)

615 #i‚de‡
GL_EXT_disˇrd_‰amebuf„r


616 
	#GL_EXT_disˇrd_‰amebuf„r
 1

	)

617 #ifde‡
GL_GLEXT_PROTOTYPES


618 
GL_APICALL
 
GL_APIENTRY
 
	`glDisˇrdFømebuf„rEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
numAâachmíts
, c⁄° GLíum *
©èchmíts
);

620 (
	tGL_APIENTRYP
 
	tPFNGLDISCARDFRAMEBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° GLíum *
	t©èchmíts
);

623 #i‚de‡
GL_EXT_mu…i_døw_¨øys


624 
	#GL_EXT_mu…i_døw_¨øys
 1

	)

625 #ifde‡
GL_GLEXT_PROTOTYPES


626 
GL_APICALL
 
GL_APIENTRY
 
	`glMu…iDøwAºaysEXT
 (
GLíum
 
mode
, 
GLöt
 *
fú°
, 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
);

627 
GL_APICALL
 
GL_APIENTRY
 
	`glMu…iDøwEÀmítsEXT
 (
GLíum
 
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
* *
ödi˚s
, GLsizeò
¥imcou¡
);

629 (
	tGL_APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 *
	tfú°
, 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

630 (
	tGL_APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

634 #i‚de‡
GL_EXT_ªad_f‹m©_bgø


635 
	#GL_EXT_ªad_f‹m©_bgø
 1

	)

639 #i‚de‡
GL_EXT_ãxtuª_fûãr_™isŸr›ic


640 
	#GL_EXT_ãxtuª_fûãr_™isŸr›ic
 1

	)

644 #i‚de‡
GL_EXT_ãxtuª_f‹m©_BGRA8888


645 
	#GL_EXT_ãxtuª_f‹m©_BGRA8888
 1

	)

649 #i‚de‡
GL_EXT_ãxtuª_ty≥_2_10_10_10_REV


650 
	#GL_EXT_ãxtuª_ty≥_2_10_10_10_REV
 1

	)

654 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_dxt1


655 
	#GL_EXT_ãxtuª_com¥essi⁄_dxt1
 1

	)

663 #i‚de‡
GL_IMG_¥ogøm_bö¨y


664 
	#GL_IMG_¥ogøm_bö¨y
 1

	)

668 #i‚de‡
GL_IMG_ªad_f‹m©


669 
	#GL_IMG_ªad_f‹m©
 1

	)

673 #i‚de‡
GL_IMG_shadî_bö¨y


674 
	#GL_IMG_shadî_bö¨y
 1

	)

678 #i‚de‡
GL_IMG_ãxtuª_com¥essi⁄_pvπc


679 
	#GL_IMG_ãxtuª_com¥essi⁄_pvπc
 1

	)

683 #i‚de‡
GL_IMG_mu…ißm∂ed_ªndî_to_ãxtuª


684 
	#GL_IMG_mu…ißm∂ed_ªndî_to_ãxtuª
 1

	)

685 #ifde‡
GL_GLEXT_PROTOTYPES


686 
GL_APICALL
 
GL_APIENTRY
 
	`glRídîbuf„rSt‹ageMu…ißm∂eIMG
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

687 
GL_APICALL
 
GL_APIENTRY
 
	`glFømebuf„rTextuª2DMu…ißm∂eIMG
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLsizei
 
ßm∂es
);

689 (
	tGL_APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMG
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

690 (
	tGL_APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMG
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLsizei
 
	tßm∂es
);

698 #i‚de‡
GL_NV_„n˚


699 
	#GL_NV_„n˚
 1

	)

700 #ifde‡
GL_GLEXT_PROTOTYPES


701 
GL_APICALL
 
GL_APIENTRY
 
	`glDñëeFí˚sNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
„n˚s
);

702 
GL_APICALL
 
GL_APIENTRY
 
	`glGíFí˚sNV
 (
GLsizei
 
n
, 
GLuöt
 *
„n˚s
);

703 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
	`glIsFí˚NV
 (
GLuöt
 
„n˚
);

704 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
	`glTe°Fí˚NV
 (
GLuöt
 
„n˚
);

705 
GL_APICALL
 
GL_APIENTRY
 
	`glGëFí˚ivNV
 (
GLuöt
 
„n˚
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

706 
GL_APICALL
 
GL_APIENTRY
 
	`glFöishFí˚NV
 (
GLuöt
 
„n˚
);

707 
GL_APICALL
 
GL_APIENTRY
 
	`glSëFí˚NV
 (
GLuöt
 
„n˚
, 
GLíum
 
c⁄dôi⁄
);

709 (
	tGL_APIENTRYP
 
	tPFNGLDELETEFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t„n˚s
);

710 (
	tGL_APIENTRYP
 
	tPFNGLGENFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t„n˚s
);

711 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLISFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

712 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLTESTFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

713 (
	tGL_APIENTRYP
 
	tPFNGLGETFENCEIVNVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

714 (
	tGL_APIENTRYP
 
	tPFNGLFINISHFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

715 (
	tGL_APIENTRYP
 
	tPFNGLSETFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	tc⁄dôi⁄
);

719 #i‚de‡
GL_NV_covîage_ßm∂e


720 
	#GL_NV_covîage_ßm∂e
 1

	)

721 #ifde‡
GL_GLEXT_PROTOTYPES


722 
GL_APICALL
 
GL_APIENTRY
 
	`glCovîageMaskNV
 (
GLboﬁón
 
mask
);

723 
GL_APICALL
 
GL_APIENTRY
 
	`glCovîageO≥øti⁄NV
 (
GLíum
 
›î©i⁄
);

725 (
	tGL_APIENTRYP
 
	tPFNGLCOVERAGEMASKNVPROC
Ë(
	tGLboﬁón
 
	tmask
);

726 (
	tGL_APIENTRYP
 
	tPFNGLCOVERAGEOPERATIONNVPROC
Ë(
	tGLíum
 
	t›î©i⁄
);

730 #i‚de‡
GL_NV_dïth_n⁄löór


731 
	#GL_NV_dïth_n⁄löór
 1

	)

739 #i‚de‡
GL_QCOM_drivî_c⁄åﬁ


740 
	#GL_QCOM_drivî_c⁄åﬁ
 1

	)

741 #ifde‡
GL_GLEXT_PROTOTYPES


742 
GL_APICALL
 
GL_APIENTRY
 
	`glGëDrivîC⁄åﬁsQCOM
 (
GLöt
 *
num
, 
GLsizei
 
size
, 
GLuöt
 *
drivîC⁄åﬁs
);

743 
GL_APICALL
 
GL_APIENTRY
 
	`glGëDrivîC⁄åﬁSåögQCOM
 (
GLuöt
 
drivîC⁄åﬁ
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
drivîC⁄åﬁSåög
);

744 
GL_APICALL
 
GL_APIENTRY
 
	`glE«bÀDrivîC⁄åﬁQCOM
 (
GLuöt
 
drivîC⁄åﬁ
);

745 
GL_APICALL
 
GL_APIENTRY
 
	`glDißbÀDrivîC⁄åﬁQCOM
 (
GLuöt
 
drivîC⁄åﬁ
);

747 (
	tGL_APIENTRYP
 
	tPFNGLGETDRIVERCONTROLSQCOMPROC
Ë(
	tGLöt
 *
	tnum
, 
	tGLsizei
 
	tsize
, 
	tGLuöt
 *
	tdrivîC⁄åﬁs
);

748 (
	tGL_APIENTRYP
 
	tPFNGLGETDRIVERCONTROLSTRINGQCOMPROC
Ë(
	tGLuöt
 
	tdrivîC⁄åﬁ
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tdrivîC⁄åﬁSåög
);

749 (
	tGL_APIENTRYP
 
	tPFNGLENABLEDRIVERCONTROLQCOMPROC
Ë(
	tGLuöt
 
	tdrivîC⁄åﬁ
);

750 (
	tGL_APIENTRYP
 
	tPFNGLDISABLEDRIVERCONTROLQCOMPROC
Ë(
	tGLuöt
 
	tdrivîC⁄åﬁ
);

754 #i‚de‡
GL_QCOM_exãnded_gë


755 
	#GL_QCOM_exãnded_gë
 1

	)

756 #ifde‡
GL_GLEXT_PROTOTYPES


757 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëTextuªsQCOM
 (
GLuöt
 *
ãxtuªs
, 
GLöt
 
maxTextuªs
, GLöà*
numTextuªs
);

758 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëBuf„rsQCOM
 (
GLuöt
 *
buf„rs
, 
GLöt
 
maxBuf„rs
, GLöà*
numBuf„rs
);

759 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëRídîbuf„rsQCOM
 (
GLuöt
 *
ªndîbuf„rs
, 
GLöt
 
maxRídîbuf„rs
, GLöà*
numRídîbuf„rs
);

760 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëFømebuf„rsQCOM
 (
GLuöt
 *
‰amebuf„rs
, 
GLöt
 
maxFømebuf„rs
, GLöà*
numFømebuf„rs
);

761 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëTexLevñP¨amëîivQCOM
 (
GLuöt
 
ãxtuª
, 
GLíum
 
Á˚
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, GLöà*
∑øms
);

762 
GL_APICALL
 
GL_APIENTRY
 
	`glExtTexObje˘SèãOvîrideiQCOM
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

763 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëTexSubImageQCOM
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
ãxñs
);

764 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëBuf„rPoöãrvQCOM
 (
GLíum
 
èrgë
, 
GLvoid
 **
∑øms
);

766 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETTEXTURESQCOMPROC
Ë(
	tGLuöt
 *
	tãxtuªs
, 
	tGLöt
 
	tmaxTextuªs
, GLöà*
	tnumTextuªs
);

767 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETBUFFERSQCOMPROC
Ë(
	tGLuöt
 *
	tbuf„rs
, 
	tGLöt
 
	tmaxBuf„rs
, GLöà*
	tnumBuf„rs
);

768 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETRENDERBUFFERSQCOMPROC
Ë(
	tGLuöt
 *
	tªndîbuf„rs
, 
	tGLöt
 
	tmaxRídîbuf„rs
, GLöà*
	tnumRídîbuf„rs
);

769 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETFRAMEBUFFERSQCOMPROC
Ë(
	tGLuöt
 *
	t‰amebuf„rs
, 
	tGLöt
 
	tmaxFømebuf„rs
, GLöà*
	tnumFømebuf„rs
);

770 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tÁ˚
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, GLöà*
	t∑øms
);

771 (
	tGL_APIENTRYP
 
	tPFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

772 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETTEXSUBIMAGEQCOMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tãxñs
);

773 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETBUFFERPOINTERVQCOMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLvoid
 **
	t∑øms
);

777 #i‚de‡
GL_QCOM_exãnded_gë2


778 
	#GL_QCOM_exãnded_gë2
 1

	)

779 #ifde‡
GL_GLEXT_PROTOTYPES


780 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëShadîsQCOM
 (
GLuöt
 *
shadîs
, 
GLöt
 
maxShadîs
, GLöà*
numShadîs
);

781 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëProgømsQCOM
 (
GLuöt
 *
¥ogøms
, 
GLöt
 
maxProgøms
, GLöà*
numProgøms
);

782 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
	`glExtIsProgømBö¨yQCOM
 (
GLuöt
 
¥ogøm
);

783 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëProgømBö¨ySour˚QCOM
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, 
GLch¨
 *
sour˚
, 
GLöt
 *
Àngth
);

785 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETSHADERSQCOMPROC
Ë(
	tGLuöt
 *
	tshadîs
, 
	tGLöt
 
	tmaxShadîs
, GLöà*
	tnumShadîs
);

786 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETPROGRAMSQCOMPROC
Ë(
	tGLuöt
 *
	t¥ogøms
, 
	tGLöt
 
	tmaxProgøms
, GLöà*
	tnumProgøms
);

787 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLEXTISPROGRAMBINARYQCOMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

788 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, 
	tGLch¨
 *
	tsour˚
, 
	tGLöt
 *
	tÀngth
);

792 #i‚de‡
GL_QCOM_≥rfm⁄_globÆ_mode


793 
	#GL_QCOM_≥rfm⁄_globÆ_mode
 1

	)

797 #i‚de‡
GL_QCOM_wrôe⁄ly_ªndîög


798 
	#GL_QCOM_wrôe⁄ly_ªndîög
 1

	)

802 #i‚de‡
GL_QCOM_tûed_ªndîög


803 
	#GL_QCOM_tûed_ªndîög
 1

	)

804 #ifde‡
GL_GLEXT_PROTOTYPES


805 
GL_APICALL
 
GL_APIENTRY
 
	`glSèπTûögQCOM
 (
GLuöt
 
x
, GLuöà
y
, GLuöà
width
, GLuöà
height
, 
GLbôfõld
 
¥e£rveMask
);

806 
GL_APICALL
 
GL_APIENTRY
 
	`glEndTûögQCOM
 (
GLbôfõld
 
¥e£rveMask
);

808 (
	tGL_APIENTRYP
 
	tPFNGLSTARTTILINGQCOMPROC
Ë(
	tGLuöt
 
	tx
, GLuöà
	ty
, GLuöà
	twidth
, GLuöà
	theight
, 
	tGLbôfõld
 
	t¥e£rveMask
);

809 (
	tGL_APIENTRYP
 
	tPFNGLENDTILINGQCOMPROC
Ë(
	tGLbôfõld
 
	t¥e£rveMask
);

812 #ifde‡
__˝lu•lus


813 
	}
}

	@jni/include/include/GLES2/gl2platform.h

1 #i‚de‡
__gl2∂©f‹m_h_


2 
	#__gl2∂©f‹m_h_


	)

20 
	~<KHR/khΩœtf‹m.h
>

22 #i‚de‡
GL_APICALL


23 
	#GL_APICALL
 
KHRONOS_APICALL


	)

26 #i‚de‡
GL_APIENTRY


27 
	#GL_APIENTRY
 
KHRONOS_APIENTRY


	)

	@jni/include/include/JNIHelp.h

23 #i‚de‡
_NATIVEHELPER_JNIHELP_H


24 
	#_NATIVEHELPER_JNIHELP_H


	)

26 
	~<jni.h
>

27 
	~<utûs/Log.h
>

28 
	~<uni°d.h
>

30 #i‚de‡
NELEM


31 
	#NELEM
(
x
Ë((Ë((xË/ ((x)[0])))

	)

34 #ifde‡
__˝lu•lus


41 
jniRegi°îN©iveMëhods
(
C_JNIEnv
* 
ív
, c⁄° * 
˛assName
,

42 c⁄° 
JNIN©iveMëhod
* 
gMëhods
, 
numMëhods
);

54 
jniThrowEx˚±i⁄
(
C_JNIEnv
* 
ív
, c⁄° * 
˛assName
, c⁄° * 
msg
);

59 
jniThrowNuŒPoöãrEx˚±i⁄
(
C_JNIEnv
* 
ív
, c⁄° * 
msg
);

64 
jniThrowRu¡imeEx˚±i⁄
(
C_JNIEnv
* 
ív
, c⁄° * 
msg
);

69 
jniThrowIOEx˚±i⁄
(
C_JNIEnv
* 
ív
, 
î∫um
);

77 c⁄° * 
jniSåEº‹
(
î∫um
, * 
buf
, 
size_t
 
buÊí
);

82 
jobje˘
 
jniCª©eFûeDes¸ùt‹
(
C_JNIEnv
* 
ív
, 
fd
);

87 
jniGëFDFromFûeDes¸ùt‹
(
C_JNIEnv
* 
ív
, 
jobje˘
 
fûeDes¸ùt‹
);

92 
jniSëFûeDes¸ùt‹OfFD
(
C_JNIEnv
* 
ív
, 
jobje˘
 
fûeDes¸ùt‹
, 
vÆue
);

94 #ifde‡
__˝lu•lus


103 #i‡
deföed
(
__˝lu•lus
Ë&& !deföed(
JNI_FORCE_C
)

104 
ölöe
 
jniRegi°îN©iveMëhods
(
JNIEnv
* 
ív
, c⁄° * 
˛assName
,

105 c⁄° 
JNIN©iveMëhod
* 
gMëhods
, 
numMëhods
)

107  
jniRegi°îN©iveMëhods
(&
ív
->
fun˘i⁄s
, 
˛assName
, 
gMëhods
,

108 
numMëhods
);

110 
ölöe
 
jniThrowEx˚±i⁄
(
JNIEnv
* 
ív
, c⁄° * 
˛assName
,

111 c⁄° * 
msg
)

113  
jniThrowEx˚±i⁄
(&
ív
->
fun˘i⁄s
, 
˛assName
, 
msg
);

115 
ölöe
 
jniThrowNuŒPoöãrEx˚±i⁄
(
JNIEnv
* 
ív
, c⁄° * 
msg
)

117  
jniThrowNuŒPoöãrEx˚±i⁄
(&
ív
->
fun˘i⁄s
, 
msg
);

119 
ölöe
 
jniThrowRu¡imeEx˚±i⁄
(
JNIEnv
* 
ív
, c⁄° * 
msg
)

121  
jniThrowRu¡imeEx˚±i⁄
(&
ív
->
fun˘i⁄s
, 
msg
);

123 
ölöe
 
jniThrowIOEx˚±i⁄
(
JNIEnv
* 
ív
, 
î∫um
)

125  
jniThrowIOEx˚±i⁄
(&
ív
->
fun˘i⁄s
, 
î∫um
);

127 
ölöe
 
jobje˘
 
jniCª©eFûeDes¸ùt‹
(
JNIEnv
* 
ív
, 
fd
)

129  
jniCª©eFûeDes¸ùt‹
(&
ív
->
fun˘i⁄s
, 
fd
);

131 
ölöe
 
jniGëFDFromFûeDes¸ùt‹
(
JNIEnv
* 
ív
, 
jobje˘
 
fûeDes¸ùt‹
)

133  
jniGëFDFromFûeDes¸ùt‹
(&
ív
->
fun˘i⁄s
, 
fûeDes¸ùt‹
);

135 
ölöe
 
jniSëFûeDes¸ùt‹OfFD
(
JNIEnv
* 
ív
, 
jobje˘
 
fûeDes¸ùt‹
,

136 
vÆue
)

138  
jniSëFûeDes¸ùt‹OfFD
(&
ív
->
fun˘i⁄s
, 
fûeDes¸ùt‹
, 
vÆue
);

147 #i‚de‡
TEMP_FAILURE_RETRY


149 
	#TEMP_FAILURE_RETRY
(
exp
) ({ \

150 
	`ty≥of
 (
exp
Ë
_rc
; \

152 
_rc
 = (
exp
); \

153 } 
_rc
 =-1 && 
î∫o
 =
EINTR
); \

154 
_rc
; })

	)

	@jni/include/include/android/native_window.h

17 #i‚de‡
ANDROID_NATIVE_WINDOW_H


18 
	#ANDROID_NATIVE_WINDOW_H


	)

20 
	~<™droid/ª˘.h
>

22 #ifde‡
__˝lu•lus


30 
WINDOW_FORMAT_RGBA_8888
 = 1,

31 
WINDOW_FORMAT_RGBX_8888
 = 2,

32 
WINDOW_FORMAT_RGB_565
 = 4,

35 
AN©iveWödow
;

36 
AN©iveWödow
 
	tAN©iveWödow
;

38 
	sAN©iveWödow_Buf„r
 {

40 
öt32_t
 
width
;

43 
öt32_t
 
height
;

47 
öt32_t
 
°ride
;

50 
öt32_t
 
f‹m©
;

53 * 
bôs
;

56 
uöt32_t
 
ª£rved
[6];

57 } 
	tAN©iveWödow_Buf„r
;

63 
AN©iveWödow_acquúe
(
AN©iveWödow
* 
wödow
);

68 
AN©iveWödow_ªÀa£
(
AN©iveWödow
* 
wödow
);

74 
öt32_t
 
AN©iveWödow_gëWidth
(
AN©iveWödow
* 
wödow
);

80 
öt32_t
 
AN©iveWödow_gëHeight
(
AN©iveWödow
* 
wödow
);

86 
öt32_t
 
AN©iveWödow_gëF‹m©
(
AN©iveWödow
* 
wödow
);

102 
öt32_t
 
AN©iveWödow_£tBuf„rsGeomëry
(
AN©iveWödow
* 
wödow
,

103 
öt32_t
 
width
, i¡32_à
height
, i¡32_à
f‹m©
);

113 
öt32_t
 
AN©iveWödow_lock
(
AN©iveWödow
* 
wödow
, 
AN©iveWödow_Buf„r
* 
outBuf„r
,

114 
ARe˘
* 
öOutDútyBounds
);

120 
öt32_t
 
AN©iveWödow_u∆ockAndPo°
(
AN©iveWödow
* 
wödow
);

122 #ifde‡
__˝lu•lus


	@jni/include/include/android/rect.h

18 #i‚de‡
ANDROID_RECT_H


19 
	#ANDROID_RECT_H


	)

21 #ifde‡
__˝lu•lus


25 
	sARe˘
 {

26 #ifde‡
__˝lu•lus


27 
öt32_t
 
	tvÆue_ty≥
;

29 
öt32_t
 
À·
;

30 
öt32_t
 
t›
;

31 
öt32_t
 
right
;

32 
öt32_t
 
bŸtom
;

33 } 
ARe˘
;

35 #ifde‡
__˝lu•lus


	@jni/include/include/android_runtime/ActivityManager.h

17 #i‚de‡
A˘ivôyM™agî_H


18 
	#A˘ivôyM™agî_H


	)

20 
	~<utûs/Såög16.h
>

22 
«me•a˚
 
	g™droid
 {

27 
›íC⁄ã¡ProvidîFûe
(c⁄° 
Såög16
& 
uri
);

	@jni/include/include/android_runtime/AndroidRuntime.h

19 #i‚de‡
_RUNTIME_ANDROID_RUNTIME_H


20 
	#_RUNTIME_ANDROID_RUNTIME_H


	)

22 
	~<utûs/Eº‹s.h
>

23 
	~<bödî/IBödî.h
>

24 
	~<utûs/Såög8.h
>

25 
	~<utûs/Såög16.h
>

26 
	~<utûs/Ve˘‹.h
>

27 
	~<utûs/thªads.h
>

28 
	~<±hªad.h
>

29 
	~<jni.h
>

32 
«me•a˚
 
	g™droid
 {

34 ˛as†
	cAndroidRu¡ime


36 
	gpublic
:

37 
AndroidRu¡ime
();

38 
	gvútuÆ
 ~
AndroidRu¡ime
();

43 
ªgi°îN©iveMëhods
(
JNIEnv
* 
ív
,

44 c⁄° * 
˛assName
, c⁄° 
JNIN©iveMëhod
* 
gMëhods
, 
numMëhods
);

49 
°©us_t
 
ˇŒSètic
(c⁄° * 
˛assName
, c⁄° * 
mëhodName
);

54 
°©us_t
 
ˇŒMaö
(c⁄° * 
˛assName
, 
¨gc
, c⁄° * c⁄° 
¨gv
[]);

60 
j˛ass
 
födCœss
(
JNIEnv
* 
ív
, c⁄° * 
˛assName
);

62 
addVmArgumíts
(
¨gc
, c⁄° * c⁄° 
¨gv
[]);

64 
°¨t
(c⁄° *
˛as¢ame
, c⁄° 
boﬁ
 
°¨tSy°emSîvî
);

65 
°¨t
();

67 
AndroidRu¡ime
* 
gëRu¡ime
();

73 
vútuÆ
 
⁄Sèπed
() = 0;

80 
vútuÆ
 
⁄ZygŸeInô
() {};

87 
vútuÆ
 
⁄Exô
(
code
);

90 
¸óãJavaThªad
(c⁄° * 
«me
, (*
°¨t
)(*),

91 * 
¨g
);

94 
JavaVM
* 
gëJavaVM
(Ë{  
	gmJavaVM
; }

97 
JNIEnv
* 
gëJNIEnv
();

99 
	g¥iv©e
:

100 
°¨tReg
(
JNIEnv
* 
ív
);

101 
°¨tVm
(
JavaVM
** 
pJavaVM
, 
JNIEnv
** 
pEnv
);

103 
	gVe˘‹
<
	gJavaVMO±i⁄
> 
	gmO±i⁄s
;

106 
JavaVM
* 
	gmJavaVM
;

111 
javaCª©eThªadEtc
(

112 
™droid_thªad_func_t
 
íåyFun˘i⁄
,

113 * 
u£rD©a
,

114 c⁄° * 
thªadName
,

115 
öt32_t
 
thªadPri‹ôy
,

116 
size_t
 
thªadSèckSize
,

117 
™droid_thªad_id_t
* 
thªadId
);

118 
javaThªadShñl
(* 
¨gs
);

122 
gëP¨˚lFûeDes¸ùt‹FD
(
JNIEnv
* 
ív
, 
jobje˘
 
obje˘
);

	@jni/include/include/android_runtime/android_util_AssetManager.h

17 #i‚de‡
™droid_utû_As£tM™agî_H


18 
	#™droid_utû_As£tM™agî_H


	)

20 
	~<utûs/As£tM™agî.h
>

22 
	~"jni.h
"

24 
«me•a˚
 
	g™droid
 {

26 
As£tM™agî
* 
as£tM™agîF‹JavaObje˘
(
JNIEnv
* 
ív
, 
jobje˘
 
as£tMgr
);

	@jni/include/include/binder/Binder.h

17 #i‚de‡
ANDROID_BINDER_H


18 
	#ANDROID_BINDER_H


	)

20 
	~<bödî/IBödî.h
>

23 
«me•a˚
 
	g™droid
 {

25 ˛as†
	cBBödî
 : 
public
 
IBödî


27 
public
:

28 
BBödî
();

30 
vútuÆ
 c⁄° 
	gSåög16
& 
gëI¡îÁ˚Des¸ùt‹
() const;

31 
vútuÆ
 
boﬁ
 
isBödîAlive
() const;

32 
vútuÆ
 
°©us_t
 
pögBödî
();

33 
vútuÆ
 
°©us_t
 
dump
(
fd
, c⁄° 
Ve˘‹
<
Såög16
>& 
¨gs
);

35 
vútuÆ
 
°©us_t
 
å™ß˘
–
uöt32_t
 
code
,

36 c⁄° 
P¨˚l
& 
d©a
,

37 
P¨˚l
* 
ª∂y
,

38 
uöt32_t
 
Êags
 = 0);

40 
vútuÆ
 
°©us_t
 
lökToDóth
(c⁄° 
•
<
DóthRecùõ¡
>& 
ªcùõ¡
,

41 * 
cookõ
 = 
NULL
,

42 
uöt32_t
 
Êags
 = 0);

44 
vútuÆ
 
°©us_t
 
u∆ökToDóth
–c⁄° 
wp
<
DóthRecùõ¡
>& 
ªcùõ¡
,

45 * 
cookõ
 = 
NULL
,

46 
uöt32_t
 
Êags
 = 0,

47 
wp
<
DóthRecùõ¡
>* 
outRecùõ¡
 = 
NULL
);

49 
vútuÆ
 
©èchObje˘
–c⁄° * 
obje˘ID
,

50 * 
obje˘
,

51 * 
˛ónupCookõ
,

52 
obje˘_˛ónup_func
 
func
);

53 
vútuÆ
 * 
födObje˘
(c⁄° * 
obje˘ID
) const;

54 
vútuÆ
 
dëachObje˘
(c⁄° * 
obje˘ID
);

56 
vútuÆ
 
BBödî
* 
loˇlBödî
();

58 
	g¥Ÿe˘ed
:

59 
vútuÆ
 ~
BBödî
();

61 
vútuÆ
 
°©us_t
 
⁄Tønß˘
–
uöt32_t
 
code
,

62 c⁄° 
P¨˚l
& 
d©a
,

63 
P¨˚l
* 
ª∂y
,

64 
uöt32_t
 
Êags
 = 0);

66 
	g¥iv©e
:

67 
BBödî
(c⁄° BBödî& 
o
);

68 
	gBBödî
& 
	g›î©‹
=(c⁄° 
BBödî
& 
o
);

70 
˛ass
 
	gExåas
;

72 
Exåas
* 
	gmExåas
;

73 * 
	gmRe£rved0
;

78 ˛as†
	cBpRefBa£
 : 
public
 
vútuÆ
 
RefBa£


80 
¥Ÿe˘ed
:

81 
BpRefBa£
(c⁄° 
•
<
IBödî
>& 
o
);

82 
	gvútuÆ
 ~
BpRefBa£
();

83 
vútuÆ
 
⁄Fú°Ref
();

84 
vútuÆ
 
⁄La°Så⁄gRef
(c⁄° * 
id
);

85 
vútuÆ
 
boﬁ
 
⁄IncSå⁄gAâem±ed
(
uöt32_t
 
Êags
, c⁄° * 
id
);

87 
ölöe
 
IBödî
* 
ªmŸe
(Ë{  
	gmRemŸe
; }

88 
ölöe
 
IBödî
* 
ªmŸe
(Ëc⁄° {  
	gmRemŸe
; }

90 
	g¥iv©e
:

91 
BpRefBa£
(c⁄° BpRefBa£& 
o
);

92 
	gBpRefBa£
& 
	g›î©‹
=(c⁄° 
BpRefBa£
& 
o
);

94 
IBödî
* c⁄° 
	gmRemŸe
;

95 
	gRefBa£
::
wókªf_ty≥
* 
mRefs
;

96 vﬁ©ûê
öt32_t
 
	gmSèã
;

	@jni/include/include/binder/BpBinder.h

17 #i‚de‡
ANDROID_BPBINDER_H


18 
	#ANDROID_BPBINDER_H


	)

20 
	~<bödî/IBödî.h
>

21 
	~<utûs/KeyedVe˘‹.h
>

22 
	~<utûs/thªads.h
>

25 
«me•a˚
 
	g™droid
 {

27 ˛as†
	cBpBödî
 : 
public
 
IBödî


29 
public
:

30 
BpBödî
(
öt32_t
 
h™dÀ
);

32 
ölöe
 
öt32_t
 
h™dÀ
(Ëc⁄° {  
	gmH™dÀ
; }

34 
vútuÆ
 c⁄° 
	gSåög16
& 
gëI¡îÁ˚Des¸ùt‹
() const;

35 
vútuÆ
 
boﬁ
 
isBödîAlive
() const;

36 
vútuÆ
 
°©us_t
 
pögBödî
();

37 
vútuÆ
 
°©us_t
 
dump
(
fd
, c⁄° 
Ve˘‹
<
Såög16
>& 
¨gs
);

39 
vútuÆ
 
°©us_t
 
å™ß˘
–
uöt32_t
 
code
,

40 c⁄° 
P¨˚l
& 
d©a
,

41 
P¨˚l
* 
ª∂y
,

42 
uöt32_t
 
Êags
 = 0);

44 
vútuÆ
 
°©us_t
 
lökToDóth
(c⁄° 
•
<
DóthRecùõ¡
>& 
ªcùõ¡
,

45 * 
cookõ
 = 
NULL
,

46 
uöt32_t
 
Êags
 = 0);

47 
vútuÆ
 
°©us_t
 
u∆ökToDóth
–c⁄° 
wp
<
DóthRecùõ¡
>& 
ªcùõ¡
,

48 * 
cookõ
 = 
NULL
,

49 
uöt32_t
 
Êags
 = 0,

50 
wp
<
DóthRecùõ¡
>* 
outRecùõ¡
 = 
NULL
);

52 
vútuÆ
 
©èchObje˘
–c⁄° * 
obje˘ID
,

53 * 
obje˘
,

54 * 
˛ónupCookõ
,

55 
obje˘_˛ónup_func
 
func
);

56 
vútuÆ
 * 
födObje˘
(c⁄° * 
obje˘ID
) const;

57 
vútuÆ
 
dëachObje˘
(c⁄° * 
obje˘ID
);

59 
vútuÆ
 
BpBödî
* 
ªmŸeBödî
();

61 
°©us_t
 
£tC⁄°™tD©a
(c⁄° * 
d©a
, 
size_t
 
size
);

62 
£ndObôu¨y
();

64 ˛as†
	cObje˘M™agî


66 
	gpublic
:

67 
Obje˘M™agî
();

68 ~
Obje˘M™agî
();

70 
©èch
–c⁄° * 
obje˘ID
,

71 * 
obje˘
,

72 * 
˛ónupCookõ
,

73 
IBödî
::
obje˘_˛ónup_func
 
func
);

74 * 
föd
(c⁄° * 
obje˘ID
) const;

75 
dëach
(c⁄° * 
obje˘ID
);

77 
kûl
();

79 
	g¥iv©e
:

80 
Obje˘M™agî
(const ObjectManager&);

81 
	gObje˘M™agî
& 
	g›î©‹
=(c⁄° 
Obje˘M™agî
&);

83 
	síåy_t


85 * 
	gobje˘
;

86 * 
	g˛ónupCookõ
;

87 
	gIBödî
::
obje˘_˛ónup_func
 
func
;

90 
	gKeyedVe˘‹
<c⁄° *, 
	gíåy_t
> 
	gmObje˘s
;

93 
	g¥Ÿe˘ed
:

94 
vútuÆ
 ~
BpBödî
();

95 
vútuÆ
 
⁄Fú°Ref
();

96 
vútuÆ
 
⁄La°Så⁄gRef
(c⁄° * 
id
);

97 
vútuÆ
 
boﬁ
 
⁄IncSå⁄gAâem±ed
(
uöt32_t
 
Êags
, c⁄° * 
id
);

99 
	g¥iv©e
:

100 c⁄° 
öt32_t
 
mH™dÀ
;

102 
	sObôu¨y
 {

103 
	gwp
<
	gDóthRecùõ¡
> 
	gªcùõ¡
;

104 * 
	gcookõ
;

105 
uöt32_t
 
	gÊags
;

108 
ªp‹tO√Dóth
(c⁄° 
Obôu¨y
& 
obô
);

109 
boﬁ
 
isDes¸ùt‹Cached
() const;

111 
muèbÀ
 
Muãx
 
	gmLock
;

112 vﬁ©ûê
öt32_t
 
	gmAlive
;

113 vﬁ©ûê
öt32_t
 
	gmObôsSít
;

114 
	gVe˘‹
<
	gObôu¨y
>* 
	gmObôu¨õs
;

115 
Obje˘M™agî
 
	gmObje˘s
;

116 
P¨˚l
* 
	gmC⁄°™tD©a
;

117 
muèbÀ
 
Såög16
 
	gmDes¸ùt‹Cache
;

	@jni/include/include/binder/IBinder.h

17 #i‚de‡
ANDROID_IBINDER_H


18 
	#ANDROID_IBINDER_H


	)

20 
	~<utûs/Eº‹s.h
>

21 
	~<utûs/RefBa£.h
>

22 
	~<utûs/Såög16.h
>

23 
	~<utûs/Ve˘‹.h
>

26 
	#B_PACK_CHARS
(
c1
, 
c2
, 
c3
, 
c4
) \

27 ((((
c1
)<<24)Ë| (((
c2
)<<16)Ë| (((
c3
)<<8)Ë| (
c4
))

	)

30 
«me•a˚
 
	g™droid
 {

32 
˛ass
 
	gBBödî
;

33 
˛ass
 
	gBpBödî
;

34 
˛ass
 
	gII¡îÁ˚
;

35 
˛ass
 
	gP¨˚l
;

44 ˛as†
	cIBödî
 : 
public
 
vútuÆ
 
RefBa£


46 
public
:

48 
FIRST_CALL_TRANSACTION
 = 0x00000001,

49 
	gLAST_CALL_TRANSACTION
 = 0x00ffffff,

51 
	gPING_TRANSACTION
 = 
B_PACK_CHARS
('_','P','N','G'),

52 
	gDUMP_TRANSACTION
 = 
B_PACK_CHARS
('_','D','M','P'),

53 
	gINTERFACE_TRANSACTION
 = 
B_PACK_CHARS
('_', 'N', 'T', 'F'),

56 
	gFLAG_ONEWAY
 = 0x00000001

59 
IBödî
();

66 
vútuÆ
 
	g•
<
	gII¡îÁ˚
> 
quîyLoˇlI¡îÁ˚
(c⁄° 
Såög16
& 
des¸ùt‹
);

72 
vútuÆ
 c⁄° 
	gSåög16
& 
gëI¡îÁ˚Des¸ùt‹
() const = 0;

74 
vútuÆ
 
boﬁ
 
isBödîAlive
() const = 0;

75 
vútuÆ
 
°©us_t
 
pögBödî
() = 0;

76 
vútuÆ
 
°©us_t
 
dump
(
fd
, c⁄° 
Ve˘‹
<
Såög16
>& 
¨gs
) = 0;

78 
vútuÆ
 
°©us_t
 
å™ß˘
–
uöt32_t
 
code
,

79 c⁄° 
P¨˚l
& 
d©a
,

80 
P¨˚l
* 
ª∂y
,

81 
uöt32_t
 
Êags
 = 0) = 0;

91 ˛as†
	cDóthRecùõ¡
 : 
public
 
vútuÆ
 
RefBa£


93 
public
:

94 
vútuÆ
 
bödîDõd
(c⁄° 
wp
<
IBödî
>& 
who
) = 0;

119 
vútuÆ
 
°©us_t
 
lökToDóth
(c⁄° 
•
<
DóthRecùõ¡
>& 
ªcùõ¡
,

120 * 
cookõ
 = 
NULL
,

121 
uöt32_t
 
Êags
 = 0) = 0;

130 
vútuÆ
 
°©us_t
 
u∆ökToDóth
–c⁄° 
wp
<
DóthRecùõ¡
>& 
ªcùõ¡
,

131 * 
cookõ
 = 
NULL
,

132 
uöt32_t
 
Êags
 = 0,

133 
wp
<
DóthRecùõ¡
>* 
outRecùõ¡
 = 
NULL
) = 0;

135 
vútuÆ
 
boﬁ
 
checkSub˛ass
(c⁄° * 
sub˛assID
) const;

137 (*
	gobje˘_˛ónup_func
)(c⁄° * 
	tid
, * 
	tobj
, * 
	t˛ónupCookõ
);

139 
vútuÆ
 
©èchObje˘
–c⁄° * 
obje˘ID
,

140 * 
obje˘
,

141 * 
˛ónupCookõ
,

142 
obje˘_˛ónup_func
 
func
) = 0;

143 
vútuÆ
 * 
födObje˘
(c⁄° * 
obje˘ID
) const = 0;

144 
vútuÆ
 
dëachObje˘
(c⁄° * 
obje˘ID
) = 0;

146 
vútuÆ
 
BBödî
* 
loˇlBödî
();

147 
vútuÆ
 
BpBödî
* 
ªmŸeBödî
();

149 
	g¥Ÿe˘ed
:

150 
vútuÆ
 ~
IBödî
();

152 
	g¥iv©e
:

	@jni/include/include/binder/IInterface.h

18 #i‚de‡
ANDROID_IINTERFACE_H


19 
	#ANDROID_IINTERFACE_H


	)

21 
	~<bödî/Bödî.h
>

23 
«me•a˚
 
	g™droid
 {

27 ˛as†
	cII¡îÁ˚
 : 
public
 
vútuÆ
 
RefBa£


29 
public
:

30 
II¡îÁ˚
();

31 
	g•
<
	gIBödî
> 
asBödî
();

32 
	g•
<c⁄° 
	gIBödî
> 
asBödî
() const;

34 
	g¥Ÿe˘ed
:

35 
vútuÆ
 ~
II¡îÁ˚
();

36 
vútuÆ
 
IBödî
* 
⁄AsBödî
() = 0;

41 
	gãm∂©e
<
ty≥«me
 
	gINTERFACE
>

42 
ölöe
 
	g•
<
	gINTERFACE
> 
öãrÁ˚_ˇ°
(c⁄° 
•
<
IBödî
>& 
obj
)

44  
	gINTERFACE
::
asI¡îÁ˚
(
obj
);

49 
	gãm∂©e
<
ty≥«me
 
	gINTERFACE
>

50 
˛ass
 
	gBnI¡îÁ˚
 : 
public
 
INTERFACE
,Öubli¯
	gBBödî


52 
	gpublic
:

53 
vútuÆ
 
•
<
II¡îÁ˚
> 
quîyLoˇlI¡îÁ˚
(c⁄° 
Såög16
& 
_des¸ùt‹
);

54 
vútuÆ
 c⁄° 
	gSåög16
& 
gëI¡îÁ˚Des¸ùt‹
() const;

56 
	g¥Ÿe˘ed
:

57 
vútuÆ
 
IBödî
* 
⁄AsBödî
();

62 
	gãm∂©e
<
ty≥«me
 
	gINTERFACE
>

63 
˛ass
 
	gBpI¡îÁ˚
 : 
public
 
INTERFACE
,Öubli¯
	gBpRefBa£


65 
	gpublic
:

66 
BpI¡îÁ˚
(c⁄° 
•
<
IBödî
>& 
ªmŸe
);

68 
	g¥Ÿe˘ed
:

69 
vútuÆ
 
IBödî
* 
⁄AsBödî
();

74 
	#DECLARE_META_INTERFACE
(
INTERFACE
) \

75 c⁄° 
™droid
::
Såög16
 
des¸ùt‹
; \

76 
™droid
::
•
<
I
##
INTERFACE
> 
	`asI¡îÁ˚
( \

77 c⁄° 
™droid
::
•
<™droid::
IBödî
>& 
obj
); \

78 
vútuÆ
 c⁄° 
™droid
::
Såög16
& 
	$gëI¡îÁ˚Des¸ùt‹
() const; \

79 
I
##
	`INTERFACE
(); \

80 
vútuÆ
 ~
I
##
	`INTERFACE
(); \

81 

	)

83 
	#IMPLEMENT_META_INTERFACE
(
INTERFACE
, 
NAME
) \

84 c⁄° 
™droid
::
Såög16
 
I
##
INTERFACE
::
	`des¸ùt‹
(
NAME
); \

85 c⁄° 
™droid
::
Såög16
& \

86 
I
##
INTERFACE
::
	$gëI¡îÁ˚Des¸ùt‹
() const { \

87  
I
##
INTERFACE
::
des¸ùt‹
; \

88 
	}
} \

89 
™droid
::
•
<
I
##
INTERFACE
> I##INTERFACE::
	`asI¡îÁ˚
( \

90 c⁄° 
™droid
::
•
<™droid::
IBödî
>& 
obj
) \

92 
™droid
::
•
<
I
##
INTERFACE
> 
öå
; \

93 i‡(
obj
 !
NULL
) { \

94 
öå
 = 
°©ic_ˇ°
<
I
##
INTERFACE
*>( \

95 
obj
->
	`quîyLoˇlI¡îÁ˚
( \

96 
I
##
INTERFACE
::
des¸ùt‹
).
	`gë
()); \

97 i‡(
öå
 =
NULL
) { \

98 
öå
 = 
√w
 
Bp
##
	`INTERFACE
(
obj
); \

101  
öå
; \

103 
I
##
INTERFACE
::I##
	$INTERFACE
(Ë{ 
	}
} \

104 
I
##
INTERFACE
::~I##
	$INTERFACE
(Ë{ 
	}
} \

105 

	)

107 
	#CHECK_INTERFACE
(
öãrÁ˚
, 
d©a
, 
ª∂y
) \

108 i‡(!
d©a
.
	$checkI¡îÁ˚
(
this
)Ë{  
PERMISSION_DENIED
; 
	}
} \

109 

	)

114 
	gãm∂©e
<
ty≥«me
 
	gINTERFACE
>

115 
ölöe
 
	g•
<
	gII¡îÁ˚
> 
	gBnI¡îÁ˚
<
	gINTERFACE
>::
	$quîyLoˇlI¡îÁ˚
(

116 c⁄° 
Såög16
& 
_des¸ùt‹
)

118 i‡(
_des¸ùt‹
 =
INTERFACE
::
des¸ùt‹
Ë 
this
;

119  
NULL
;

120 
	}
}

122 
	gãm∂©e
<
ty≥«me
 
	gINTERFACE
>

123 
ölöe
 c⁄° 
	gSåög16
& 
	gBnI¡îÁ˚
<
	gINTERFACE
>::
	$gëI¡îÁ˚Des¸ùt‹
() const

125  
INTERFACE
::
	`gëI¡îÁ˚Des¸ùt‹
();

126 
	}
}

128 
	gãm∂©e
<
ty≥«me
 
	gINTERFACE
>

129 
IBödî
* 
	gBnI¡îÁ˚
<
	gINTERFACE
>::
	$⁄AsBödî
()

131  
this
;

132 
	}
}

134 
	gãm∂©e
<
ty≥«me
 
	gINTERFACE
>

135 
ölöe
 
	gBpI¡îÁ˚
<
	gINTERFACE
>::
BpI¡îÁ˚
(c⁄° 
•
<
IBödî
>& 
ªmŸe
)

136 : 
	$BpRefBa£
(
ªmŸe
)

138 
	}
}

140 
ãm∂©e
<
ty≥«me
 
INTERFACE
>

141 
ölöe
 
IBödî
* 
BpI¡îÁ˚
<
INTERFACE
>::
	$⁄AsBödî
()

143  
	`ªmŸe
();

144 
	}
}

	@jni/include/include/binder/IMemory.h

17 #i‚de‡
ANDROID_IMEMORY_H


18 
	#ANDROID_IMEMORY_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<sys/mm™.h
>

24 
	~<utûs/RefBa£.h
>

25 
	~<utûs/Eº‹s.h
>

26 
	~<bödî/II¡îÁ˚.h
>

28 
«me•a˚
 
	g™droid
 {

32 ˛as†
	cIMem‹yHóp
 : 
public
 
II¡îÁ˚


34 
public
:

35 
DECLARE_META_INTERFACE
(
Mem‹yHóp
);

39 
	gREAD_ONLY
 = 0x00000001

42 
vútuÆ
 
gëHópID
() const = 0;

43 
vútuÆ
 * 
gëBa£
() const = 0;

44 
vútuÆ
 
size_t
 
gëSize
() const = 0;

45 
vútuÆ
 
uöt32_t
 
gëFœgs
() const = 0;

48 
öt32_t
 
hópID
(Ëc⁄° {  
gëHópID
(); }

49 * 
ba£
(Ëc⁄° {  
gëBa£
(); }

50 
size_t
 
vútuÆSize
(Ëc⁄° {  
gëSize
(); }

53 
˛ass
 
	gBnMem‹yHóp
 : 
public
 
BnI¡îÁ˚
<
IMem‹yHóp
>

55 
public
:

56 
vútuÆ
 
°©us_t
 
⁄Tønß˘
(

57 
uöt32_t
 
code
,

58 c⁄° 
P¨˚l
& 
d©a
,

59 
P¨˚l
* 
ª∂y
,

60 
uöt32_t
 
Êags
 = 0);

62 
BnMem‹yHóp
();

63 
	g¥Ÿe˘ed
:

64 
vútuÆ
 ~
BnMem‹yHóp
();

69 ˛as†
	cIMem‹y
 : 
public
 
II¡îÁ˚


71 
public
:

72 
DECLARE_META_INTERFACE
(
Mem‹y
);

74 
vútuÆ
 
	g•
<
	gIMem‹yHóp
> 
gëMem‹y
(
ssize_t
* 
off£t
=0, 
size_t
* 
size
=0) const = 0;

77 * 
Á°Poöãr
(c⁄° 
•
<
IBödî
>& 
hóp
, 
ssize_t
 
off£t
) const;

78 * 
poöãr
() const;

79 
size_t
 
size
() const;

80 
ssize_t
 
off£t
() const;

83 
˛ass
 
	gBnMem‹y
 : 
public
 
BnI¡îÁ˚
<
IMem‹y
>

85 
public
:

86 
vútuÆ
 
°©us_t
 
⁄Tønß˘
(

87 
uöt32_t
 
code
,

88 c⁄° 
P¨˚l
& 
d©a
,

89 
P¨˚l
* 
ª∂y
,

90 
uöt32_t
 
Êags
 = 0);

92 
BnMem‹y
();

93 
	g¥Ÿe˘ed
:

94 
vútuÆ
 ~
BnMem‹y
();

	@jni/include/include/binder/IPCThreadState.h

17 #i‚de‡
ANDROID_IPC_THREAD_STATE_H


18 
	#ANDROID_IPC_THREAD_STATE_H


	)

20 
	~<utûs/Eº‹s.h
>

21 
	~<bödî/P¨˚l.h
>

22 
	~<bödî/Pro˚ssSèã.h
>

23 
	~<utûs/Ve˘‹.h
>

25 #ifde‡
HAVE_WIN32_PROC


26 
	tuid_t
;

30 
«me•a˚
 
	g™droid
 {

32 ˛as†
	cIPCThªadSèã


34 
	gpublic
:

35 
IPCThªadSèã
* 
£lf
();

37 
	g•
<
	gPro˚ssSèã
> 
¥o˚ss
();

39 
°©us_t
 
˛órLa°Eº‹
();

41 
gëCÆlögPid
();

42 
gëCÆlögUid
();

44 
öt64_t
 
˛órCÆlögIdítôy
();

45 
ª°‹eCÆlögIdítôy
(
öt64_t
 
tokí
);

47 
ÊushComm™ds
();

49 
joöThªadPoﬁ
(
boﬁ
 
isMaö
 = 
åue
);

52 
°›Pro˚ss
(
boﬁ
 
immedüã
 = 
åue
);

54 
°©us_t
 
å™ß˘
(
öt32_t
 
h™dÀ
,

55 
uöt32_t
 
code
, c⁄° 
P¨˚l
& 
d©a
,

56 
P¨˚l
* 
ª∂y
, 
uöt32_t
 
Êags
);

58 
öcSå⁄gH™dÀ
(
öt32_t
 
h™dÀ
);

59 
decSå⁄gH™dÀ
(
öt32_t
 
h™dÀ
);

60 
öcWókH™dÀ
(
öt32_t
 
h™dÀ
);

61 
decWókH™dÀ
(
öt32_t
 
h™dÀ
);

62 
°©us_t
 
©ãm±IncSå⁄gH™dÀ
(
öt32_t
 
h™dÀ
);

63 
expungeH™dÀ
(
öt32_t
 
h™dÀ
, 
IBödî
* 
bödî
);

64 
°©us_t
 
ªque°DóthNŸifiˇti⁄
–
öt32_t
 
h™dÀ
,

65 
BpBödî
* 
¥oxy
);

66 
°©us_t
 
˛órDóthNŸifiˇti⁄
–
öt32_t
 
h™dÀ
,

67 
BpBödî
* 
¥oxy
);

69 
shutdown
();

76 
dißbÀBackgroundSchedulög
(
boﬁ
 
dißbÀ
);

78 
	g¥iv©e
:

79 
IPCThªadSèã
();

80 ~
IPCThªadSèã
();

82 
°©us_t
 
£ndRïly
(c⁄° 
P¨˚l
& 
ª∂y
, 
uöt32_t
 
Êags
);

83 
°©us_t
 
waôF‹Re•⁄£
(
P¨˚l
 *
ª∂y
,

84 
°©us_t
 *
acquúeResu…
=
NULL
);

85 
°©us_t
 
èlkWôhDrivî
(
boﬁ
 
doRe˚ive
=
åue
);

86 
°©us_t
 
wrôeTønß˘i⁄D©a
(
öt32_t
 
cmd
,

87 
uöt32_t
 
bödîFœgs
,

88 
öt32_t
 
h™dÀ
,

89 
uöt32_t
 
code
,

90 c⁄° 
P¨˚l
& 
d©a
,

91 
°©us_t
* 
°©usBuf„r
);

92 
°©us_t
 
execuãComm™d
(
öt32_t
 
comm™d
);

94 
˛órCÆÀr
();

96 
thªadDe°ru˘‹
(*
°
);

97 
‰ìBuf„r
(
P¨˚l
* 
∑r˚l
,

98 c⁄° 
uöt8_t
* 
d©a
, 
size_t
 
d©aSize
,

99 c⁄° 
size_t
* 
obje˘s
, size_à
obje˘sSize
,

100 * 
cookõ
);

102 c⁄° 
	g•
<
	gPro˚ssSèã
> 
	gmPro˚ss
;

103 c⁄° 
pid_t
 
	gmMyThªadId
;

104 
	gVe˘‹
<
	gBBödî
*> 
	gmPídögSå⁄gDîefs
;

105 
	gVe˘‹
<
	gRefBa£
::
wókªf_ty≥
*> 
mPídögWókDîefs
;

107 
P¨˚l
 
	gmIn
;

108 
P¨˚l
 
	gmOut
;

109 
°©us_t
 
	gmLa°Eº‹
;

110 
pid_t
 
	gmCÆlögPid
;

111 
uid_t
 
	gmCÆlögUid
;

	@jni/include/include/binder/IPermissionController.h

18 #i‚de‡
ANDROID_IPERMISSION_CONTROLLER_H


19 
	#ANDROID_IPERMISSION_CONTROLLER_H


	)

21 
	~<bödî/II¡îÁ˚.h
>

23 
«me•a˚
 
	g™droid
 {

27 ˛as†
	cIPîmissi⁄C⁄åﬁÀr
 : 
public
 
II¡îÁ˚


29 
public
:

30 
DECLARE_META_INTERFACE
(
Pîmissi⁄C⁄åﬁÀr
);

32 
vútuÆ
 
boﬁ
 
checkPîmissi⁄
(c⁄° 
Såög16
& 
≥rmissi⁄
,

33 
öt32_t
 
pid
, i¡32_à
uid
) = 0;

36 
	gCHECK_PERMISSION_TRANSACTION
 = 
IBödî
::
FIRST_CALL_TRANSACTION


42 
˛ass
 
	gBnPîmissi⁄C⁄åﬁÀr
 : 
public
 
BnI¡îÁ˚
<
IPîmissi⁄C⁄åﬁÀr
>

44 
public
:

45 
vútuÆ
 
°©us_t
 
⁄Tønß˘
–
uöt32_t
 
code
,

46 c⁄° 
P¨˚l
& 
d©a
,

47 
P¨˚l
* 
ª∂y
,

48 
uöt32_t
 
Êags
 = 0);

	@jni/include/include/binder/IServiceManager.h

18 #i‚de‡
ANDROID_ISERVICE_MANAGER_H


19 
	#ANDROID_ISERVICE_MANAGER_H


	)

21 
	~<bödî/II¡îÁ˚.h
>

22 
	~<bödî/IPîmissi⁄C⁄åﬁÀr.h
>

23 
	~<utûs/Ve˘‹.h
>

24 
	~<utûs/Såög16.h
>

26 
«me•a˚
 
	g™droid
 {

30 ˛as†
	cISîvi˚M™agî
 : 
public
 
II¡îÁ˚


32 
public
:

33 
DECLARE_META_INTERFACE
(
Sîvi˚M™agî
);

39 
vútuÆ
 
	g•
<
	gIBödî
> 
gëSîvi˚
–c⁄° 
Såög16
& 
«me
) const = 0;

44 
vútuÆ
 
	g•
<
	gIBödî
> 
checkSîvi˚
–c⁄° 
Såög16
& 
«me
) const = 0;

49 
vútuÆ
 
°©us_t
 
addSîvi˚
–c⁄° 
Såög16
& 
«me
,

50 c⁄° 
•
<
IBödî
>& 
£rvi˚
) = 0;

55 
vútuÆ
 
	gVe˘‹
<
	gSåög16
> 
li°Sîvi˚s
() = 0;

58 
	gGET_SERVICE_TRANSACTION
 = 
IBödî
::
FIRST_CALL_TRANSACTION
,

59 
	gCHECK_SERVICE_TRANSACTION
,

60 
	gADD_SERVICE_TRANSACTION
,

61 
	gLIST_SERVICES_TRANSACTION
,

65 
	g•
<
	gISîvi˚M™agî
> 
deÁu…Sîvi˚M™agî
();

67 
	gãm∂©e
<
ty≥«me
 
	gINTERFACE
>

68 
°©us_t
 
gëSîvi˚
(c⁄° 
Såög16
& 
«me
, 
•
<
INTERFACE
>* 
outSîvi˚
)

70 c⁄° 
	g•
<
	gISîvi˚M™agî
> 
	gsm
 = 
deÁu…Sîvi˚M™agî
();

71 i‡(
	gsm
 !
NULL
) {

72 *
outSîvi˚
 = 
öãrÁ˚_ˇ°
<
INTERFACE
>(
sm
->
gëSîvi˚
(
«me
));

73 i‡((*
	goutSîvi˚
Ë!
NULL
Ë 
NO_ERROR
;

75  
	gNAME_NOT_FOUND
;

78 
boﬁ
 
checkCÆlögPîmissi⁄
(c⁄° 
Såög16
& 
≥rmissi⁄
);

79 
boﬁ
 
checkCÆlögPîmissi⁄
(c⁄° 
Såög16
& 
≥rmissi⁄
,

80 
öt32_t
* 
outPid
, i¡32_t* 
outUid
);

81 
boﬁ
 
checkPîmissi⁄
(c⁄° 
Såög16
& 
≥rmissi⁄
, 
pid_t
 
pid
, 
uid_t
 
uid
);

86 
˛ass
 
	gBnSîvi˚M™agî
 : 
public
 
BnI¡îÁ˚
<
ISîvi˚M™agî
>

88 
public
:

89 
vútuÆ
 
°©us_t
 
⁄Tønß˘
–
uöt32_t
 
code
,

90 c⁄° 
P¨˚l
& 
d©a
,

91 
P¨˚l
* 
ª∂y
,

92 
uöt32_t
 
Êags
 = 0);

	@jni/include/include/binder/MemoryBase.h

17 #i‚de‡
ANDROID_MEMORY_BASE_H


18 
	#ANDROID_MEMORY_BASE_H


	)

20 
	~<°dlib.h
>

21 
	~<°döt.h
>

23 
	~<bödî/IMem‹y.h
>

26 
«me•a˚
 
	g™droid
 {

30 ˛as†
	cMem‹yBa£
 : 
public
 
BnMem‹y


32 
public
:

33 
Mem‹yBa£
(c⁄° 
•
<
IMem‹yHóp
>& 
hóp
, 
ssize_t
 
off£t
, 
size_t
 
size
);

34 
	gvútuÆ
 ~
Mem‹yBa£
();

35 
vútuÆ
 
	g•
<
	gIMem‹yHóp
> 
gëMem‹y
(
ssize_t
* 
off£t
, 
size_t
* 
size
) const;

37 
	g¥Ÿe˘ed
:

38 
size_t
 
gëSize
(Ëc⁄° {  
mSize
; }

39 
ssize_t
 
gëOff£t
(Ëc⁄° {  
	gmOff£t
; }

40 c⁄° 
	g•
<
	gIMem‹yHóp
>& 
gëHóp
(Ëc⁄° {  
	gmHóp
; }

42 
	g¥iv©e
:

43 
size_t
 
mSize
;

44 
ssize_t
 
	gmOff£t
;

45 
	g•
<
	gIMem‹yHóp
> 
	gmHóp
;

	@jni/include/include/binder/MemoryDealer.h

17 #i‚de‡
ANDROID_MEMORY_DEALER_H


18 
	#ANDROID_MEMORY_DEALER_H


	)

21 
	~<°döt.h
>

22 
	~<sys/ty≥s.h
>

24 
	~<bödî/IMem‹y.h
>

25 
	~<bödî/Mem‹yHópBa£.h
>

27 
«me•a˚
 
	g™droid
 {

30 
˛ass
 
	gSim∂eBe°FôAŒoˇt‹
;

34 ˛as†
	cMem‹yDóÀr
 : 
public
 
RefBa£


36 
public
:

37 
Mem‹yDóÀr
(
size_t
 
size
, c⁄° * 
«me
 = 0);

39 
vútuÆ
 
	g•
<
	gIMem‹y
> 
Æloˇã
(
size_t
 
size
);

40 
vútuÆ
 
dóŒoˇã
(
size_t
 
off£t
);

41 
vútuÆ
 
dump
(c⁄° * 
wh©
) const;

43 
	g•
<
	gIMem‹yHóp
> 
gëMem‹yHóp
(Ëc⁄° {  
hóp
(); }

45 
	g¥Ÿe˘ed
:

46 
vútuÆ
 ~
Mem‹yDóÀr
();

48 
	g¥iv©e
:

49 c⁄° 
•
<
IMem‹yHóp
>& 
hóp
() const;

50 
Sim∂eBe°FôAŒoˇt‹
* 
Æloˇt‹
() const;

52 
	g•
<
	gIMem‹yHóp
> 
	gmHóp
;

53 
Sim∂eBe°FôAŒoˇt‹
* 
	gmAŒoˇt‹
;

	@jni/include/include/binder/MemoryHeapBase.h

17 #i‚de‡
ANDROID_MEMORY_HEAP_BASE_H


18 
	#ANDROID_MEMORY_HEAP_BASE_H


	)

20 
	~<°dlib.h
>

21 
	~<°döt.h
>

23 
	~<bödî/IMem‹y.h
>

26 
«me•a˚
 
	g™droid
 {

30 ˛as†
	cMem‹yHópBa£
 : 
public
 
vútuÆ
 
BnMem‹yHóp


32 
public
:

34 
READ_ONLY
 = 
IMem‹yHóp
::READ_ONLY,

37 
	gDONT_MAP_LOCALLY
 = 0x00000100,

38 
	gNO_CACHING
 = 0x00000200

45 
Mem‹yHópBa£
(
fd
, 
size_t
 
size
, 
uöt32_t
 
Êags
 = 0, uöt32_à
off£t
 = 0);

50 
Mem‹yHópBa£
(c⁄° * 
devi˚
, 
size_t
 
size
 = 0, 
uöt32_t
 
Êags
 = 0);

55 
Mem‹yHópBa£
(
size_t
 
size
, 
uöt32_t
 
Êags
 = 0, c⁄°* 
«me
 = 
NULL
);

57 
	gvútuÆ
 ~
Mem‹yHópBa£
();

60 
vútuÆ
 
gëHópID
() const;

61 
vútuÆ
 * 
gëBa£
() const;

62 
vútuÆ
 
size_t
 
gëSize
() const;

63 
vútuÆ
 
uöt32_t
 
gëFœgs
() const;

65 c⁄° * 
gëDevi˚
() const;

68 
di•o£
();

72 
°©us_t
 
£tDevi˚
(c⁄° * 
devi˚
) {

73 i‡(
	gmDevi˚
 == 0)

74 
mDevi˚
 = 
devi˚
;

75  
	gmDevi˚
 ? 
	gNO_ERROR
 : 
ALREADY_EXISTS
;

78 
	g¥Ÿe˘ed
:

79 
Mem‹yHópBa£
();

81 
°©us_t
 
öô
(
fd
, *
ba£
, 
size
,

82 
Êags
 = 0, c⁄° * 
devi˚
 = 
NULL
);

84 
	g¥iv©e
:

85 
°©us_t
 
m≠fd
(
fd
, 
size_t
 
size
, 
uöt32_t
 
off£t
 = 0);

87 
	gmFD
;

88 
size_t
 
	gmSize
;

89 * 
	gmBa£
;

90 
uöt32_t
 
	gmFœgs
;

91 c⁄° * 
	gmDevi˚
;

92 
boﬁ
 
	gmNìdUnm≠
;

	@jni/include/include/binder/MemoryHeapPmem.h

17 #i‚de‡
ANDROID_MEMORY_HEAP_PMEM_H


18 
	#ANDROID_MEMORY_HEAP_PMEM_H


	)

20 
	~<°dlib.h
>

21 
	~<°döt.h
>

23 
	~<bödî/Mem‹yHópBa£.h
>

24 
	~<bödî/IMem‹y.h
>

25 
	~<utûs/S‹ãdVe˘‹.h
>

26 
	~<utûs/thªads.h
>

28 
«me•a˚
 
	g™droid
 {

30 
˛ass
 
	gMem‹yHópBa£
;

34 ˛as†
	cMem‹yHópPmem
 : 
public
 
Mem‹yHópBa£


36 
public
:

37 ˛as†
	cMem‹yPmem
 : 
public
 
BnMem‹y
 {

38 
public
:

39 
Mem‹yPmem
(c⁄° 
•
<
Mem‹yHópPmem
>& 
hóp
);

40 ~
Mem‹yPmem
();

41 
	g¥Ÿe˘ed
:

42 c⁄° 
•
<
Mem‹yHópPmem
>& 
gëHóp
(Ëc⁄° {  
mClõ¡Hóp
; }

43 
	g¥iv©e
:

44 
‰õnd
 
˛ass
 
Mem‹yHópPmem
;

45 
vútuÆ
 
ªvoke
() = 0;

46 
	g•
<
	gMem‹yHópPmem
> 
	gmClõ¡Hóp
;

49 
Mem‹yHópPmem
(c⁄° 
•
<
Mem‹yHópBa£
>& 
pmemHóp
, 
uöt32_t
 
Êags
 = 0);

50 ~
Mem‹yHópPmem
();

53 
vútuÆ
 
	g•
<
	gIMem‹y
> 
m≠Mem‹y
(
size_t
 
off£t
, size_à
size
);

56 
vútuÆ
 
°©us_t
 
¶≠
();

59 
vútuÆ
 
°©us_t
 
un¶≠
();

62 
vútuÆ
 
ªvoke
();

64 
	g¥iv©e
:

66 
vútuÆ
 
•
<
Mem‹yPmem
> 
¸óãMem‹y
(
size_t
 
off£t
, size_à
size
);

67 
ªmove
(c⁄° 
wp
<
Mem‹yPmem
>& 
mem‹y
);

69 
	g¥iv©e
:

70 
•
<
Mem‹yHópBa£
> 
mP¨ítHóp
;

71 
muèbÀ
 
Muãx
 
	gmLock
;

72 
	gS‹ãdVe˘‹
< 
	gwp
<
	gMem‹yPmem
> > 
	gmAŒoˇti⁄s
;

	@jni/include/include/binder/Parcel.h

17 #i‚de‡
ANDROID_PARCEL_H


18 
	#ANDROID_PARCEL_H


	)

20 
	~<cutûs/«tive_h™dÀ.h
>

21 
	~<utûs/Eº‹s.h
>

22 
	~<utûs/RefBa£.h
>

23 
	~<utûs/Såög16.h
>

24 
	~<utûs/Ve˘‹.h
>

27 
«me•a˚
 
	g™droid
 {

29 
˛ass
 
	gIBödî
;

30 
˛ass
 
	gPro˚ssSèã
;

31 
˛ass
 
	gSåög8
;

32 
˛ass
 
	gTextOuçut
;

33 
˛ass
 
	gFœâíabÀ
;

35 
	gÊ©_bödî_obje˘
;

37 ˛as†
	cP¨˚l


39 
	gpublic
:

40 
P¨˚l
();

41 ~
P¨˚l
();

43 c⁄° 
uöt8_t
* 
d©a
() const;

44 
size_t
 
d©aSize
() const;

45 
size_t
 
d©aAvaû
() const;

46 
size_t
 
d©aPosôi⁄
() const;

47 
size_t
 
d©aC≠acôy
() const;

49 
°©us_t
 
£tD©aSize
(
size_t
 
size
);

50 
£tD©aPosôi⁄
(
size_t
 
pos
) const;

51 
°©us_t
 
£tD©aC≠acôy
(
size_t
 
size
);

53 
°©us_t
 
£tD©a
(c⁄° 
uöt8_t
* 
buf„r
, 
size_t
 
Àn
);

55 
°©us_t
 
≠≥ndFrom
(
P¨˚l
 *
∑r˚l
, 
size_t
 
°¨t
, size_à
Àn
);

57 
boﬁ
 
hasFûeDes¸ùt‹s
() const;

59 
°©us_t
 
wrôeI¡îÁ˚Tokí
(c⁄° 
Såög16
& 
öãrÁ˚
);

60 
boﬁ
 
íf‹˚I¡îÁ˚
(c⁄° 
Såög16
& 
öãrÁ˚
) const;

61 
boﬁ
 
checkI¡îÁ˚
(
IBödî
*) const;

63 
‰ìD©a
();

65 c⁄° 
size_t
* 
obje˘s
() const;

66 
size_t
 
obje˘sCou¡
() const;

68 
°©us_t
 
îr‹Check
() const;

69 
£tEº‹
(
°©us_t
 
îr
);

71 
°©us_t
 
wrôe
(c⁄° * 
d©a
, 
size_t
 
Àn
);

72 * 
wrôeI≈œ˚
(
size_t
 
Àn
);

73 
°©us_t
 
wrôeU≈added
(c⁄° * 
d©a
, 
size_t
 
Àn
);

74 
°©us_t
 
wrôeI¡32
(
öt32_t
 
vÆ
);

75 
°©us_t
 
wrôeI¡64
(
öt64_t
 
vÆ
);

76 
°©us_t
 
wrôeFlﬂt
(
vÆ
);

77 
°©us_t
 
wrôeDoubÀ
(
vÆ
);

78 
°©us_t
 
wrôeI¡På
(
öçå_t
 
vÆ
);

79 
°©us_t
 
wrôeCSåög
(c⁄° * 
°r
);

80 
°©us_t
 
wrôeSåög8
(c⁄° 
Såög8
& 
°r
);

81 
°©us_t
 
wrôeSåög16
(c⁄° 
Såög16
& 
°r
);

82 
°©us_t
 
wrôeSåög16
(c⁄° 
ch¨16_t
* 
°r
, 
size_t
 
Àn
);

83 
°©us_t
 
wrôeSå⁄gBödî
(c⁄° 
•
<
IBödî
>& 
vÆ
);

84 
°©us_t
 
wrôeWókBödî
(c⁄° 
wp
<
IBödî
>& 
vÆ
);

85 
°©us_t
 
wrôe
(c⁄° 
FœâíabÀ
& 
vÆ
);

91 
°©us_t
 
wrôeN©iveH™dÀ
(c⁄° 
«tive_h™dÀ
* 
h™dÀ
);

95 
°©us_t
 
wrôeFûeDes¸ùt‹
(
fd
);

99 
°©us_t
 
wrôeDupFûeDes¸ùt‹
(
fd
);

101 
°©us_t
 
wrôeObje˘
(c⁄° 
Ê©_bödî_obje˘
& 
vÆ
, 
boﬁ
 
nuŒMëaD©a
);

103 
ªmove
(
size_t
 
°¨t
, size_à
amt
);

105 
°©us_t
 
ªad
(* 
outD©a
, 
size_t
 
Àn
) const;

106 c⁄° * 
ªadI≈œ˚
(
size_t
 
Àn
) const;

107 
öt32_t
 
ªadI¡32
() const;

108 
°©us_t
 
ªadI¡32
(
öt32_t
 *
pArg
) const;

109 
öt64_t
 
ªadI¡64
() const;

110 
°©us_t
 
ªadI¡64
(
öt64_t
 *
pArg
) const;

111 
ªadFlﬂt
() const;

112 
°©us_t
 
ªadFlﬂt
(*
pArg
) const;

113 
ªadDoubÀ
() const;

114 
°©us_t
 
ªadDoubÀ
(*
pArg
) const;

115 
öçå_t
 
ªadI¡På
() const;

116 
°©us_t
 
ªadI¡På
(
öçå_t
 *
pArg
) const;

118 c⁄° * 
ªadCSåög
() const;

119 
Såög8
 
ªadSåög8
() const;

120 
Såög16
 
ªadSåög16
() const;

121 c⁄° 
ch¨16_t
* 
ªadSåög16I≈œ˚
(
size_t
* 
outLí
) const;

122 
	g•
<
	gIBödî
> 
ªadSå⁄gBödî
() const;

123 
	gwp
<
	gIBödî
> 
ªadWókBödî
() const;

124 
°©us_t
 
ªad
(
FœâíabÀ
& 
vÆ
) const;

130 
«tive_h™dÀ
* 
ªadN©iveH™dÀ
() const;

135 
ªadFûeDes¸ùt‹
() const;

137 c⁄° 
Ê©_bödî_obje˘
* 
ªadObje˘
(
boﬁ
 
nuŒMëaD©a
) const;

140 
˛o£FûeDes¸ùt‹s
();

142 (*
	gªÀa£_func
)(
	tP¨˚l
* 
	t∑r˚l
,

143 c⁄° 
	tuöt8_t
* 
	td©a
, 
	tsize_t
 
	td©aSize
,

144 c⁄° 
	tsize_t
* 
	tobje˘s
, size_à
	tobje˘sSize
,

145 * 
	tcookõ
);

147 c⁄° 
uöt8_t
* 
ùcD©a
() const;

148 
size_t
 
ùcD©aSize
() const;

149 c⁄° 
size_t
* 
ùcObje˘s
() const;

150 
size_t
 
ùcObje˘sCou¡
() const;

151 
ùcSëD©aRe„ªn˚
(c⁄° 
uöt8_t
* 
d©a
, 
size_t
 
d©aSize
,

152 c⁄° 
size_t
* 
obje˘s
, size_à
obje˘sCou¡
,

153 
ªÀa£_func
 
ªlFunc
, * 
ªlCookõ
);

155 
¥öt
(
TextOuçut
& 
to
, 
uöt32_t
 
Êags
 = 0) const;

157 
	g¥iv©e
:

158 
P¨˚l
(c⁄° P¨˚l& 
o
);

159 
	gP¨˚l
& 
	g›î©‹
=(c⁄° 
P¨˚l
& 
o
);

161 
°©us_t
 
föishWrôe
(
size_t
 
Àn
);

162 
ªÀa£Obje˘s
();

163 
acquúeObje˘s
();

164 
°©us_t
 
growD©a
(
size_t
 
Àn
);

165 
°©us_t
 
ª°¨tWrôe
(
size_t
 
desúed
);

166 
°©us_t
 
c⁄töueWrôe
(
size_t
 
desúed
);

167 
‰ìD©aNoInô
();

168 
öôSèã
();

169 
sˇnF‹Fds
() const;

171 
	gãm∂©e
<
˛ass
 
	gT
>

172 
°©us_t
 
ªadAlig√d
(
T
 *
pArg
) const;

174 
	gãm∂©e
<
˛ass
 
	gT
> 
T
 
ªadAlig√d
() const;

176 
	gãm∂©e
<
˛ass
 
	gT
>

177 
°©us_t
 
wrôeAlig√d
(
T
 
vÆ
);

179 
°©us_t
 
	gmEº‹
;

180 
uöt8_t
* 
	gmD©a
;

181 
size_t
 
	gmD©aSize
;

182 
size_t
 
	gmD©aC≠acôy
;

183 
muèbÀ
 
size_t
 
	gmD©aPos
;

184 
size_t
* 
	gmObje˘s
;

185 
size_t
 
	gmObje˘sSize
;

186 
size_t
 
	gmObje˘sC≠acôy
;

187 
muèbÀ
 
size_t
 
	gmNextObje˘Höt
;

189 
muèbÀ
 
boﬁ
 
	gmFdsKnown
;

190 
muèbÀ
 
boﬁ
 
	gmHasFds
;

192 
ªÀa£_func
 
	gmOw√r
;

193 * 
	gmOw√rCookõ
;

198 
ölöe
 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, c⁄° 
	gP¨˚l
& 
	g∑r˚l
)

200 
	g∑r˚l
.
¥öt
(
to
);

201  
	gto
;

207 
acquúe_obje˘
(c⁄° 
•
<
Pro˚ssSèã
>& 
¥oc
,

208 c⁄° 
Ê©_bödî_obje˘
& 
obj
, c⁄° * 
who
);

209 
ªÀa£_obje˘
(c⁄° 
•
<
Pro˚ssSèã
>& 
¥oc
,

210 c⁄° 
Ê©_bödî_obje˘
& 
obj
, c⁄° * 
who
);

212 
Ê©ãn_bödî
(c⁄° 
•
<
Pro˚ssSèã
>& 
¥oc
,

213 c⁄° 
•
<
IBödî
>& 
bödî
, 
Ê©_bödî_obje˘
* 
out
);

214 
Ê©ãn_bödî
(c⁄° 
•
<
Pro˚ssSèã
>& 
¥oc
,

215 c⁄° 
wp
<
IBödî
>& 
bödî
, 
Ê©_bödî_obje˘
* 
out
);

216 
°©us_t
 
unÊ©ãn_bödî
(c⁄° 
•
<
Pro˚ssSèã
>& 
¥oc
,

217 c⁄° 
Ê©_bödî_obje˘
& 
Ê©
, 
•
<
IBödî
>* 
out
);

218 
°©us_t
 
unÊ©ãn_bödî
(c⁄° 
•
<
Pro˚ssSèã
>& 
¥oc
,

219 c⁄° 
Ê©_bödî_obje˘
& 
Ê©
, 
wp
<
IBödî
>* 
out
);

	@jni/include/include/binder/Permission.h

17 #i‚de‡
BINDER_PERMISSION_H


18 
	#BINDER_PERMISSION_H


	)

20 
	~<°döt.h
>

21 
	~<uni°d.h
>

23 
	~<utûs/S‹ãdVe˘‹.h
>

24 
	~<utûs/Såög16.h
>

25 
	~<utûs/thªads.h
>

27 
«me•a˚
 
	g™droid
 {

38 ˛as†
	cPîmissi⁄


40 
	gpublic
:

41 
Pîmissi⁄
(c⁄°* 
«me
);

42 
Pîmissi⁄
(c⁄° 
Såög16
& 
«me
);

43 
Pîmissi⁄
(c⁄° Pîmissi⁄& 
rhs
);

44 
	gvútuÆ
 ~
Pîmissi⁄
();

46 
boﬁ
 
	g›î©‹
 < (c⁄° 
	gPîmissi⁄
& 
	grhs
) const;

49 
boﬁ
 
checkCÆlög
() const;

52 
boﬁ
 
check
(
pid_t
 
pid
, 
uid_t
 
uid
) const;

54 
	g¥Ÿe˘ed
:

55 
vútuÆ
 
boﬁ
 
doCheckPîmissi⁄
(
pid_t
 
pid
, 
uid_t
 
uid
) const;

57 
	g¥iv©e
:

58 
Pîmissi⁄
& 
›î©‹
 = (c⁄° Pîmissi⁄& 
rhs
) const;

59 c⁄° 
Såög16
 
	gmPîmissi⁄Name
;

60 
muèbÀ
 
	gS‹ãdVe˘‹
<
	guid_t
> 
	gmGø¡ed
;

61 c⁄° 
pid_t
 
	gmPid
;

62 
muèbÀ
 
Muãx
 
	gmLock
;

	@jni/include/include/binder/ProcessState.h

17 #i‚de‡
ANDROID_PROCESS_STATE_H


18 
	#ANDROID_PROCESS_STATE_H


	)

20 
	~<bödî/IBödî.h
>

21 
	~<utûs/KeyedVe˘‹.h
>

22 
	~<utûs/Såög8.h
>

23 
	~<utûs/Såög16.h
>

25 
	~<utûs/thªads.h
>

28 
«me•a˚
 
	g™droid
 {

31 
mArgC
;

32 c⁄° * c⁄°* 
mArgV
;

33 
mArgLí
;

35 
˛ass
 
	gIPCThªadSèã
;

37 ˛as†
	cPro˚ssSèã
 : 
public
 
vútuÆ
 
RefBa£


39 
public
:

40 
•
<
Pro˚ssSèã
> 
£lf
();

42 
£tSögÀPro˚ss
(
boﬁ
 
sögÀPro˚ss
);

44 
£tC⁄ãxtObje˘
(c⁄° 
•
<
IBödî
>& 
obje˘
);

45 
	g•
<
	gIBödî
> 
gëC⁄ãxtObje˘
(c⁄° 
•
<
IBödî
>& 
ˇŒî
);

47 
£tC⁄ãxtObje˘
(c⁄° 
•
<
IBödî
>& 
obje˘
,

48 c⁄° 
Såög16
& 
«me
);

49 
	g•
<
	gIBödî
> 
gëC⁄ãxtObje˘
(c⁄° 
Såög16
& 
«me
,

50 c⁄° 
•
<
IBödî
>& 
ˇŒî
);

52 
boﬁ
 
suµ‹tsPro˚s£s
() const;

54 
°¨tThªadPoﬁ
();

56 
boﬁ
 (*
	tc⁄ãxt_check_func
)(c⁄° 
	tSåög16
& 
	t«me
,

57 c⁄° 
	t•
<
	tIBödî
>& 
	tˇŒî
,

58 * 
	tu£rD©a
);

60 
boﬁ
 
isC⁄ãxtM™agî
() const;

61 
boﬁ
 
becomeC⁄ãxtM™agî
(

62 
c⁄ãxt_check_func
 
checkFunc
,

63 * 
u£rD©a
);

65 
	g•
<
	gIBödî
> 
gëSå⁄gProxyF‹H™dÀ
(
öt32_t
 
h™dÀ
);

66 
	gwp
<
	gIBödî
> 
gëWókProxyF‹H™dÀ
(
öt32_t
 
h™dÀ
);

67 
expungeH™dÀ
(
öt32_t
 
h™dÀ
, 
IBödî
* 
bödî
);

69 
£tArgs
(
¨gc
, c⁄° * c⁄° 
¨gv
[]);

70 
gëArgC
() const;

71 c⁄° * c⁄°* 
gëArgV
() const;

73 
£tArgV0
(c⁄° * 
txt
);

75 
•awnPoﬁedThªad
(
boﬁ
 
isMaö
);

77 
	g¥iv©e
:

78 
‰õnd
 
˛ass
 
IPCThªadSèã
;

80 
Pro˚ssSèã
();

81 ~
Pro˚ssSèã
();

83 
Pro˚ssSèã
(c⁄° Pro˚ssSèã& 
o
);

84 
	gPro˚ssSèã
& 
	g›î©‹
=(c⁄° 
Pro˚ssSèã
& 
o
);

86 
	sh™dÀ_íåy
 {

87 
IBödî
* 
	gbödî
;

88 
	gRefBa£
::
wókªf_ty≥
* 
ªfs
;

91 
h™dÀ_íåy
* 
lookupH™dÀLocked
(
öt32_t
 
h™dÀ
);

93 
	gmDrivîFD
;

94 * 
	gmVMSèπ
;

96 
muèbÀ
 
Muãx
 
	gmLock
;

98 
	gVe˘‹
<
	gh™dÀ_íåy
>
	gmH™dÀToObje˘
;

100 
boﬁ
 
	gmM™agesC⁄ãxts
;

101 
c⁄ãxt_check_func
 
	gmBödîC⁄ãxtCheckFunc
;

102 * 
	gmBödîC⁄ãxtU£rD©a
;

104 
	gKeyedVe˘‹
<
	gSåög16
, 
	g•
<
	gIBödî
> >

105 
	gmC⁄ãxts
;

108 
Såög8
 
	gmRoŸDú
;

109 
boﬁ
 
	gmThªadPoﬁSèπed
;

110 vﬁ©ûê
öt32_t
 
	gmThªadPoﬁSeq
;

	@jni/include/include/cutils/abort_socket.h

49 
	~<°dlib.h
>

50 
	~<sys/sockë.h
>

52 #i‚de‡
__CUTILS_ABORT_SOCKET_H__


53 
	#__CUTILS_ABORT_SOCKET_H__


	)

54 #ifde‡
__˝lu•lus


58 
	sasockë
 {

59 
fd
;

60 
ab‹t_fd
[2];

67 
asockë
 *
asockë_öô
(
fd
);

77 
asockë_c⁄√˘
(
asockë
 *
s
, c⁄° 
sockaddr
 *
addr
,

78 
sockÀn_t
 
addæí
, 
timeout
);

80 
asockë_ac˚±
(
asockë
 *
s
, 
sockaddr
 *
addr
,

81 
sockÀn_t
 *
addæí
, 
timeout
);

83 
asockë_ªad
(
asockë
 *
s
, *
buf
, 
size_t
 
cou¡
, 
timeout
);

85 
asockë_wrôe
(
asockë
 *
s
, c⁄° *
buf
, 
size_t
 
cou¡
,

86 
timeout
);

93 
asockë_ab‹t
(
asockë
 *
s
);

98 
asockë_de°roy
(
asockë
 *
s
);

100 #ifde‡
__˝lu•lus


	@jni/include/include/cutils/array.h

21 #i‚de‡
__ARRAY_H


22 
	#__ARRAY_H


	)

24 #ifde‡
__˝lu•lus


28 
	~<°dlib.h
>

31 
Aºay
 
	tAºay
;

34 
Aºay
* 
¨øyCª©e
();

37 
¨øyFªe
(
Aºay
* 
¨øy
);

40 
¨øyAdd
(
Aºay
* 
¨øy
, * 
poöãr
);

43 * 
¨øyGë
(
Aºay
* 
¨øy
, 
ödex
);

46 * 
¨øyRemove
(
Aºay
* 
¨øy
, 
ödex
);

49 * 
¨øySë
(
Aºay
* 
¨øy
, 
ödex
, * 
poöãr
);

52 
¨øySëSize
(
Aºay
* 
¨øy
, 
size
);

55 
¨øySize
(
Aºay
* 
¨øy
);

61 c⁄° ** 
¨øyUnwøp
(
Aºay
* 
¨øy
);

63 #ifde‡
__˝lu•lus


	@jni/include/include/cutils/ashmem.h

10 #i‚de‡
_CUTILS_ASHMEM_H


11 
	#_CUTILS_ASHMEM_H


	)

13 
	~<°döt.h
>

15 #ifde‡
__˝lu•lus


19 
ashmem_¸óã_ªgi⁄
(c⁄° *
«me
, 
size_t
 
size
);

20 
ashmem_£t_¥Ÿ_ªgi⁄
(
fd
, 
¥Ÿ
);

21 
ashmem_pö_ªgi⁄
(
fd
, 
size_t
 
off£t
, size_à
Àn
);

22 
ashmem_u≈ö_ªgi⁄
(
fd
, 
size_t
 
off£t
, size_à
Àn
);

23 
ashmem_gë_size_ªgi⁄
(
fd
);

25 #ifde‡
__˝lu•lus


29 #i‚de‡
__ASHMEMIOC


31 
	#ASHMEM_NAME_LEN
 256

	)

33 
	#ASHMEM_NAME_DEF
 "dev/ashmem"

	)

36 
	#ASHMEM_NOT_PURGED
 0

	)

37 
	#ASHMEM_WAS_PURGED
 1

	)

40 
	#ASHMEM_IS_UNPINNED
 0

	)

41 
	#ASHMEM_IS_PINNED
 1

	)

	@jni/include/include/cutils/atomic.h

17 #i‚de‡
ANDROID_CUTILS_ATOMIC_H


18 
	#ANDROID_CUTILS_ATOMIC_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 #ifde‡
__˝lu•lus


34 
™droid_©omic_wrôe
(
öt32_t
 
vÆue
, vﬁ©ûêöt32_t* 
addr
);

41 
öt32_t
 
™droid_©omic_öc
(vﬁ©ûêöt32_t* 
addr
);

42 
öt32_t
 
™droid_©omic_dec
(vﬁ©ûêöt32_t* 
addr
);

44 
öt32_t
 
™droid_©omic_add
(öt32_à
vÆue
, vﬁ©ûêöt32_t* 
addr
);

45 
öt32_t
 
™droid_©omic_™d
(öt32_à
vÆue
, vﬁ©ûêöt32_t* 
addr
);

46 
öt32_t
 
™droid_©omic_‹
(öt32_à
vÆue
, vﬁ©ûêöt32_t* 
addr
);

48 
öt32_t
 
™droid_©omic_sw≠
(öt32_à
vÆue
, vﬁ©ûêöt32_t* 
addr
);

59 
öt64_t
 
™droid_quasütomic_sw≠_64
(öt64_à
vÆue
, vﬁ©ûêöt64_t* 
addr
);

60 
öt64_t
 
™droid_quasütomic_ªad_64
(vﬁ©ûêöt64_t* 
addr
);

67 
™droid_©omic_cmpxchg
(
öt32_t
 
ﬁdvÆue
, i¡32_à
√wvÆue
,

68 vﬁ©ûê
öt32_t
* 
addr
);

70 
™droid_quasütomic_cmpxchg_64
(
öt64_t
 
ﬁdvÆue
, i¡64_à
√wvÆue
,

71 vﬁ©ûê
öt64_t
* 
addr
);

75 #ifde‡
__˝lu•lus


	@jni/include/include/cutils/compiler.h

17 #i‚de‡
ANDROID_CUTILS_COMPILER_H


18 
	#ANDROID_CUTILS_COMPILER_H


	)

24 #ifde‡
__˝lu•lus


25 
	#CC_LIKELY
–
exp
 ) (
	`__buûtö_ex≥˘
–!!”xp), 
åue
 ))

	)

26 
	#CC_UNLIKELY
–
exp
 ) (
	`__buûtö_ex≥˘
–!!”xp), 
Ál£
 ))

	)

28 
	#CC_LIKELY
–
exp
 ) (
	`__buûtö_ex≥˘
–!!”xp), 1 ))

	)

29 
	#CC_UNLIKELY
–
exp
 ) (
	`__buûtö_ex≥˘
–!!”xp), 0 ))

	)

	@jni/include/include/cutils/config_utils.h

17 #i‚de‡
__CUTILS_CONFIG_UTILS_H


18 
	#__CUTILS_CONFIG_UTILS_H


	)

20 #ifde‡
__˝lu•lus


24 
˙ode
 
	t˙ode
;

27 
	s˙ode


29 
˙ode
 *
√xt
;

30 
˙ode
 *
fú°_chûd
;

31 
˙ode
 *
œ°_chûd
;

32 c⁄° *
«me
;

33 c⁄° *
vÆue
;

37 
c⁄fig_lﬂd
(
˙ode
 *
roŸ
, *
d©a
);

40 
c⁄fig_lﬂd_fûe
(
˙ode
 *
roŸ
, c⁄° *
‚
);

43 
˙ode
* 
c⁄fig_node
(c⁄° *
«me
, c⁄° *
vÆue
);

46 
˙ode
* 
c⁄fig_föd
(˙odê*
roŸ
, c⁄° *
«me
);

49 
c⁄fig_boﬁ
(
˙ode
 *
roŸ
, c⁄° *
«me
, 
_deÁu…
);

52 c⁄° * 
c⁄fig_°r
(
˙ode
 *
roŸ
, c⁄° *
«me
, c⁄° *
_deÁu…
);

55 
c⁄fig_£t
(
˙ode
 *
roŸ
, c⁄° *
«me
, c⁄° *
vÆue
);

57 #ifde‡
__˝lu•lus


	@jni/include/include/cutils/cpu_info.h

17 #i‚de‡
__CUTILS_CPU_INFO_H


18 
	#__CUTILS_CPU_INFO_H


	)

20 #ifde‡
__˝lu•lus


28 c⁄° * 
gë_˝u_£rül_numbî
();

30 #ifde‡
__˝lu•lus


	@jni/include/include/cutils/dir_hash.h

18 
	mSHA_1
,

19 } 
	tHashAlg‹ôhm
;

21 
gë_fûe_hash
(
HashAlg‹ôhm
 
Æg‹ôhm
, c⁄° *
∑th
,

22 *
ouçut_°rög
, 
size_t
 
max_ouçut_°rög
);

24 
gë_ªcursive_hash_m™i„°
(
HashAlg‹ôhm
 
Æg‹ôhm
,

25 c⁄° *
dúe˘‹y_∑th
,

26 **
ouçut_°rög
);

	@jni/include/include/cutils/event_tag_map.h

17 #i‚de‡
_LIBS_CUTILS_EVENTTAGMAP_H


18 
	#_LIBS_CUTILS_EVENTTAGMAP_H


	)

20 #ifde‡
__˝lu•lus


24 
	#EVENT_TAG_MAP_FILE
 "/sy°em/ëc/evít-log-ègs"

	)

26 
EvítTagM≠
;

27 
EvítTagM≠
 
	tEvítTagM≠
;

34 
EvítTagM≠
* 
™droid_›íEvítTagM≠
(c⁄° * 
fûeName
);

39 
™droid_˛o£EvítTagM≠
(
EvítTagM≠
* 
m≠
);

44 c⁄° * 
™droid_lookupEvítTag
(c⁄° 
EvítTagM≠
* 
m≠
, 
èg
);

46 #ifde‡
__˝lu•lus


	@jni/include/include/cutils/hashmap.h

21 #i‚de‡
__HASHMAP_H


22 
	#__HASHMAP_H


	)

24 
	~<°dboﬁ.h
>

25 
	~<°dlib.h
>

27 #ifde‡
__˝lu•lus


32 
Hashm≠
 
	tHashm≠
;

41 
Hashm≠
* 
hashm≠Cª©e
(
size_t
 
öôülC≠acôy
,

42 (*
hash
)(* 
key
), 
boﬁ
 (*
equÆs
)(* 
keyA
, * 
keyB
));

47 
hashm≠Fªe
(
Hashm≠
* 
m≠
);

53 
hashm≠Hash
(* 
key
, 
size_t
 
keySize
);

62 * 
hashm≠Put
(
Hashm≠
* 
m≠
, * 
key
, * 
vÆue
);

68 * 
hashm≠Gë
(
Hashm≠
* 
m≠
, * 
key
);

73 
boﬁ
 
hashm≠C⁄èösKey
(
Hashm≠
* 
m≠
, * 
key
);

82 * 
hashm≠Memoize
(
Hashm≠
* 
m≠
, * 
key
,

83 * (*
öôülVÆue
)(* 
key
, * 
c⁄ãxt
), * context);

89 * 
hashm≠Remove
(
Hashm≠
* 
m≠
, * 
key
);

94 
size_t
 
hashm≠Size
(
Hashm≠
* 
m≠
);

100 
hashm≠F‹Each
(
Hashm≠
* 
m≠
,

101 
boﬁ
 (*
ˇŒback
)(* 
key
, * 
vÆue
, * 
c⁄ãxt
),

102 * 
c⁄ãxt
);

111 
hashm≠Lock
(
Hashm≠
* 
m≠
);

116 
hashm≠U∆ock
(
Hashm≠
* 
m≠
);

125 
hashm≠I¡Hash
(* 
key
);

130 
boﬁ
 
hashm≠I¡EquÆs
(* 
keyA
, * 
keyB
);

139 
size_t
 
hashm≠CuºítC≠acôy
(
Hashm≠
* 
m≠
);

144 
size_t
 
hashm≠Cou¡Cﬁlisi⁄s
(
Hashm≠
* 
m≠
);

146 #ifde‡
__˝lu•lus


	@jni/include/include/cutils/iosched_policy.h

17 #i‚de‡
__CUTILS_IOSCHED_POLICY_H


18 
	#__CUTILS_IOSCHED_POLICY_H


	)

20 #ifde‡
__˝lu•lus


25 
IoSchedCœss_NONE
,

26 
IoSchedCœss_RT
,

27 
IoSchedCœss_BE
,

28 
IoSchedCœss_IDLE
,

29 } 
	tIoSchedCœss
;

31 
™droid_£t_i›rio
(
pid
, 
IoSchedCœss
 
˛azz
, 
i›rio
);

32 
™droid_gë_i›rio
(
pid
, 
IoSchedCœss
 *
˛azz
, *
i›rio
);

34 #ifde‡
__˝lu•lus


	@jni/include/include/cutils/jstring.h

17 #i‚de‡
__CUTILS_STRING16_H


18 
	#__CUTILS_STRING16_H


	)

20 
	~<°döt.h
>

21 
	~<°ddef.h
>

23 #ifde‡
__˝lu•lus


27 
uöt16_t
 
	tch¨16_t
;

29 * 
°∫dup16to8
 (c⁄° 
ch¨16_t
* 
s
, 
size_t
 
n
);

30 
size_t
 
°∫Àn16to8
 (c⁄° 
ch¨16_t
* 
s
, size_à
n
);

31 * 
°∫˝y16to8
 (*
de°
, c⁄° 
ch¨16_t
*
s
, 
size_t
 
n
);

33 
ch¨16_t
 * 
°rdup8to16
 (c⁄° * 
s
, 
size_t
 *
out_Àn
);

34 
size_t
 
°æí8to16
 (c⁄° * 
utf8Så
);

35 
ch¨16_t
 * 
°r˝y8to16
 (ch¨16_à*
de°
, c⁄° *
s
, 
size_t
 *
out_Àn
);

36 
ch¨16_t
 * 
°r˝yÀn8to16
 (ch¨16_à*
de°
, c⁄° *
s
, 
Àngth
,

37 
size_t
 *
out_Àn
);

39 #ifde‡
__˝lu•lus


	@jni/include/include/cutils/log.h

28 #i‚de‡
_LIBS_CUTILS_LOG_H


29 
	#_LIBS_CUTILS_LOG_H


	)

31 
	~<°dio.h
>

32 
	~<time.h
>

33 
	~<sys/ty≥s.h
>

34 
	~<uni°d.h
>

35 #ifde‡
HAVE_PTHREADS


36 
	~<±hªad.h
>

38 
	~<°d¨g.h
>

40 
	~<cutûs/uio.h
>

41 
	~<cutûs/logd.h
>

43 #ifde‡
__˝lu•lus


54 #i‚de‡
LOG_NDEBUG


55 #ifde‡
NDEBUG


56 
	#LOG_NDEBUG
 1

	)

58 
	#LOG_NDEBUG
 0

	)

67 #i‚de‡
LOG_TAG


68 
	#LOG_TAG
 
NULL


	)

76 #i‚de‡
LOGV


77 #i‡
LOG_NDEBUG


78 
	#LOGV
(...Ë(()0)

	)

80 
	#LOGV
(...Ë(()
	`LOG
(
LOG_VERBOSE
, 
LOG_TAG
, 
__VA_ARGS__
))

	)

84 
	#CONDITION
(
c⁄d
Ë(
	`__buûtö_ex≥˘
((c⁄d)!=0, 0))

	)

86 #i‚de‡
LOGV_IF


87 #i‡
LOG_NDEBUG


88 
	#LOGV_IF
(
c⁄d
, ...Ë(()0)

	)

90 
	#LOGV_IF
(
c⁄d
, ...) \

91 –(
	`CONDITION
(
c⁄d
)) \

92 ? (()
	`LOG
(
LOG_VERBOSE
, 
LOG_TAG
, 
__VA_ARGS__
)) \

93 : ()0 )

	)

100 #i‚de‡
LOGD


101 
	#LOGD
(...Ë(()
	`LOG
(
LOG_DEBUG
, 
LOG_TAG
, 
__VA_ARGS__
))

	)

104 #i‚de‡
LOGD_IF


105 
	#LOGD_IF
(
c⁄d
, ...) \

106 –(
	`CONDITION
(
c⁄d
)) \

107 ? (()
	`LOG
(
LOG_DEBUG
, 
LOG_TAG
, 
__VA_ARGS__
)) \

108 : ()0 )

	)

114 #i‚de‡
LOGI


115 
	#LOGI
(...Ë(()
	`LOG
(
LOG_INFO
, 
LOG_TAG
, 
__VA_ARGS__
))

	)

118 #i‚de‡
LOGI_IF


119 
	#LOGI_IF
(
c⁄d
, ...) \

120 –(
	`CONDITION
(
c⁄d
)) \

121 ? (()
	`LOG
(
LOG_INFO
, 
LOG_TAG
, 
__VA_ARGS__
)) \

122 : ()0 )

	)

128 #i‚de‡
LOGW


129 
	#LOGW
(...Ë(()
	`LOG
(
LOG_WARN
, 
LOG_TAG
, 
__VA_ARGS__
))

	)

132 #i‚de‡
LOGW_IF


133 
	#LOGW_IF
(
c⁄d
, ...) \

134 –(
	`CONDITION
(
c⁄d
)) \

135 ? (()
	`LOG
(
LOG_WARN
, 
LOG_TAG
, 
__VA_ARGS__
)) \

136 : ()0 )

	)

142 #i‚de‡
LOGE


143 
	#LOGE
(...Ë(()
	`LOG
(
LOG_ERROR
, 
LOG_TAG
, 
__VA_ARGS__
))

	)

146 #i‚de‡
LOGE_IF


147 
	#LOGE_IF
(
c⁄d
, ...) \

148 –(
	`CONDITION
(
c⁄d
)) \

149 ? (()
	`LOG
(
LOG_ERROR
, 
LOG_TAG
, 
__VA_ARGS__
)) \

150 : ()0 )

	)

159 #i‚de‡
IF_LOGV


160 #i‡
LOG_NDEBUG


161 
	#IF_LOGV
(Ëi‡(
Ál£
)

	)

163 
	#IF_LOGV
(Ë
	`IF_LOG
(
LOG_VERBOSE
, 
LOG_TAG
)

	)

171 #i‚de‡
IF_LOGD


172 
	#IF_LOGD
(Ë
	`IF_LOG
(
LOG_DEBUG
, 
LOG_TAG
)

	)

179 #i‚de‡
IF_LOGI


180 
	#IF_LOGI
(Ë
	`IF_LOG
(
LOG_INFO
, 
LOG_TAG
)

	)

187 #i‚de‡
IF_LOGW


188 
	#IF_LOGW
(Ë
	`IF_LOG
(
LOG_WARN
, 
LOG_TAG
)

	)

195 #i‚de‡
IF_LOGE


196 
	#IF_LOGE
(Ë
	`IF_LOG
(
LOG_ERROR
, 
LOG_TAG
)

	)

205 #i‚de‡
SLOGV


206 #i‡
LOG_NDEBUG


207 
	#SLOGV
(...Ë(()0)

	)

209 
	#SLOGV
(...Ë(()
	`__™droid_log_buf_¥öt
(
LOG_ID_SYSTEM
, 
ANDROID_LOG_VERBOSE
, 
LOG_TAG
, 
__VA_ARGS__
))

	)

213 
	#CONDITION
(
c⁄d
Ë(
	`__buûtö_ex≥˘
((c⁄d)!=0, 0))

	)

215 #i‚de‡
SLOGV_IF


216 #i‡
LOG_NDEBUG


217 
	#SLOGV_IF
(
c⁄d
, ...Ë(()0)

	)

219 
	#SLOGV_IF
(
c⁄d
, ...) \

220 –(
	`CONDITION
(
c⁄d
)) \

221 ? (()
	`__™droid_log_buf_¥öt
(
LOG_ID_SYSTEM
, 
ANDROID_LOG_VERBOSE
, 
LOG_TAG
, 
__VA_ARGS__
)) \

222 : ()0 )

	)

229 #i‚de‡
SLOGD


230 
	#SLOGD
(...Ë(()
	`__™droid_log_buf_¥öt
(
LOG_ID_SYSTEM
, 
ANDROID_LOG_DEBUG
, 
LOG_TAG
, 
__VA_ARGS__
))

	)

233 #i‚de‡
SLOGD_IF


234 
	#SLOGD_IF
(
c⁄d
, ...) \

235 –(
	`CONDITION
(
c⁄d
)) \

236 ? (()
	`__™droid_log_buf_¥öt
(
LOG_ID_SYSTEM
, 
ANDROID_LOG_DEBUG
, 
LOG_TAG
, 
__VA_ARGS__
)) \

237 : ()0 )

	)

243 #i‚de‡
SLOGI


244 
	#SLOGI
(...Ë(()
	`__™droid_log_buf_¥öt
(
LOG_ID_SYSTEM
, 
ANDROID_LOG_INFO
, 
LOG_TAG
, 
__VA_ARGS__
))

	)

247 #i‚de‡
SLOGI_IF


248 
	#SLOGI_IF
(
c⁄d
, ...) \

249 –(
	`CONDITION
(
c⁄d
)) \

250 ? (()
	`__™droid_log_buf_¥öt
(
LOG_ID_SYSTEM
, 
ANDROID_LOG_INFO
, 
LOG_TAG
, 
__VA_ARGS__
)) \

251 : ()0 )

	)

257 #i‚de‡
SLOGW


258 
	#SLOGW
(...Ë(()
	`__™droid_log_buf_¥öt
(
LOG_ID_SYSTEM
, 
ANDROID_LOG_WARN
, 
LOG_TAG
, 
__VA_ARGS__
))

	)

261 #i‚de‡
SLOGW_IF


262 
	#SLOGW_IF
(
c⁄d
, ...) \

263 –(
	`CONDITION
(
c⁄d
)) \

264 ? (()
	`__™droid_log_buf_¥öt
(
LOG_ID_SYSTEM
, 
ANDROID_LOG_WARN
, 
LOG_TAG
, 
__VA_ARGS__
)) \

265 : ()0 )

	)

271 #i‚de‡
SLOGE


272 
	#SLOGE
(...Ë(()
	`__™droid_log_buf_¥öt
(
LOG_ID_SYSTEM
, 
ANDROID_LOG_ERROR
, 
LOG_TAG
, 
__VA_ARGS__
))

	)

275 #i‚de‡
SLOGE_IF


276 
	#SLOGE_IF
(
c⁄d
, ...) \

277 –(
	`CONDITION
(
c⁄d
)) \

278 ? (()
	`__™droid_log_buf_¥öt
(
LOG_ID_SYSTEM
, 
ANDROID_LOG_ERROR
, 
LOG_TAG
, 
__VA_ARGS__
)) \

279 : ()0 )

	)

292 
	#LOG_ALWAYS_FATAL_IF
(
c⁄d
, ...) \

293 –(
	`CONDITION
(
c⁄d
)) \

294 ? (()
	`™droid_¥ötAs£π
(#c⁄d, 
LOG_TAG
, ## 
__VA_ARGS__
)) \

295 : ()0 )

	)

297 
	#LOG_ALWAYS_FATAL
(...) \

298 –(()
	`™droid_¥ötAs£π
(
NULL
, 
LOG_TAG
, ## 
__VA_ARGS__
)Ë)

	)

304 #i‡
LOG_NDEBUG


306 
	#LOG_FATAL_IF
(
c⁄d
, ...Ë(()0)

	)

307 
	#LOG_FATAL
(...Ë(()0)

	)

311 
	#LOG_FATAL_IF
(
c⁄d
, ...Ë
	`LOG_ALWAYS_FATAL_IF
(c⁄d, ## 
__VA_ARGS__
)

	)

312 
	#LOG_FATAL
(...Ë
	`LOG_ALWAYS_FATAL
(
__VA_ARGS__
)

	)

320 
	#LOG_ASSERT
(
c⁄d
, ...Ë
	`LOG_FATAL_IF
(!(c⁄d), ## 
__VA_ARGS__
)

	)

333 #i‚de‡
LOG


334 
	#LOG
(
¥i‹ôy
, 
èg
, ...) \

335 
	`LOG_PRI
(
ANDROID_
##
¥i‹ôy
, 
èg
, 
__VA_ARGS__
)

	)

341 #i‚de‡
LOG_PRI


342 
	#LOG_PRI
(
¥i‹ôy
, 
èg
, ...) \

343 
	`™droid_¥ötLog
(
¥i‹ôy
, 
èg
, 
__VA_ARGS__
)

	)

349 #i‚de‡
LOG_PRI_VA


350 
	#LOG_PRI_VA
(
¥i‹ôy
, 
èg
, 
fmt
, 
¨gs
) \

351 
	`™droid_v¥ötLog
(
¥i‹ôy
, 
NULL
, 
èg
, 
fmt
, 
¨gs
)

	)

357 #i‚de‡
IF_LOG


358 
	#IF_LOG
(
¥i‹ôy
, 
èg
) \

359 i‡(
	`™droid_ã°Log
(
ANDROID_
##
¥i‹ôy
, 
èg
))

	)

373 
EVENT_TYPE_INT
 = 0,

374 
EVENT_TYPE_LONG
 = 1,

375 
EVENT_TYPE_STRING
 = 2,

376 
EVENT_TYPE_LIST
 = 3,

377 } 
	tAndroidEvítLogTy≥
;

380 
	#LOG_EVENT_INT
(
_èg
, 
_vÆue
) { \

381 
ötBuf
 = 
_vÆue
; \

382 (Ë
	`™droid_btWrôeLog
(
_èg
, 
EVENT_TYPE_INT
, &
ötBuf
, \

383 (
ötBuf
)); \

384 }

	)

385 
	#LOG_EVENT_LONG
(
_èg
, 
_vÆue
) { \

386 
l⁄gBuf
 = 
_vÆue
; \

387 (Ë
	`™droid_btWrôeLog
(
_èg
, 
EVENT_TYPE_LONG
, &
l⁄gBuf
, \

388 (
l⁄gBuf
)); \

389 }

	)

390 
	#LOG_EVENT_STRING
(
_èg
, 
_vÆue
) \

391 ((Ë0Ë

	)

400 
	#™droid_¥ötLog
(
¥io
, 
èg
, 
fmt
...) \

401 
	`__™droid_log_¥öt
(
¥io
, 
èg
, 
fmt
)

	)

403 
	#™droid_v¥ötLog
(
¥io
, 
c⁄d
, 
èg
, 
fmt
...) \

404 
	`__™droid_log_v¥öt
(
¥io
, 
èg
, 
fmt
)

	)

414 
	#__™droid_£c⁄d
(
dummy
, 
£c⁄d
, ...Ë
	)
second

419 
	#__™droid_ª°
(
fú°
, ...Ë, ## 
__VA_ARGS__


	)

421 
	#™droid_¥ötAs£π
(
c⁄d
, 
èg
, 
fmt
...) \

422 
	`__™droid_log_as£π
(
c⁄d
, 
èg
, \

423 
	`__™droid_£c⁄d
(0, ## 
fmt
, 
NULL
Ë
	`__™droid_ª°
(fmt))

	)

425 
	#™droid_wrôeLog
(
¥io
, 
èg
, 
ãxt
) \

426 
	`__™droid_log_wrôe
(
¥io
, 
èg
, 
ãxt
)

	)

428 
	#™droid_bWrôeLog
(
èg
, 
∑ylﬂd
, 
Àn
) \

429 
	`__™droid_log_bwrôe
(
èg
, 
∑ylﬂd
, 
Àn
)

	)

430 
	#™droid_btWrôeLog
(
èg
, 
ty≥
, 
∑ylﬂd
, 
Àn
) \

431 
	`__™droid_log_btwrôe
(
èg
, 
ty≥
, 
∑ylﬂd
, 
Àn
)

	)

434 
	#™droid_ã°Log
(
¥io
, 
èg
Ë(1)

	)

435 
	#™droid_wrôevLog
(
vec
,
num
Ëdo{}0)

	)

436 
	#™droid_wrôe1Log
(
°r
,
Àn
Ëdo{}0)

	)

437 
	#™droid_£tMöPri‹ôy
(
èg
, 
¥io
Ëdo{}0)

	)

439 
	#™droid_logToFûe
(
èg
, 
fûe
Ë(0)

	)

440 
	#™droid_logToFd
(
èg
, 
fd
Ë(0)

	)

443 
LOG_ID_MAIN
 = 0,

444 
LOG_ID_RADIO
 = 1,

445 
LOG_ID_EVENTS
 = 2,

446 
LOG_ID_SYSTEM
 = 3,

448 
LOG_ID_MAX


449 } 
	tlog_id_t
;

454 
__™droid_log_buf_wrôe
(
bufID
, 
¥io
, c⁄° *
èg
, c⁄° *
ãxt
);

455 
__™droid_log_buf_¥öt
(
bufID
, 
¥io
, c⁄° *
èg
, c⁄° *
fmt
, ...);

458 #ifde‡
__˝lu•lus


	@jni/include/include/cutils/logd.h

17 #i‚de‡
_ANDROID_CUTILS_LOGD_H


18 
	#_ANDROID_CUTILS_LOGD_H


	)

23 
	~<™droid/log.h
>

26 
	~<time.h
>

27 
	~<°dio.h
>

28 
	~<uni°d.h
>

29 
	~<°döt.h
>

30 
	~<sys/ty≥s.h
>

31 #ifde‡
HAVE_PTHREADS


32 
	~<±hªad.h
>

34 
	~<cutûs/uio.h
>

35 
	~<°d¨g.h
>

37 #ifde‡
__˝lu•lus


41 
__™droid_log_bwrôe
(
öt32_t
 
èg
, c⁄° *
∑ylﬂd
, 
size_t
 
Àn
);

42 
__™droid_log_btwrôe
(
öt32_t
 
èg
, 
ty≥
, c⁄° *
∑ylﬂd
,

43 
size_t
 
Àn
);

45 #ifde‡
__˝lu•lus


	@jni/include/include/cutils/logger.h

10 #i‚de‡
_UTILS_LOGGER_H


11 
	#_UTILS_LOGGER_H


	)

13 
	~<°döt.h
>

15 
	sloggî_íåy
 {

16 
uöt16_t
 
	mÀn
;

17 
uöt16_t
 
	m__∑d
;

18 
öt32_t
 
	mpid
;

19 
öt32_t
 
	mtid
;

20 
öt32_t
 
	m£c
;

21 
öt32_t
 
	mn£c
;

22 
	mmsg
[0];

25 
	#LOGGER_LOG_MAIN
 "log/maö"

	)

26 
	#LOGGER_LOG_RADIO
 "log/ødio"

	)

27 
	#LOGGER_LOG_EVENTS
 "log/evíts"

	)

28 
	#LOGGER_LOG_SYSTEM
 "log/sy°em"

	)

30 
	#LOGGER_ENTRY_MAX_LEN
 (4*1024)

	)

31 
	#LOGGER_ENTRY_MAX_PAYLOAD
 \

32 (
LOGGER_ENTRY_MAX_LEN
 - (
loggî_íåy
))

	)

34 #ifde‡
HAVE_IOCTL


36 
	~<sys/io˘l.h
>

38 
	#__LOGGERIO
 0xAE

	)

40 
	#LOGGER_GET_LOG_BUF_SIZE
 
	`_IO
(
__LOGGERIO
, 1Ë

	)

41 
	#LOGGER_GET_LOG_LEN
 
	`_IO
(
__LOGGERIO
, 2Ë

	)

42 
	#LOGGER_GET_NEXT_ENTRY_LEN
 
	`_IO
(
__LOGGERIO
, 3Ë

	)

43 
	#LOGGER_FLUSH_LOG
 
	`_IO
(
__LOGGERIO
, 4Ë

	)

	@jni/include/include/cutils/logprint.h

17 #i‚de‡
_LOGPRINT_H


18 
	#_LOGPRINT_H


	)

20 
	~<cutûs/log.h
>

21 
	~<cutûs/loggî.h
>

22 
	~<cutûs/evít_èg_m≠.h
>

23 
	~<±hªad.h
>

25 #ifde‡
__˝lu•lus


30 
FORMAT_OFF
 = 0,

31 
FORMAT_BRIEF
,

32 
FORMAT_PROCESS
,

33 
FORMAT_TAG
,

34 
FORMAT_THREAD
,

35 
FORMAT_RAW
,

36 
FORMAT_TIME
,

37 
FORMAT_THREADTIME
,

38 
FORMAT_LONG
,

39 } 
	tAndroidLogPrötF‹m©
;

41 
AndroidLogF‹m©_t
 
	tAndroidLogF‹m©
;

43 
	sAndroidLogE¡ry_t
 {

44 
time_t
 
tv_£c
;

45 
tv_n£c
;

46 
™droid_LogPri‹ôy
 
¥i‹ôy
;

47 
pid_t
 
pid
;

48 
±hªad_t
 
tid
;

49 c⁄° * 
èg
;

50 
size_t
 
mesßgeLí
;

51 c⁄° * 
mesßge
;

52 } 
	tAndroidLogE¡ry
;

54 
AndroidLogF‹m©
 *
™droid_log_f‹m©_√w
();

56 
™droid_log_f‹m©_‰ì
(
AndroidLogF‹m©
 *
p_f‹m©
);

58 
™droid_log_£tPrötF‹m©
(
AndroidLogF‹m©
 *
p_f‹m©
,

59 
AndroidLogPrötF‹m©
 
f‹m©
);

64 
AndroidLogPrötF‹m©
 
™droid_log_f‹m©FromSåög
(c⁄° *
s
);

76 
™droid_log_addFûãrRuÀ
(
AndroidLogF‹m©
 *
p_f‹m©
,

77 c⁄° *
fûãrEx¥essi⁄
);

90 
™droid_log_addFûãrSåög
(
AndroidLogF‹m©
 *
p_f‹m©
,

91 c⁄° *
fûãrSåög
);

98 
™droid_log_shouldPrötLöe
 (

99 
AndroidLogF‹m©
 *
p_f‹m©
, c⁄° *
èg
, 
™droid_LogPri‹ôy
 
¥i
);

109 
™droid_log_¥o˚ssLogBuf„r
(
loggî_íåy
 *
buf
,

110 
AndroidLogE¡ry
 *
íåy
);

118 
™droid_log_¥o˚ssBö¨yLogBuf„r
(
loggî_íåy
 *
buf
,

119 
AndroidLogE¡ry
 *
íåy
, c⁄° 
EvítTagM≠
* 
m≠
, * 
mesßgeBuf
,

120 
mesßgeBufLí
);

131 *
™droid_log_f‹m©LogLöe
 (

132 
AndroidLogF‹m©
 *
p_f‹m©
,

133 *
deÁu…Buf„r
,

134 
size_t
 
deÁu…Buf„rSize
,

135 c⁄° 
AndroidLogE¡ry
 *
p_löe
,

136 
size_t
 *
p_outLígth
);

145 
™droid_log_¥ötLogLöe
(

146 
AndroidLogF‹m©
 *
p_f‹m©
,

147 
fd
,

148 c⁄° 
AndroidLogE¡ry
 *
íåy
);

151 #ifde‡
__˝lu•lus


	@jni/include/include/cutils/memory.h

17 #i‚de‡
ANDROID_CUTILS_MEMORY_H


18 
	#ANDROID_CUTILS_MEMORY_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 #ifde‡
__˝lu•lus


28 
™droid_mem£t16
(
uöt16_t
* 
d°
, uöt16_à
vÆue
, 
size_t
 
size
);

31 
™droid_mem£t32
(
uöt32_t
* 
d°
, uöt32_à
vÆue
, 
size_t
 
size
);

33 #i‡!
HAVE_STRLCPY


35 
size_t
 
°æ˝y
(*
d°
, c⁄° *
§c
, size_à
size
);

38 #ifde‡
__˝lu•lus


	@jni/include/include/cutils/misc.h

17 #i‚de‡
__CUTILS_MISC_H


18 
	#__CUTILS_MISC_H


	)

20 #ifde‡
__˝lu•lus


29 *
lﬂd_fûe
(c⁄° *
‚
, *
sz
);

35 
debuggîd_c⁄√˘
();

41 
	#FIRST_APPLICATION_UID
 10000

	)

42 
	#LAST_APPLICATION_UID
 99999

	)

44 #ifde‡
__˝lu•lus


	@jni/include/include/cutils/mq.h

21 #i‚de‡
__MQ_H


22 
	#__MQ_H


	)

24 #ifde‡
__˝lu•lus


29 
MqMesßge
 
	tMqMesßge
;

32 
MqDe°ö©i⁄
 
	tMqDe°ö©i⁄
;

35 
MqByãs
 
	tMqByãs
;

43 
	tMqMesßgeLi°íî
(
	tMqDe°ö©i⁄
* 
	tde°ö©i⁄
, 
	tMqMesßge
* 
	tmesßge
);

50 
	tMqClo£Li°íî
(
	tMqDe°ö©i⁄
* 
	tde°ö©i⁄
);

61 
MqMesßge
* 
mqCª©eMesßge
(
MqByãs
 
hódî
, MqByã†
body
,

62 
MqDe°ö©i⁄
* 
ª∂yTo
);

65 
mqSídMesßge
(
MqMesßge
* 
mesßge
, 
MqDe°ö©i⁄
* 
de°ö©i⁄
);

77 
MqDe°ö©i⁄
* 
mqCª©eDe°ö©i⁄
(
MqMesßgeLi°íî
* 
mesßgeLi°íî
,

78 
MqClo£Li°íî
* 
˛o£Li°íî
, * 
u£rD©a
);

89 * 
mqGëU£rD©a
(
MqDe°ö©i⁄
* 
de°ö©i⁄
);

96 
mqIsDe°ö©i⁄Loˇl
(
MqDe°ö©i⁄
* 
de°ö©i⁄
);

101 
mqKìpDe°ö©i⁄
(
MqDesöèti⁄
* 
de°ö©i⁄
);

106 
mqFªeDe°ö©i⁄
(
MqDe°ö©i⁄
* 
desöèti⁄
);

113 
MqDe°ö©i⁄
* 
mqGëDe°ö©i⁄
(* 
«me
);

118 
mqPutDe°ö©i⁄
(* 
«me
, 
MqDe°ö©i⁄
* 
desöèti⁄
);

120 #ifde‡
__˝lu•lus


	@jni/include/include/cutils/mspace.h

22 #i‚de‡
MSPACE_H_


23 
	#MSPACE_H_


	)

30 
	#NO_MALLINFO
 1

	)

34 
	#USE_MAX_ALLOWED_FOOTPRINT
 1

	)

36 
	#USE_CONTIGUOUS_MSPACES
 1

	)

37 #i‡
USE_CONTIGUOUS_MSPACES


38 
	#HAVE_MMAP
 0

	)

39 
	#HAVE_MORECORE
 1

	)

40 
	#MORECORE_CONTIGUOUS
 0

	)

43 
	#MSPACES
 1

	)

44 
	#ONLY_MSPACES
 1

	)

45 
	~"../../../../bi⁄ic/libc/bi⁄ic/dlmÆloc.h
"

47 #ifde‡
__˝lu•lus


65 
size_t
 
m•a˚_ußbÀ_size
(
m•a˚
, const *);

67 #i‡
USE_CONTIGUOUS_MSPACES


73 
m•a˚
 
¸óã_c⁄tiguous_m•a˚
(
size_t
 
°¨tög_ˇ∑côy
, size_à
max_ˇ∑côy
,

74 
locked
);

80 
m•a˚
 
¸óã_c⁄tiguous_m•a˚_wôh_«me
(
size_t
 
°¨tög_ˇ∑côy
,

81 
size_t
 
max_ˇ∑côy
, 
locked
, c⁄° *
«me
);

86 
m•a˚
 
¸óã_c⁄tiguous_m•a˚_wôh_ba£
(
size_t
 
°¨tög_ˇ∑côy
,

87 
size_t
 
max_ˇ∑côy
, 
locked
, *
ba£
);

89 
size_t
 
de°roy_c⁄tiguous_m•a˚
(
m•a˚
 
m•
);

101 
m•a˚_wÆk_hóp
(
m•a˚
 
m•
,

102 (*
h™dÀr
)(c⁄° *
chunk±r
, 
size_t
 
chunkÀn
,

103 c⁄° *
u£Ωå
, 
size_t
 
u£æí
, *
¨g
), *
h¨g
);

116 
m•a˚_wÆk_‰ì_∑ges
(
m•a˚
 
m•
,

117 (*
h™dÀr
)(*
°¨t
, *
íd
, *
¨g
), *
h¨g
);

119 #ifde‡
__˝lu•lus


	@jni/include/include/cutils/native_handle.h

17 #i‚de‡
NATIVE_HANDLE_H_


18 
	#NATIVE_HANDLE_H_


	)

20 #ifde‡
__˝lu•lus


26 
vîsi⁄
;

27 
numFds
;

28 
numI¡s
;

29 
d©a
[0];

30 } 
	t«tive_h™dÀ_t
;

34 
«tive_h™dÀ_t
 
	t«tive_h™dÀ
;

44 
«tive_h™dÀ_˛o£
(c⁄° 
«tive_h™dÀ_t
* 
h
);

54 
«tive_h™dÀ_t
* 
«tive_h™dÀ_¸óã
(
numFds
, 
numI¡s
);

66 
«tive_h™dÀ_dñëe
(
«tive_h™dÀ_t
* 
h
);

69 #ifde‡
__˝lu•lus


	@jni/include/include/cutils/open_memstream.h

17 #i‚de‡
__CUTILS_OPEN_MEMSTREAM_H__


18 
	#__CUTILS_OPEN_MEMSTREAM_H__


	)

20 
	~<°dio.h
>

22 #i‚de‡
HAVE_OPEN_MEMSTREAM


24 #ifde‡
__˝lu•lus


28 
FILE
* 
›í_mem°ªam
(** 
buÂ
, 
size_t
* 
sizï
);

30 #ifde‡
__˝lu•lus


	@jni/include/include/cutils/process_name.h

21 #i‚de‡
__PROCESS_NAME_H


22 
	#__PROCESS_NAME_H


	)

24 #ifde‡
__˝lu•lus


33 
£t_¥o˚ss_«me
(c⁄° * 
¥o˚ss_«me
);

36 c⁄° * 
gë_¥o˚ss_«me
();

38 #ifde‡
__˝lu•lus


	@jni/include/include/cutils/properties.h

17 #i‚de‡
__CUTILS_PROPERTIES_H


18 
	#__CUTILS_PROPERTIES_H


	)

20 #ifde‡
__˝lu•lus


31 
	#PROPERTY_KEY_MAX
 32

	)

32 
	#PROPERTY_VALUE_MAX
 92

	)

41 
¥›îty_gë
(c⁄° *
key
, *
vÆue
, c⁄° *
deÁu…_vÆue
);

45 
¥›îty_£t
(c⁄° *
key
, c⁄° *
vÆue
);

47 
¥›îty_li°
((*
¥›‚
)(c⁄° *
key
, c⁄° *
vÆue
, *
cookõ
), *cookie);

50 #ifde‡
HAVE_SYSTEM_PROPERTY_SERVER


55 
	#SYSTEM_PROPERTY_PIPE_NAME
 "/tmp/™droid-sy•r›"

	)

58 
kSy°emPr›îtyUnknown
 = 0,

59 
kSy°emPr›îtyGë
,

60 
kSy°emPr›îtySë
,

61 
kSy°emPr›îtyLi°


66 #ifde‡
__˝lu•lus


	@jni/include/include/cutils/record_stream.h

21 #i‚de‡
_CUTILS_RECORD_STREAM_H


22 
	#_CUTILS_RECORD_STREAM_H


	)

24 #ifde‡
__˝lu•lus


29 
Rec‹dSåóm
 
	tRec‹dSåóm
;

31 
Rec‹dSåóm
 *
ªc‹d_°ªam_√w
(
fd
, 
size_t
 
maxRec‹dLí
);

32 
ªc‹d_°ªam_‰ì
(
Rec‹dSåóm
 *
p_rs
);

34 
ªc‹d_°ªam_gë_√xt
 (
Rec‹dSåóm
 *
p_rs
, ** 
p_outRec‹d
,

35 
size_t
 *
p_outRec‹dLí
);

37 #ifde‡
__˝lu•lus


	@jni/include/include/cutils/sched_policy.h

17 #i‚de‡
__CUTILS_SCHED_POLICY_H


18 
	#__CUTILS_SCHED_POLICY_H


	)

20 #ifde‡
__˝lu•lus


25 
SP_BACKGROUND
 = 0,

26 
SP_FOREGROUND
 = 1,

27 } 
	tSchedPﬁicy
;

29 
£t_sched_pﬁicy
(
tid
, 
SchedPﬁicy
 
pﬁicy
);

30 
gë_sched_pﬁicy
(
tid
, 
SchedPﬁicy
 *
pﬁicy
);

32 #ifde‡
__˝lu•lus


	@jni/include/include/cutils/selector.h

23 #i‚de‡
__SELECTOR_H


24 
	#__SELECTOR_H


	)

26 #ifde‡
__˝lu•lus


30 
	~<°dboﬁ.h
>

35 
Sñe˘‹
 
	tSñe˘‹
;

49 
Sñe˘abÀFd
 
	tSñe˘abÀFd
;

50 
	sSñe˘abÀFd
 {

53 
fd
;

56 * 
d©a
;

62 
boﬁ
 
ªmove
;

68 (*
bef‹eSñe˘
)(
Sñe˘abÀFd
* 
£lf
);

74 (*
⁄RódabÀ
)(
Sñe˘abÀFd
* 
£lf
);

80 (*
⁄WrôabÀ
)(
Sñe˘abÀFd
* 
£lf
);

86 (*
⁄Ex˚±
)(
Sñe˘abÀFd
* 
£lf
);

92 (*
⁄Remove
)(
Sñe˘abÀFd
* 
£lf
);

97 
Sñe˘‹
* 
£À˘‹
;

103 
Sñe˘‹
* 
£À˘‹Cª©e
();

112 
Sñe˘abÀFd
* 
£À˘‹Add
(
Sñe˘‹
* 
£À˘‹
, 
fd
);

118 
£À˘‹WakeUp
(
Sñe˘‹
* 
£À˘‹
);

124 
£À˘‹Lo›
(
Sñe˘‹
* 
£À˘‹
);

126 #ifde‡
__˝lu•lus


	@jni/include/include/cutils/sockets.h

17 #i‚de‡
__CUTILS_SOCKETS_H


18 
	#__CUTILS_SOCKETS_H


	)

20 
	~<î∫o.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

24 #ifde‡
HAVE_WINSOCK


25 
	~<wösock2.h
>

26 
	tsockÀn_t
;

27 #ñi‡
HAVE_SYS_SOCKET_H


28 
	~<sys/sockë.h
>

31 
	#ANDROID_SOCKET_ENV_PREFIX
 "ANDROID_SOCKET_"

	)

32 
	#ANDROID_SOCKET_DIR
 "/dev/sockë"

	)

34 #ifde‡
__˝lu•lus


46 
ölöe
 
™droid_gë_c⁄åﬁ_sockë
(c⁄° *
«me
)

48 
key
[64] = 
ANDROID_SOCKET_ENV_PREFIX
;

49 c⁄° *
vÆ
;

50 
fd
;

53 #i‡
HAVE_STRLCPY


54 
°æ˝y
(
key
 + (
ANDROID_SOCKET_ENV_PREFIX
) - 1,

55 
«me
,

56 (
key
Ë- (
ANDROID_SOCKET_ENV_PREFIX
));

58 
°∫˝y
(
key
 + (
ANDROID_SOCKET_ENV_PREFIX
) - 1,

59 
«me
,

60 (
key
Ë- (
ANDROID_SOCKET_ENV_PREFIX
));

61 
key
[(key)-1] = '\0';

64 
vÆ
 = 
gëív
(
key
);

65 i‡(!
vÆ
)

68 
î∫o
 = 0;

69 
fd
 = 
°πﬁ
(
vÆ
, 
NULL
, 10);

70 i‡(
î∫o
)

73  
fd
;

80 
	#ANDROID_SOCKET_NAMESPACE_ABSTRACT
 0

	)

82 
	#ANDROID_SOCKET_NAMESPACE_RESERVED
 1

	)

84 
	#ANDROID_SOCKET_NAMESPACE_FILESYSTEM
 2

	)

86 
sockë_lo›back_˛õ¡
(
p‹t
, 
ty≥
);

87 
sockë_√tw‹k_˛õ¡
(c⁄° *
ho°
, 
p‹t
, 
ty≥
);

88 
sockë_lo›back_£rvî
(
p‹t
, 
ty≥
);

89 
sockë_loˇl_£rvî
(c⁄° *
«me
, 
«me•a˚Id
, 
ty≥
);

90 
sockë_loˇl_£rvî_böd
(
s
, c⁄° *
«me
, 
«me•a˚Id
);

91 
sockë_loˇl_˛õ¡_c⁄√˘
(
fd
,

92 c⁄° *
«me
, 
«me•a˚Id
, 
ty≥
);

93 
sockë_loˇl_˛õ¡
(c⁄° *
«me
, 
«me•a˚Id
, 
ty≥
);

94 
sockë_öaddr_™y_£rvî
(
p‹t
, 
ty≥
);

96 #ifde‡
__˝lu•lus


	@jni/include/include/cutils/threads.h

17 #i‚de‡
_LIBS_CUTILS_THREADS_H


18 
	#_LIBS_CUTILS_THREADS_H


	)

20 #ifde‡
__˝lu•lus


32 #ifde‡
HAVE_PTHREADS


34 
	~<±hªad.h
>

37 
±hªad_muãx_t
 
lock
;

38 
has_és
;

39 
±hªad_key_t
 
és
;

41 } 
	tthªad_°‹e_t
;

43 
	#THREAD_STORE_INITIALIZER
 { 
PTHREAD_MUTEX_INITIALIZER
, 0, 0 }

	)

45 #ñi‡
deföed
 
HAVE_WIN32_THREADS


47 
	~<wödows.h
>

50 
lock_öô
;

51 
has_és
;

52 
DWORD
 
és
;

53 
CRITICAL_SECTION
 
lock
;

55 } 
	tthªad_°‹e_t
;

57 
	#THREAD_STORE_INITIALIZER
 { 0, 0, 0, {0, 0, 0, 0, 0, 0} }

	)

63 (*
thªad_°‹e_de°ru˘_t
)(* 
	tvÆue
);

65 * 
thªad_°‹e_gë
(
thªad_°‹e_t
* 
°‹e
);

67 
thªad_°‹e_£t
(
thªad_°‹e_t
* 
°‹e
,

68 * 
vÆue
,

69 
thªad_°‹e_de°ru˘_t
 
de°roy
);

79 #ifde‡
HAVE_PTHREADS


81 
±hªad_muãx_t
 
	tmuãx_t
;

83 
	#MUTEX_INITIALIZER
 
PTHREAD_MUTEX_INITIALIZER


	)

85 
__ölöe__
 
muãx_lock
(
muãx_t
* 
lock
)

87 
±hªad_muãx_lock
(
lock
);

89 
__ölöe__
 
muãx_u∆ock
(
muãx_t
* 
lock
)

91 
±hªad_muãx_u∆ock
(
lock
);

93 
__ölöe__
 
muãx_öô
(
muãx_t
* 
lock
)

95  
±hªad_muãx_öô
(
lock
, 
NULL
);

97 
__ölöe__
 
muãx_de°roy
(
muãx_t
* 
lock
)

99 
±hªad_muãx_de°roy
(
lock
);

103 #ifde‡
HAVE_WIN32_THREADS


105 
	göô
;

106 
CRITICAL_SECTION
 
	glock
[1];

107 } 
	tmuãx_t
;

109 
	#MUTEX_INITIALIZER
 { 0, {{ 
NULL
, 0, 0, NULL, NULL, 0 }} }

	)

111 
__ölöe__
 
muãx_lock
(
muãx_t
* 
lock
)

113 i‡(!
	glock
->
	göô
) {

114 
	glock
->
	göô
 = 1;

115 
InôülizeCrôiˇlSe˘i⁄
–
lock
->lock );

116 
	glock
->
	göô
 = 2;

117 } 
	glock
->
	göô
 != 2)

118 
SÀï
(10);

120 
E¡îCrôiˇlSe˘i⁄
(
lock
->lock);

123 
__ölöe__
 
muãx_u∆ock
(
muãx_t
* 
lock
)

125 
LóveCrôiˇlSe˘i⁄
(
lock
->lock);

127 
__ölöe__
 
muãx_öô
(
muãx_t
* 
lock
)

129 
InôülizeCrôiˇlSe˘i⁄
(
lock
->lock);

130 
	glock
->
	göô
 = 2;

133 
__ölöe__
 
muãx_de°roy
(
muãx_t
* 
lock
)

135 i‡(
	glock
->
	göô
) {

136 
	glock
->
	göô
 = 0;

137 
DñëeCrôiˇlSe˘i⁄
(
lock
->lock);

142 #ifde‡
__˝lu•lus


	@jni/include/include/cutils/tztime.h

17 #i‚de‡
_CUTILS_TZTIME_H


18 
	#_CUTILS_TZTIME_H


	)

20 
	~<time.h
>

22 #ifde‡
__˝lu•lus


26 
time_t
 
mktime_tz
(
tm
 * c⁄° 
tmp
, c⁄° * 
tz
);

27 
loˇ…ime_tz
(c⁄° 
time_t
 * c⁄° 
timï
, 
tm
 * 
tmp
, c⁄° * 
tz
);

29 #i‚de‡
HAVE_ANDROID_OS


32 
	s°r·ime_loˇÀ
 {

33 c⁄° *
m⁄
[12];

34 c⁄° *
m⁄th
[12];

35 c⁄° *
°™dÆ⁄e_m⁄th
[12];

36 c⁄° *
wday
[7];

37 c⁄° *
wìkday
[7];

38 c⁄° *
X_fmt
;

39 c⁄° *
x_fmt
;

40 c⁄° *
c_fmt
;

41 c⁄° *
am
;

42 c⁄° *
pm
;

43 c⁄° *
d©e_fmt
;

46 
size_t
 
°r·ime_tz
(*
s
, size_à
max
, c⁄° *
f‹m©
, c⁄° 
tm
 *tm, c⁄° 
°r·ime_loˇÀ
 *
loˇÀ
);

50 #ifde‡
__˝lu•lus


	@jni/include/include/cutils/uio.h

20 #i‚de‡
_LIBS_CUTILS_UIO_H


21 
	#_LIBS_CUTILS_UIO_H


	)

23 #ifde‡
HAVE_SYS_UIO_H


24 
	~<sys/uio.h
>

27 #ifde‡
__˝lu•lus


31 
	~<°ddef.h
>

33 
	siovec
 {

34 c⁄° * 
iov_ba£
;

35 
size_t
 
iov_Àn
;

38 
ªadv
–
fd
, 
iovec
* 
vecs
, 
cou¡
 );

39 
wrôev
–
fd
, c⁄° 
iovec
* 
vecs
, 
cou¡
 );

41 #ifde‡
__˝lu•lus


	@jni/include/include/cutils/zygote.h

17 #i‚de‡
__CUTILS_ZYGOTE_H


18 
	#__CUTILS_ZYGOTE_H


	)

20 #ifde‡
__˝lu•lus


24 
zygŸe_run_⁄eshŸ
(
£ndStdio
, 
¨gc
, c⁄° **
¨gv
);

25 
zygŸe_run
(
¨gc
, c⁄° **
¨gv
);

26 
zygŸe_run_waô
(
¨gc
, c⁄° **
¨gv
, (*
po°_run_func
)());

28 #ifde‡
__˝lu•lus


	@jni/include/include/gui/IGraphicBufferProducer.h

17 #i‚de‡
ANDROID_GUI_IGRAPHICBUFFERPRODUCER_H


18 
	#ANDROID_GUI_IGRAPHICBUFFERPRODUCER_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	~<utûs/Eº‹s.h
>

24 
	~<utûs/RefBa£.h
>

26 
	~<bödî/II¡îÁ˚.h
>

28 
	~<ui/Fí˚.h
>

29 
	~<ui/GøphicBuf„r.h
>

30 
	~<ui/Re˘.h
>

32 
«me•a˚
 
	g™droid
 {

35 
˛ass
 
	gSurÁ˚
;

51 ˛as†
	cIGøphicBuf„rProdu˚r
 : 
public
 
II¡îÁ˚


53 
public
:

54 
DECLARE_META_INTERFACE
(
GøphicBuf„rProdu˚r
);

57 
	gBUFFER_NEEDS_REALLOCATION
 = 0x1,

58 
	gRELEASE_ALL_BUFFERS
 = 0x2,

66 
vútuÆ
 
°©us_t
 
ªque°Buf„r
(
¶Ÿ
, 
•
<
GøphicBuf„r
>* 
buf
) = 0;

71 
vútuÆ
 
°©us_t
 
£tBuf„rCou¡
(
buf„rCou¡
) = 0;

87 
vútuÆ
 
°©us_t
 
dequeueBuf„r
(*
¶Ÿ
, 
•
<
Fí˚
>* 
„n˚
,

88 
uöt32_t
 
w
, uöt32_à
h
, uöt32_à
f‹m©
, uöt32_à
ußge
) = 0;

103 
	gQueueBuf„rI≈ut
 : 
public
 
FœâíabÀ
 {

104 
ölöe
 
QueueBuf„rI≈ut
(c⁄° 
P¨˚l
& 
∑r˚l
);

105 
ölöe
 
QueueBuf„rI≈ut
(
öt64_t
 
time°amp
,

106 c⁄° 
Re˘
& 
¸›
, 
sˇlögMode
, 
uöt32_t
 
å™sf‹m
,

107 
•
<
Fí˚
> 
„n˚
)

108 : 
time°amp
—ime°amp), 
¸›
(¸›), 
sˇlögMode
(scalingMode),

109 
å™sf‹m
—ønsf‹m), 
„n˚
(fence) { }

110 
ölöe
 
deÊ©e
(
öt64_t
* 
outTime°amp
, 
Re˘
* 
outCr›
,

111 * 
outSˇlögMode
, 
uöt32_t
* 
outTønsf‹m
,

112 
•
<
Fí˚
>* 
outFí˚
) const {

113 *
	goutTime°amp
 = 
time°amp
;

114 *
	goutCr›
 = 
¸›
;

115 *
	goutSˇlögMode
 = 
sˇlögMode
;

116 *
	goutTønsf‹m
 = 
å™sf‹m
;

117 *
	goutFí˚
 = 
„n˚
;

121 
vútuÆ
 
size_t
 
gëFœâíedSize
() const;

122 
vútuÆ
 
size_t
 
gëFdCou¡
() const;

123 
vútuÆ
 
°©us_t
 
Ê©ãn
(* 
buf„r
, 
size_t
 
size
,

124 
fds
[], 
size_t
 
cou¡
) const;

125 
vútuÆ
 
°©us_t
 
unÊ©ãn
(c⁄°* 
buf„r
, 
size_t
 
size
,

126 
fds
[], 
size_t
 
cou¡
);

128 
	g¥iv©e
:

129 
öt64_t
 
time°amp
;

130 
Re˘
 
	g¸›
;

131 
	gsˇlögMode
;

132 
uöt32_t
 
	gå™sf‹m
;

133 
	g•
<
	gFí˚
> 
	g„n˚
;

137 
	sQueueBuf„rOuçut
 {

138 
ölöe
 
QueueBuf„rOuçut
() { }

139 
ölöe
 
deÊ©e
(
uöt32_t
* 
outWidth
,

140 
uöt32_t
* 
outHeight
,

141 
uöt32_t
* 
outTønsf‹mHöt
,

142 
uöt32_t
* 
outNumPídögBuf„rs
) const {

143 *
	goutWidth
 = 
width
;

144 *
	goutHeight
 = 
height
;

145 *
	goutTønsf‹mHöt
 = 
å™sf‹mHöt
;

146 *
	goutNumPídögBuf„rs
 = 
numPídögBuf„rs
;

148 
ölöe
 
öÊ©e
(
uöt32_t
 
öWidth
, uöt32_à
öHeight
,

149 
uöt32_t
 
öTønsf‹mHöt
, uöt32_à
öNumPídögBuf„rs
) {

150 
	gwidth
 = 
öWidth
;

151 
	gheight
 = 
öHeight
;

152 
	gå™sf‹mHöt
 = 
öTønsf‹mHöt
;

153 
	gnumPídögBuf„rs
 = 
öNumPídögBuf„rs
;

155 
	g¥iv©e
:

156 
uöt32_t
 
width
;

157 
uöt32_t
 
	gheight
;

158 
uöt32_t
 
	gå™sf‹mHöt
;

159 
uöt32_t
 
	gnumPídögBuf„rs
;

162 
vútuÆ
 
°©us_t
 
queueBuf„r
(
¶Ÿ
,

163 c⁄° 
QueueBuf„rI≈ut
& 
öput
, 
QueueBuf„rOuçut
* 
ouçut
) = 0;

168 
vútuÆ
 
ˇn˚lBuf„r
(
¶Ÿ
, c⁄° 
•
<
Fí˚
>& 
„n˚
) = 0;

172 
vútuÆ
 
quîy
(
wh©
, * 
vÆue
) = 0;

179 
vútuÆ
 
°©us_t
 
£tSynchr⁄ousMode
(
boﬁ
 
íabÀd
) = 0;

191 
vútuÆ
 
°©us_t
 
c⁄√˘
(
≠i
, 
QueueBuf„rOuçut
* 
ouçut
) = 0;

201 
vútuÆ
 
°©us_t
 
disc⁄√˘
(
≠i
) = 0;

206 
˛ass
 
	gBnGøphicBuf„rProdu˚r
 : 
public
 
BnI¡îÁ˚
<
IGøphicBuf„rProdu˚r
>

208 
public
:

209 
vútuÆ
 
°©us_t
 
⁄Tønß˘
–
uöt32_t
 
code
,

210 c⁄° 
P¨˚l
& 
d©a
,

211 
P¨˚l
* 
ª∂y
,

212 
uöt32_t
 
Êags
 = 0);

	@jni/include/include/hardware/copybit.h

17 #i‚de‡
ANDROID_COPYBIT_INTERFACE_H


18 
	#ANDROID_COPYBIT_INTERFACE_H


	)

20 
	~<h¨dw¨e/h¨dw¨e.h
>

22 
	~<°döt.h
>

23 
	~<sys/cdefs.h
>

24 
	~<sys/ty≥s.h
>

26 
	g__BEGIN_DECLS


31 
	#COPYBIT_HARDWARE_MODULE_ID
 "c›ybô"

	)

36 
	#COPYBIT_HARDWARE_COPYBIT0
 "c›ybô0"

	)

42 
	mCOPYBIT_FORMAT_RGBA_8888
 = 
HAL_PIXEL_FORMAT_RGBA_8888
,

43 
	mCOPYBIT_FORMAT_RGBX_8888
 = 
HAL_PIXEL_FORMAT_RGBX_8888
,

44 
	mCOPYBIT_FORMAT_RGB_888
 = 
HAL_PIXEL_FORMAT_RGB_888
,

45 
	mCOPYBIT_FORMAT_RGB_565
 = 
HAL_PIXEL_FORMAT_RGB_565
,

46 
	mCOPYBIT_FORMAT_BGRA_8888
 = 
HAL_PIXEL_FORMAT_BGRA_8888
,

47 
	mCOPYBIT_FORMAT_RGBA_5551
 = 
HAL_PIXEL_FORMAT_RGBA_5551
,

48 
	mCOPYBIT_FORMAT_RGBA_4444
 = 
HAL_PIXEL_FORMAT_RGBA_4444
,

49 
	mCOPYBIT_FORMAT_YCbCr_422_SP
 = 
HAL_PIXEL_FORMAT_YCbCr_422_SP
,

50 
	mCOPYBIT_FORMAT_YCbCr_420_SP
 = 
HAL_PIXEL_FORMAT_YCbCr_420_SP
,

51 
	mCOPYBIT_FORMAT_YCrCb_422_SP
 = 
HAL_PIXEL_FORMAT_YCrCb_422_SP
,

52 
	mCOPYBIT_FORMAT_YCrCb_420_SP
 = 
HAL_PIXEL_FORMAT_YCrCb_420_SP
,

58 
	mCOPYBIT_ROTATION_DEG
 = 1,

60 
	mCOPYBIT_PLANE_ALPHA
 = 2,

62 
	mCOPYBIT_DITHER
 = 3,

64 
	mCOPYBIT_TRANSFORM
 = 4,

67 
	mCOPYBIT_BLUR
 = 5

73 
	mCOPYBIT_TRANSFORM_FLIP_H
 = 
HAL_TRANSFORM_FLIP_H
,

75 
	mCOPYBIT_TRANSFORM_FLIP_V
 = 
HAL_TRANSFORM_FLIP_V
,

77 
	mCOPYBIT_TRANSFORM_ROT_90
 = 
HAL_TRANSFORM_ROT_90
,

79 
	mCOPYBIT_TRANSFORM_ROT_180
 = 
HAL_TRANSFORM_ROT_180
,

81 
	mCOPYBIT_TRANSFORM_ROT_270
 = 
HAL_TRANSFORM_ROT_270
,

86 
	mCOPYBIT_DISABLE
 = 0,

87 
	mCOPYBIT_ENABLE
 = 1

93 
	mCOPYBIT_MINIFICATION_LIMIT
 = 1,

95 
	mCOPYBIT_MAGNIFICATION_LIMIT
 = 2,

97 
	mCOPYBIT_SCALING_FRAC_BITS
 = 3,

99 
	mCOPYBIT_ROTATION_STEP_DEG
 = 4,

103 
	sc›ybô_image_t
 {

105 
uöt32_t
 
	mw
;

107 
uöt32_t
 
	mh
;

109 
öt32_t
 
	mf‹m©
;

111 *
	mba£
;

113 
«tive_h™dÀ_t
* 
	mh™dÀ
;

117 
	sc›ybô_ª˘_t
 {

119 
	ml
;

121 
	mt
;

123 
	mr
;

125 
	mb
;

129 
	sc›ybô_ªgi⁄_t
 {

130 (*
	m√xt
)(
c›ybô_ªgi⁄_t
 c⁄° *
	mªgi⁄
, 
c›ybô_ª˘_t
 *
	mª˘
);

138 
	sc›ybô_moduÀ_t
 {

139 
hw_moduÀ_t
 
	mcomm⁄
;

146 
	sc›ybô_devi˚_t
 {

147 
hw_devi˚_t
 
	mcomm⁄
;

158 (*
	m£t_∑ømëî
)(
c›ybô_devi˚_t
 *
	mdev
, 
	m«me
, 
	mvÆue
);

168 (*
	mgë
)(
c›ybô_devi˚_t
 *
	mdev
, 
	m«me
);

180 (*
	mblô
)(
c›ybô_devi˚_t
 *
	mdev
,

181 
c›ybô_image_t
 c⁄° *
	md°
,

182 
c›ybô_image_t
 c⁄° *
	m§c
,

183 
c›ybô_ªgi⁄_t
 c⁄° *
	mªgi⁄
);

197 (*
	m°ªtch
)(
c›ybô_devi˚_t
 *
	mdev
,

198 
c›ybô_image_t
 c⁄° *
	md°
,

199 
c›ybô_image_t
 c⁄° *
	m§c
,

200 
c›ybô_ª˘_t
 c⁄° *
	md°_ª˘
,

201 
c›ybô_ª˘_t
 c⁄° *
	m§c_ª˘
,

202 
c›ybô_ªgi⁄_t
 c⁄° *
	mªgi⁄
);

208 
ölöe
 
	$c›ybô_›í
(c⁄° 
hw_moduÀ_t
* 
moduÀ
,

209 
c›ybô_devi˚_t
** 
devi˚
) {

210  
moduÀ
->
mëhods
->
	`›í
(module,

211 
COPYBIT_HARDWARE_COPYBIT0
, (
hw_devi˚_t
**)
devi˚
);

212 
	}
}

214 
ölöe
 
	$c›ybô_˛o£
(
c›ybô_devi˚_t
* 
devi˚
) {

215  
devi˚
->
comm⁄
.
	`˛o£
(&device->common);

216 
	}
}

219 
	g__END_DECLS


	@jni/include/include/hardware/gps.h

17 #i‚de‡
ANDROID_INCLUDE_HARDWARE_GPS_H


18 
	#ANDROID_INCLUDE_HARDWARE_GPS_H


	)

20 
	~<°döt.h
>

21 
	~<sys/cdefs.h
>

22 
	~<sys/ty≥s.h
>

24 
	~<h¨dw¨e/h¨dw¨e.h
>

26 
	g__BEGIN_DECLS


31 
	#GPS_HARDWARE_MODULE_ID
 "gps"

	)

35 
öt64_t
 
	tGpsUtcTime
;

38 
	#GPS_MAX_SVS
 32

	)

41 
uöt32_t
 
	tGpsPosôi⁄Mode
;

45 
	#GPS_POSITION_MODE_STANDALONE
 0

	)

47 
	#GPS_POSITION_MODE_MS_BASED
 1

	)

49 
	#GPS_POSITION_MODE_MS_ASSISTED
 2

	)

52 
uöt16_t
 
	tGpsSètusVÆue
;

56 
	#GPS_STATUS_NONE
 0

	)

58 
	#GPS_STATUS_SESSION_BEGIN
 1

	)

60 
	#GPS_STATUS_SESSION_END
 2

	)

62 
	#GPS_STATUS_ENGINE_ON
 3

	)

64 
	#GPS_STATUS_ENGINE_OFF
 4

	)

67 
uöt16_t
 
	tGpsLoˇti⁄Fœgs
;

71 
	#GPS_LOCATION_HAS_LAT_LONG
 0x0001

	)

73 
	#GPS_LOCATION_HAS_ALTITUDE
 0x0002

	)

75 
	#GPS_LOCATION_HAS_SPEED
 0x0004

	)

77 
	#GPS_LOCATION_HAS_BEARING
 0x0008

	)

79 
	#GPS_LOCATION_HAS_ACCURACY
 0x0010

	)

83 
uöt16_t
 
	tGpsAidögD©a
;

86 
	#GPS_DELETE_EPHEMERIS
 0x0001

	)

87 
	#GPS_DELETE_ALMANAC
 0x0002

	)

88 
	#GPS_DELETE_POSITION
 0x0004

	)

89 
	#GPS_DELETE_TIME
 0x0008

	)

90 
	#GPS_DELETE_IONO
 0x0010

	)

91 
	#GPS_DELETE_UTC
 0x0020

	)

92 
	#GPS_DELETE_HEALTH
 0x0040

	)

93 
	#GPS_DELETE_SVDIR
 0x0080

	)

94 
	#GPS_DELETE_SVSTEER
 0x0100

	)

95 
	#GPS_DELETE_SADATA
 0x0200

	)

96 
	#GPS_DELETE_RTI
 0x0400

	)

97 
	#GPS_DELETE_CELLDB_INFO
 0x8000

	)

98 
	#GPS_DELETE_ALL
 0xFFFF

	)

101 
uöt16_t
 
	tAGpsTy≥
;

102 
	#AGPS_TYPE_SUPL
 1

	)

103 
	#AGPS_TYPE_C2K
 2

	)

108 
	#GPS_NI_SHORT_STRING_MAXLEN
 256

	)

109 
	#GPS_NI_LONG_STRING_MAXLEN
 2048

	)

114 
uöt32_t
 
	tGpsNiTy≥
;

115 
	#GPS_NI_TYPE_VOICE
 1

	)

116 
	#GPS_NI_TYPE_UMTS_SUPL
 2

	)

117 
	#GPS_NI_TYPE_UMTS_CTRL_PLANE
 3

	)

122 
uöt32_t
 
	tGpsNiNŸifyFœgs
;

124 
	#GPS_NI_NEED_NOTIFY
 0x0001

	)

126 
	#GPS_NI_NEED_VERIFY
 0x0002

	)

128 
	#GPS_NI_PRIVACY_OVERRIDE
 0x0004

	)

134 
	tGpsU£rRe•⁄£Ty≥
;

135 
	#GPS_NI_RESPONSE_ACCEPT
 1

	)

136 
	#GPS_NI_RESPONSE_DENY
 2

	)

137 
	#GPS_NI_RESPONSE_NORESP
 3

	)

142 
	tGpsNiEncodögTy≥
;

143 
	#GPS_ENC_NONE
 0

	)

144 
	#GPS_ENC_SUPL_GSM_DEFAULT
 1

	)

145 
	#GPS_ENC_SUPL_UTF8
 2

	)

146 
	#GPS_ENC_SUPL_UCS2
 3

	)

147 
	#GPS_ENC_UNKNOWN
 -1

	)

150 
uöt16_t
 
	tAGpsSètusVÆue
;

152 
	#GPS_REQUEST_AGPS_DATA_CONN
 1

	)

154 
	#GPS_RELEASE_AGPS_DATA_CONN
 2

	)

156 
	#GPS_AGPS_DATA_CONNECTED
 3

	)

158 
	#GPS_AGPS_DATA_CONN_DONE
 4

	)

160 
	#GPS_AGPS_DATA_CONN_FAILED
 5

	)

165 
	#GPS_XTRA_INTERFACE
 "gps-xåa"

	)

170 
	#GPS_DEBUG_INTERFACE
 "gps-debug"

	)

175 
	#AGPS_INTERFACE
 "agps"

	)

180 
	#GPS_NI_INTERFACE
 "gps-ni"

	)

185 
size_t
 
	msize
;

187 
uöt16_t
 
	mÊags
;

189 
	mœtôude
;

191 
	ml⁄gôude
;

194 
	mÆtôude
;

196 
	m•ìd
;

198 
	mbórög
;

200 
	maccuøcy
;

202 
GpsUtcTime
 
	mtime°amp
;

203 } 
	tGpsLoˇti⁄
;

208 
size_t
 
	msize
;

209 
GpsSètusVÆue
 
	m°©us
;

210 } 
	tGpsSètus
;

215 
size_t
 
	msize
;

217 
	m¥n
;

219 
	m¢r
;

221 
	mñev©i⁄
;

223 
	mazimuth
;

224 } 
	tGpsSvInfo
;

229 
size_t
 
	msize
;

232 
	mnum_svs
;

235 
GpsSvInfo
 
	msv_li°
[
GPS_MAX_SVS
];

240 
uöt32_t
 
	mïhemîis_mask
;

245 
uöt32_t
 
	mÆm™ac_mask
;

251 
uöt32_t
 
	mu£d_ö_fix_mask
;

252 } 
	tGpsSvSètus
;

255 (* 
	tgps_loˇti⁄_ˇŒback
)(
	tGpsLoˇti⁄
* 
	tloˇti⁄
);

258 (* 
	tgps_°©us_ˇŒback
)(
	tGpsSètus
* 
	t°©us
);

261 (* 
	tgps_sv_°©us_ˇŒback
)(
	tGpsSvSètus
* 
	tsv_öfo
);

264 (* 
	tgps_nmó_ˇŒback
)(
	tGpsUtcTime
 
	ttime°amp
, c⁄° * 
	tnmó
, 
	tÀngth
);

268 
gps_loˇti⁄_ˇŒback
 
loˇti⁄_cb
;

269 
gps_°©us_ˇŒback
 
°©us_cb
;

270 
gps_sv_°©us_ˇŒback
 
sv_°©us_cb
;

271 
gps_nmó_ˇŒback
 
nmó_cb
;

272 } 
	tGpsCÆlbacks
;

278 
size_t
 
size
;

283 (*
öô
)–
GpsCÆlbacks
* 
ˇŒbacks
 );

286 (*
°¨t
)( );

289 (*
°›
)( );

292 (*
˛ónup
)( );

295 (*
öje˘_time
)(
GpsUtcTime
 
time
, 
öt64_t
 
timeRe„ªn˚
,

296 
un˚πaöty
);

303 (*
öje˘_loˇti⁄
)(
œtôude
, 
l⁄gôude
, 
accuøcy
);

310 (*
dñëe_aidög_d©a
)(
GpsAidögD©a
 
Êags
);

316 (*
£t_posôi⁄_mode
)(
GpsPosôi⁄Mode
 
mode
, 
fix_‰equícy
);

319 c⁄° * (*
gë_exãnsi⁄
)(c⁄° * 
«me
);

320 } 
	tGpsI¡îÁ˚
;

325 (* 
	tgps_xåa_dow∆ﬂd_ªque°
)();

329 
gps_xåa_dow∆ﬂd_ªque°
 
dow∆ﬂd_ªque°_cb
;

330 } 
	tGpsXåaCÆlbacks
;

335 
size_t
 
size
;

340 (*
öô
)–
GpsXåaCÆlbacks
* 
ˇŒbacks
 );

342 (*
öje˘_xåa_d©a
)–* 
d©a
, 
Àngth
 );

343 } 
	tGpsXåaI¡îÁ˚
;

348 
size_t
 
size
;

354 
	`size_t
 (*
gë_öã∫Æ_°©e
)(* 
buf„r
, 
size_t
 
buf„rSize
);

355 } 
	tGpsDebugI¡îÁ˚
;

360 
size_t
 
size
;

362 
AGpsTy≥
 
ty≥
;

363 
AGpsSètusVÆue
 
°©us
;

364 } 
	tAGpsSètus
;

367 (* 
	tagps_°©us_ˇŒback
)(
	tAGpsSètus
* 
	t°©us
);

371 
agps_°©us_ˇŒback
 
°©us_cb
;

372 } 
	tAGpsCÆlbacks
;

378 
size_t
 
size
;

384 (*
öô
)–
AGpsCÆlbacks
* 
ˇŒbacks
 );

389 (*
d©a_c⁄n_›í
)–c⁄° * 
≠n
 );

393 (*
d©a_c⁄n_˛o£d
)();

397 (*
d©a_c⁄n_Áûed
)();

401 (*
£t_£rvî
)–
AGpsTy≥
 
ty≥
, c⁄° * 
ho°«me
, 
p‹t
 );

402 } 
	tAGpsI¡îÁ˚
;

408 
size_t
 
size
;

414 
nŸifiˇti⁄_id
;

420 
GpsNiTy≥
 
ni_ty≥
;

425 
GpsNiNŸifyFœgs
 
nŸify_Êags
;

431 
timeout
;

436 
GpsU£rRe•⁄£Ty≥
 
deÁu…_ª•⁄£
;

441 
ªque°‹_id
[
GPS_NI_SHORT_STRING_MAXLEN
];

446 
ãxt
[
GPS_NI_LONG_STRING_MAXLEN
];

451 
GpsNiEncodögTy≥
 
ªque°‹_id_ícodög
;

456 
GpsNiEncodögTy≥
 
ãxt_ícodög
;

463 
exåas
[
GPS_NI_LONG_STRING_MAXLEN
];

465 } 
	tGpsNiNŸifiˇti⁄
;

468 (*
	tgps_ni_nŸify_ˇŒback
)(
	tGpsNiNŸifiˇti⁄
 *
	tnŸifiˇti⁄
);

476 
gps_ni_nŸify_ˇŒback
 
nŸify_cb
;

477 } 
	tGpsNiCÆlbacks
;

485 
size_t
 
size
;

488 (*
öô
Ë(
GpsNiCÆlbacks
 *
ˇŒbacks
);

491 (*
ª•⁄d
Ë(
nŸif_id
, 
GpsU£rRe•⁄£Ty≥
 
u£r_ª•⁄£
);

492 } 
	tGpsNiI¡îÁ˚
;

494 
	sgps_devi˚_t
 {

495 
hw_devi˚_t
 
comm⁄
;

502 c⁄° 
GpsI¡îÁ˚
* (*
gë_gps_öãrÁ˚
)(
gps_devi˚_t
* 
dev
);

505 
__END_DECLS


	@jni/include/include/hardware/gralloc.h

18 #i‚de‡
ANDROID_GRALLOC_INTERFACE_H


19 
	#ANDROID_GRALLOC_INTERFACE_H


	)

21 
	~<cutûs/«tive_h™dÀ.h
>

23 
	~<h¨dw¨e/h¨dw¨e.h
>

25 
	~<°döt.h
>

26 
	~<sys/cdefs.h
>

27 
	~<sys/ty≥s.h
>

29 
	g__BEGIN_DECLS


34 
	#GRALLOC_HARDWARE_MODULE_ID
 "gøŒoc"

	)

40 
	#GRALLOC_HARDWARE_FB0
 "fb0"

	)

41 
	#GRALLOC_HARDWARE_GPU0
 "gpu0"

	)

45 
	mGRALLOC_USAGE_SW_READ_NEVER
 = 0x00000000,

47 
	mGRALLOC_USAGE_SW_READ_RARELY
 = 0x00000002,

49 
	mGRALLOC_USAGE_SW_READ_OFTEN
 = 0x00000003,

51 
	mGRALLOC_USAGE_SW_READ_MASK
 = 0x0000000F,

54 
	mGRALLOC_USAGE_SW_WRITE_NEVER
 = 0x00000000,

56 
	mGRALLOC_USAGE_SW_WRITE_RARELY
 = 0x00000020,

58 
	mGRALLOC_USAGE_SW_WRITE_OFTEN
 = 0x00000030,

60 
	mGRALLOC_USAGE_SW_WRITE_MASK
 = 0x000000F0,

63 
	mGRALLOC_USAGE_HW_TEXTURE
 = 0x00000100,

65 
	mGRALLOC_USAGE_HW_RENDER
 = 0x00000200,

67 
	mGRALLOC_USAGE_HW_2D
 = 0x00000C00,

69 
	mGRALLOC_USAGE_HW_FB
 = 0x00001000,

71 
	mGRALLOC_USAGE_HW_MASK
 = 0x00001F00,

76 c⁄° 
	t«tive_h™dÀ
* 
	tbuf„r_h™dÀ_t
;

83 
	mGRALLOC_MODULE_PERFORM_CREATE_HANDLE_FROM_BUFFER
 = 0x080000001,

91 
	sgøŒoc_moduÀ_t
 {

92 
hw_moduÀ_t
 
	mcomm⁄
;

109 (*
	mªgi°îBuf„r
)(
gøŒoc_moduÀ_t
 c⁄°* 
	mmoduÀ
,

110 
buf„r_h™dÀ_t
 
	mh™dÀ
);

124 (*
	muƒegi°îBuf„r
)(
gøŒoc_moduÀ_t
 c⁄°* 
	mmoduÀ
,

125 
buf„r_h™dÀ_t
 
	mh™dÀ
);

158 (*
	mlock
)(
gøŒoc_moduÀ_t
 c⁄°* 
	mmoduÀ
,

159 
buf„r_h™dÀ_t
 
	mh™dÀ
, 
	mußge
,

160 
	ml
, 
	mt
, 
	mw
, 
	mh
,

161 ** 
	mvaddr
);

169 (*
	mu∆ock
)(
gøŒoc_moduÀ_t
 c⁄°* 
	mmoduÀ
,

170 
buf„r_h™dÀ_t
 
	mh™dÀ
);

174 (*
	m≥rf‹m
)(
gøŒoc_moduÀ_t
 c⁄°* 
	mmoduÀ
,

175 
	m›î©i⁄
, ... );

178 * 
	mª£rved_¥oc
[7];

179 } 
	tgøŒoc_moduÀ_t
;

188 
	sÆloc_devi˚_t
 {

189 
hw_devi˚_t
 
	mcomm⁄
;

201 (*
	mÆloc
)(
Æloc_devi˚_t
* 
	mdev
,

202 
	mw
, 
	mh
, 
	mf‹m©
, 
	mußge
,

203 
buf„r_h™dÀ_t
* 
	mh™dÀ
, * 
	m°ride
);

215 (*
	m‰ì
)(
Æloc_devi˚_t
* 
	mdev
,

216 
buf„r_h™dÀ_t
 
	mh™dÀ
);

218 } 
	tÆloc_devi˚_t
;

221 
	s‰amebuf„r_devi˚_t
 {

222 
hw_devi˚_t
 
	mcomm⁄
;

225 c⁄° 
uöt32_t
 
	mÊags
;

228 c⁄° 
uöt32_t
 
	mwidth
;

229 c⁄° 
uöt32_t
 
	mheight
;

232 c⁄° 
	m°ride
;

235 c⁄° 
	mf‹m©
;

238 c⁄° 
	mxdpi
;

239 c⁄° 
	mydpi
;

242 c⁄° 
	mÂs
;

245 c⁄° 
	mmöSw≠I¡îvÆ
;

248 c⁄° 
	mmaxSw≠I¡îvÆ
;

250 
	mª£rved
[8];

257 (*
	m£tSw≠I¡îvÆ
)(
‰amebuf„r_devi˚_t
* 
	mwödow
,

258 
	möãrvÆ
);

280 (*
	m£tUpd©eRe˘
)(
‰amebuf„r_devi˚_t
* 
	mwödow
,

281 
	mÀ·
, 
	mt›
, 
	mwidth
, 
	mheight
);

302 (*
	mpo°
)(
‰amebuf„r_devi˚_t
* 
	mdev
, 
buf„r_h™dÀ_t
 
	mbuf„r
);

310 (*
	mcomposôi⁄Com∂ëe
)(
‰amebuf„r_devi˚_t
* 
	mdev
);

313 * 
	mª£rved_¥oc
[8];

315 } 
	t‰amebuf„r_devi˚_t
;

320 
ölöe
 
	$gøŒoc_›í
(c⁄° 
hw_moduÀ_t
* 
moduÀ
,

321 
Æloc_devi˚_t
** 
devi˚
) {

322  
moduÀ
->
mëhods
->
	`›í
(module,

323 
GRALLOC_HARDWARE_GPU0
, (
hw_devi˚_t
**)
devi˚
);

324 
	}
}

326 
ölöe
 
	$gøŒoc_˛o£
(
Æloc_devi˚_t
* 
devi˚
) {

327  
devi˚
->
comm⁄
.
	`˛o£
(&device->common);

328 
	}
}

331 
ölöe
 
	$‰amebuf„r_›í
(c⁄° 
hw_moduÀ_t
* 
moduÀ
,

332 
‰amebuf„r_devi˚_t
** 
devi˚
) {

333  
moduÀ
->
mëhods
->
	`›í
(module,

334 
GRALLOC_HARDWARE_FB0
, (
hw_devi˚_t
**)
devi˚
);

335 
	}
}

337 
ölöe
 
	$‰amebuf„r_˛o£
(
‰amebuf„r_devi˚_t
* 
devi˚
) {

338  
devi˚
->
comm⁄
.
	`˛o£
(&device->common);

339 
	}
}

342 
	g__END_DECLS


	@jni/include/include/hardware/hardware.h

17 #i‚de‡
ANDROID_INCLUDE_HARDWARE_HARDWARE_H


18 
	#ANDROID_INCLUDE_HARDWARE_HARDWARE_H


	)

20 
	~<°döt.h
>

21 
	~<sys/cdefs.h
>

23 
	~<cutûs/«tive_h™dÀ.h
>

25 
	g__BEGIN_DECLS


31 
	#MAKE_TAG_CONSTANT
(
A
,
B
,
C
,
D
Ë(((AË<< 24Ë| ((BË<< 16Ë| ((CË<< 8Ë| (D))

	)

33 
	#HARDWARE_MODULE_TAG
 
	`MAKE_TAG_CONSTANT
('H', 'W', 'M', 'T')

	)

34 
	#HARDWARE_DEVICE_TAG
 
	`MAKE_TAG_CONSTANT
('H', 'W', 'D', 'T')

	)

36 
	ghw_moduÀ_t
;

37 
	ghw_moduÀ_mëhods_t
;

38 
	ghw_devi˚_t
;

45 
	shw_moduÀ_t
 {

47 
uöt32_t
 
	mèg
;

50 
uöt16_t
 
	mvîsi⁄_maj‹
;

53 
uöt16_t
 
	mvîsi⁄_mö‹
;

56 c⁄° *
	mid
;

59 c⁄° *
	m«me
;

62 c⁄° *
	mauth‹
;

65 
hw_moduÀ_mëhods_t
* 
	mmëhods
;

68 * 
	mdso
;

71 
uöt32_t
 
	mª£rved
[32-7];

73 } 
	thw_moduÀ_t
;

75 
	shw_moduÀ_mëhods_t
 {

77 (*
	m›í
)(c⁄° 
hw_moduÀ_t
* 
	mmoduÀ
, c⁄° * 
	mid
,

78 
hw_devi˚_t
** 
	mdevi˚
);

80 } 
	thw_moduÀ_mëhods_t
;

86 
	shw_devi˚_t
 {

88 
uöt32_t
 
	mèg
;

91 
uöt32_t
 
	mvîsi⁄
;

94 
hw_moduÀ_t
* 
	mmoduÀ
;

97 
uöt32_t
 
	mª£rved
[12];

100 (*
	m˛o£
)(
hw_devi˚_t
* 
	mdevi˚
);

102 } 
	thw_devi˚_t
;

107 
	#HAL_MODULE_INFO_SYM
 
HMI


	)

112 
	#HAL_MODULE_INFO_SYM_AS_STR
 "HMI"

	)

118 
hw_gë_moduÀ
(c⁄° *
id
, c⁄° 
hw_moduÀ_t
 **
moduÀ
);

126 
	mHAL_PIXEL_FORMAT_RGBA_8888
 = 1,

127 
	mHAL_PIXEL_FORMAT_RGBX_8888
 = 2,

128 
	mHAL_PIXEL_FORMAT_RGB_888
 = 3,

129 
	mHAL_PIXEL_FORMAT_RGB_565
 = 4,

130 
	mHAL_PIXEL_FORMAT_BGRA_8888
 = 5,

131 
	mHAL_PIXEL_FORMAT_RGBA_5551
 = 6,

132 
	mHAL_PIXEL_FORMAT_RGBA_4444
 = 7,

133 
	mHAL_PIXEL_FORMAT_YCbCr_422_SP
 = 0x10,

134 
	mHAL_PIXEL_FORMAT_YCrCb_420_SP
 = 0x11,

135 
	mHAL_PIXEL_FORMAT_YCbCr_422_P
 = 0x12,

136 
	mHAL_PIXEL_FORMAT_YCbCr_420_P
 = 0x13,

137 
	mHAL_PIXEL_FORMAT_YCbCr_422_I
 = 0x14,

138 
	mHAL_PIXEL_FORMAT_YCbCr_420_I
 = 0x15,

139 
	mHAL_PIXEL_FORMAT_CbYCrY_422_I
 = 0x16,

140 
	mHAL_PIXEL_FORMAT_CbYCrY_420_I
 = 0x17,

141 
	mHAL_PIXEL_FORMAT_YCbCr_420_SP_TILED
 = 0x20,

142 
	mHAL_PIXEL_FORMAT_YCbCr_420_SP
 = 0x21,

143 
	mHAL_PIXEL_FORMAT_YCrCb_420_SP_TILED
 = 0x22,

144 
	mHAL_PIXEL_FORMAT_YCrCb_422_SP
 = 0x23,

154 
	mHAL_TRANSFORM_FLIP_H
 = 0x01,

156 
	mHAL_TRANSFORM_FLIP_V
 = 0x02,

158 
	mHAL_TRANSFORM_ROT_90
 = 0x04,

160 
	mHAL_TRANSFORM_ROT_180
 = 0x03,

162 
	mHAL_TRANSFORM_ROT_270
 = 0x07,

165 
	g__END_DECLS


	@jni/include/include/hardware/lights.h

17 #i‚de‡
ANDROID_LIGHTS_INTERFACE_H


18 
	#ANDROID_LIGHTS_INTERFACE_H


	)

20 
	~<°döt.h
>

21 
	~<sys/cdefs.h
>

22 
	~<sys/ty≥s.h
>

24 
	~<h¨dw¨e/h¨dw¨e.h
>

26 
	g__BEGIN_DECLS


31 
	#LIGHTS_HARDWARE_MODULE_ID
 "lights"

	)

39 
	#LIGHT_ID_BACKLIGHT
 "backlight"

	)

40 
	#LIGHT_ID_KEYBOARD
 "keybﬂrd"

	)

41 
	#LIGHT_ID_BUTTONS
 "buâ⁄s"

	)

42 
	#LIGHT_ID_BATTERY
 "b©ãry"

	)

43 
	#LIGHT_ID_NOTIFICATIONS
 "nŸifiˇti⁄s"

	)

44 
	#LIGHT_ID_ATTENTION
 "©ã¡i⁄"

	)

51 
	#LIGHT_ID_BLUETOOTH
 "bluëoŸh"

	)

52 
	#LIGHT_ID_WIFI
 "wifi"

	)

58 
	#LIGHT_FLASH_NONE
 0

	)

66 
	#LIGHT_FLASH_TIMED
 1

	)

72 
	#LIGHT_FLASH_HARDWARE
 2

	)

77 
	#BRIGHTNESS_MODE_USER
 0

	)

82 
	#BRIGHTNESS_MODE_SENSOR
 1

	)

90 
	slight_°©e_t
 {

105 
	mcﬁ‹
;

110 
	mÊashMode
;

111 
	mÊashOnMS
;

112 
	mÊashOffMS
;

118 
	mbrighäessMode
;

121 
	slight_devi˚_t
 {

122 
hw_devi˚_t
 
	mcomm⁄
;

129 (*
	m£t_light
)(
light_devi˚_t
* 
	mdev
,

130 
light_°©e_t
 c⁄°* 
	m°©e
);

134 
	g__END_DECLS


	@jni/include/include/hardware/overlay.h

17 #i‚de‡
ANDROID_OVERLAY_INTERFACE_H


18 
	#ANDROID_OVERLAY_INTERFACE_H


	)

20 
	~<cutûs/«tive_h™dÀ.h
>

22 
	~<h¨dw¨e/h¨dw¨e.h
>

24 
	~<°döt.h
>

25 
	~<sys/cdefs.h
>

26 
	~<sys/ty≥s.h
>

28 
	g__BEGIN_DECLS


33 
	#OVERLAY_HARDWARE_MODULE_ID
 "ovîœy"

	)

38 
	#OVERLAY_HARDWARE_CONTROL
 "c⁄åﬁ"

	)

39 
	#OVERLAY_HARDWARE_DATA
 "d©a"

	)

45 
	mOVERLAY_FORMAT_RGBA_8888
 = 
HAL_PIXEL_FORMAT_RGBA_8888
,

46 
	mOVERLAY_FORMAT_RGB_565
 = 
HAL_PIXEL_FORMAT_RGB_565
,

47 
	mOVERLAY_FORMAT_BGRA_8888
 = 
HAL_PIXEL_FORMAT_BGRA_8888
,

48 
	mOVERLAY_FORMAT_YCbCr_422_SP
 = 
HAL_PIXEL_FORMAT_YCbCr_422_SP
,

49 
	mOVERLAY_FORMAT_YCbCr_420_SP
 = 
HAL_PIXEL_FORMAT_YCbCr_420_SP
,

50 
	mOVERLAY_FORMAT_YCbYCr_422_I
 = 
HAL_PIXEL_FORMAT_YCbCr_422_I
,

51 
	mOVERLAY_FORMAT_YCbYCr_420_I
 = 
HAL_PIXEL_FORMAT_YCbCr_420_I
,

52 
	mOVERLAY_FORMAT_CbYCrY_422_I
 = 
HAL_PIXEL_FORMAT_CbYCrY_422_I
,

53 
	mOVERLAY_FORMAT_CbYCrY_420_I
 = 
HAL_PIXEL_FORMAT_CbYCrY_420_I
,

54 
	mOVERLAY_FORMAT_DEFAULT
 = 99

61 
	mOVERLAY_TRANSFORM_FLIP_H
 = 
HAL_TRANSFORM_FLIP_V
,

63 
	mOVERLAY_TRANSFORM_FLIP_V
 = 
HAL_TRANSFORM_FLIP_H
,

65 
	mOVERLAY_TRANSFORM_ROT_90
 = 
HAL_TRANSFORM_ROT_90
,

67 
	mOVERLAY_TRANSFORM_ROT_180
 = 
HAL_TRANSFORM_ROT_180
,

69 
	mOVERLAY_TRANSFORM_ROT_270
 = 
HAL_TRANSFORM_ROT_270


75 
	mOVERLAY_ROTATION_DEG
 = 1,

77 
	mOVERLAY_DITHER
 = 3,

79 
	mOVERLAY_TRANSFORM
 = 4,

84 
	mOVERLAY_DISABLE
 = 0,

85 
	mOVERLAY_ENABLE
 = 1

91 
	mOVERLAY_MINIFICATION_LIMIT
 = 1,

93 
	mOVERLAY_MAGNIFICATION_LIMIT
 = 2,

95 
	mOVERLAY_SCALING_FRAC_BITS
 = 3,

97 
	mOVERLAY_ROTATION_STEP_DEG
 = 4,

99 
	mOVERLAY_HORIZONTAL_ALIGNMENT
 = 5,

101 
	mOVERLAY_VERTICAL_ALIGNMENT
 = 6,

103 
	mOVERLAY_WIDTH_ALIGNMENT
 = 7,

105 
	mOVERLAY_HEIGHT_ALIGNMENT
 = 8,

111 c⁄° 
	t«tive_h™dÀ
* 
	tovîœy_h™dÀ_t
;

113 
	sovîœy_t
 {

114 
uöt32_t
 
	mw
;

115 
uöt32_t
 
	mh
;

116 
öt32_t
 
	mf‹m©
;

117 
uöt32_t
 
	mw_°ride
;

118 
uöt32_t
 
	mh_°ride
;

119 
uöt32_t
 
	mª£rved
[3];

122 
ovîœy_h™dÀ_t
 (*
gëH™dÀRef
)(
ovîœy_t
* 
	movîœy
);

123 
uöt32_t
 
	mª£rved_¥ocs
[7];

124 } 
	tovîœy_t
;

126 * 
	tovîœy_buf„r_t
;

135 
	sovîœy_moduÀ_t
 {

136 
hw_moduÀ_t
 
	mcomm⁄
;

146 
	sovîœy_c⁄åﬁ_devi˚_t
 {

147 
hw_devi˚_t
 
	mcomm⁄
;

150 (*
	mgë
)(
ovîœy_c⁄åﬁ_devi˚_t
 *
	mdev
, 
	m«me
);

155 
	movîœy_t
* (*
	m¸óãOvîœy
)(
ovîœy_c⁄åﬁ_devi˚_t
 *
	mdev
,

156 
uöt32_t
 
	mw
, uöt32_à
	mh
, 
öt32_t
 
	mf‹m©
);

160 (*
	mde°royOvîœy
)(
ovîœy_c⁄åﬁ_devi˚_t
 *
	mdev
,

161 
ovîœy_t
* 
	movîœy
);

165 (*
	m£tPosôi⁄
)(
ovîœy_c⁄åﬁ_devi˚_t
 *
	mdev
,

166 
ovîœy_t
* 
	movîœy
,

167 
	mx
, 
	my
, 
uöt32_t
 
	mw
, uöt32_à
	mh
);

170 (*
	mgëPosôi⁄
)(
ovîœy_c⁄åﬁ_devi˚_t
 *
	mdev
,

171 
ovîœy_t
* 
	movîœy
,

172 * 
	mx
, * 
	my
, 
uöt32_t
* 
	mw
, uöt32_t* 
	mh
);

176 (*
	m£tP¨amëî
)(
ovîœy_c⁄åﬁ_devi˚_t
 *
	mdev
,

177 
ovîœy_t
* 
	movîœy
, 
	m∑øm
, 
	mvÆue
);

179 (*
	m°age
)(
ovîœy_c⁄åﬁ_devi˚_t
 *
	mdev
, 
ovîœy_t
* 
	movîœy
);

180 (*
	mcommô
)(
ovîœy_c⁄åﬁ_devi˚_t
 *
	mdev
, 
ovîœy_t
* 
	movîœy
);

184 
	sovîœy_d©a_devi˚_t
 {

185 
hw_devi˚_t
 
	mcomm⁄
;

189 (*
	möôülize
)(
ovîœy_d©a_devi˚_t
 *
	mdev
,

190 
ovîœy_h™dÀ_t
 
	mh™dÀ
);

193 (*
	mªsizeI≈ut
)(
ovîœy_d©a_devi˚_t
 *
	mdev
,

194 
uöt32_t
 
	mw
, uöt32_à
	mh
);

196 (*
	m£tCr›
)(
ovîœy_d©a_devi˚_t
 *
	mdev
,

197 
uöt32_t
 
	mx
, uöt32_à
	my
, uöt32_à
	mw
, uöt32_à
	mh
) ;

199 (*
	mgëCr›
)(
ovîœy_d©a_devi˚_t
 *
	mdev
,

200 
uöt32_t
* 
	mx
, uöt32_t* 
	my
, uöt32_t* 
	mw
, uöt32_t* 
	mh
) ;

202 (*
	m£tP¨amëî
)(
ovîœy_d©a_devi˚_t
 *
	mdev
,

203 
	m∑øm
, 
	mvÆue
);

206 (*
	mdequeueBuf„r
)(
ovîœy_d©a_devi˚_t
 *
	mdev
,

207 
ovîœy_buf„r_t
 *
	mbuf
);

210 (*
	mqueueBuf„r
)(
ovîœy_d©a_devi˚_t
 *
	mdev
,

211 
ovîœy_buf„r_t
 
	mbuf„r
);

214 * (*
	mgëBuf„rAddªss
)(
ovîœy_d©a_devi˚_t
 *
	mdev
,

215 
ovîœy_buf„r_t
 
	mbuf„r
);

217 (*
	mgëBuf„rCou¡
)(
ovîœy_d©a_devi˚_t
 *
	mdev
);

225 
ölöe
 
	$ovîœy_c⁄åﬁ_›í
(c⁄° 
hw_moduÀ_t
* 
moduÀ
,

226 
ovîœy_c⁄åﬁ_devi˚_t
** 
devi˚
) {

227  
moduÀ
->
mëhods
->
	`›í
(module,

228 
OVERLAY_HARDWARE_CONTROL
, (
hw_devi˚_t
**)
devi˚
);

229 
	}
}

231 
ölöe
 
	$ovîœy_c⁄åﬁ_˛o£
(
ovîœy_c⁄åﬁ_devi˚_t
* 
devi˚
) {

232  
devi˚
->
comm⁄
.
	`˛o£
(&device->common);

233 
	}
}

235 
ölöe
 
	$ovîœy_d©a_›í
(c⁄° 
hw_moduÀ_t
* 
moduÀ
,

236 
ovîœy_d©a_devi˚_t
** 
devi˚
) {

237  
moduÀ
->
mëhods
->
	`›í
(module,

238 
OVERLAY_HARDWARE_DATA
, (
hw_devi˚_t
**)
devi˚
);

239 
	}
}

241 
ölöe
 
	$ovîœy_d©a_˛o£
(
ovîœy_d©a_devi˚_t
* 
devi˚
) {

242  
devi˚
->
comm⁄
.
	`˛o£
(&device->common);

243 
	}
}

245 
	g__END_DECLS


	@jni/include/include/hardware/qemud.h

17 #i‚de‡
ANDROID_INCLUDE_HARDWARE_QEMUD_H


18 
	#ANDROID_INCLUDE_HARDWARE_QEMUD_H


	)

20 
	~<cutûs/sockës.h
>

37 #i‚de‡
D


38 
	#D
(...Ë(()0)

	)

41 
__ölöe__
 

42 
	$qemud_fd_wrôe
(
fd
, c⁄° * 
buff
, 
Àn
)

44 
Àn2
;

46 
Àn2
 = 
	`wrôe
(
fd
, 
buff
, 
Àn
);

47 } 
Àn2
 < 0 && 
î∫o
 =
EINTR
);

48  
Àn2
;

49 
	}
}

51 
__ölöe__
 

52 
	$qemud_fd_ªad
(
fd
, * 
buff
, 
Àn
)

54 
Àn2
;

56 
Àn2
 = 
	`ªad
(
fd
, 
buff
, 
Àn
);

57 } 
Àn2
 < 0 && 
î∫o
 =
EINTR
);

58  
Àn2
;

59 
	}
}

61 
__ölöe__
 

62 
	$qemud_ch™√l_›í
(c⁄° * 
«me
)

64 
fd
;

65 
«mñí
 = 
	`°æí
(
«me
);

66 
™swî
[2];

69 
fd
 = 
	`sockë_loˇl_˛õ¡
( "qemud",

70 
ANDROID_SOCKET_NAMESPACE_RESERVED
,

71 
SOCK_STREAM
 );

72 i‡(
fd
 < 0) {

73 
	`D
("nÿqemud c⁄åﬁ sockë: %s", 
	`°ªº‹
(
î∫o
));

78 i‡(
	`qemud_fd_wrôe
(
fd
, 
«me
, 
«mñí
) !=Çamelen) {

79 
	`D
("can't send serviceÇameÅo qemud: %s",

80 
	`°ªº‹
(
î∫o
));

81 
	`˛o£
(
fd
);

86 i‡(
	`qemud_fd_ªad
(
fd
, 
™swî
, 2) != 2 ||

87 
™swî
[0] != 'O' ||ánswer[1] != 'K') {

88 
	`D
("ˇ¡' c⁄√˘Åÿ%†£rvi˚Åhrough qemud", 
«me
);

89 
	`˛o£
(
fd
);

92  
fd
;

93 
	}
}

95 
__ölöe__
 

96 
	$qemud_ch™√l_£nd
(
fd
, c⁄° * 
msg
, 
msgÀn
)

98 
hódî
[5];

100 i‡(
msgÀn
 < 0)

101 
msgÀn
 = 
	`°æí
((c⁄° *)
msg
);

103 i‡(
msgÀn
 == 0)

106 
	`¢¥ötf
(
hódî
,  hódî, "%04x", 
msgÀn
);

107 i‡(
	`qemud_fd_wrôe
(
fd
, 
hódî
, 4) != 4) {

108 
	`D
("ˇn'àwrôêqemud fømêhódî: %s", 
	`°ªº‹
(
î∫o
));

112 i‡(
	`qemud_fd_wrôe
(
fd
, 
msg
, 
msgÀn
) != msglen) {

113 
	`D
("ˇn4àwrôêqemud fømê∑ylﬂd: %s", 
	`°ªº‹
(
î∫o
));

117 
	}
}

119 
__ölöe__
 

120 
	$qemud_ch™√l_ªcv
(
fd
, * 
msg
, 
msgsize
)

122 
hódî
[5];

123 
size
, 
avaû
;

125 i‡(
	`qemud_fd_ªad
(
fd
, 
hódî
, 4) != 4) {

126 
	`D
("ˇn'àªad qemud fømêhódî: %s", 
	`°ªº‹
(
î∫o
));

129 
hódî
[4] = 0;

130 i‡(
	`ssˇnf
(
hódî
, "%04x", &
size
) != 1) {

131 
	`D
("mÆf‹med qemud fømêhódî: '%.*s'", 4, 
hódî
);

134 i‡(
size
 > 
msgsize
)

137 i‡(
	`qemud_fd_ªad
(
fd
, 
msg
, 
size
) != size) {

138 
	`D
("ˇn'àªad qemud fømê∑ylﬂd: %s", 
	`°ªº‹
(
î∫o
));

141  
size
;

142 
	}
}

	@jni/include/include/hardware/sensors.h

17 #i‚de‡
ANDROID_SENSORS_INTERFACE_H


18 
	#ANDROID_SENSORS_INTERFACE_H


	)

20 
	~<°döt.h
>

21 
	~<sys/cdefs.h
>

22 
	~<sys/ty≥s.h
>

24 
	~<h¨dw¨e/h¨dw¨e.h
>

25 
	~<cutûs/«tive_h™dÀ.h
>

27 
	g__BEGIN_DECLS


32 
	#SENSORS_HARDWARE_MODULE_ID
 "£ns‹s"

	)

37 
	#SENSORS_HARDWARE_CONTROL
 "c⁄åﬁ"

	)

38 
	#SENSORS_HARDWARE_DATA
 "d©a"

	)

46 
	#SENSORS_HANDLE_BASE
 0

	)

47 
	#SENSORS_HANDLE_BITS
 8

	)

48 
	#SENSORS_HANDLE_COUNT
 (1<<
SENSORS_HANDLE_BITS
)

	)

54 
	#SENSOR_TYPE_ACCELEROMETER
 1

	)

55 
	#SENSOR_TYPE_MAGNETIC_FIELD
 2

	)

56 
	#SENSOR_TYPE_ORIENTATION
 3

	)

57 
	#SENSOR_TYPE_GYROSCOPE
 4

	)

58 
	#SENSOR_TYPE_LIGHT
 5

	)

59 
	#SENSOR_TYPE_PRESSURE
 6

	)

60 
	#SENSOR_TYPE_TEMPERATURE
 7

	)

61 
	#SENSOR_TYPE_PROXIMITY
 8

	)

68 
	#GRAVITY_SUN
 (275.0f)

	)

69 
	#GRAVITY_MERCURY
 (3.70f)

	)

70 
	#GRAVITY_VENUS
 (8.87f)

	)

71 
	#GRAVITY_EARTH
 (9.80665f)

	)

72 
	#GRAVITY_MOON
 (1.6f)

	)

73 
	#GRAVITY_MARS
 (3.71f)

	)

74 
	#GRAVITY_JUPITER
 (23.12f)

	)

75 
	#GRAVITY_SATURN
 (8.96f)

	)

76 
	#GRAVITY_URANUS
 (8.69f)

	)

77 
	#GRAVITY_NEPTUNE
 (11.0f)

	)

78 
	#GRAVITY_PLUTO
 (0.6f)

	)

79 
	#GRAVITY_DEATH_STAR_I
 (0.000000353036145f)

	)

80 
	#GRAVITY_THE_ISLAND
 (4.815162342f)

	)

83 
	#MAGNETIC_FIELD_EARTH_MAX
 (60.0f)

	)

86 
	#MAGNETIC_FIELD_EARTH_MIN
 (30.0f)

	)

93 
	#SENSOR_STATUS_UNRELIABLE
 0

	)

94 
	#SENSOR_STATUS_ACCURACY_LOW
 1

	)

95 
	#SENSOR_STATUS_ACCURACY_MEDIUM
 2

	)

96 
	#SENSOR_STATUS_ACCURACY_HIGH
 3

	)

208 
	mv
[3];

210 
	mx
;

211 
	my
;

212 
	mz
;

215 
	mazimuth
;

216 
	mpôch
;

217 
	mrﬁl
;

220 
öt8_t
 
	m°©us
;

221 
uöt8_t
 
	mª£rved
[3];

222 } 
	t£ns‹s_vec_t
;

230 
	m£ns‹
;

234 
£ns‹s_vec_t
 
	mve˘‹
;

237 
£ns‹s_vec_t
 
	m‹õ¡©i⁄
;

240 
£ns‹s_vec_t
 
	mac˚Àøti⁄
;

243 
£ns‹s_vec_t
 
	mmag√tic
;

246 
	mãm≥øtuª
;

249 
	mdi°™˚
;

252 
	mlight
;

256 
öt64_t
 
	mtime
;

258 
uöt32_t
 
	mª£rved
;

259 } 
	t£ns‹s_d©a_t
;

262 
	g£ns‹_t
;

269 
	s£ns‹s_moduÀ_t
 {

270 
hw_moduÀ_t
 
	mcomm⁄
;

276 (*
	mgë_£ns‹s_li°
)(
£ns‹s_moduÀ_t
* 
	mmoduÀ
,

277 
£ns‹_t
 c⁄°** 
	mli°
);

280 
	s£ns‹_t
 {

282 c⁄° * 
	m«me
;

284 c⁄° * 
	mvíd‹
;

289 
	mvîsi⁄
;

294 
	mh™dÀ
;

296 
	mty≥
;

298 
	mmaxR™ge
;

300 
	mªsﬁuti⁄
;

302 
	mpowî
;

304 * 
	mª£rved
[9];

312 
	s£ns‹s_c⁄åﬁ_devi˚_t
 {

313 
hw_devi˚_t
 
	mcomm⁄
;

323 
	m«tive_h™dÀ_t
* (*
	m›í_d©a_sour˚
)(
£ns‹s_c⁄åﬁ_devi˚_t
 *
	mdev
);

332 (*
	m˛o£_d©a_sour˚
)(
£ns‹s_c⁄åﬁ_devi˚_t
 *
	mdev
);

341 (*
	ma˘iv©e
)(
£ns‹s_c⁄åﬁ_devi˚_t
 *
	mdev
,

342 
	mh™dÀ
, 
	míabÀd
);

349 (*
	m£t_dñay
)(
£ns‹s_c⁄åﬁ_devi˚_t
 *
	mdev
, 
öt32_t
 
	mms
);

354 (*
	mwake
)(
£ns‹s_c⁄åﬁ_devi˚_t
 *
	mdev
);

357 
	s£ns‹s_d©a_devi˚_t
 {

358 
hw_devi˚_t
 
	mcomm⁄
;

371 (*
	md©a_›í
)(
£ns‹s_d©a_devi˚_t
 *
	mdev
, 
«tive_h™dÀ_t
* 
	mnh
);

380 (*
	md©a_˛o£
)(
£ns‹s_d©a_devi˚_t
 *
	mdev
);

389 (*
	mpﬁl
)(
£ns‹s_d©a_devi˚_t
 *
	mdev
,

390 
£ns‹s_d©a_t
* 
	md©a
);

396 
ölöe
 
	$£ns‹s_c⁄åﬁ_›í
(c⁄° 
hw_moduÀ_t
* 
moduÀ
,

397 
£ns‹s_c⁄åﬁ_devi˚_t
** 
devi˚
) {

398  
moduÀ
->
mëhods
->
	`›í
(module,

399 
SENSORS_HARDWARE_CONTROL
, (
hw_devi˚_t
**)
devi˚
);

400 
	}
}

402 
ölöe
 
	$£ns‹s_c⁄åﬁ_˛o£
(
£ns‹s_c⁄åﬁ_devi˚_t
* 
devi˚
) {

403  
devi˚
->
comm⁄
.
	`˛o£
(&device->common);

404 
	}
}

406 
ölöe
 
	$£ns‹s_d©a_›í
(c⁄° 
hw_moduÀ_t
* 
moduÀ
,

407 
£ns‹s_d©a_devi˚_t
** 
devi˚
) {

408  
moduÀ
->
mëhods
->
	`›í
(module,

409 
SENSORS_HARDWARE_DATA
, (
hw_devi˚_t
**)
devi˚
);

410 
	}
}

412 
ölöe
 
	$£ns‹s_d©a_˛o£
(
£ns‹s_d©a_devi˚_t
* 
devi˚
) {

413  
devi˚
->
comm⁄
.
	`˛o£
(&device->common);

414 
	}
}

417 
	g__END_DECLS


	@jni/include/include/hardware_legacy/AudioHardwareBase.h

17 #i‚de‡
ANDROID_AUDIO_HARDWARE_BASE_H


18 
	#ANDROID_AUDIO_HARDWARE_BASE_H


	)

20 
	~"h¨dw¨e_Àgacy/AudioH¨dw¨eI¡îÁ˚.h
"

23 
«me•a˚
 
	g™droid
 {

31 ˛as†
	cAudioH¨dw¨eBa£
 : 
public
 
AudioH¨dw¨eI¡îÁ˚


33 
public
:

34 
AudioH¨dw¨eBa£
();

35 
	gvútuÆ
 ~
AudioH¨dw¨eBa£
() { }

42 
vútuÆ
 
°©us_t
 
£tMode
(
mode
);

44 
vútuÆ
 
°©us_t
 
£tP¨amëîs
(c⁄° 
Såög8
& 
keyVÆuePaús
);

45 
vútuÆ
 
Såög8
 
gëP¨amëîs
(c⁄° Såög8& 
keys
);

47 
vútuÆ
 
size_t
 
gëI≈utBuf„rSize
(
uöt32_t
 
ßm∂eR©e
, 
f‹m©
, 
ch™√lCou¡
);

50 
vútuÆ
 
°©us_t
 
dumpSèã
(
fd
, c⁄° 
Ve˘‹
<
Såög16
>& 
¨gs
);

52 
	g¥Ÿe˘ed
:

53 
mMode
;

	@jni/include/include/hardware_legacy/AudioHardwareInterface.h

17 #i‚de‡
ANDROID_AUDIO_HARDWARE_INTERFACE_H


18 
	#ANDROID_AUDIO_HARDWARE_INTERFACE_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	~<utûs/Eº‹s.h
>

24 
	~<utûs/Ve˘‹.h
>

25 
	~<utûs/Såög16.h
>

26 
	~<utûs/Såög8.h
>

28 
	~<medü/IAudioFlögî.h
>

29 
	~"medü/AudioSy°em.h
"

32 
«me•a˚
 
	g™droid
 {

41 ˛as†
	cAudioSåómOut
 {

42 
	gpublic
:

43 
vútuÆ
 ~
AudioSåómOut
() = 0;

46 
vútuÆ
 
uöt32_t
 
ßm∂eR©e
() const = 0;

49 
vútuÆ
 
size_t
 
buf„rSize
() const = 0;

54 
vútuÆ
 
uöt32_t
 
ch™√ls
() const = 0;

60 
vútuÆ
 
f‹m©
() const = 0;

65 
uöt32_t
 
‰ameSize
(Ëc⁄° {  
	gAudioSy°em
::
p›Cou¡
(
ch™√ls
())*((
f‹m©
()==
AudioSy°em
::
PCM_16_BIT
)?(
öt16_t
):(
öt8_t
)); }

70 
vútuÆ
 
uöt32_t
 
œãncy
() const = 0;

79 
vútuÆ
 
°©us_t
 
£tVﬁume
(
À·
, 
right
) = 0;

82 
vútuÆ
 
ssize_t
 
wrôe
(c⁄° * 
buf„r
, 
size_t
 
byãs
) = 0;

88 
vútuÆ
 
°©us_t
 
°™dby
() = 0;

91 
vútuÆ
 
°©us_t
 
dump
(
fd
, c⁄° 
Ve˘‹
<
Såög16
>& 
¨gs
) = 0;

99 
vútuÆ
 
°©us_t
 
£tP¨amëîs
(c⁄° 
Såög8
& 
keyVÆuePaús
) = 0;

100 
vútuÆ
 
Såög8
 
gëP¨amëîs
(c⁄° Såög8& 
keys
) = 0;

104 
vútuÆ
 
°©us_t
 
gëRídîPosôi⁄
(
uöt32_t
 *
d•Fømes
) = 0;

112 ˛as†
	cAudioSåómIn
 {

113 
	gpublic
:

114 
vútuÆ
 ~
AudioSåómIn
() = 0;

117 
vútuÆ
 
uöt32_t
 
ßm∂eR©e
() const = 0;

120 
vútuÆ
 
size_t
 
buf„rSize
() const = 0;

123 
vútuÆ
 
uöt32_t
 
ch™√ls
() const = 0;

129 
vútuÆ
 
f‹m©
() const = 0;

134 
uöt32_t
 
‰ameSize
(Ëc⁄° {  
	gAudioSy°em
::
p›Cou¡
(
ch™√ls
())*((
f‹m©
()==
AudioSy°em
::
PCM_16_BIT
)?(
öt16_t
):(
öt8_t
)); }

138 
vútuÆ
 
°©us_t
 
£tGaö
(
gaö
) = 0;

141 
vútuÆ
 
ssize_t
 
ªad
(* 
buf„r
, ssize_à
byãs
) = 0;

144 
vútuÆ
 
°©us_t
 
dump
(
fd
, c⁄° 
Ve˘‹
<
Såög16
>& 
¨gs
) = 0;

150 
vútuÆ
 
°©us_t
 
°™dby
() = 0;

158 
vútuÆ
 
°©us_t
 
£tP¨amëîs
(c⁄° 
Såög8
& 
keyVÆuePaús
) = 0;

159 
vútuÆ
 
Såög8
 
gëP¨amëîs
(c⁄° Såög8& 
keys
) = 0;

166 
vútuÆ
 
gëI≈utFømesLo°
() const = 0;

182 ˛as†
	cAudioH¨dw¨eI¡îÁ˚


184 
	gpublic
:

185 
vútuÆ
 ~
AudioH¨dw¨eI¡îÁ˚
() {}

191 
vútuÆ
 
°©us_t
 
öôCheck
() = 0;

194 
vútuÆ
 
°©us_t
 
£tVoi˚Vﬁume
(
vﬁume
) = 0;

201 
vútuÆ
 
°©us_t
 
£tMa°îVﬁume
(
vﬁume
) = 0;

208 
vútuÆ
 
°©us_t
 
£tMode
(
mode
) = 0;

211 
vútuÆ
 
°©us_t
 
£tMicMuã
(
boﬁ
 
°©e
) = 0;

212 
vútuÆ
 
°©us_t
 
gëMicMuã
(
boﬁ
* 
°©e
) = 0;

215 
vútuÆ
 
°©us_t
 
£tP¨amëîs
(c⁄° 
Såög8
& 
keyVÆuePaús
) = 0;

216 
vútuÆ
 
Såög8
 
gëP¨amëîs
(c⁄° Såög8& 
keys
) = 0;

220 
vútuÆ
 
size_t
 
gëI≈utBuf„rSize
(
uöt32_t
 
ßm∂eR©e
, 
f‹m©
, 
ch™√lCou¡
) = 0;

223 
vútuÆ
 
AudioSåómOut
* 
›íOuçutSåóm
(

224 
uöt32_t
 
devi˚s
,

225 *
f‹m©
=0,

226 
uöt32_t
 *
ch™√ls
=0,

227 
uöt32_t
 *
ßm∂eR©e
=0,

228 
°©us_t
 *
°©us
=0) = 0;

229 
vútuÆ
 
˛o£OuçutSåóm
(
AudioSåómOut
* 
out
) = 0;

231 
vútuÆ
 
AudioSåómIn
* 
›íI≈utSåóm
(

232 
uöt32_t
 
devi˚s
,

233 *
f‹m©
,

234 
uöt32_t
 *
ch™√ls
,

235 
uöt32_t
 *
ßm∂eR©e
,

236 
°©us_t
 *
°©us
,

237 
AudioSy°em
::
audio_ö_acou°ics
 
acou°ics
) = 0;

238 
vútuÆ
 
˛o£I≈utSåóm
(
AudioSåómIn
* 
ö
) = 0;

241 
vútuÆ
 
°©us_t
 
dumpSèã
(
fd
, c⁄° 
Ve˘‹
<
Såög16
>& 
¨gs
) = 0;

243 
AudioH¨dw¨eI¡îÁ˚
* 
¸óã
();

245 
	g¥Ÿe˘ed
:

247 
vútuÆ
 
°©us_t
 
dump
(
fd
, c⁄° 
Ve˘‹
<
Såög16
>& 
¨gs
) = 0;

252 "C" 
AudioH¨dw¨eI¡îÁ˚
* 
¸óãAudioH¨dw¨e
();

	@jni/include/include/hardware_legacy/AudioPolicyInterface.h

17 #i‚de‡
ANDROID_AUDIOPOLICYINTERFACE_H


18 
	#ANDROID_AUDIOPOLICYINTERFACE_H


	)

20 
	~<medü/AudioSy°em.h
>

21 
	~<medü/T⁄eGíî©‹.h
>

22 
	~<utûs/Såög8.h
>

24 
«me•a˚
 
	g™droid
 {

55 ˛as†
	cAudioPﬁicyI¡îÁ˚


58 
	gpublic
:

59 
vútuÆ
 ~
AudioPﬁicyI¡îÁ˚
() {}

65 
vútuÆ
 
°©us_t
 
£tDevi˚C⁄√˘i⁄Sèã
(
AudioSy°em
::
audio_devi˚s
 
devi˚
,

66 
AudioSy°em
::
devi˚_c⁄√˘i⁄_°©e
 
°©e
,

67 c⁄° *
devi˚_addªss
) = 0;

69 
vútuÆ
 
	gAudioSy°em
::
devi˚_c⁄√˘i⁄_°©e
 
gëDevi˚C⁄√˘i⁄Sèã
(
AudioSy°em
::
audio_devi˚s
 
devi˚
,

70 c⁄° *
devi˚_addªss
) = 0;

72 
vútuÆ
 
£tPh⁄eSèã
(
°©e
) = 0;

74 
vútuÆ
 
£tRögîMode
(
uöt32_t
 
mode
, uöt32_à
mask
) = 0;

76 
vútuÆ
 
£tF‹˚U£
(
AudioSy°em
::
f‹˚_u£
 
ußge
, AudioSy°em::
f‹˚d_c⁄fig
 
c⁄fig
) = 0;

78 
vútuÆ
 
	gAudioSy°em
::
f‹˚d_c⁄fig
 
gëF‹˚U£
(
AudioSy°em
::
f‹˚_u£
 
ußge
) = 0;

80 
vútuÆ
 
£tSy°emPr›îty
(c⁄° * 
¥›îty
, c⁄° * 
vÆue
) = 0;

88 
vútuÆ
 
audio_io_h™dÀ_t
 
gëOuçut
(
AudioSy°em
::
°ªam_ty≥
 
°ªam
,

89 
uöt32_t
 
ßm∂ögR©e
 = 0,

90 
uöt32_t
 
f‹m©
 = 
AudioSy°em
::
FORMAT_DEFAULT
,

91 
uöt32_t
 
ch™√ls
 = 0,

92 
AudioSy°em
::
ouçut_Êags
 
Êags
 = AudioSy°em::
OUTPUT_FLAG_INDIRECT
) = 0;

94 
vútuÆ
 
°©us_t
 
°¨tOuçut
(
audio_io_h™dÀ_t
 
ouçut
, 
AudioSy°em
::
°ªam_ty≥
 
°ªam
) = 0;

96 
vútuÆ
 
°©us_t
 
°›Ouçut
(
audio_io_h™dÀ_t
 
ouçut
, 
AudioSy°em
::
°ªam_ty≥
 
°ªam
) = 0;

98 
vútuÆ
 
ªÀa£Ouçut
(
audio_io_h™dÀ_t
 
ouçut
) = 0;

101 
vútuÆ
 
audio_io_h™dÀ_t
 
gëI≈ut
(
öputSour˚
,

102 
uöt32_t
 
ßm∂ögR©e
 = 0,

103 
uöt32_t
 
F‹m©
 = 
AudioSy°em
::
FORMAT_DEFAULT
,

104 
uöt32_t
 
ch™√ls
 = 0,

105 
AudioSy°em
::
audio_ö_acou°ics
 
acou°ics
 = (AudioSystem::audio_in_acoustics)0) = 0;

107 
vútuÆ
 
°©us_t
 
°¨tI≈ut
(
audio_io_h™dÀ_t
 
öput
) = 0;

109 
vútuÆ
 
°©us_t
 
°›I≈ut
(
audio_io_h™dÀ_t
 
öput
) = 0;

111 
vútuÆ
 
ªÀa£I≈ut
(
audio_io_h™dÀ_t
 
öput
) = 0;

118 
vútuÆ
 
öôSåómVﬁume
(
AudioSy°em
::
°ªam_ty≥
 
°ªam
,

119 
ödexMö
,

120 
ödexMax
) = 0;

123 
vútuÆ
 
°©us_t
 
£tSåómVﬁumeIndex
(
AudioSy°em
::
°ªam_ty≥
 
°ªam
, 
ödex
) = 0;

125 
vútuÆ
 
°©us_t
 
gëSåómVﬁumeIndex
(
AudioSy°em
::
°ªam_ty≥
 
°ªam
, *
ödex
) = 0;

128 
vútuÆ
 
°©us_t
 
dump
(
fd
) = 0;

133 ˛as†
	cAudioPﬁicyClõ¡I¡îÁ˚


135 
	gpublic
:

136 
vútuÆ
 ~
AudioPﬁicyClõ¡I¡îÁ˚
() {}

146 
vútuÆ
 
audio_io_h™dÀ_t
 
›íOuçut
(
uöt32_t
 *
pDevi˚s
,

147 
uöt32_t
 *
pSam∂ögR©e
,

148 
uöt32_t
 *
pF‹m©
,

149 
uöt32_t
 *
pCh™√ls
,

150 
uöt32_t
 *
pL©ícyMs
,

151 
AudioSy°em
::
ouçut_Êags
 
Êags
) = 0;

154 
vútuÆ
 
audio_io_h™dÀ_t
 
›íDu∂iˇãOuçut
◊udio_io_h™dÀ_à
ouçut1
,áudio_io_h™dÀ_à
ouçut2
) = 0;

156 
vútuÆ
 
°©us_t
 
˛o£Ouçut
(
audio_io_h™dÀ_t
 
ouçut
) = 0;

159 
vútuÆ
 
°©us_t
 
su•ídOuçut
(
audio_io_h™dÀ_t
 
ouçut
) = 0;

161 
vútuÆ
 
°©us_t
 
ª°‹eOuçut
(
audio_io_h™dÀ_t
 
ouçut
) = 0;

168 
vútuÆ
 
audio_io_h™dÀ_t
 
›íI≈ut
(
uöt32_t
 *
pDevi˚s
,

169 
uöt32_t
 *
pSam∂ögR©e
,

170 
uöt32_t
 *
pF‹m©
,

171 
uöt32_t
 *
pCh™√ls
,

172 
uöt32_t
 
acou°ics
) = 0;

174 
vútuÆ
 
°©us_t
 
˛o£I≈ut
(
audio_io_h™dÀ_t
 
öput
) = 0;

181 
vútuÆ
 
°©us_t
 
£tSåómVﬁume
(
AudioSy°em
::
°ªam_ty≥
 
°ªam
, 
vﬁume
, 
audio_io_h™dÀ_t
 
ouçut
, 
dñayMs
 = 0) = 0;

184 
vútuÆ
 
°©us_t
 
£tSåómOuçut
(
AudioSy°em
::
°ªam_ty≥
 
°ªam
, 
audio_io_h™dÀ_t
 
ouçut
) = 0;

187 
vútuÆ
 
£tP¨amëîs
(
audio_io_h™dÀ_t
 
ioH™dÀ
, c⁄° 
Såög8
& 
keyVÆuePaús
, 
dñayMs
 = 0) = 0;

189 
vútuÆ
 
Såög8
 
gëP¨amëîs
(
audio_io_h™dÀ_t
 
ioH™dÀ
, c⁄° Såög8& 
keys
) = 0;

193 
vútuÆ
 
°©us_t
 
°¨tT⁄e
(
T⁄eGíî©‹
::
t⁄e_ty≥
 
t⁄e
, 
AudioSy°em
::
°ªam_ty≥
 
°ªam
) = 0;

194 
vútuÆ
 
°©us_t
 
°›T⁄e
() = 0;

197 
vútuÆ
 
°©us_t
 
£tVoi˚Vﬁume
(
vﬁume
, 
dñayMs
 = 0) = 0;

200 "C" 
AudioPﬁicyI¡îÁ˚
* 
¸óãAudioPﬁicyM™agî
(
AudioPﬁicyClõ¡I¡îÁ˚
 *
˛õ¡I¡îÁ˚
);

201 "C" 
de°royAudioPﬁicyM™agî
(
AudioPﬁicyI¡îÁ˚
 *
öãrÁ˚
);

	@jni/include/include/hardware_legacy/AudioPolicyManagerBase.h

18 
	~<°döt.h
>

19 
	~<sys/ty≥s.h
>

20 
	~<utûs/Timîs.h
>

21 
	~<utûs/Eº‹s.h
>

22 
	~<utûs/KeyedVe˘‹.h
>

23 
	~<h¨dw¨e_Àgacy/AudioPﬁicyI¡îÁ˚.h
>

26 
«me•a˚
 
	g™droid
 {

30 
	#MAX_DEVICE_ADDRESS_LEN
 20

	)

32 
	#SONIFICATION_HEADSET_VOLUME_FACTOR
 0.5

	)

34 
	#SONIFICATION_HEADSET_VOLUME_MIN
 0.016

	)

37 
	#SONIFICATION_HEADSET_MUSIC_DELAY
 5

	)

40 
	#MUTE_TIME_MS
 2000

	)

42 
	#NUM_TEST_OUTPUTS
 5

	)

53 
˛ass
 
	gAudioPﬁicyM™agîBa£
: 
public
 
AudioPﬁicyI¡îÁ˚


54 #ifde‡
AUDIO_POLICY_TEST


55 , 
public
 
	gThªad


59 
	gpublic
:

60 
AudioPﬁicyM™agîBa£
(
AudioPﬁicyClõ¡I¡îÁ˚
 *
˛õ¡I¡îÁ˚
);

61 
	gvútuÆ
 ~
AudioPﬁicyM™agîBa£
();

64 
vútuÆ
 
°©us_t
 
£tDevi˚C⁄√˘i⁄Sèã
(
AudioSy°em
::
audio_devi˚s
 
devi˚
,

65 
AudioSy°em
::
devi˚_c⁄√˘i⁄_°©e
 
°©e
,

66 c⁄° *
devi˚_addªss
);

67 
vútuÆ
 
	gAudioSy°em
::
devi˚_c⁄√˘i⁄_°©e
 
gëDevi˚C⁄√˘i⁄Sèã
(
AudioSy°em
::
audio_devi˚s
 
devi˚
,

68 c⁄° *
devi˚_addªss
);

69 
vútuÆ
 
£tPh⁄eSèã
(
°©e
);

70 
vútuÆ
 
£tRögîMode
(
uöt32_t
 
mode
, uöt32_à
mask
);

71 
vútuÆ
 
£tF‹˚U£
(
AudioSy°em
::
f‹˚_u£
 
ußge
, AudioSy°em::
f‹˚d_c⁄fig
 
c⁄fig
);

72 
vútuÆ
 
	gAudioSy°em
::
f‹˚d_c⁄fig
 
gëF‹˚U£
(
AudioSy°em
::
f‹˚_u£
 
ußge
);

73 
vútuÆ
 
£tSy°emPr›îty
(c⁄° * 
¥›îty
, c⁄° * 
vÆue
);

74 
vútuÆ
 
audio_io_h™dÀ_t
 
gëOuçut
(
AudioSy°em
::
°ªam_ty≥
 
°ªam
,

75 
uöt32_t
 
ßm∂ögR©e
,

76 
uöt32_t
 
f‹m©
,

77 
uöt32_t
 
ch™√ls
,

78 
AudioSy°em
::
ouçut_Êags
 
Êags
);

79 
vútuÆ
 
°©us_t
 
°¨tOuçut
(
audio_io_h™dÀ_t
 
ouçut
, 
AudioSy°em
::
°ªam_ty≥
 
°ªam
);

80 
vútuÆ
 
°©us_t
 
°›Ouçut
(
audio_io_h™dÀ_t
 
ouçut
, 
AudioSy°em
::
°ªam_ty≥
 
°ªam
);

81 
vútuÆ
 
ªÀa£Ouçut
(
audio_io_h™dÀ_t
 
ouçut
);

82 
vútuÆ
 
audio_io_h™dÀ_t
 
gëI≈ut
(
öputSour˚
,

83 
uöt32_t
 
ßm∂ögR©e
,

84 
uöt32_t
 
f‹m©
,

85 
uöt32_t
 
ch™√ls
,

86 
AudioSy°em
::
audio_ö_acou°ics
 
acou°ics
);

88 
vútuÆ
 
°©us_t
 
°¨tI≈ut
(
audio_io_h™dÀ_t
 
öput
);

90 
vútuÆ
 
°©us_t
 
°›I≈ut
(
audio_io_h™dÀ_t
 
öput
);

91 
vútuÆ
 
ªÀa£I≈ut
(
audio_io_h™dÀ_t
 
öput
);

92 
vútuÆ
 
öôSåómVﬁume
(
AudioSy°em
::
°ªam_ty≥
 
°ªam
,

93 
ödexMö
,

94 
ödexMax
);

95 
vútuÆ
 
°©us_t
 
£tSåómVﬁumeIndex
(
AudioSy°em
::
°ªam_ty≥
 
°ªam
, 
ödex
);

96 
vútuÆ
 
°©us_t
 
gëSåómVﬁumeIndex
(
AudioSy°em
::
°ªam_ty≥
 
°ªam
, *
ödex
);

98 
vútuÆ
 
°©us_t
 
dump
(
fd
);

100 
	g¥Ÿe˘ed
:

102 
	eroutög_°øãgy
 {

103 
STRATEGY_MEDIA
,

104 
	gSTRATEGY_PHONE
,

105 
	gSTRATEGY_SONIFICATION
,

106 
	gSTRATEGY_DTMF
,

107 
	gNUM_STRATEGIES


112 ˛as†
	cAudioOuçutDes¸ùt‹


114 
	gpublic
:

115 
AudioOuçutDes¸ùt‹
();

117 
°©us_t
 
dump
(
fd
);

119 
uöt32_t
 
devi˚
();

120 
ch™geRefCou¡
(
AudioSy°em
::
°ªam_ty≥
, 
dñè
);

121 
uöt32_t
 
ªfCou¡
();

122 
uöt32_t
 
°øãgyRefCou¡
(
routög_°øãgy
 
°øãgy
);

123 
boﬁ
 
isU£dBySå©egy
(
routög_°øãgy
 
°øãgy
Ë{  (
°øãgyRefCou¡
(strategy) != 0);}

124 
boﬁ
 
isDu∂iˇãd
(Ë{  (
	gmOuçut1
 !
NULL
 && 
mOuçut2
 != NULL); }

126 
audio_io_h™dÀ_t
 
	gmId
;

127 
uöt32_t
 
	gmSam∂ögR©e
;

128 
uöt32_t
 
	gmF‹m©
;

129 
uöt32_t
 
	gmCh™√ls
;

130 
uöt32_t
 
	gmL©ícy
;

131 
	gAudioSy°em
::
ouçut_Êags
 
mFœgs
;

132 
uöt32_t
 
	gmDevi˚
;

133 
uöt32_t
 
	gmRefCou¡
[
AudioSy°em
::
NUM_STREAM_TYPES
];

134 
AudioOuçutDes¸ùt‹
 *
	gmOuçut1
;

135 
AudioOuçutDes¸ùt‹
 *
	gmOuçut2
;

136 
	gmCurVﬁume
[
AudioSy°em
::
NUM_STREAM_TYPES
];

137 
	gmMuãCou¡
[
AudioSy°em
::
NUM_STREAM_TYPES
];

142 ˛as†
	cAudioI≈utDes¸ùt‹


144 
	gpublic
:

145 
AudioI≈utDes¸ùt‹
();

147 
°©us_t
 
dump
(
fd
);

149 
uöt32_t
 
	gmSam∂ögR©e
;

150 
uöt32_t
 
	gmF‹m©
;

151 
uöt32_t
 
	gmCh™√ls
;

152 
	gAudioSy°em
::
audio_ö_acou°ics
 
mAcou°ics
;

153 
uöt32_t
 
	gmDevi˚
;

154 
uöt32_t
 
	gmRefCou¡
;

155 
	gmI≈utSour˚
;

159 ˛as†
	cSåómDes¸ùt‹


161 
	gpublic
:

162 
SåómDes¸ùt‹
()

163 : 
mIndexMö
(0), 
mIndexMax
(1), 
mIndexCur
(1), 
mC™BeMuãd
(
åue
) {}

165 
dump
(* 
buf„r
, 
size_t
 
size
);

167 
	gmIndexMö
;

168 
	gmIndexMax
;

169 
	gmIndexCur
;

170 
boﬁ
 
	gmC™BeMuãd
;

173 
addOuçut
(
audio_io_h™dÀ_t
 
id
, 
AudioOuçutDes¸ùt‹
 *
ouçutDesc
);

176 
routög_°øãgy
 
gëSå©egy
(
AudioSy°em
::
°ªam_ty≥
 
°ªam
);

187 
vútuÆ
 
uöt32_t
 
gëDevi˚F‹Så©egy
(
routög_°øãgy
 
°øãgy
, 
boﬁ
 
‰omCache
 = 
åue
);

189 
£tOuçutDevi˚
(
audio_io_h™dÀ_t
 
ouçut
, 
uöt32_t
 
devi˚
, 
boﬁ
 
f‹˚
 = 
Ál£
, 
dñayMs
 = 0);

191 
vútuÆ
 
uöt32_t
 
gëDevi˚F‹I≈utSour˚
(
öputSour˚
);

193 
audio_io_h™dÀ_t
 
gëA˘iveI≈ut
();

196 
vútuÆ
 
compuãVﬁume
(
°ªam
, 
ödex
, 
audio_io_h™dÀ_t
 
ouçut
, 
uöt32_t
 
devi˚
);

198 
°©us_t
 
checkAndSëVﬁume
(
°ªam
, 
ödex
, 
audio_io_h™dÀ_t
 
ouçut
, 
uöt32_t
 
devi˚
, 
dñayMs
 = 0, 
boﬁ
 
f‹˚
 = 
Ál£
);

200 
≠∂ySåómVﬁumes
(
audio_io_h™dÀ_t
 
ouçut
, 
uöt32_t
 
devi˚
, 
dñayMs
 = 0);

202 
£tSå©egyMuã
(
routög_°øãgy
 
°øãgy
, 
boﬁ
 
⁄
, 
audio_io_h™dÀ_t
 
ouçut
, 
dñayMs
 = 0);

204 
£tSåómMuã
(
°ªam
, 
boﬁ
 
⁄
, 
audio_io_h™dÀ_t
 
ouçut
, 
dñayMs
 = 0);

207 
h™dÀInˇŒS⁄ifiˇti⁄
(
°ªam
, 
boﬁ
 
°¨tög
, boﬁ 
°©eCh™ge
);

209 
vútuÆ
 
boﬁ
 
hasBackMi¸›h⁄e
(Ëc⁄° {  
	gÁl£
; }

211 #ifde‡
WITH_A2DP


213 
vútuÆ
 
boﬁ
 
a2dpU£dF‹S⁄ifiˇti⁄
(Ëc⁄° {  
	gåue
; }

214 
°©us_t
 
h™dÀA2dpC⁄√˘i⁄
(
AudioSy°em
::
audio_devi˚s
 
devi˚
,

215 c⁄° *
devi˚_addªss
);

216 
°©us_t
 
h™dÀA2dpDisc⁄√˘i⁄
(
AudioSy°em
::
audio_devi˚s
 
devi˚
,

217 c⁄° *
devi˚_addªss
);

218 
˛o£A2dpOuçuts
();

223 
checkOuçutF‹Så©egy
(
routög_°øãgy
 
°øãgy
, 
uöt32_t
 &
√wDevi˚
);

225 
checkOuçutF‹AŒSå©egõs
(
uöt32_t
 &
√wDevi˚
);

232 
uöt32_t
 
gëNewDevi˚
(
audio_io_h™dÀ_t
 
ouçut
, 
boﬁ
 
‰omCache
 = 
åue
);

238 
upd©eDevi˚F‹Så©egy
();

242 
vútuÆ
 
boﬁ
 
√edsDúe˘Ouput
(
AudioSy°em
::
°ªam_ty≥
 
°ªam
,

243 
uöt32_t
 
ßm∂ögR©e
,

244 
uöt32_t
 
f‹m©
,

245 
uöt32_t
 
ch™√ls
,

246 
AudioSy°em
::
ouçut_Êags
 
Êags
,

247 
uöt32_t
 
devi˚
);

248 #ifde‡
AUDIO_POLICY_TEST


249 
vútuÆ
 
boﬁ
 
thªadLo›
();

250 
exô
();

251 
ã°OuçutIndex
(
audio_io_h™dÀ_t
 
ouçut
);

254 
AudioPﬁicyClõ¡I¡îÁ˚
 *
	gmpClõ¡I¡îÁ˚
;

255 
audio_io_h™dÀ_t
 
	gmH¨dw¨eOuçut
;

256 
audio_io_h™dÀ_t
 
	gmA2dpOuçut
;

257 
audio_io_h™dÀ_t
 
	gmDu∂iˇãdOuçut
;

259 
	gKeyedVe˘‹
<
	gaudio_io_h™dÀ_t
, 
	gAudioOuçutDes¸ùt‹
 *> 
	gmOuçuts
;

260 
	gKeyedVe˘‹
<
	gaudio_io_h™dÀ_t
, 
	gAudioI≈utDes¸ùt‹
 *> 
	gmI≈uts
;

261 
uöt32_t
 
	gmAvaûabÀOuçutDevi˚s
;

262 
uöt32_t
 
	gmAvaûabÀI≈utDevi˚s
;

263 
	gmPh⁄eSèã
;

264 
uöt32_t
 
	gmRögîMode
;

265 
	gAudioSy°em
::
f‹˚d_c⁄fig
 
mF‹˚U£
[
AudioSy°em
::
NUM_FORCE_USE
];

267 
SåómDes¸ùt‹
 
	gmSåóms
[
AudioSy°em
::
NUM_STREAM_TYPES
];

268 
Såög8
 
	gmA2dpDevi˚Addªss
;

269 
Såög8
 
	gmScoDevi˚Addªss
;

270 
n£cs_t
 
	gmMusicSt›Time
;

271 
boﬁ
 
	gmLimôRögt⁄eVﬁume
;

272 
uöt32_t
 
	gmDevi˚F‹Så©egy
[
NUM_STRATEGIES
];

274 #ifde‡
AUDIO_POLICY_TEST


275 
Muãx
 
	gmLock
;

276 
C⁄dôi⁄
 
	gmWaôW‹kCV
;

278 
	gmCurOuçut
;

279 
boﬁ
 
	gmDúe˘Ouçut
;

280 
audio_io_h™dÀ_t
 
	gmTe°Ouçuts
[
NUM_TEST_OUTPUTS
];

281 
	gmTe°I≈ut
;

282 
uöt32_t
 
	gmTe°Devi˚
;

283 
uöt32_t
 
	gmTe°Sam∂ögR©e
;

284 
uöt32_t
 
	gmTe°F‹m©
;

285 
uöt32_t
 
	gmTe°Ch™√ls
;

286 
uöt32_t
 
	gmTe°L©ícyMs
;

	@jni/include/include/hardware_legacy/IMountService.h

18 #i‚de‡
ANDROID_HARDWARE_IMOUNTSERVICE_H


19 
	#ANDROID_HARDWARE_IMOUNTSERVICE_H


	)

21 
	~<bödî/II¡îÁ˚.h
>

22 
	~<utûs/Såög16.h
>

24 
«me•a˚
 
	g™droid
 {

28 ˛as†
	cIMou¡Sîvi˚
 : 
public
 
II¡îÁ˚


30 
public
:

31 c⁄° 
O≥øti⁄Suc˚eded
 = 0;

32 c⁄° 
	gO≥øti⁄FaûedI¡î«lEº‹
 = -1;

33 c⁄° 
	gO≥øti⁄FaûedNoMedü
 = -2;

34 c⁄° 
	gO≥øti⁄FaûedMedüBœnk
 = -3;

35 c⁄° 
	gO≥øti⁄FaûedMedüC‹ru±
 = -4;

36 c⁄° 
	gO≥øti⁄FaûedVﬁumeNŸMou¡ed
 = -5;

39 
	gpublic
:

40 
DECLARE_META_INTERFACE
(
Mou¡Sîvi˚
);

42 
vútuÆ
 
gëSh¨eMëhodLi°
() = 0;

43 
vútuÆ
 
boﬁ
 
gëSh¨eMëhodAvaûabÀ
(
Såög16
 
mëhod
) = 0;

44 
vútuÆ
 
sh¨eVﬁume
(
Såög16
 
∑th
, Såög16 
mëhod
) = 0;

45 
vútuÆ
 
unsh¨eVﬁume
(
Såög16
 
∑th
, Såög16 
mëhod
) = 0;

46 
vútuÆ
 
boﬁ
 
gëVﬁumeSh¨ed
(
Såög16
 
∑th
, Såög16 
mëhod
) = 0;

47 
vútuÆ
 
mou¡Vﬁume
(
Såög16
 
∑th
) = 0;

48 
vútuÆ
 
unmou¡Vﬁume
(
Såög16
 
∑th
) = 0;

49 
vútuÆ
 
f‹m©Vﬁume
(
Såög16
 
∑th
) = 0;

50 
vútuÆ
 
Såög16
 
gëVﬁumeSèã
(Såög16 
mou¡Poöt
) = 0;

51 
vútuÆ
 
¸óãSecuªC⁄èöî
(
Såög16
 
id
, 
sizeMb
, Såög16 
f°y≥
, Såög16 
key
, 
ow√rUid
) = 0;

52 
vútuÆ
 
föÆizeSecuªC⁄èöî
(
Såög16
 
id
) = 0;

53 
vútuÆ
 
de°roySecuªC⁄èöî
(
Såög16
 
id
) = 0;

54 
vútuÆ
 
mou¡SecuªC⁄èöî
(
Såög16
 
id
, Såög16 
key
, 
ow√rUid
) = 0;

55 
vútuÆ
 
unmou¡SecuªC⁄èöî
(
Såög16
 
id
) = 0;

56 
vútuÆ
 
ª«meSecuªC⁄èöî
(
Såög16
 
ﬁdId
, Såög16 
√wId
) = 0;

57 
vútuÆ
 
Såög16
 
gëSecuªC⁄èöîP©h
(Såög16 
id
) = 0;

58 
vútuÆ
 
gëSecuªC⁄èöîLi°
() = 0;

59 
vútuÆ
 
shutdown
() = 0;

	@jni/include/include/hardware_legacy/gps.h

17 #i‚de‡
_HARDWARE_GPS_H


18 
	#_HARDWARE_GPS_H


	)

20 
	~<°döt.h
>

21 
	~<°dlib.h
>

23 #i‡
__˝lu•lus


28 
öt64_t
 
	tGpsUtcTime
;

31 
	#GPS_MAX_SVS
 32

	)

34 
uöt16_t
 
	tGpsPosôi⁄Mode
;

38 
	#GPS_POSITION_MODE_STANDALONE
 0

	)

40 
	#GPS_POSITION_MODE_MS_BASED
 1

	)

42 
	#GPS_POSITION_MODE_MS_ASSISTED
 2

	)

45 
uöt16_t
 
	tGpsSètusVÆue
;

49 
	#GPS_STATUS_NONE
 0

	)

51 
	#GPS_STATUS_SESSION_BEGIN
 1

	)

53 
	#GPS_STATUS_SESSION_END
 2

	)

55 
	#GPS_STATUS_ENGINE_ON
 3

	)

57 
	#GPS_STATUS_ENGINE_OFF
 4

	)

60 
uöt16_t
 
	tGpsLoˇti⁄Fœgs
;

64 
	#GPS_LOCATION_HAS_LAT_LONG
 0x0001

	)

66 
	#GPS_LOCATION_HAS_ALTITUDE
 0x0002

	)

68 
	#GPS_LOCATION_HAS_SPEED
 0x0004

	)

70 
	#GPS_LOCATION_HAS_BEARING
 0x0008

	)

72 
	#GPS_LOCATION_HAS_ACCURACY
 0x0010

	)

76 
uöt16_t
 
	tGpsAidögD©a
;

79 
	#GPS_DELETE_EPHEMERIS
 0x0001

	)

80 
	#GPS_DELETE_ALMANAC
 0x0002

	)

81 
	#GPS_DELETE_POSITION
 0x0004

	)

82 
	#GPS_DELETE_TIME
 0x0008

	)

83 
	#GPS_DELETE_IONO
 0x0010

	)

84 
	#GPS_DELETE_UTC
 0x0020

	)

85 
	#GPS_DELETE_HEALTH
 0x0040

	)

86 
	#GPS_DELETE_SVDIR
 0x0080

	)

87 
	#GPS_DELETE_SVSTEER
 0x0100

	)

88 
	#GPS_DELETE_SADATA
 0x0200

	)

89 
	#GPS_DELETE_RTI
 0x0400

	)

90 
	#GPS_DELETE_CELLDB_INFO
 0x8000

	)

91 
	#GPS_DELETE_ALL
 0xFFFF

	)

94 
uöt16_t
 
	tAGpsTy≥
;

95 
	#AGPS_TYPE_SUPL
 1

	)

96 
	#AGPS_TYPE_C2K
 2

	)

100 
uöt16_t
 
	tAGpsSètusVÆue
;

102 
	#GPS_REQUEST_AGPS_DATA_CONN
 1

	)

104 
	#GPS_RELEASE_AGPS_DATA_CONN
 2

	)

106 
	#GPS_AGPS_DATA_CONNECTED
 3

	)

108 
	#GPS_AGPS_DATA_CONN_DONE
 4

	)

110 
	#GPS_AGPS_DATA_CONN_FAILED
 5

	)

115 
	#GPS_XTRA_INTERFACE
 "gps-xåa"

	)

120 
	#GPS_DEBUG_INTERFACE
 "gps-debug"

	)

125 
	#AGPS_INTERFACE
 "agps"

	)

130 
	#GPS_PRIVACY_INTERFACE
 "¥ivacy"

	)

135 
uöt16_t
 
Êags
;

137 
œtôude
;

139 
l⁄gôude
;

142 
Ætôude
;

144 
•ìd
;

146 
bórög
;

148 
accuøcy
;

150 
GpsUtcTime
 
time°amp
;

151 } 
	tGpsLoˇti⁄
;

155 
GpsSètusVÆue
 
°©us
;

156 } 
	tGpsSètus
;

161 
¥n
;

163 
¢r
;

165 
ñev©i⁄
;

167 
azimuth
;

168 } 
	tGpsSvInfo
;

173 
num_svs
;

176 
GpsSvInfo
 
sv_li°
[
GPS_MAX_SVS
];

181 
uöt32_t
 
ïhemîis_mask
;

186 
uöt32_t
 
Æm™ac_mask
;

192 
uöt32_t
 
u£d_ö_fix_mask
;

193 } 
	tGpsSvSètus
;

196 (* 
gps_loˇti⁄_ˇŒback
)(
	tGpsLoˇti⁄
* 
	tloˇti⁄
);

199 (* 
gps_°©us_ˇŒback
)(
	tGpsSètus
* 
	t°©us
);

202 (* 
gps_sv_°©us_ˇŒback
)(
	tGpsSvSètus
* 
	tsv_öfo
);

205 (* 
gps_nmó_ˇŒback
)(
	tGpsUtcTime
 
	ttime°amp
, c⁄° * 
	tnmó
, 
	tÀngth
);

209 
gps_loˇti⁄_ˇŒback
 
loˇti⁄_cb
;

210 
gps_°©us_ˇŒback
 
°©us_cb
;

211 
gps_sv_°©us_ˇŒback
 
sv_°©us_cb
;

212 
gps_nmó_ˇŒback
 
nmó_cb
;

213 } 
	tGpsCÆlbacks
;

222 (*
öô
)–
GpsCÆlbacks
* 
ˇŒbacks
 );

225 (*
°¨t
)( );

228 (*
°›
)( );

231 (*
˛ónup
)( );

234 (*
öje˘_time
)(
GpsUtcTime
 
time
, 
öt64_t
 
timeRe„ªn˚
,

235 
un˚πaöty
);

242 (*
öje˘_loˇti⁄
)(
œtôude
, 
l⁄gôude
, 
accuøcy
);

249 (*
dñëe_aidög_d©a
)(
GpsAidögD©a
 
Êags
);

255 (*
£t_posôi⁄_mode
)(
GpsPosôi⁄Mode
 
mode
, 
fix_‰equícy
);

258 c⁄° * (*
gë_exãnsi⁄
)(c⁄° * 
«me
);

259 } 
	tGpsI¡îÁ˚
;

264 (* 
gps_xåa_dow∆ﬂd_ªque°
)();

268 
gps_xåa_dow∆ﬂd_ªque°
 
dow∆ﬂd_ªque°_cb
;

269 } 
	tGpsXåaCÆlbacks
;

277 (*
öô
)–
GpsXåaCÆlbacks
* 
ˇŒbacks
 );

279 (*
öje˘_xåa_d©a
)–* 
d©a
, 
Àngth
 );

280 } 
	tGpsXåaI¡îÁ˚
;

288 
size_t
 (*
gë_öã∫Æ_°©e
)(* 
buf„r
, size_à
buf„rSize
);

289 } 
	tGpsDebugI¡îÁ˚
;

293 
AGpsTy≥
 
ty≥
;

294 
AGpsSètusVÆue
 
°©us
;

295 } 
	tAGpsSètus
;

298 (* 
agps_°©us_ˇŒback
)(
	tAGpsSètus
* 
	t°©us
);

302 
agps_°©us_ˇŒback
 
°©us_cb
;

303 } 
	tAGpsCÆlbacks
;

312 (*
öô
)–
AGpsCÆlbacks
* 
ˇŒbacks
 );

317 (*
d©a_c⁄n_›í
)–c⁄° * 
≠n
 );

321 (*
d©a_c⁄n_˛o£d
)();

325 (*
d©a_c⁄n_Áûed
)();

329 (*
£t_£rvî
)–
AGpsTy≥
 
ty≥
, c⁄° * 
ho°«me
, 
p‹t
 );

330 } 
	tAGpsI¡îÁ˚
;

338 (*
£t_¥ivacy_lock
)–
íabÀ_lock
 );

339 } 
	tGpsPrivacyI¡îÁ˚
;

342 c⁄° 
GpsI¡îÁ˚
* 
gps_gë_h¨dw¨e_öãrÁ˚
();

347 c⁄° 
GpsI¡îÁ˚
* 
gps_gë_qemu_öãrÁ˚
();

352 c⁄° 
GpsI¡îÁ˚
* 
gps_gë_öãrÁ˚
();

354 #i‡
__˝lu•lus


	@jni/include/include/hardware_legacy/gps_ni.h

17 #i‚de‡
_HARDWARE_GPS_NI_H


18 
	#_HARDWARE_GPS_NI_H


	)

20 
	~<°döt.h
>

22 #i‡
__˝lu•lus


29 
	#GPS_NI_INTERFACE
 "gps-ni"

	)

34 
	#GPS_NI_SHORT_STRING_MAXLEN
 256

	)

35 
	#GPS_NI_LONG_STRING_MAXLEN
 2048

	)

40 
uöt32_t
 
	tGpsNiTy≥
;

41 
	#GPS_NI_TYPE_VOICE
 1

	)

42 
	#GPS_NI_TYPE_UMTS_SUPL
 2

	)

43 
	#GPS_NI_TYPE_UMTS_CTRL_PLANE
 3

	)

48 
uöt32_t
 
	tGpsNiNŸifyFœgs
;

50 
	#GPS_NI_NEED_NOTIFY
 0x0001

	)

52 
	#GPS_NI_NEED_VERIFY
 0x0002

	)

54 
	#GPS_NI_PRIVACY_OVERRIDE
 0x0004

	)

60 
	tGpsU£rRe•⁄£Ty≥
;

61 
	#GPS_NI_RESPONSE_ACCEPT
 1

	)

62 
	#GPS_NI_RESPONSE_DENY
 2

	)

63 
	#GPS_NI_RESPONSE_NORESP
 3

	)

68 
	tGpsNiEncodögTy≥
;

69 
	#GPS_ENC_NONE
 0

	)

70 
	#GPS_ENC_SUPL_GSM_DEFAULT
 1

	)

71 
	#GPS_ENC_SUPL_UTF8
 2

	)

72 
	#GPS_ENC_SUPL_UCS2
 3

	)

73 
	#GPS_ENC_UNKNOWN
 -1

	)

81 
nŸifiˇti⁄_id
;

87 
GpsNiTy≥
 
ni_ty≥
;

92 
GpsNiNŸifyFœgs
 
nŸify_Êags
;

98 
timeout
;

103 
GpsU£rRe•⁄£Ty≥
 
deÁu…_ª•⁄£
;

108 
ªque°‹_id
[
GPS_NI_SHORT_STRING_MAXLEN
];

113 
ãxt
[
GPS_NI_LONG_STRING_MAXLEN
];

118 
GpsNiEncodögTy≥
 
ªque°‹_id_ícodög
;

123 
GpsNiEncodögTy≥
 
ãxt_ícodög
;

130 
exåas
[
GPS_NI_LONG_STRING_MAXLEN
];

132 } 
	tGpsNiNŸifiˇti⁄
;

135 (*
gps_ni_nŸify_ˇŒback
)(
	tGpsNiNŸifiˇti⁄
 *
	tnŸifiˇti⁄
);

143 
gps_ni_nŸify_ˇŒback
 
nŸify_cb
;

144 } 
	tGpsNiCÆlbacks
;

152 (*
öô
Ë(
GpsNiCÆlbacks
 *
ˇŒbacks
);

155 (*
ª•⁄d
Ë(
nŸif_id
, 
GpsU£rRe•⁄£Ty≥
 
u£r_ª•⁄£
);

156 } 
	tGpsNiI¡îÁ˚
;

158 #i‡
__˝lu•lus


	@jni/include/include/hardware_legacy/power.h

17 #i‚de‡
_HARDWARE_POWER_H


18 
	#_HARDWARE_POWER_H


	)

20 
	~<°döt.h
>

22 #i‡
__˝lu•lus


27 
PARTIAL_WAKE_LOCK
 = 1,

28 
FULL_WAKE_LOCK
 = 2

33 
acquúe_wake_lock
(
lock
, c⁄° * 
id
);

34 
ªÀa£_wake_lock
(c⁄° * 
id
);

37 
£t_s¸ìn_°©e
(
⁄
);

40 
£t_œ°_u£r_a˘ivôy_timeout
(
öt64_t
 
dñay
);

43 #i‡
__˝lu•lus


	@jni/include/include/hardware_legacy/qemu_tracing.h

17 #i‚de‡
_HARDWARE_QEMU_TRACING_H


18 
	#_HARDWARE_QEMU_TRACING_H


	)

20 #i‡
__˝lu•lus


24 
qemu_°¨t_åacög
();

25 
qemu_°›_åacög
();

26 
qemu_add_m≠pög
(
addr
, c⁄° *
«me
);

27 
qemu_ªmove_m≠pög
(
addr
);

29 #i‡
__˝lu•lus


	@jni/include/include/hardware_legacy/uevent.h

17 #i‚de‡
_HARDWARE_UEVENT_H


18 
	#_HARDWARE_UEVENT_H


	)

20 #i‡
__˝lu•lus


24 
uevít_öô
();

25 
uevít_√xt_evít
(* 
buf„r
, 
buf„r_Àngth
);

27 #i‡
__˝lu•lus


	@jni/include/include/hardware_legacy/vibrator.h

17 #i‚de‡
_HARDWARE_VIBRATOR_H


18 
	#_HARDWARE_VIBRATOR_H


	)

20 #i‡
__˝lu•lus


31 
vibøt‹_⁄
(
timeout_ms
);

38 
vibøt‹_off
();

40 #i‡
__˝lu•lus


	@jni/include/include/hardware_legacy/wifi.h

17 #i‚de‡
_WIFI_H


18 
	#_WIFI_H


	)

20 #i‡
__˝lu•lus


29 
wifi_lﬂd_drivî
();

36 
wifi_u∆ﬂd_drivî
();

43 
wifi_°¨t_suµliˇ¡
();

50 
wifi_°›_suµliˇ¡
();

57 
wifi_c⁄√˘_to_suµliˇ¡
();

64 
wifi_˛o£_suµliˇ¡_c⁄√˘i⁄
();

78 
wifi_waô_f‹_evít
(*
buf
, 
size_t
 
Àn
);

141 
wifi_comm™d
(c⁄° *
comm™d
, *
ª∂y
, 
size_t
 *
ª∂y_Àn
);

159 
do_dh˝_ªque°
(*
ùaddr
, *
g©eway
, *
mask
,

160 *
dns1
, *
dns2
, *
£rvî
, *
Àa£
);

165 c⁄° *
gë_dh˝_îr‹_°rög
();

167 #i‡
__˝lu•lus


	@jni/include/include/nativehelper/AndroidSystemNatives.h

20 #i‚de‡
_NATIVEHELPER_ANDROIDSYSTEMNATIVES


21 
	#_NATIVEHELPER_ANDROIDSYSTEMNATIVES


	)

23 
	~"jni.h
"

25 #ifde‡
__˝lu•lus


33 
jniRegi°îSy°emJavaMëhods
(
JNIEnv
* 
ív
);

39 
ªgi°î_‹g_≠ache_h¨m⁄y_dÆvik_N©iveTe°T¨gë
(
JNIEnv
* 
ív
);

41 
ªgi°î_dÆvik_sy°em_TouchDex
(
JNIEnv
* 
ív
);

43 
ªgi°î_‹g_≠ache_h¨m⁄y_xml_Ex∑tP¨£r
(
JNIEnv
 *
ív
);

45 
ªgi°î_java_io_Fûe
(
JNIEnv
* 
ív
);

46 
ªgi°î_java_io_FûeDes¸ùt‹
(
JNIEnv
* 
ív
);

47 
ªgi°î_java_io_Obje˘OuçutSåóm
(
JNIEnv
* 
ív
);

48 
ªgi°î_java_io_Obje˘I≈utSåóm
(
JNIEnv
* 
ív
);

49 
ªgi°î_java_io_Obje˘SåómCœss
(
JNIEnv
* 
ív
);

51 
ªgi°î_java_œng_Ch¨a˘î
(
JNIEnv
* 
ív
);

52 
ªgi°î_java_œng_DoubÀ
(
JNIEnv
* 
ív
);

53 
ªgi°î_java_œng_Flﬂt
(
JNIEnv
* 
ív
);

54 
ªgi°î_java_œng_M©h
(
JNIEnv
* 
ív
);

55 
ªgi°î_java_œng_Pro˚ssM™agî
(
JNIEnv
* 
ív
);

56 
ªgi°î_java_œng_Såi˘M©h
(
JNIEnv
* 
ív
);

57 
ªgi°î_java_œng_Sy°em
(
JNIEnv
* 
ív
);

59 
ªgi°î_‹g_≠ache_h¨m⁄y_luni_∂©f‹m_OSFûeSy°em
(
JNIEnv
* 
ív
);

60 
ªgi°î_‹g_≠ache_h¨m⁄y_luni_∂©f‹m_OSMem‹y
(
JNIEnv
* 
ív
);

61 
ªgi°î_‹g_≠ache_h¨m⁄y_luni_∂©f‹m_OSNëw‹kSy°em
(
JNIEnv
* 
ív
);

62 
ªgi°î_‹g_≠ache_h¨m⁄y_ãxt_BidiWøµî
(
JNIEnv
 *
ív
);

64 
ªgi°î_‹g_≠ache_h¨m⁄y_x√t_¥ovidî_js£_O≥nSSLSîvîSockëIm∂
(
JNIEnv
 *
ív
);

65 
ªgi°î_‹g_≠ache_h¨m⁄y_x√t_¥ovidî_js£_O≥nSSLSessi⁄Im∂
(
JNIEnv
 *
ív
);

66 
ªgi°î_‹g_≠ache_h¨m⁄y_x√t_¥ovidî_js£_O≥nSSLSockëIm∂
(
JNIEnv
 *
ív
);

67 
ªgi°î_‹g_›ís¶_N©iveBN
(
JNIEnv
 *
ív
);

68 
ªgi°î_‹g_≠ache_h¨m⁄y_x√t_¥ovidî_js£_N©iveCry±o
(
JNIEnv
 *
ív
);

70 
ªgi°î_java_utû_j¨_J¨Fûe
(
JNIEnv
* 
ív
);

71 
ªgi°î_java_utû_zù_AdÀr32
(
JNIEnv
* 
ív
);

72 
ªgi°î_java_utû_zù_CRC32
(
JNIEnv
* 
ív
);

73 
ªgi°î_java_utû_zù_DeÊ©î
(
JNIEnv
* 
ív
);

74 
ªgi°î_java_utû_zù_InÊ©î
(
JNIEnv
* 
ív
);

75 
ªgi°î_java_utû_zù_ZùFûe
(
JNIEnv
* 
ív
);

76 
ªgi°î_java_√t_I√tAddªss
(
JNIEnv
* 
ív
);

77 
ªgi°î_java_√t_Nëw‹kI¡îÁ˚
(
JNIEnv
* 
ív
);

79 
ªgi°î_‹g_≠ache_h¨m⁄y_luni_utû_Êç¨£
(
JNIEnv
 *
ív
);

80 
ªgi°î_‹g_≠ache_h¨m⁄y_luni_utû_NumbîC⁄vît
(
JNIEnv
 *
ív
);

82 
ªgi°î_com_ibm_icu4jni_c⁄vîãrs_N©iveC⁄vîãr
(
JNIEnv
* 
ív
);

83 
ªgi°î_com_ibm_icu4jni_œng_UCh¨a˘î
(
JNIEnv
* 
ív
);

84 
ªgi°î_com_ibm_icu4jni_ãxt_N©iveCﬁœt‹
(
JNIEnv
* 
ív
);

85 
ªgi°î_com_ibm_icu4jni_ãxt_N©iveBªakIãøt‹
(
JNIEnv
* 
ív
);

86 
ªgi°î_com_ibm_icu4jni_ãxt_N©iveDecimÆF‹m©
(
JNIEnv
* 
ív
);

87 
ªgi°î_com_ibm_icu4jni_ªgex_N©iveRegEx
(
JNIEnv
* 
ív
);

88 
ªgi°î_com_ibm_icu4jni_utû_Resour˚s
(
JNIEnv
* 
ív
);

89 
ªgi°î_com_ibm_icu4jni_ãxt_N©iveRBNF
(
JNIEnv
* 
ív
);

91 
ªgi°î_sun_misc_Unß„
(
JNIEnv
* 
ív
);

93 
ªgi°î_SQLôe_D©aba£
(
JNIEnv
* 
ív
);

94 
ªgi°î_SQLôe_Vm
(
JNIEnv
* 
ív
);

95 
ªgi°î_SQLôe_Fun˘i⁄C⁄ãxt
(
JNIEnv
* 
ív
);

96 
ªgi°î_SQLôe_Stmt
(
JNIEnv
* 
ív
);

97 
ªgi°î_SQLôe_Blob
(
JNIEnv
* 
ív
);

99 
ªgi°î_‹g_›ís¶_N©iveBN
(
JNIEnv
* 
ív
);

101 #ifde‡
__˝lu•lus


	@jni/include/include/nativehelper/JNIHelp.h

23 #i‚de‡
_NATIVEHELPER_JNIHELP_H


24 
	#_NATIVEHELPER_JNIHELP_H


	)

26 
	~"jni.h
"

27 
	~"utûs/Log.h
"

28 
	~<uni°d.h
>

30 #i‚de‡
NELEM


31 
	#NELEM
(
x
Ë((Ë((xË/ ((x)[0])))

	)

34 #ifde‡
__˝lu•lus


41 
jniRegi°îN©iveMëhods
(
C_JNIEnv
* 
ív
, c⁄° * 
˛assName
,

42 c⁄° 
JNIN©iveMëhod
* 
gMëhods
, 
numMëhods
);

54 
jniThrowEx˚±i⁄
(
C_JNIEnv
* 
ív
, c⁄° * 
˛assName
, c⁄° * 
msg
);

59 
jniThrowNuŒPoöãrEx˚±i⁄
(
C_JNIEnv
* 
ív
, c⁄° * 
msg
);

64 
jniThrowRu¡imeEx˚±i⁄
(
C_JNIEnv
* 
ív
, c⁄° * 
msg
);

69 
jniThrowIOEx˚±i⁄
(
C_JNIEnv
* 
ív
, 
î∫um
);

77 c⁄° * 
jniSåEº‹
(
î∫um
, * 
buf
, 
size_t
 
buÊí
);

82 
jobje˘
 
jniCª©eFûeDes¸ùt‹
(
C_JNIEnv
* 
ív
, 
fd
);

87 
jniGëFDFromFûeDes¸ùt‹
(
C_JNIEnv
* 
ív
, 
jobje˘
 
fûeDes¸ùt‹
);

92 
jniSëFûeDes¸ùt‹OfFD
(
C_JNIEnv
* 
ív
, 
jobje˘
 
fûeDes¸ùt‹
, 
vÆue
);

94 #ifde‡
__˝lu•lus


103 #i‡
deföed
(
__˝lu•lus
Ë&& !deföed(
JNI_FORCE_C
)

104 
ölöe
 
jniRegi°îN©iveMëhods
(
JNIEnv
* 
ív
, c⁄° * 
˛assName
,

105 c⁄° 
JNIN©iveMëhod
* 
gMëhods
, 
numMëhods
)

107  
jniRegi°îN©iveMëhods
(&
ív
->
fun˘i⁄s
, 
˛assName
, 
gMëhods
,

108 
numMëhods
);

110 
ölöe
 
jniThrowEx˚±i⁄
(
JNIEnv
* 
ív
, c⁄° * 
˛assName
,

111 c⁄° * 
msg
)

113  
jniThrowEx˚±i⁄
(&
ív
->
fun˘i⁄s
, 
˛assName
, 
msg
);

115 
ölöe
 
jniThrowNuŒPoöãrEx˚±i⁄
(
JNIEnv
* 
ív
, c⁄° * 
msg
)

117  
jniThrowNuŒPoöãrEx˚±i⁄
(&
ív
->
fun˘i⁄s
, 
msg
);

119 
ölöe
 
jniThrowRu¡imeEx˚±i⁄
(
JNIEnv
* 
ív
, c⁄° * 
msg
)

121  
jniThrowRu¡imeEx˚±i⁄
(&
ív
->
fun˘i⁄s
, 
msg
);

123 
ölöe
 
jniThrowIOEx˚±i⁄
(
JNIEnv
* 
ív
, 
î∫um
)

125  
jniThrowIOEx˚±i⁄
(&
ív
->
fun˘i⁄s
, 
î∫um
);

127 
ölöe
 
jobje˘
 
jniCª©eFûeDes¸ùt‹
(
JNIEnv
* 
ív
, 
fd
)

129  
jniCª©eFûeDes¸ùt‹
(&
ív
->
fun˘i⁄s
, 
fd
);

131 
ölöe
 
jniGëFDFromFûeDes¸ùt‹
(
JNIEnv
* 
ív
, 
jobje˘
 
fûeDes¸ùt‹
)

133  
jniGëFDFromFûeDes¸ùt‹
(&
ív
->
fun˘i⁄s
, 
fûeDes¸ùt‹
);

135 
ölöe
 
jniSëFûeDes¸ùt‹OfFD
(
JNIEnv
* 
ív
, 
jobje˘
 
fûeDes¸ùt‹
,

136 
vÆue
)

138  
jniSëFûeDes¸ùt‹OfFD
(&
ív
->
fun˘i⁄s
, 
fûeDes¸ùt‹
, 
vÆue
);

147 #i‚de‡
TEMP_FAILURE_RETRY


149 
	#TEMP_FAILURE_RETRY
(
exp
) ({ \

150 
	`ty≥of
 (
exp
Ë
_rc
; \

152 
_rc
 = (
exp
); \

153 } 
_rc
 =-1 && 
î∫o
 =
EINTR
); \

154 
_rc
; })

	)

	@jni/include/include/pixelflinger/format.h

17 #i‚de‡
ANDROID_PIXELFLINGER_FORMAT_H


18 
	#ANDROID_PIXELFLINGER_FORMAT_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	eGGLPixñF‹m©
 {

26 
	mGGL_PIXEL_FORMAT_UNKNOWN
 = 0,

27 
	mGGL_PIXEL_FORMAT_NONE
 = 0,

29 
	mGGL_PIXEL_FORMAT_RGBA_8888
 = 1,

30 
	mGGL_PIXEL_FORMAT_RGBX_8888
 = 2,

31 
	mGGL_PIXEL_FORMAT_RGB_888
 = 3,

32 
	mGGL_PIXEL_FORMAT_RGB_565
 = 4,

33 
	mGGL_PIXEL_FORMAT_BGRA_8888
 = 5,

34 
	mGGL_PIXEL_FORMAT_RGBA_5551
 = 6,

35 
	mGGL_PIXEL_FORMAT_RGBA_4444
 = 7,

37 
	mGGL_PIXEL_FORMAT_A_8
 = 8,

38 
	mGGL_PIXEL_FORMAT_L_8
 = 9,

39 
	mGGL_PIXEL_FORMAT_LA_88
 = 0xA,

40 
	mGGL_PIXEL_FORMAT_RGB_332
 = 0xB,

43 
	mGGL_PIXEL_FORMAT_RESERVED_10
 = 0x10,

44 
	mGGL_PIXEL_FORMAT_RESERVED_11
 = 0x11,

45 
	mGGL_PIXEL_FORMAT_RESERVED_12
 = 0x12,

46 
	mGGL_PIXEL_FORMAT_RESERVED_13
 = 0x13,

47 
	mGGL_PIXEL_FORMAT_RESERVED_14
 = 0x14,

48 
	mGGL_PIXEL_FORMAT_RESERVED_15
 = 0x15,

49 
	mGGL_PIXEL_FORMAT_RESERVED_16
 = 0x16,

50 
	mGGL_PIXEL_FORMAT_RESERVED_17
 = 0x17,

53 
	mGGL_PIXEL_FORMAT_Z_16
 = 0x18,

54 
	mGGL_PIXEL_FORMAT_S_8
 = 0x19,

55 
	mGGL_PIXEL_FORMAT_SZ_24
 = 0x1A,

56 
	mGGL_PIXEL_FORMAT_SZ_8
 = 0x1B,

59 
	mGGL_PIXEL_FORMAT_RESERVED_20
 = 0x20,

60 
	mGGL_PIXEL_FORMAT_RESERVED_21
 = 0x21,

63 
	eGGLF‹m©Comp⁄íts
 {

64 
	mGGL_STENCIL_INDEX
 = 0x1901,

65 
	mGGL_DEPTH_COMPONENT
 = 0x1902,

66 
	mGGL_ALPHA
 = 0x1906,

67 
	mGGL_RGB
 = 0x1907,

68 
	mGGL_RGBA
 = 0x1908,

69 
	mGGL_LUMINANCE
 = 0x1909,

70 
	mGGL_LUMINANCE_ALPHA
 = 0x190A,

73 
	eGGLF‹m©Comp⁄ítIndex
 {

74 
	mGGL_INDEX_ALPHA
 = 0,

75 
	mGGL_INDEX_RED
 = 1,

76 
	mGGL_INDEX_GREEN
 = 2,

77 
	mGGL_INDEX_BLUE
 = 3,

78 
	mGGL_INDEX_STENCIL
 = 0,

79 
	mGGL_INDEX_DEPTH
 = 1,

80 
	mGGL_INDEX_Y
 = 0,

81 
	mGGL_INDEX_CB
 = 1,

82 
	mGGL_INDEX_CR
 = 2,

86 #ifde‡
__˝lu•lus


88 
	mALPHA
 = 
GGL_INDEX_ALPHA
,

89 
	mRED
 = 
GGL_INDEX_RED
,

90 
	mGREEN
 = 
GGL_INDEX_GREEN
,

91 
	mBLUE
 = 
GGL_INDEX_BLUE
,

92 
	mSTENCIL
 = 
GGL_INDEX_STENCIL
,

93 
	mDEPTH
 = 
GGL_INDEX_DEPTH
,

94 
	mLUMA
 = 
GGL_INDEX_Y
,

95 
	mCHROMAB
 = 
GGL_INDEX_CB
,

96 
	mCHROMAR
 = 
GGL_INDEX_CR
,

98 
ölöe
 
uöt32_t
 
mask
(
i
) const {

99  ((1<<(
	mc
[
i
].
	mh
-c[i].
	ml
))-1)<<c[i].l;

101 
ölöe
 
uöt32_t
 
bôs
(
i
) const {

102  
	mc
[
i
].
	mh
 - c[i].
	ml
;

105 
uöt8_t
 
	msize
;

106 
uöt8_t
 
	mbôsPîPixñ
;

109 
uöt8_t
 
	mah
;

110 
uöt8_t
 
	mÆ
;

111 
uöt8_t
 
	mrh
;

112 
uöt8_t
 
	mæ
;

113 
uöt8_t
 
	mgh
;

114 
uöt8_t
 
	mgl
;

115 
uöt8_t
 
	mbh
;

116 
uöt8_t
 
	mbl
;

119 
uöt8_t
 
	mh
;

120 
uöt8_t
 
	ml
;

121 } 
__©åibuã__
((
__∑cked__
)Ë
	mc
[4];

122 } 
__©åibuã__
((
__∑cked__
));

123 
uöt16_t
 
	mcomp⁄íts
;

124 } 
	tGGLF‹m©
;

127 #ifde‡
__˝lu•lus


128 "C" c⁄° 
GGLF‹m©
* 
gglGëPixñF‹m©TabÀ
(
size_t
* 
numE¡rõs
 = 0);

130 c⁄° 
GGLF‹m©
* 
gglGëPixñF‹m©TabÀ
(
size_t
* 
numE¡rõs
);

	@jni/include/include/pixelflinger/pixelflinger.h

17 #i‚de‡
ANDROID_PIXELFLINGER_H


18 
	#ANDROID_PIXELFLINGER_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	~<pixñÊögî/f‹m©.h
>

27 
öt8_t
 
	tGGLbyã
;

28 
öt16_t
 
	tGGLsh‹t
;

29 
öt32_t
 
	tGGLöt
;

30 
ssize_t
 
	tGGLsizei
;

31 
öt32_t
 
	tGGLfixed
;

32 
öt32_t
 
	tGGL˛ampx
;

33 
	tGGLÊﬂt
;

34 
	tGGL˛ampf
;

35 
	tGGLdoubÀ
;

36 
	tGGL˛ampd
;

37 
uöt8_t
 
	tGGLubyã
;

38 
uöt8_t
 
	tGGLboﬁón
;

39 
uöt16_t
 
	tGGLush‹t
;

40 
uöt32_t
 
	tGGLuöt
;

41 
	tGGLíum
;

42 
	tGGLbôfõld
;

43 
	tGGLvoid
;

44 
öt32_t
 
	tGGLfixed32
;

45 
öt32_t
 
	tGGLcﬁ‹
;

46 
öt32_t
 
	tGGLco‹d
;

50 
	#GGL_MAX_VIEWPORT_DIMS
 4096

	)

51 
	#GGL_MAX_TEXTURE_SIZE
 4096

	)

52 
	#GGL_MAX_ALIASED_POINT_SIZE
 0x7FFFFFF

	)

53 
	#GGL_MAX_SMOOTH_POINT_SIZE
 2048

	)

54 
	#GGL_MAX_SMOOTH_LINE_WIDTH
 2048

	)

60 
	eGGLNames
 {

61 
	mGGL_FALSE
 = 0,

62 
	mGGL_TRUE
 = 1,

65 
	mGGL_SCISSOR_TEST
 = 0x0C11,

66 
	mGGL_TEXTURE_2D
 = 0x0DE1,

67 
	mGGL_ALPHA_TEST
 = 0x0BC0,

68 
	mGGL_BLEND
 = 0x0BE2,

69 
	mGGL_COLOR_LOGIC_OP
 = 0x0BF2,

70 
	mGGL_DITHER
 = 0x0BD0,

71 
	mGGL_STENCIL_TEST
 = 0x0B90,

72 
	mGGL_DEPTH_TEST
 = 0x0B71,

73 
	mGGL_AA
 = 0x80000001,

74 
	mGGL_W_LERP
 = 0x80000004,

75 
	mGGL_POINT_SMOOTH_NICE
 = 0x80000005,

78 
	mGGL_COLOR
 = 0x1800,

81 
	mGGL_FOG
 = 0x0B60,

84 
	mGGL_FLAT
 = 0x1D00,

85 
	mGGL_SMOOTH
 = 0x1D01,

88 
	mGGL_TEXTURE_MIN_FILTER
 = 0x2801,

89 
	mGGL_TEXTURE_MAG_FILTER
 = 0x2800,

90 
	mGGL_TEXTURE_WRAP_S
 = 0x2802,

91 
	mGGL_TEXTURE_WRAP_T
 = 0x2803,

92 
	mGGL_TEXTURE_WRAP_R
 = 0x2804,

95 
	mGGL_NEAREST
 = 0x2600,

96 
	mGGL_LINEAR
 = 0x2601,

97 
	mGGL_NEAREST_MIPMAP_NEAREST
 = 0x2700,

98 
	mGGL_LINEAR_MIPMAP_NEAREST
 = 0x2701,

99 
	mGGL_NEAREST_MIPMAP_LINEAR
 = 0x2702,

100 
	mGGL_LINEAR_MIPMAP_LINEAR
 = 0x2703,

103 
	mGGL_CLAMP
 = 0x2900,

104 
	mGGL_REPEAT
 = 0x2901,

105 
	mGGL_CLAMP_TO_EDGE
 = 0x812F,

108 
	mGGL_REPLACE
 = 0x1E01,

109 
	mGGL_MODULATE
 = 0x2100,

110 
	mGGL_DECAL
 = 0x2101,

111 
	mGGL_ADD
 = 0x0104,

114 
	mGGL_TEXTURE_ENV_MODE
 = 0x2200,

115 
	mGGL_TEXTURE_ENV_COLOR
 = 0x2201,

118 
	mGGL_TEXTURE_ENV
 = 0x2300,

121 
	mGGL_TEXTURE_GEN_MODE
 = 0x2500,

122 
	mGGL_S
 = 0x2000,

123 
	mGGL_T
 = 0x2001,

124 
	mGGL_R
 = 0x2002,

125 
	mGGL_Q
 = 0x2003,

126 
	mGGL_ONE_TO_ONE
 = 0x80000002,

127 
	mGGL_AUTOMATIC
 = 0x80000003,

130 
	mGGL_NEVER
 = 0x0200,

131 
	mGGL_LESS
 = 0x0201,

132 
	mGGL_EQUAL
 = 0x0202,

133 
	mGGL_LEQUAL
 = 0x0203,

134 
	mGGL_GREATER
 = 0x0204,

135 
	mGGL_NOTEQUAL
 = 0x0205,

136 
	mGGL_GEQUAL
 = 0x0206,

137 
	mGGL_ALWAYS
 = 0x0207,

140 
	mGGL_CLEAR
 = 0x1500,

141 
	mGGL_AND
 = 0x1501,

142 
	mGGL_AND_REVERSE
 = 0x1502,

143 
	mGGL_COPY
 = 0x1503,

144 
	mGGL_AND_INVERTED
 = 0x1504,

145 
	mGGL_NOOP
 = 0x1505,

146 
	mGGL_XOR
 = 0x1506,

147 
	mGGL_OR
 = 0x1507,

148 
	mGGL_NOR
 = 0x1508,

149 
	mGGL_EQUIV
 = 0x1509,

150 
	mGGL_INVERT
 = 0x150A,

151 
	mGGL_OR_REVERSE
 = 0x150B,

152 
	mGGL_COPY_INVERTED
 = 0x150C,

153 
	mGGL_OR_INVERTED
 = 0x150D,

154 
	mGGL_NAND
 = 0x150E,

155 
	mGGL_SET
 = 0x150F,

158 
	mGGL_ZERO
 = 0,

159 
	mGGL_ONE
 = 1,

160 
	mGGL_SRC_COLOR
 = 0x0300,

161 
	mGGL_ONE_MINUS_SRC_COLOR
 = 0x0301,

162 
	mGGL_SRC_ALPHA
 = 0x0302,

163 
	mGGL_ONE_MINUS_SRC_ALPHA
 = 0x0303,

164 
	mGGL_DST_ALPHA
 = 0x0304,

165 
	mGGL_ONE_MINUS_DST_ALPHA
 = 0x0305,

166 
	mGGL_DST_COLOR
 = 0x0306,

167 
	mGGL_ONE_MINUS_DST_COLOR
 = 0x0307,

168 
	mGGL_SRC_ALPHA_SATURATE
 = 0x0308,

171 
	mGGL_DEPTH_BUFFER_BIT
 = 0x00000100,

172 
	mGGL_STENCIL_BUFFER_BIT
 = 0x00000400,

173 
	mGGL_COLOR_BUFFER_BIT
 = 0x00004000,

176 
	mGGL_NO_ERROR
 = 0,

177 
	mGGL_INVALID_ENUM
 = 0x0500,

178 
	mGGL_INVALID_VALUE
 = 0x0501,

179 
	mGGL_INVALID_OPERATION
 = 0x0502,

180 
	mGGL_STACK_OVERFLOW
 = 0x0503,

181 
	mGGL_STACK_UNDERFLOW
 = 0x0504,

182 
	mGGL_OUT_OF_MEMORY
 = 0x0505

188 
GGLsizei
 
	mvîsi⁄
;

189 
GGLuöt
 
	mwidth
;

190 
GGLuöt
 
	mheight
;

191 
GGLöt
 
	m°ride
;

192 
GGLubyã
* 
	md©a
;

193 
GGLubyã
 
	mf‹m©
;

194 
GGLubyã
 
	mrfu
[3];

197 
GGLöt
 
	mcom¥es£dF‹m©
;

198 
GGLöt
 
	mv°ride
;

200 * 
	mª£rved
;

201 } 
	tGGLSurÁ˚
;

206 (*
	mpoötx
)(*
	mc⁄
, c⁄° 
GGLco‹d
* 
	mv
, GGLco‹d 
	mr
);

207 (*
	mlöex
)(*
	mc⁄
,

208 c⁄° 
GGLco‹d
* 
	mv0
, c⁄° GGLco‹d* 
	mv1
, GGLco‹d 
	mwidth
);

209 (*
	mª˘i
)(* 
	mc
, 
GGLöt
 
	ml
, GGLöà
	mt
, GGLöà
	mr
, GGLöà
	mb
);

210 (*
	måüngÀx
)(* 
	mc
,

211 
GGLco‹d
 c⁄°* 
	mv0
, GGLco‹d c⁄°* 
	mv1
, GGLco‹d c⁄°* 
	mv2
);

214 (*
	msciss‹
)(* 
	mc
, 
GGLöt
 
	mx
, GGLöà
	my
, 
GGLsizei
 
	mwidth
, GGLsizeò
	mheight
);

217 (*
	ma˘iveTextuª
)(* 
	mc
, 
GGLuöt
 
	mtmu
);

218 (*
	mbödTextuª
)(* 
	mc
, c⁄° 
GGLSurÁ˚
* 
	msurÁ˚
);

219 (*
	mcﬁ‹Buf„r
)(* 
	mc
, c⁄° 
GGLSurÁ˚
* 
	msurÁ˚
);

220 (*
	mªadBuf„r
)(* 
	mc
, c⁄° 
GGLSurÁ˚
* 
	msurÁ˚
);

221 (*
	mdïthBuf„r
)(* 
	mc
, c⁄° 
GGLSurÁ˚
* 
	msurÁ˚
);

222 (*
	mbödTextuªLod
)(* 
	mc
, 
GGLuöt
 
	mtmu
, c⁄° 
GGLSurÁ˚
* 
	msurÁ˚
);

225 (*
	míabÀ
)(* 
	mc
, 
GGLíum
 
	m«me
);

226 (*
	mdißbÀ
)(* 
	mc
, 
GGLíum
 
	m«me
);

227 (*
	míabÀDißbÀ
)(* 
	mc
, 
GGLíum
 
	m«me
, 
GGLboﬁón
 
	mí
);

230 (*
	mshadeModñ
)(* 
	mc
, 
GGLíum
 
	mmode
);

231 (*
	mcﬁ‹4xv
)(* 
	mc
, c⁄° 
GGL˛ampx
* 
	mcﬁ‹
);

233 (*
	mcﬁ‹Gød12xv
)(* 
	mc
, c⁄° 
GGLcﬁ‹
* 
	mgød
);

236 (*
	mzGød3xv
)(* 
	mc
, c⁄° 
GGLfixed32
* 
	mgød
);

239 (*
	mwGød3xv
)(* 
	mc
, c⁄° 
GGLfixed
* 
	mgød
);

242 (*
	mfogGød3xv
)(* 
	mc
, c⁄° 
GGLfixed
* 
	mgød
);

243 (*
	mfogCﬁ‹3xv
)(* 
	mc
, c⁄° 
GGL˛ampx
* 
	mcﬁ‹
);

246 (*
	mbÀndFunc
)(* 
	mc
, 
GGLíum
 
	m§c
, GGLíum 
	md°
);

247 (*
	mbÀndFuncSï¨©e
)(* 
	mc
, 
GGLíum
 
	m§c
, GGLíum 
	md°
,

248 
GGLíum
 
	m§cAÕha
, GGLíum 
	md°A∂ha
);

251 (*
	mãxEnvi
)(* 
	mc
, 
GGLíum
 
	mèrgë
,

252 
GGLíum
 
	m≤ame
,

253 
GGLöt
 
	m∑øm
);

255 (*
	mãxEnvxv
)(* 
	mc
, 
GGLíum
 
	mèrgë
,

256 
GGLíum
 
	m≤ame
, c⁄° 
GGLfixed
* 
	m∑øms
);

259 (*
	mãxP¨amëîi
)(* 
	mc
, 
GGLíum
 
	mèrgë
,

260 
GGLíum
 
	m≤ame
,

261 
GGLöt
 
	m∑øm
);

264 (*
	mãxCo‹d2i
)(* 
	mc
, 
GGLöt
 
	ms
, GGLöà
	mt
);

265 (*
	mãxCo‹d2x
)(* 
	mc
, 
GGLfixed
 
	ms
, GGLfixed 
	mt
);

271 (*
	mãxCo‹dGødSˇÀ8xv
)(* 
	mc
, 
GGLöt
 
	mtmu
, c⁄° 
öt32_t
* 
	mgød8
);

273 (*
	mãxGíi
)(* 
	mc
, 
GGLíum
 
	mco‹d
, GGLíum 
	m≤ame
, 
GGLöt
 
	m∑øm
);

276 (*
	mcﬁ‹Mask
)(* 
	mc
, 
GGLboﬁón
 
	mªd
,

277 
GGLboﬁón
 
	mgªí
,

278 
GGLboﬁón
 
	mblue
,

279 
GGLboﬁón
 
	mÆpha
);

281 (*
	mdïthMask
)(* 
	mc
, 
GGLboﬁón
 
	mÊag
);

283 (*
	m°ícûMask
)(* 
	mc
, 
GGLuöt
 
	mmask
);

286 (*
	mÆphaFuncx
)(* 
	mc
, 
GGLíum
 
	mfunc
, 
GGL˛ampx
 
	mªf
);

289 (*
	mdïthFunc
)(* 
	mc
, 
GGLíum
 
	mfunc
);

292 (*
	mlogicOp
)(* 
	mc
, 
GGLíum
 
	m›code
);

295 (*
	m˛ór
)(* 
	mc
, 
GGLbôfõld
 
	mmask
);

296 (*
	m˛órCﬁ‹x
)(* 
	mc
,

297 
GGL˛ampx
 
	mr
, GGL˛ampx 
	mg
, GGL˛ampx 
	mb
, GGL˛ampx 
	ma
);

298 (*
	m˛órDïthx
)(* 
	mc
, 
GGL˛ampx
 
	mdïth
);

299 (*
	m˛órSãncû
)(* 
	mc
, 
GGLöt
 
	ms
);

302 (*
	mc›yPixñs
)(* 
	mc
, 
GGLöt
 
	mx
, GGLöà
	my
,

303 
GGLsizei
 
	mwidth
, GGLsizeò
	mheight
, 
GGLíum
 
	mty≥
);

304 (*
	mø°îPos2x
)(* 
	mc
, 
GGLfixed
 
	mx
, GGLfixed 
	my
);

305 (*
	mø°îPos2i
)(* 
	mc
, 
GGLöt
 
	mx
, GGLöà
	my
);

306 } 
	tGGLC⁄ãxt
;

310 #ifde‡
__˝lu•lus


315 
ssize_t
 
gglInô
(
GGLC⁄ãxt
** 
c⁄ãxt
);

316 
ssize_t
 
gglUnöô
(
GGLC⁄ãxt
* 
c⁄ãxt
);

318 
GGLöt
 
gglBôBlô
(

319 
GGLC⁄ãxt
* 
c
,

320 
tmu
,

321 
GGLöt
 
¸›
[4],

322 
GGLöt
 
whîe
[4]);

324 #ifde‡
__˝lu•lus


	@jni/include/include/surfaceflinger/ISurface.h

17 #i‚de‡
ANDROID_SF_ISURFACE_H


18 
	#ANDROID_SF_ISURFACE_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	~<utûs/Eº‹s.h
>

24 
	~<utûs/RefBa£.h
>

26 
	~<bödî/II¡îÁ˚.h
>

28 
	~<ui/PixñF‹m©.h
>

30 
	~<h¨dw¨e/h¨dw¨e.h
>

31 
	~<h¨dw¨e/gøŒoc.h
>

33 
«me•a˚
 
	g™droid
 {

35 
öt32_t
 
	tSurÁ˚ID
;

37 
˛ass
 
	gIMem‹yHóp
;

38 
˛ass
 
	gOvîœyRef
;

39 
˛ass
 
	gGøphicBuf„r
;

41 ˛as†
	cISurÁ˚
 : 
public
 
II¡îÁ˚


43 
¥Ÿe˘ed
:

45 
REGISTER_BUFFERS
 = 
IBödî
::
FIRST_CALL_TRANSACTION
,

46 
	gUNREGISTER_BUFFERS
,

47 
	gPOST_BUFFER
,

48 
	gCREATE_OVERLAY
,

49 
	gREQUEST_BUFFER
,

52 
	gpublic
:

53 
DECLARE_META_INTERFACE
(
SurÁ˚
);

55 
vútuÆ
 
	g•
<
	gGøphicBuf„r
> 
ªque°Buf„r
(
buf„rIdx
, 
ußge
) = 0;

57 ˛as†
	cBuf„rHóp
 {

58 
	gpublic
:

61 
ROT_0
 = 0,

62 
	gROT_90
 = 
HAL_TRANSFORM_ROT_90
,

63 
	gROT_180
 = 
HAL_TRANSFORM_ROT_180
,

64 
	gROT_270
 = 
HAL_TRANSFORM_ROT_270
,

66 
Buf„rHóp
();

68 
Buf„rHóp
(
uöt32_t
 
w
, uöt32_à
h
,

69 
öt32_t
 
h‹_°ride
, i¡32_à
vî_°ride
,

70 
PixñF‹m©
 
f‹m©
, c⁄° 
•
<
IMem‹yHóp
>& 
hóp
);

72 
Buf„rHóp
(
uöt32_t
 
w
, uöt32_à
h
,

73 
öt32_t
 
h‹_°ride
, i¡32_à
vî_°ride
,

74 
PixñF‹m©
 
f‹m©
, 
uöt32_t
 
å™sf‹m
, uöt32_à
Êags
,

75 c⁄° 
•
<
IMem‹yHóp
>& 
hóp
);

77 ~
Buf„rHóp
();

79 
uöt32_t
 
	gw
;

80 
uöt32_t
 
	gh
;

81 
öt32_t
 
	gh‹_°ride
;

82 
öt32_t
 
	gvî_°ride
;

83 
PixñF‹m©
 
	gf‹m©
;

84 
uöt32_t
 
	gå™sf‹m
;

85 
uöt32_t
 
	gÊags
;

86 
	g•
<
	gIMem‹yHóp
> 
	ghóp
;

89 
vútuÆ
 
°©us_t
 
ªgi°îBuf„rs
(c⁄° 
Buf„rHóp
& 
buf„rs
) = 0;

90 
vútuÆ
 
po°Buf„r
(
ssize_t
 
off£t
) = 0;

91 
vútuÆ
 
uƒegi°îBuf„rs
() = 0;

93 
vútuÆ
 
	g•
<
	gOvîœyRef
> 
¸óãOvîœy
(

94 
uöt32_t
 
w
, uöt32_à
h
, 
öt32_t
 
f‹m©
, i¡32_à
‹õ¡©i⁄
) = 0;

99 
˛ass
 
	gBnSurÁ˚
 : 
public
 
BnI¡îÁ˚
<
ISurÁ˚
>

101 
public
:

102 
vútuÆ
 
°©us_t
 
⁄Tønß˘
–
uöt32_t
 
code
,

103 c⁄° 
P¨˚l
& 
d©a
,

104 
P¨˚l
* 
ª∂y
,

105 
uöt32_t
 
Êags
 = 0);

	@jni/include/include/surfaceflinger/ISurfaceComposer.h

17 #i‚de‡
ANDROID_SF_ISURFACE_COMPOSER_H


18 
	#ANDROID_SF_ISURFACE_COMPOSER_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	~<utûs/RefBa£.h
>

24 
	~<utûs/Eº‹s.h
>

26 
	~<bödî/II¡îÁ˚.h
>

28 
	~<ui/PixñF‹m©.h
>

30 
	~<surÁ˚Êögî/ISurÁ˚FlögîClõ¡.h
>

32 
«me•a˚
 
	g™droid
 {

35 ˛as†
	cISurÁ˚Compo£r
 : 
public
 
II¡îÁ˚


37 
public
:

38 
DECLARE_META_INTERFACE
(
SurÁ˚Compo£r
);

41 
	geHiddí
 = 0x00000004,

42 
	geDe°royBackbuf„r
 = 0x00000020,

43 
	geSecuª
 = 0x00000080,

44 
	geN⁄Pªmu…ùlõd
 = 0x00000100,

45 
	gePushBuf„rs
 = 0x00000200,

47 
	geFXSurÁ˚N‹mÆ
 = 0x00000000,

48 
	geFXSurÁ˚Blur
 = 0x00010000,

49 
	geFXSurÁ˚Dim
 = 0x00020000,

50 
	geFXSurÁ˚Mask
 = 0x000F0000,

54 
	gePosôi⁄Ch™ged
 = 0x00000001,

55 
	geLayîCh™ged
 = 0x00000002,

56 
	geSizeCh™ged
 = 0x00000004,

57 
	geAÕhaCh™ged
 = 0x00000008,

58 
	geM©rixCh™ged
 = 0x00000010,

59 
	geTøn•¨ítRegi⁄Ch™ged
 = 0x00000020,

60 
	geVisibûôyCh™ged
 = 0x00000040,

61 
	geFªezeTötCh™ged
 = 0x00000080,

65 
	geLayîHiddí
 = 0x01,

66 
	geLayîFrozí
 = 0x02,

67 
	geLayîDôhî
 = 0x04,

68 
	geLayîFûãr
 = 0x08,

69 
	geLayîBlurFªeze
 = 0x10

73 
	geOrõ¡©i⁄DeÁu…
 = 0,

74 
	geOrõ¡©i⁄90
 = 1,

75 
	geOrõ¡©i⁄180
 = 2,

76 
	geOrõ¡©i⁄270
 = 3,

77 
	geOrõ¡©i⁄Sw≠Mask
 = 0x01

82 
	geOrõ¡©i⁄Anim©i⁄DißbÀ
 = 0x00000001

89 
vútuÆ
 
	g•
<
	gISurÁ˚FlögîClõ¡
> 
¸óãC⁄√˘i⁄
() = 0;

92 
vútuÆ
 
	g•
<
	gIMem‹yHóp
> 
gëCblk
() const = 0;

95 
vútuÆ
 
›íGlobÆTønß˘i⁄
() = 0;

96 
vútuÆ
 
˛o£GlobÆTønß˘i⁄
() = 0;

99 
vútuÆ
 
°©us_t
 
‰ìzeDi•œy
(
Di•œyID
 
dpy
, 
uöt32_t
 
Êags
) = 0;

100 
vútuÆ
 
°©us_t
 
un‰ìzeDi•œy
(
Di•œyID
 
dpy
, 
uöt32_t
 
Êags
) = 0;

103 
vútuÆ
 
£tOrõ¡©i⁄
(
Di•œyID
 
dpy
, 
‹õ¡©i⁄
, 
uöt32_t
 
Êags
) = 0;

108 
vútuÆ
 
boŸFöished
() = 0;

113 
vútuÆ
 
sig«l
() const = 0;

118 
˛ass
 
	gBnSurÁ˚Compo£r
 : 
public
 
BnI¡îÁ˚
<
ISurÁ˚Compo£r
>

120 
public
:

124 
BOOT_FINISHED
 = 
IBödî
::
FIRST_CALL_TRANSACTION
,

125 
	gCREATE_CONNECTION
,

126 
	gGET_CBLK
,

127 
	gOPEN_GLOBAL_TRANSACTION
,

128 
	gCLOSE_GLOBAL_TRANSACTION
,

129 
	gSET_ORIENTATION
,

130 
	gFREEZE_DISPLAY
,

131 
	gUNFREEZE_DISPLAY
,

132 
	gSIGNAL


135 
vútuÆ
 
°©us_t
 
⁄Tønß˘
–
uöt32_t
 
code
,

136 c⁄° 
P¨˚l
& 
d©a
,

137 
P¨˚l
* 
ª∂y
,

138 
uöt32_t
 
Êags
 = 0);

	@jni/include/include/surfaceflinger/ISurfaceFlingerClient.h

17 #i‚de‡
ANDROID_SF_ISURFACE_FLINGER_CLIENT_H


18 
	#ANDROID_SF_ISURFACE_FLINGER_CLIENT_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	~<utûs/Eº‹s.h
>

24 
	~<utûs/RefBa£.h
>

26 
	~<bödî/II¡îÁ˚.h
>

28 
	~<ui/PixñF‹m©.h
>

30 
	~<surÁ˚Êögî/ISurÁ˚.h
>

32 
«me•a˚
 
	g™droid
 {

36 
˛ass
 
	gIMem‹yHóp
;

38 
öt32_t
 
	tClõ¡ID
;

39 
öt32_t
 
	tDi•œyID
;

43 
˛ass
 
	gœyî_°©e_t
;

45 ˛as†
	cISurÁ˚FlögîClõ¡
 : 
public
 
II¡îÁ˚


47 
public
:

48 
DECLARE_META_INTERFACE
(
SurÁ˚FlögîClõ¡
);

50 
	ssurÁ˚_d©a_t
 {

51 
öt32_t
 
	gtokí
;

52 
öt32_t
 
	gidítôy
;

53 
uöt32_t
 
	gwidth
;

54 
uöt32_t
 
	gheight
;

55 
uöt32_t
 
	gf‹m©
;

56 
°©us_t
 
ªadFromP¨˚l
(c⁄° 
P¨˚l
& 
∑r˚l
);

57 
°©us_t
 
wrôeToP¨˚l
(
P¨˚l
* 
∑r˚l
) const;

60 
vútuÆ
 
	g•
<
	gIMem‹yHóp
> 
gëC⁄åﬁBlock
() const = 0;

62 
vútuÆ
 
	g•
<
	gISurÁ˚
> 
¸óãSurÁ˚
–
surÁ˚_d©a_t
* 
d©a
,

63 
pid
,

64 c⁄° 
Såög8
& 
«me
,

65 
Di•œyID
 
di•œy
,

66 
uöt32_t
 
w
,

67 
uöt32_t
 
h
,

68 
PixñF‹m©
 
f‹m©
,

69 
uöt32_t
 
Êags
) = 0;

71 
vútuÆ
 
°©us_t
 
de°roySurÁ˚
(
SurÁ˚ID
 
sid
) = 0;

73 
vútuÆ
 
°©us_t
 
£tSèã
(
öt32_t
 
cou¡
, c⁄° 
œyî_°©e_t
* 
°©es
) = 0;

78 
˛ass
 
	gBnSurÁ˚FlögîClõ¡
 : 
public
 
BnI¡îÁ˚
<
ISurÁ˚FlögîClõ¡
>

80 
public
:

81 
vútuÆ
 
°©us_t
 
⁄Tønß˘
–
uöt32_t
 
code
,

82 c⁄° 
P¨˚l
& 
d©a
,

83 
P¨˚l
* 
ª∂y
,

84 
uöt32_t
 
Êags
 = 0);

	@jni/include/include/surfaceflinger/Surface.h

17 #i‚de‡
ANDROID_SF_SURFACE_H


18 
	#ANDROID_SF_SURFACE_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	~<utûs/RefBa£.h
>

24 
	~<utûs/thªads.h
>

26 
	~<ui/PixñF‹m©.h
>

27 
	~<ui/Regi⁄.h
>

28 
	~<ui/egl/™droid_«tives.h
>

30 
	~<surÁ˚Êögî/ISurÁ˚.h
>

31 
	~<surÁ˚Êögî/ISurÁ˚FlögîClõ¡.h
>

33 
«me•a˚
 
	g™droid
 {

37 
˛ass
 
	gGøphicBuf„rM≠≥r
;

38 
˛ass
 
	gIOMX
;

39 
˛ass
 
	gRe˘
;

40 
˛ass
 
	gSurÁ˚
;

41 
˛ass
 
	gSurÁ˚Compo£rClõ¡
;

42 
˛ass
 
	gSh¨edClõ¡
;

43 
˛ass
 
	gSh¨edBuf„rClõ¡
;

47 ˛as†
	cSurÁ˚C⁄åﬁ
 : 
public
 
RefBa£


49 
public
:

50 
boﬁ
 
isVÆid
(c⁄° 
•
<
SurÁ˚C⁄åﬁ
>& 
surÁ˚
) {

51  (
surÁ˚
 !0Ë&& surÁ˚->
isVÆid
();

53 
boﬁ
 
isVÆid
() {

54  
	gmTokí
>=0 && 
mClõ¡
!=0;

56 
boﬁ
 
isSameSurÁ˚
(

57 c⁄° 
•
<
SurÁ˚C⁄åﬁ
>& 
lhs
, c⁄° sp<SurÁ˚C⁄åﬁ>& 
rhs
);

59 
SurÁ˚ID
 
ID
(Ëc⁄° {  
	gmTokí
; }

60 
uöt32_t
 
gëFœgs
(Ëc⁄° {  
	gmFœgs
; }

61 
uöt32_t
 
gëIdítôy
(Ëc⁄° {  
	gmIdítôy
; }

64 
˛ór
();

66 
°©us_t
 
£tLayî
(
öt32_t
 
œyî
);

67 
°©us_t
 
£tPosôi⁄
(
öt32_t
 
x
, i¡32_à
y
);

68 
°©us_t
 
£tSize
(
uöt32_t
 
w
, uöt32_à
h
);

69 
°©us_t
 
hide
();

70 
°©us_t
 
show
(
öt32_t
 
œyî
 = -1);

71 
°©us_t
 
‰ìze
();

72 
°©us_t
 
un‰ìze
();

73 
°©us_t
 
£tFœgs
(
uöt32_t
 
Êags
, uöt32_à
mask
);

74 
°©us_t
 
£tTøn•¨ítRegi⁄Höt
(c⁄° 
Regi⁄
& 
å™•¨ít
);

75 
°©us_t
 
£tAÕha
(
Æpha
=1.0f);

76 
°©us_t
 
£tM©rix
(
dsdx
, 
dtdx
, 
dsdy
, 
dtdy
);

77 
°©us_t
 
£tFªezeTöt
(
uöt32_t
 
töt
);

79 
°©us_t
 
wrôeSurÁ˚ToP¨˚l
(

80 c⁄° 
•
<
SurÁ˚C⁄åﬁ
>& 
c⁄åﬁ
, 
P¨˚l
* 
∑r˚l
);

82 
	g•
<
	gSurÁ˚
> 
gëSurÁ˚
() const;

84 
	g¥iv©e
:

86 
SurÁ˚C⁄åﬁ
& 
›î©‹
 = (SurÁ˚C⁄åﬁ& 
rhs
);

87 
SurÁ˚C⁄åﬁ
(c⁄° SurÁ˚C⁄åﬁ& 
rhs
);

90 
‰õnd
 
˛ass
 
	gSurÁ˚Compo£rClõ¡
;

93 
‰õnd
 
˛ass
 
	gCamîa
;

94 
‰õnd
 
˛ass
 
	gMedüRec‹dî
;

96 
‰õnd
 
˛ass
 
	gMedüPœyî
;

98 
‰õnd
 
˛ass
 
	gTe°
;

99 c⁄° 
	g•
<
	gISurÁ˚
>& 
gëISurÁ˚
(Ëc⁄° {  
	gmSurÁ˚
; }

102 
‰õnd
 
˛ass
 
	gSurÁ˚
;

104 
SurÁ˚C⁄åﬁ
(

105 c⁄° 
•
<
SurÁ˚Compo£rClõ¡
>& 
˛õ¡
,

106 c⁄° 
•
<
ISurÁ˚
>& 
surÁ˚
,

107 c⁄° 
ISurÁ˚FlögîClõ¡
::
surÁ˚_d©a_t
& 
d©a
,

108 
uöt32_t
 
w
, uöt32_à
h
, 
PixñF‹m©
 
f‹m©
, uöt32_à
Êags
);

110 ~
SurÁ˚C⁄åﬁ
();

112 
°©us_t
 
vÆid©e
() const;

113 
de°roy
();

115 
	g•
<
	gSurÁ˚Compo£rClõ¡
> 
	gmClõ¡
;

116 
	g•
<
	gISurÁ˚
> 
	gmSurÁ˚
;

117 
SurÁ˚ID
 
	gmTokí
;

118 
uöt32_t
 
	gmIdítôy
;

119 
uöt32_t
 
	gmWidth
;

120 
uöt32_t
 
	gmHeight
;

121 
PixñF‹m©
 
	gmF‹m©
;

122 
uöt32_t
 
	gmFœgs
;

123 
muèbÀ
 
Muãx
 
	gmLock
;

125 
muèbÀ
 
	g•
<
	gSurÁ˚
> 
	gmSurÁ˚D©a
;

130 
˛ass
 
	gSurÁ˚


131 : 
public
 
EGLN©iveBa£
<
™droid_«tive_wödow_t
, 
	gSurÁ˚
, 
	gRefBa£
>

133 
	gpublic
:

134 
	sSurÁ˚Info
 {

135 
uöt32_t
 
w
;

136 
uöt32_t
 
	gh
;

137 
uöt32_t
 
	gs
;

138 
uöt32_t
 
	gußge
;

139 
PixñF‹m©
 
	gf‹m©
;

140 * 
	gbôs
;

141 
uöt32_t
 
	gª£rved
[2];

144 
SurÁ˚
(c⁄° 
P¨˚l
& 
d©a
);

146 
boﬁ
 
isVÆid
(c⁄° 
•
<
SurÁ˚
>& 
surÁ˚
) {

147  (
	gsurÁ˚
 !0Ë&& 
surÁ˚
->
isVÆid
();

150 
boﬁ
 
isSameSurÁ˚
(

151 c⁄° 
•
<
SurÁ˚
>& 
lhs
, c⁄° sp<SurÁ˚>& 
rhs
);

153 
boﬁ
 
isVÆid
();

154 
SurÁ˚ID
 
ID
(Ëc⁄° {  
	gmTokí
; }

155 
uöt32_t
 
gëFœgs
(Ëc⁄° {  
	gmFœgs
; }

156 
uöt32_t
 
gëIdítôy
(Ëc⁄° {  
	gmIdítôy
; }

159 
°©us_t
 
lock
(
SurÁ˚Info
* 
öfo
, 
boﬁ
 
blockög
 = 
åue
);

160 
°©us_t
 
lock
(
SurÁ˚Info
* 
öfo
, 
Regi⁄
* 
dúty
, 
boﬁ
 
blockög
 = 
åue
);

161 
°©us_t
 
u∆ockAndPo°
();

164 
£tSw≠Re˘™gÀ
(c⁄° 
Re˘
& 
r
);

166 
	g¥iv©e
:

168 
SurÁ˚
& 
›î©‹
 = (SurÁ˚& 
rhs
);

169 
SurÁ˚
(c⁄° SurÁ˚& 
rhs
);

171 
SurÁ˚
(c⁄° 
•
<
SurÁ˚C⁄åﬁ
>& 
c⁄åﬁ
);

172 
öô
();

173 ~
SurÁ˚
();

175 
‰õnd
 
˛ass
 
	gSurÁ˚Compo£rClõ¡
;

176 
‰õnd
 
˛ass
 
	gSurÁ˚C⁄åﬁ
;

180 
‰õnd
 
˛ass
 
	gCamîa
;

181 
‰õnd
 
˛ass
 
	gMedüRec‹dî
;

183 
‰õnd
 
˛ass
 
	gMedüPœyî
;

184 
‰õnd
 
˛ass
 
	gIOMX
;

186 
‰õnd
 
˛ass
 
	gTe°
;

188 
	g•
<
	gSurÁ˚Compo£rClõ¡
> 
gëClõ¡
() const;

189 
	g•
<
	gISurÁ˚
> 
gëISurÁ˚
() const;

191 
°©us_t
 
gëBuf„rLocked
(
ödex
, 
ußge
);

193 
°©us_t
 
vÆid©e
() const;

195 
ölöe
 c⁄° 
	gGøphicBuf„rM≠≥r
& 
gëBuf„rM≠≥r
(Ëc⁄° {  
	gmBuf„rM≠≥r
; }

196 
ölöe
 
	gGøphicBuf„rM≠≥r
& 
gëBuf„rM≠≥r
(Ë{  
	gmBuf„rM≠≥r
; }

198 
£tSw≠I¡îvÆ
(
™droid_«tive_wödow_t
* 
wödow
, 
öãrvÆ
);

199 
dequeueBuf„r
(
™droid_«tive_wödow_t
* 
wödow
, 
™droid_«tive_buf„r_t
** 
buf„r
);

200 
lockBuf„r
(
™droid_«tive_wödow_t
* 
wödow
, 
™droid_«tive_buf„r_t
* 
buf„r
);

201 
queueBuf„r
(
™droid_«tive_wödow_t
* 
wödow
, 
™droid_«tive_buf„r_t
* 
buf„r
);

202 
quîy
(
™droid_«tive_wödow_t
* 
wödow
, 
wh©
, * 
vÆue
);

203 
≥rf‹m
(
™droid_«tive_wödow_t
* 
wödow
, 
›î©i⁄
, ...);

205 
dequeueBuf„r
(
™droid_«tive_buf„r_t
** 
buf„r
);

206 
lockBuf„r
(
™droid_«tive_buf„r_t
* 
buf„r
);

207 
queueBuf„r
(
™droid_«tive_buf„r_t
* 
buf„r
);

208 
quîy
(
wh©
, * 
vÆue
);

209 
≥rf‹m
(
›î©i⁄
, 
va_li°
 
¨gs
);

211 
°©us_t
 
dequeueBuf„r
(
•
<
GøphicBuf„r
>* 
buf„r
);

213 
di•©ch_£tUßge
(
va_li°
 
¨gs
);

214 
di•©ch_c⁄√˘
(
va_li°
 
¨gs
);

215 
di•©ch_disc⁄√˘
(
va_li°
 
¨gs
);

217 
£tUßge
(
uöt32_t
 
ªqUßge
);

218 
c⁄√˘
(
≠i
);

219 
disc⁄√˘
(
≠i
);

221 
uöt32_t
 
gëUßge
() const;

222 
gëC⁄√˘edApi
() const;

225 
	g•
<
	gSurÁ˚Compo£rClõ¡
> 
	gmClõ¡
;

226 
	g•
<
	gISurÁ˚
> 
	gmSurÁ˚
;

227 
SurÁ˚ID
 
	gmTokí
;

228 
uöt32_t
 
	gmIdítôy
;

229 
PixñF‹m©
 
	gmF‹m©
;

230 
uöt32_t
 
	gmFœgs
;

231 
	gGøphicBuf„rM≠≥r
& 
	gmBuf„rM≠≥r
;

232 
Sh¨edBuf„rClõ¡
* 
	gmSh¨edBuf„rClõ¡
;

235 
Re˘
 
	gmSw≠Re˘™gÀ
;

236 
uöt32_t
 
	gmUßge
;

237 
	gmC⁄√˘ed
;

241 
	g•
<
	gGøphicBuf„r
> 
	gmBuf„rs
[2];

242 
muèbÀ
 
Regi⁄
 
	gmDútyRegi⁄
;

245 
	g•
<
	gGøphicBuf„r
> 
	gmLockedBuf„r
;

246 
	g•
<
	gGøphicBuf„r
> 
	gmPo°edBuf„r
;

247 
muèbÀ
 
Regi⁄
 
	gmOldDútyRegi⁄
;

248 
boﬁ
 
	gmNìdFuŒUpd©e
;

251 
uöt32_t
 
	gmWidth
;

252 
uöt32_t
 
	gmHeight
;

255 
muèbÀ
 
Muãx
 
	gmSurÁ˚Lock
;

256 
muèbÀ
 
Muãx
 
	gmApiLock
;

	@jni/include/include/surfaceflinger/SurfaceComposerClient.h

17 #i‚de‡
ANDROID_SF_SURFACE_COMPOSER_CLIENT_H


18 
	#ANDROID_SF_SURFACE_COMPOSER_CLIENT_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	~<bödî/IBödî.h
>

25 
	~<utûs/S‹ãdVe˘‹.h
>

26 
	~<utûs/RefBa£.h
>

27 
	~<utûs/thªads.h
>

29 
	~<ui/PixñF‹m©.h
>

30 
	~<ui/Regi⁄.h
>

32 
	~<surÁ˚Êögî/SurÁ˚.h
>

34 
«me•a˚
 
	g™droid
 {

38 
˛ass
 
	gRegi⁄
;

39 
˛ass
 
	gSh¨edClõ¡
;

40 
˛ass
 
	gISurÁ˚Compo£r
;

41 
˛ass
 
	gDi•œyInfo
;

43 ˛as†
	cSurÁ˚Compo£rClõ¡
 : 
vútuÆ
 
public
 
RefBa£


45 
public
:

46 
SurÁ˚Compo£rClõ¡
();

47 
	gvútuÆ
 ~
SurÁ˚Compo£rClõ¡
();

50 
°©us_t
 
öôCheck
() const;

53 
	g•
<
	gIBödî
> 
c⁄√˘i⁄
() const;

56 
	g•
<
	gSurÁ˚Compo£rClõ¡
>

57 
˛õ¡F‹C⁄√˘i⁄
(c⁄° 
•
<
IBödî
>& 
c⁄n
);

60 
di•o£
();

66 
	g•
<
	gSurÁ˚C⁄åﬁ
> 
¸óãSurÁ˚
(

67 
pid
,

68 c⁄° 
Såög8
& 
«me
,

69 
Di•œyID
 
di•œy
,

70 
uöt32_t
 
w
,

71 
uöt32_t
 
h
,

72 
PixñF‹m©
 
f‹m©
,

73 
uöt32_t
 
Êags
 = 0

76 
	g•
<
	gSurÁ˚C⁄åﬁ
> 
¸óãSurÁ˚
(

77 
pid
,

78 
Di•œyID
 
di•œy
,

79 
uöt32_t
 
w
,

80 
uöt32_t
 
h
,

81 
PixñF‹m©
 
f‹m©
,

82 
uöt32_t
 
Êags
 = 0

94 
°©us_t
 
›íTønß˘i⁄
();

97 
°©us_t
 
˛o£Tønß˘i⁄
();

100 
›íGlobÆTønß˘i⁄
();

103 
˛o£GlobÆTønß˘i⁄
();

106 
°©us_t
 
‰ìzeDi•œy
(
Di•œyID
 
dpy
, 
uöt32_t
 
Êags
 = 0);

109 
°©us_t
 
un‰ìzeDi•œy
(
Di•œyID
 
dpy
, 
uöt32_t
 
Êags
 = 0);

112 
£tOrõ¡©i⁄
(
Di•œyID
 
dpy
, 
‹õ¡©i⁄
, 
uöt32_t
 
Êags
);

115 
ssize_t
 
gëNumbîOfDi•œys
();

118 
°©us_t
 
gëDi•œyInfo
(
Di•œyID
 
dpy
, 
Di•œyInfo
* 
öfo
);

119 
ssize_t
 
gëDi•œyWidth
(
Di•œyID
 
dpy
);

120 
ssize_t
 
gëDi•œyHeight
(
Di•œyID
 
dpy
);

121 
ssize_t
 
gëDi•œyOrõ¡©i⁄
(
Di•œyID
 
dpy
);

123 
°©us_t
 
lökToCompo£rDóth
(c⁄° 
•
<
IBödî
::
DóthRecùõ¡
>& 
ªcùõ¡
,

124 * 
cookõ
 = 
NULL
, 
uöt32_t
 
Êags
 = 0);

126 
	g¥iv©e
:

127 
‰õnd
 
˛ass
 
SurÁ˚
;

128 
‰õnd
 
˛ass
 
	gSurÁ˚C⁄åﬁ
;

130 
SurÁ˚Compo£rClõ¡
(c⁄° 
•
<
ISurÁ˚Compo£r
>& 
sm
,

131 c⁄° 
•
<
IBödî
>& 
c⁄n
);

133 
°©us_t
 
hide
(
SurÁ˚ID
 
id
);

134 
°©us_t
 
show
(
SurÁ˚ID
 
id
, 
öt32_t
 
œyî
 = -1);

135 
°©us_t
 
‰ìze
(
SurÁ˚ID
 
id
);

136 
°©us_t
 
un‰ìze
(
SurÁ˚ID
 
id
);

137 
°©us_t
 
£tFœgs
(
SurÁ˚ID
 
id
, 
uöt32_t
 
Êags
, uöt32_à
mask
);

138 
°©us_t
 
£tTøn•¨ítRegi⁄Höt
(
SurÁ˚ID
 
id
, c⁄° 
Regi⁄
& 
å™•¨ít
);

139 
°©us_t
 
£tLayî
(
SurÁ˚ID
 
id
, 
öt32_t
 
œyî
);

140 
°©us_t
 
£tAÕha
(
SurÁ˚ID
 
id
, 
Æpha
=1.0f);

141 
°©us_t
 
£tFªezeTöt
(
SurÁ˚ID
 
id
, 
uöt32_t
 
töt
);

142 
°©us_t
 
£tM©rix
(
SurÁ˚ID
 
id
, 
dsdx
, 
dtdx
, 
dsdy
, 
dtdy
);

143 
°©us_t
 
£tPosôi⁄
(
SurÁ˚ID
 
id
, 
öt32_t
 
x
, i¡32_à
y
);

144 
°©us_t
 
£tSize
(
SurÁ˚ID
 
id
, 
uöt32_t
 
w
, uöt32_à
h
);

146 
sig«lSîvî
();

148 
°©us_t
 
de°roySurÁ˚
(
SurÁ˚ID
 
sid
);

150 
_öô
(c⁄° 
•
<
ISurÁ˚Compo£r
>& 
sm
,

151 c⁄° 
•
<
ISurÁ˚FlögîClõ¡
>& 
c⁄n
);

153 
ölöe
 
œyî_°©e_t
* 
_gë_°©e_l
(
SurÁ˚ID
 
id
);

154 
œyî_°©e_t
* 
_lockLayîSèã
(
SurÁ˚ID
 
id
);

155 
ölöe
 
_u∆ockLayîSèã
();

157 
muèbÀ
 
Muãx
 
	gmLock
;

158 
œyî_°©e_t
* 
	gmPªbuûtLayîSèã
;

159 
	gS‹ãdVe˘‹
<
	gœyî_°©e_t
> 
	gmSèãs
;

160 
öt32_t
 
	gmTønß˘i⁄O≥n
;

164 
°©us_t
 
	gmSètus
;

165 
Sh¨edClõ¡
* 
	gmC⁄åﬁ
;

166 
	g•
<
	gIMem‹yHóp
> 
	gmC⁄åﬁMem‹y
;

167 
	g•
<
	gISurÁ˚FlögîClõ¡
> 
	gmClõ¡
;

168 
	g•
<
	gISurÁ˚Compo£r
> 
	gmSig«lSîvî
;

	@jni/include/include/system/core/include/arch/linux-arm/AndroidConfig.h

20 #i‚de‡
_ANDROID_CONFIG_H


21 
	#_ANDROID_CONFIG_H


	)

42 
	#HAVE_PTHREADS


	)

50 
	#HAVE_ANDROID_PTHREAD_SETNAME_NP


	)

55 
	#HAVE_FUTEX


	)

61 
	#HAVE_FUTEX_WRAPPERS
 1

	)

69 
	#HAVE_FORKEXEC


	)

76 
	#HAVE_OOM_ADJ


	)

86 
	#HAVE_ANDROID_IPC


	)

94 
	#HAVE_POSIX_FILEMAP


	)

99 
	#HAVE_TERMIO_H


	)

104 
	#HAVE_SYS_SENDFILE_H
 1

	)

114 
	#HAVE_SYS_UIO_H


	)

120 
	#HAVE_SYMLINKS


	)

135 
	#HAVE_IOCTL


	)

145 
	#HAVE_POSIX_CLOCKS


	)

151 
	#HAVE_TIMEDWAIT_MONOTONIC


	)

156 
	#HAVE_EPOLL


	)

165 
	#HAVE_ENDIAN_H


	)

166 
	#HAVE_LITTLE_ENDIAN


	)

179 
	#HAVE_OFF64_T


	)

186 
	#HAVE_BACKTRACE
 0

	)

193 
	#HAVE_DLADDR
 1

	)

199 
	#HAVE_CXXABI
 0

	)

204 
	#HAVE_GETTID


	)

209 
	#HAVE_SCHED_SETSCHEDULER


	)

214 #i‚de‡
__löux__


215 
	#__löux__


	)

221 
	#HAVE_MALLOC_H


	)

226 
	#HAVE_ANDROID_OS
 1

	)

231 
	#HAVE_LINUX_LOCAL_SOCKET_NAMESPACE
 1

	)

236 
	#HAVE_INOTIFY
 1

	)

241 
	#HAVE_MADVISE
 1

	)

246 
	#HAVE_TM_GMTOFF
 1

	)

251 
	#HAVE_DIRENT_D_TYPE
 1

	)

256 
	#HAVE_LIBC_SYSTEM_PROPERTIES
 1

	)

267 
	#ARCH_ARM


	)

277 
	#OS_SHARED_LIB_FORMAT_STR
 "lib%s.so"

	)

282 
	#HAVE__MEMCMP16
 1

	)

287 
	#MINCORE_POINTER_TYPE
 *

	)

292 
	#HAVE_SA_NOCLDWAIT


	)

297 
	#OS_PATH_SEPARATOR
 '/'

	)

302 
	#OS_CASE_SENSITIVE


	)

307 
	#HAVE_SYS_SOCKET_H
 1

	)

312 
	#HAVE_STRLCPY
 1

	)

322 
	#HAVE_FUNOPEN
 1

	)

327 
	#HAVE_PRCTL
 1

	)

332 
	#HAVE_WRITEV
 1

	)

337 
	#HAVE_STDINT_H
 1

	)

342 
	#HAVE_STDBOOL_H
 1

	)

347 
	#HAVE_SCHED_H
 1

	)

352 
	#HAVE_PREAD
 1

	)

357 
	#HAVE_STAT_ST_MTIM
 1

	)

362 
	#HAVE_PRINTF_ZD
 1

	)

	@jni/include/include/ui/ANativeObjectBase.h

17 #i‚de‡
ANDROID_ANDROID_NATIVES_H


18 
	#ANDROID_ANDROID_NATIVES_H


	)

20 
	~<sys/ty≥s.h
>

21 
	~<°rög.h
>

23 
	~<h¨dw¨e/gøŒoc.h
>

24 
	~<sy°em/wödow.h
>

29 
	segl_«tive_pixm≠_t


31 
öt32_t
 
	mvîsi⁄
;

32 
öt32_t
 
	mwidth
;

33 
öt32_t
 
	mheight
;

34 
öt32_t
 
	m°ride
;

35 
uöt8_t
* 
	md©a
;

36 
uöt8_t
 
	mf‹m©
;

37 
uöt8_t
 
	mrfu
[3];

39 
uöt32_t
 
	mcom¥es£dF‹m©
;

40 
öt32_t
 
	mv°ride
;

42 
öt32_t
 
	mª£rved
;

43 } 
	tegl_«tive_pixm≠_t
;

47 #ifde‡
__˝lu•lus


49 
	~<utûs/RefBa£.h
>

51 
«me•a˚
 
	g™droid
 {

57 
	gãm∂©e
 <
ty≥«me
 
	gNATIVE_TYPE
,Åy≥«mê
	gTYPE
,Åy≥«mê
	gREF
>

58 
˛ass
 
	gAN©iveObje˘Ba£
 : 
public
 
NATIVE_TYPE
,Öubli¯
	gREF


60 
	gpublic
:

62 
öcSå⁄g
(c⁄° * 
id
) const {

63 
REF
::
öcSå⁄g
(
id
);

65 
decSå⁄g
(c⁄° * 
id
) const {

66 
	gREF
::
decSå⁄g
(
id
);

69 
	g¥Ÿe˘ed
:

70 
AN©iveObje˘Ba£
<
	tNATIVE_TYPE
, 
	tTYPE
, 
	tREF
> 
	tBASE
;

71 
AN©iveObje˘Ba£
(Ë: 
NATIVE_TYPE
(), 
REF
() {

72 
	gNATIVE_TYPE
::
comm⁄
.
öcRef
 = incRef;

73 
	gNATIVE_TYPE
::
comm⁄
.
decRef
 = decRef;

75 
ölöe
 
TYPE
* 
gëSñf
(
NATIVE_TYPE
* 
£lf
) {

76  
	g°©ic_ˇ°
<
	gTYPE
*>(
	g£lf
);

78 
ölöe
 
TYPE
 c⁄°* 
gëSñf
(
NATIVE_TYPE
 c⁄°* 
£lf
) {

79  
	g°©ic_ˇ°
<
TYPE
 c⁄° *>(
	g£lf
);

81 
ölöe
 
TYPE
* 
gëSñf
(
™droid_«tive_ba£_t
* 
ba£
) {

82  
gëSñf
(
ªöãΩªt_ˇ°
<
NATIVE_TYPE
*>(
ba£
));

84 
ölöe
 
TYPE
 c⁄° * 
gëSñf
(
™droid_«tive_ba£_t
 c⁄°* 
ba£
) {

85  
gëSñf
(
ªöãΩªt_ˇ°
<
NATIVE_TYPE
 c⁄°*>(
ba£
));

87 
öcRef
(
™droid_«tive_ba£_t
* 
ba£
) {

88 
AN©iveObje˘Ba£
* 
	g£lf
 = 
gëSñf
(
ba£
);

89 
	g£lf
->
öcSå⁄g
(
£lf
);

91 
decRef
(
™droid_«tive_ba£_t
* 
ba£
) {

92 
AN©iveObje˘Ba£
* 
	g£lf
 = 
gëSñf
(
ba£
);

93 
	g£lf
->
decSå⁄g
(
£lf
);

	@jni/include/include/ui/DisplayInfo.h

18 #i‚de‡
ANDROID_UI_DISPLAY_INFO_H


19 
	#ANDROID_UI_DISPLAY_INFO_H


	)

21 
	~<°döt.h
>

22 
	~<sys/ty≥s.h
>

24 
	~<ui/PixñF‹m©.h
>

26 
«me•a˚
 
	g™droid
 {

28 
	sDi•œyInfo
 {

29 
uöt32_t
 
	gw
;

30 
uöt32_t
 
	gh
;

31 
PixñF‹m©Info
 
	gpixñF‹m©Info
;

32 
uöt8_t
 
	g‹õ¡©i⁄
;

33 
uöt8_t
 
	gª£rved
[3];

34 
	gÂs
;

35 
	gdísôy
;

36 
	gxdpi
;

37 
	gydpi
;

	@jni/include/include/ui/EGLNativeSurface.h

17 #i‚de‡
ANDROID_EGL_NATIVE_SURFACE_H


18 
	#ANDROID_EGL_NATIVE_SURFACE_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	~<cutûs/©omic.h
>

24 
	~<utûs/RefBa£.h
>

26 
	~<EGL/eg ©ives.h
>

29 
«me•a˚
 
	g™droid
 {

32 
	gãm∂©e
 <
˛ass
 
	gTYPE
>

33 
˛ass
 
	gEGLN©iveSurÁ˚
 : 
public
 
egl_«tive_wödow_t
,Öubli¯
	gLightRefBa£
<
	gTYPE
>

35 
	gpublic
:

36 
EGLN©iveSurÁ˚
() {

37 
mem£t
(
egl_«tive_wödow_t
::
ª£rved
, 0,

38 (
egl_«tive_wödow_t
::
ª£rved
));

39 
mem£t
(
egl_«tive_wödow_t
::
ª£rved_¥oc
, 0,

40 (
egl_«tive_wödow_t
::
ª£rved_¥oc
));

41 
mem£t
(
egl_«tive_wödow_t
::
€m
, 0,

42 (
egl_«tive_wödow_t
::
€m
));

44 
	g¥Ÿe˘ed
:

45 
EGLN©iveSurÁ˚
& 
›î©‹
 = (c⁄° EGLN©iveSurÁ˚& 
rhs
);

46 
EGLN©iveSurÁ˚
(c⁄° EGLN©iveSurÁ˚& 
rhs
);

47 
	gölöe
 ~
EGLN©iveSurÁ˚
() { };

	@jni/include/include/ui/EGLUtils.h

18 #i‚de‡
ANDROID_UI_EGLUTILS_H


19 
	#ANDROID_UI_EGLUTILS_H


	)

21 
	~<utûs/Eº‹s.h
>

22 
	~<ui/PixñF‹m©.h
>

23 
	~<EGL/egl.h
>

27 
«me•a˚
 
	g™droid
 {

30 ˛as†
	cEGLUtûs


32 
	gpublic
:

34 c⁄° *
°ªº‹
(
EGLöt
 
îr
);

36 
°©us_t
 
£À˘C⁄figF‹PixñF‹m©
(

37 
EGLDi•œy
 
dpy
,

38 
EGLöt
 c⁄°* 
©ås
,

39 
PixñF‹m©
 
f‹m©
,

40 
EGLC⁄fig
* 
outC⁄fig
);

42 
°©us_t
 
£À˘C⁄figF‹N©iveWödow
(

43 
EGLDi•œy
 
dpy
,

44 
EGLöt
 c⁄°* 
©ås
,

45 
EGLN©iveWödowTy≥
 
wödow
,

46 
EGLC⁄fig
* 
outC⁄fig
);

	@jni/include/include/ui/EventHub.h

18 #i‚de‡
_RUNTIME_EVENT_HUB_H


19 
	#_RUNTIME_EVENT_HUB_H


	)

21 
	~<utûs/Såög8.h
>

22 
	~<utûs/thªads.h
>

23 
	~<utûs/Log.h
>

24 
	~<utûs/thªads.h
>

25 
	~<utûs/Li°.h
>

26 
	~<utûs/Eº‹s.h
>

28 
	~<löux/öput.h
>

30 
	gpﬁlfd
;

32 
«me•a˚
 
	g™droid
 {

34 
˛ass
 
	gKeyLayoutM≠
;

46 ˛as†
	cEvítHub
 : 
public
 
RefBa£


48 
public
:

49 
EvítHub
();

51 
°©us_t
 
îr‹Check
() const;

55 
	gCLASS_KEYBOARD
 = 0x00000001,

56 
	gCLASS_ALPHAKEY
 = 0x00000002,

57 
	gCLASS_TOUCHSCREEN
 = 0x00000004,

58 
	gCLASS_TRACKBALL
 = 0x00000008,

59 
	gCLASS_TOUCHSCREEN_MT
= 0x00000010,

60 
	gCLASS_DPAD
 = 0x00000020

62 
uöt32_t
 
gëDevi˚Cœs£s
(
öt32_t
 
devi˚Id
) const;

64 
Såög8
 
gëDevi˚Name
(
öt32_t
 
devi˚Id
) const;

66 
gëAbsﬁuãInfo
(
öt32_t
 
devi˚Id
, 
axis
, *
outMöVÆue
,

67 * 
outMaxVÆue
, * 
outFœt
, * 
outFuzz
) const;

69 
gëSwôchSèã
(
sw
) const;

70 
gëSwôchSèã
(
öt32_t
 
devi˚Id
, 
sw
) const;

72 
gëSˇncodeSèã
(
key
) const;

73 
gëSˇncodeSèã
(
öt32_t
 
devi˚Id
, 
key
) const;

75 
gëKeycodeSèã
(
key
) const;

76 
gëKeycodeSèã
(
öt32_t
 
devi˚Id
, 
key
) const;

78 
°©us_t
 
sˇncodeToKeycode
(
öt32_t
 
devi˚Id
, 
sˇncode
,

79 
öt32_t
* 
outKeycode
, 
uöt32_t
* 
outFœgs
) const;

83 
addEx˛udedDevi˚
(c⁄° * 
devi˚Name
);

87 
	gDEVICE_ADDED
 = 0x10000000,

88 
	gDEVICE_REMOVED
 = 0x20000000

92 
boﬁ
 
hasKeys
(
size_t
 
numCodes
, 
öt32_t
* 
keyCodes
, 
uöt8_t
* 
outFœgs
);

94 
vútuÆ
 
boﬁ
 
gëEvít
(
öt32_t
* 
outDevi˚Id
, i¡32_t* 
outTy≥
,

95 
öt32_t
* 
outSˇncode
, i¡32_t* 
outKeycode
, 
uöt32_t
 *
outFœgs
,

96 
öt32_t
* 
outVÆue
, 
n£cs_t
* 
outWhí
);

98 
	g¥Ÿe˘ed
:

99 
vútuÆ
 ~
EvítHub
();

101 
	g¥iv©e
:

102 
boﬁ
 
›íPœtf‹mI≈ut
();

103 
öt32_t
 
c⁄vîtDevi˚Key_TI_P2
(
code
);

105 
›í_devi˚
(c⁄° *
devi˚
);

106 
˛o£_devi˚
(c⁄° *
devi˚
);

107 
sˇn_dú
(c⁄° *
dú«me
);

108 
ªad_nŸify
(
nfd
);

110 
°©us_t
 
	gmEº‹
;

112 
	sdevi˚_t
 {

113 c⁄° 
öt32_t
 
	gid
;

114 c⁄° 
Såög8
 
	g∑th
;

115 
Såög8
 
	g«me
;

116 
uöt32_t
 
	g˛as£s
;

117 
uöt8_t
* 
	gkeyBômask
;

118 
KeyLayoutM≠
* 
	gœyoutM≠
;

119 
Såög8
 
	gkeyœyoutFûíame
;

120 
devi˚_t
* 
	g√xt
;

122 
devi˚_t
(
öt32_t
 
_id
, c⁄° * 
_∑th
, c⁄° * 
«me
);

123 ~
devi˚_t
();

126 
devi˚_t
* 
gëDevi˚
(
öt32_t
 
devi˚Id
) const;

127 
boﬁ
 
hasKeycode
(
devi˚_t
* 
devi˚
, 
keycode
) const;

130 
muèbÀ
 
Muãx
 
	gmLock
;

132 
boﬁ
 
	gmHaveFú°Keybﬂrd
;

133 
öt32_t
 
	gmFú°KeybﬂrdId
;

135 
	sdevi˚_ít
 {

136 
devi˚_t
* 
	gdevi˚
;

137 
uöt32_t
 
	g£q
;

139 
devi˚_ít
 *
	gmDevi˚sById
;

140 
	gmNumDevi˚sById
;

142 
devi˚_t
 *
	gmO≥nögDevi˚s
;

143 
devi˚_t
 *
	gmClosögDevi˚s
;

145 
devi˚_t
 **
	gmDevi˚s
;

146 
pﬁlfd
 *
	gmFDs
;

147 
	gmFDCou¡
;

149 
boﬁ
 
	gmO≥√d
;

150 
	gLi°
<
	gSåög8
> 
	gmEx˛udedDevi˚s
;

153 #ifde‡
EV_SW


154 
öt32_t
 
	gmSwôches
[
SW_MAX
+1];

	@jni/include/include/ui/Fence.h

17 #i‚de‡
ANDROID_FENCE_H


18 
	#ANDROID_FENCE_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	~<ui/AN©iveObje˘Ba£.h
>

24 
	~<ui/PixñF‹m©.h
>

25 
	~<ui/Re˘.h
>

26 
	~<utûs/FœâíabÀ.h
>

27 
	~<utûs/Såög8.h
>

28 
	~<utûs/Timîs.h
>

30 
	gAN©iveWödowBuf„r
;

32 
«me•a˚
 
	g™droid
 {

38 
˛ass
 
	gFí˚


39 : 
public
 
LightRefBa£
<
Fí˚
>,Öubli¯
	gFœâíabÀ


41 
	gpublic
:

42 c⁄° 
•
<
Fí˚
> 
NO_FENCE
;

46 íum { 
	gTIMEOUT_NEVER
 = -1 };

51 
Fí˚
();

56 
Fí˚
(
„n˚Fd
);

61 
boﬁ
 
isVÆid
(Ëc⁄° {  
	gmFí˚Fd
 != -1; }

68 
°©us_t
 
waô
(
timeout
);

76 
°©us_t
 
waôF‹evî
(c⁄° * 
log«me
);

82 
	g•
<
	gFí˚
> 
mîge
(c⁄° 
Såög8
& 
«me
, c⁄° 
•
<
Fí˚
>& 
f1
,

83 c⁄° 
•
<
Fí˚
>& 
f2
);

88 
dup
() const;

94 
n£cs_t
 
gëSig«lTime
() const;

97 
size_t
 
gëFœâíedSize
() const;

98 
size_t
 
gëFdCou¡
() const;

99 
°©us_t
 
Ê©ãn
(* 
buf„r
, 
size_t
 
size
,

100 
fds
[], 
size_t
 
cou¡
) const;

101 
°©us_t
 
unÊ©ãn
(c⁄°* 
buf„r
, 
size_t
 
size
,

102 
fds
[], 
size_t
 
cou¡
);

104 
	g¥iv©e
:

106 
‰õnd
 
˛ass
 
LightRefBa£
<
Fí˚
>;

107 
	gvútuÆ
 ~
Fí˚
();

110 
Fí˚
(c⁄° Fí˚& 
rhs
);

111 
	gFí˚
& 
	g›î©‹
 = (c⁄° 
Fí˚
& 
rhs
);

112 c⁄° 
	gFí˚
& 
	g›î©‹
 = (c⁄° 
Fí˚
& 
rhs
) const;

114 
	gmFí˚Fd
;

	@jni/include/include/ui/FramebufferNativeWindow.h

17 #i‚de‡
ANDROID_FRAMEBUFFER_NATIVE_WINDOW_H


18 
	#ANDROID_FRAMEBUFFER_NATIVE_WINDOW_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	~<EGL/egl.h
>

25 
	~<utûs/thªads.h
>

26 
	~<ui/Re˘.h
>

28 
	~<pixñÊögî/pixñÊögî.h
>

30 
	~<ui/egl/™droid_«tives.h
>

33 "C" 
EGLN©iveWödowTy≥
 
™droid_¸óãDi•œySurÁ˚
();

36 
«me•a˚
 
	g™droid
 {

39 
˛ass
 
	gSurÁ˚
;

40 
˛ass
 
	gN©iveBuf„r
;

44 
˛ass
 
	gFømebuf„rN©iveWödow


45 : 
public
 
EGLN©iveBa£
<

46 
™droid_«tive_wödow_t
,

47 
	gFømebuf„rN©iveWödow
,

48 
	gLightRefBa£
<
	gFømebuf„rN©iveWödow
> >

50 
	gpublic
:

51 
Fømebuf„rN©iveWödow
();

53 
‰amebuf„r_devi˚_t
 c⁄° * 
gëDevi˚
(Ëc⁄° {  
	gfbDev
; }

55 
boﬁ
 
isUpd©eOnDem™d
(Ëc⁄° {  
	gmUpd©eOnDem™d
; }

56 
°©us_t
 
£tUpd©eRe˘™gÀ
(c⁄° 
Re˘
& 
upd©eRe˘
);

57 
°©us_t
 
composôi⁄Com∂ëe
();

59 
	g¥iv©e
:

60 
‰õnd
 
˛ass
 
LightRefBa£
<
Fømebuf„rN©iveWödow
>;

61 ~
Fømebuf„rN©iveWödow
();

62 
£tSw≠I¡îvÆ
(
™droid_«tive_wödow_t
* 
wödow
, 
öãrvÆ
);

63 
dequeueBuf„r
(
™droid_«tive_wödow_t
* 
wödow
, 
™droid_«tive_buf„r_t
** 
buf„r
);

64 
lockBuf„r
(
™droid_«tive_wödow_t
* 
wödow
, 
™droid_«tive_buf„r_t
* 
buf„r
);

65 
queueBuf„r
(
™droid_«tive_wödow_t
* 
wödow
, 
™droid_«tive_buf„r_t
* 
buf„r
);

66 
quîy
(
™droid_«tive_wödow_t
* 
wödow
, 
wh©
, * 
vÆue
);

67 
≥rf‹m
(
™droid_«tive_wödow_t
* 
wödow
, 
›î©i⁄
, ...);

69 
‰amebuf„r_devi˚_t
* 
	gfbDev
;

70 
Æloc_devi˚_t
* 
	ggrDev
;

72 
	g•
<
	gN©iveBuf„r
> 
	gbuf„rs
[2];

73 
	g•
<
	gN©iveBuf„r
> 
	g‰⁄t
;

75 
muèbÀ
 
Muãx
 
	gmuãx
;

76 
C⁄dôi⁄
 
	gmC⁄dôi⁄
;

77 
öt32_t
 
	gmNumBuf„rs
;

78 
öt32_t
 
	gmNumFªeBuf„rs
;

79 
öt32_t
 
	gmBuf„rHód
;

80 
boﬁ
 
	gmUpd©eOnDem™d
;

	@jni/include/include/ui/GraphicBuffer.h

17 #i‚de‡
ANDROID_GRAPHIC_BUFFER_H


18 
	#ANDROID_GRAPHIC_BUFFER_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	~<ui/™droid_«tive_buf„r.h
>

24 
	~<ui/PixñF‹m©.h
>

25 
	~<ui/Re˘.h
>

26 
	~<utûs/FœâíabÀ.h
>

27 
	~<pixñÊögî/pixñÊögî.h
>

29 
	g™droid_«tive_buf„r_t
;

31 
«me•a˚
 
	g™droid
 {

33 
˛ass
 
	gGøphicBuf„rM≠≥r
;

39 
˛ass
 
	gGøphicBuf„r


40 : 
public
 
EGLN©iveBa£
<

41 
™droid_«tive_buf„r_t
,

42 
	gGøphicBuf„r
,

43 
	gLightRefBa£
<
	gGøphicBuf„r
> >, 
public
 
	gFœâíabÀ


45 
	gpublic
:

48 
USAGE_SW_READ_NEVER
 = 
GRALLOC_USAGE_SW_READ_NEVER
,

49 
	gUSAGE_SW_READ_RARELY
 = 
GRALLOC_USAGE_SW_READ_RARELY
,

50 
	gUSAGE_SW_READ_OFTEN
 = 
GRALLOC_USAGE_SW_READ_OFTEN
,

51 
	gUSAGE_SW_READ_MASK
 = 
GRALLOC_USAGE_SW_READ_MASK
,

53 
	gUSAGE_SW_WRITE_NEVER
 = 
GRALLOC_USAGE_SW_WRITE_NEVER
,

54 
	gUSAGE_SW_WRITE_RARELY
 = 
GRALLOC_USAGE_SW_WRITE_RARELY
,

55 
	gUSAGE_SW_WRITE_OFTEN
 = 
GRALLOC_USAGE_SW_WRITE_OFTEN
,

56 
	gUSAGE_SW_WRITE_MASK
 = 
GRALLOC_USAGE_SW_WRITE_MASK
,

58 
	gUSAGE_SOFTWARE_MASK
 = 
USAGE_SW_READ_MASK
|
USAGE_SW_WRITE_MASK
,

60 
	gUSAGE_HW_TEXTURE
 = 
GRALLOC_USAGE_HW_TEXTURE
,

61 
	gUSAGE_HW_RENDER
 = 
GRALLOC_USAGE_HW_RENDER
,

62 
	gUSAGE_HW_2D
 = 
GRALLOC_USAGE_HW_2D
,

63 
	gUSAGE_HW_MASK
 = 
GRALLOC_USAGE_HW_MASK


66 
GøphicBuf„r
();

69 
GøphicBuf„r
(
uöt32_t
 
w
, uöt32_à
h
, 
PixñF‹m©
 
f‹m©
, uöt32_à
ußge
);

72 
GøphicBuf„r
(
uöt32_t
 
w
, uöt32_à
h
, 
PixñF‹m©
 
f‹m©
, uöt32_à
ußge
,

73 
uöt32_t
 
°ride
, 
«tive_h™dÀ_t
* 
h™dÀ
, 
boﬁ
 
kìpOw√rshù
);

76 
°©us_t
 
öôCheck
() const;

78 
uöt32_t
 
gëWidth
(Ëc⁄° {  
	gwidth
; }

79 
uöt32_t
 
gëHeight
(Ëc⁄° {  
	gheight
; }

80 
uöt32_t
 
gëSåide
(Ëc⁄° {  
	g°ride
; }

81 
uöt32_t
 
gëUßge
(Ëc⁄° {  
	gußge
; }

82 
PixñF‹m©
 
gëPixñF‹m©
(Ëc⁄° {  
	gf‹m©
; }

83 
Re˘
 
gëBounds
(Ëc⁄° {  Re˘(
width
, 
height
); }

85 
°©us_t
 
ªÆloˇã
(
uöt32_t
 
w
, uöt32_à
h
, 
PixñF‹m©
 
f
, uöt32_à
ußge
);

87 
°©us_t
 
lock
(
uöt32_t
 
ußge
, ** 
vaddr
);

88 
°©us_t
 
lock
(
uöt32_t
 
ußge
, c⁄° 
Re˘
& 
ª˘
, ** 
vaddr
);

89 
°©us_t
 
lock
(
GGLSurÁ˚
* 
surÁ˚
, 
uöt32_t
 
ußge
);

90 
°©us_t
 
u∆ock
();

92 
™droid_«tive_buf„r_t
* 
gëN©iveBuf„r
() const;

94 
£tIndex
(
ödex
);

95 
gëIndex
() const;

96 
£tVîtiˇlSåide
(
uöt32_t
 
v°ride
);

97 
uöt32_t
 
gëVîtiˇlSåide
() const;

99 
	g¥Ÿe˘ed
:

100 
vútuÆ
 ~
GøphicBuf„r
();

103 
	gownN⁄e
 = 0,

104 
	gownH™dÀ
 = 1,

105 
	gownD©a
 = 2,

108 
ölöe
 c⁄° 
	gGøphicBuf„rM≠≥r
& 
gëBuf„rM≠≥r
(Ëc⁄° {  
	gmBuf„rM≠≥r
; }

109 
ölöe
 
	gGøphicBuf„rM≠≥r
& 
gëBuf„rM≠≥r
(Ë{  
	gmBuf„rM≠≥r
; }

110 
uöt8_t
 
	gmOw√r
;

112 
	g¥iv©e
:

113 
‰õnd
 
˛ass
 
SurÁ˚
;

114 
‰õnd
 
˛ass
 
	gBpSurÁ˚
;

115 
‰õnd
 
˛ass
 
	gBnSurÁ˚
;

116 
‰õnd
 
˛ass
 
	gLightRefBa£
<
	gGøphicBuf„r
>;

117 
GøphicBuf„r
(c⁄° GøphicBuf„r& 
rhs
);

118 
	gGøphicBuf„r
& 
	g›î©‹
 = (c⁄° 
GøphicBuf„r
& 
rhs
);

119 c⁄° 
	gGøphicBuf„r
& 
	g›î©‹
 = (c⁄° 
GøphicBuf„r
& 
rhs
) const;

121 
°©us_t
 
öôSize
(
uöt32_t
 
w
, uöt32_à
h
, 
PixñF‹m©
 
f‹m©
,

122 
uöt32_t
 
ußge
);

124 
‰ì_h™dÀ
();

127 
size_t
 
gëFœâíedSize
() const;

128 
size_t
 
gëFdCou¡
() const;

129 
°©us_t
 
Ê©ãn
(* 
buf„r
, 
size_t
 
size
,

130 
fds
[], 
size_t
 
cou¡
) const;

131 
°©us_t
 
unÊ©ãn
(c⁄°* 
buf„r
, 
size_t
 
size
,

132 
fds
[], 
size_t
 
cou¡
);

135 
	gGøphicBuf„rM≠≥r
& 
	gmBuf„rM≠≥r
;

136 
ssize_t
 
	gmInôCheck
;

137 
uöt32_t
 
	gmVSåide
;

138 
	gmIndex
;

	@jni/include/include/ui/GraphicBufferAllocator.h

18 #i‚de‡
ANDROID_BUFFER_ALLOCATOR_H


19 
	#ANDROID_BUFFER_ALLOCATOR_H


	)

21 
	~<°döt.h
>

23 
	~<cutûs/«tive_h™dÀ.h
>

25 
	~<utûs/Eº‹s.h
>

26 
	~<utûs/KeyedVe˘‹.h
>

27 
	~<utûs/thªads.h
>

28 
	~<utûs/SögÀt⁄.h
>

30 
	~<ui/PixñF‹m©.h
>

32 
	~<h¨dw¨e/gøŒoc.h
>

35 
«me•a˚
 
	g™droid
 {

38 
˛ass
 
	gSåög8
;

40 
˛ass
 
	gGøphicBuf„rAŒoˇt‹
 : 
public
 
SögÀt⁄
<
GøphicBuf„rAŒoˇt‹
>

42 
public
:

44 
USAGE_SW_READ_NEVER
 = 
GRALLOC_USAGE_SW_READ_NEVER
,

45 
	gUSAGE_SW_READ_RARELY
 = 
GRALLOC_USAGE_SW_READ_RARELY
,

46 
	gUSAGE_SW_READ_OFTEN
 = 
GRALLOC_USAGE_SW_READ_OFTEN
,

47 
	gUSAGE_SW_READ_MASK
 = 
GRALLOC_USAGE_SW_READ_MASK
,

49 
	gUSAGE_SW_WRITE_NEVER
 = 
GRALLOC_USAGE_SW_WRITE_NEVER
,

50 
	gUSAGE_SW_WRITE_RARELY
 = 
GRALLOC_USAGE_SW_WRITE_RARELY
,

51 
	gUSAGE_SW_WRITE_OFTEN
 = 
GRALLOC_USAGE_SW_WRITE_OFTEN
,

52 
	gUSAGE_SW_WRITE_MASK
 = 
GRALLOC_USAGE_SW_WRITE_MASK
,

54 
	gUSAGE_SOFTWARE_MASK
 = 
USAGE_SW_READ_MASK
|
USAGE_SW_WRITE_MASK
,

56 
	gUSAGE_HW_TEXTURE
 = 
GRALLOC_USAGE_HW_TEXTURE
,

57 
	gUSAGE_HW_RENDER
 = 
GRALLOC_USAGE_HW_RENDER
,

58 
	gUSAGE_HW_2D
 = 
GRALLOC_USAGE_HW_2D
,

59 
	gUSAGE_HW_MASK
 = 
GRALLOC_USAGE_HW_MASK


62 
ölöe
 
	gGøphicBuf„rAŒoˇt‹
& 
gë
(Ë{  
gëIn°™˚
(); }

65 
°©us_t
 
Æloc
(
uöt32_t
 
w
, uöt32_à
h
, 
PixñF‹m©
 
f‹m©
, 
ußge
,

66 
buf„r_h™dÀ_t
* 
h™dÀ
, 
öt32_t
* 
°ride
);

68 
°©us_t
 
‰ì
(
buf„r_h™dÀ_t
 
h™dÀ
);

70 
dump
(
Såög8
& 
ªs
) const;

72 
	g¥iv©e
:

73 
	sÆloc_ªc_t
 {

74 
uöt32_t
 
w
;

75 
uöt32_t
 
	gh
;

76 
PixñF‹m©
 
	gf‹m©
;

77 
uöt32_t
 
	gußge
;

78 * 
	gvaddr
;

79 
size_t
 
	gsize
;

82 
Muãx
 
	gsLock
;

83 
	gKeyedVe˘‹
<
	gbuf„r_h™dÀ_t
, 
	gÆloc_ªc_t
> 
	gsAŒocLi°
;

85 
‰õnd
 
˛ass
 
	gSögÀt⁄
<
	gGøphicBuf„rAŒoˇt‹
>;

86 
GøphicBuf„rAŒoˇt‹
();

87 ~
GøphicBuf„rAŒoˇt‹
();

89 
Æloc_devi˚_t
 *
	gmAŒocDev
;

	@jni/include/include/ui/GraphicBufferMapper.h

17 #i‚de‡
ANDROID_UI_BUFFER_MAPPER_H


18 
	#ANDROID_UI_BUFFER_MAPPER_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	~<utûs/SögÀt⁄.h
>

25 
	~<h¨dw¨e/gøŒoc.h
>

28 
	ggøŒoc_moduÀ_t
;

30 
«me•a˚
 
	g™droid
 {

34 
˛ass
 
	gRe˘
;

36 
˛ass
 
	gGøphicBuf„rM≠≥r
 : 
public
 
SögÀt⁄
<
GøphicBuf„rM≠≥r
>

38 
public
:

39 
ölöe
 
GøphicBuf„rM≠≥r
& 
gë
(Ë{  
gëIn°™˚
(); }

41 
°©us_t
 
ªgi°îBuf„r
(
buf„r_h™dÀ_t
 
h™dÀ
);

43 
°©us_t
 
uƒegi°îBuf„r
(
buf„r_h™dÀ_t
 
h™dÀ
);

45 
°©us_t
 
lock
(
buf„r_h™dÀ_t
 
h™dÀ
,

46 
ußge
, c⁄° 
Re˘
& 
bounds
, ** 
vaddr
);

48 
°©us_t
 
u∆ock
(
buf„r_h™dÀ_t
 
h™dÀ
);

51 
dump
(
buf„r_h™dÀ_t
 
h™dÀ
);

53 
	g¥iv©e
:

54 
‰õnd
 
˛ass
 
SögÀt⁄
<
GøphicBuf„rM≠≥r
>;

55 
GøphicBuf„rM≠≥r
();

56 
gøŒoc_moduÀ_t
 c⁄° *
	gmAŒocMod
;

	@jni/include/include/ui/IOverlay.h

17 #i‚de‡
ANDROID_IOVERLAY_H


18 
	#ANDROID_IOVERLAY_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	~<utûs/Eº‹s.h
>

24 
	~<bödî/II¡îÁ˚.h
>

25 
	~<utûs/RefBa£.h
>

26 
	~<ui/PixñF‹m©.h
>

28 
«me•a˚
 
	g™droid
 {

30 ˛as†
	cIOvîœy
 : 
public
 
II¡îÁ˚


32 
public
:

33 
DECLARE_META_INTERFACE
(
Ovîœy
);

35 
vútuÆ
 
de°roy
() = 0;

40 
˛ass
 
	gBnOvîœy
 : 
public
 
BnI¡îÁ˚
<
IOvîœy
>

42 
public
:

43 
vútuÆ
 
°©us_t
 
⁄Tønß˘
–
uöt32_t
 
code
,

44 c⁄° 
P¨˚l
& 
d©a
,

45 
P¨˚l
* 
ª∂y
,

46 
uöt32_t
 
Êags
 = 0);

	@jni/include/include/ui/KeyCharacterMap.h

17 #i‚de‡
_UI_KEY_CHARACTER_MAP_H


18 
	#_UI_KEY_CHARACTER_MAP_H


	)

20 
	~<°döt.h
>

21 
	~<utûs/Ve˘‹.h
>

23 
usög
 
«me•a˚
 
	g™droid
;

25 ˛as†
	cKeyCh¨a˘îM≠


27 
	mpublic
:

28 ~
KeyCh¨a˘îM≠
();

32 
gë
(
keycode
, 
mëa
);

33 
gëNumbî
(
keycode
);

34 
gëM©ch
(
keycode
, c⁄° * 
ch¨s
,

35 
ch¨size
, 
uöt32_t
 
modifõrs
);

36 
gëDi•œyLabñ
(
keycode
);

37 
boﬁ
 
gëKeyD©a
(
keycode
, *
di•œyLabñ
,

38 *
numbî
, * 
ªsu…s
);

39 
ölöe
 
	$gëKeybﬂrdTy≥
(Ë{  
m_ty≥
; }

40 
boﬁ
 
	`gëEvíts
(
uöt16_t
* 
ch¨s
, 
size_t
 
Àn
,

41 
Ve˘‹
<
öt32_t
>* 
keys
, Ve˘‹<
uöt32_t
>* 
modifõrs
);

43 
KeyCh¨a˘îM≠
* 
	`lﬂd
(
id
);

46 
NUMERIC
 = 1,

47 
Q14
 = 2,

48 
QWERTY
 = 3

49 
	}
};

51 
	#META_MASK
 3

	)

53 
	g¥iv©e
:

54 
	sKey


56 
öt32_t
 
keycode
;

57 
uöt16_t
 
	gdi•œy_œbñ
;

58 
uöt16_t
 
	gnumbî
;

59 
uöt16_t
 
	gd©a
[
META_MASK
 + 1];

62 
KeyCh¨a˘îM≠
();

63 
KeyCh¨a˘îM≠
* 
åy_fûe
(c⁄° * 
fûíame
);

64 
Key
* 
föd_key
(
keycode
);

65 
boﬁ
 
föd_ch¨
(
uöt16_t
 
c
, 
uöt32_t
* 
key
, uöt32_t* 
mods
);

67 
	gm_ty≥
;

68 
	gm_keyCou¡
;

69 
Key
* 
	gm_keys
;

	@jni/include/include/ui/KeycodeLabels.h

17 #i‚de‡
_UI_KEYCODE_LABELS_H


18 
	#_UI_KEYCODE_LABELS_H


	)

20 
	sKeycodeLabñ
 {

21 c⁄° *
	mlôîÆ
;

22 
	mvÆue
;

25 c⁄° 
KeycodeLabñ
 
	gKEYCODES
[] = {

128 { 
NULL
, 0 }

132 
	eKeyCode
 {

133 
	mkKeyCodeUnknown
 = 0,

135 
	mkKeyCodeSo·Le·
 = 1,

136 
	mkKeyCodeSo·Right
 = 2,

137 
	mkKeyCodeHome
 = 3,

138 
	mkKeyCodeBack
 = 4,

139 
	mkKeyCodeCÆl
 = 5,

140 
	mkKeyCodeEndCÆl
 = 6,

141 
	mkKeyCode0
 = 7,

142 
	mkKeyCode1
 = 8,

143 
	mkKeyCode2
 = 9,

144 
	mkKeyCode3
 = 10,

145 
	mkKeyCode4
 = 11,

146 
	mkKeyCode5
 = 12,

147 
	mkKeyCode6
 = 13,

148 
	mkKeyCode7
 = 14,

149 
	mkKeyCode8
 = 15,

150 
	mkKeyCode9
 = 16,

151 
	mkKeyCodeSèr
 = 17,

152 
	mkKeyCodePound
 = 18,

153 
	mkKeyCodeD∑dUp
 = 19,

154 
	mkKeyCodeD∑dDown
 = 20,

155 
	mkKeyCodeD∑dLe·
 = 21,

156 
	mkKeyCodeD∑dRight
 = 22,

157 
	mkKeyCodeD∑dCíãr
 = 23,

158 
	mkKeyCodeVﬁumeUp
 = 24,

159 
	mkKeyCodeVﬁumeDown
 = 25,

160 
	mkKeyCodePowî
 = 26,

161 
	mkKeyCodeCamîa
 = 27,

162 
	mkKeyCodeCÀ¨
 = 28,

163 
	mkKeyCodeA
 = 29,

164 
	mkKeyCodeB
 = 30,

165 
	mkKeyCodeC
 = 31,

166 
	mkKeyCodeD
 = 32,

167 
	mkKeyCodeE
 = 33,

168 
	mkKeyCodeF
 = 34,

169 
	mkKeyCodeG
 = 35,

170 
	mkKeyCodeH
 = 36,

171 
	mkKeyCodeI
 = 37,

172 
	mkKeyCodeJ
 = 38,

173 
	mkKeyCodeK
 = 39,

174 
	mkKeyCodeL
 = 40,

175 
	mkKeyCodeM
 = 41,

176 
	mkKeyCodeN
 = 42,

177 
	mkKeyCodeO
 = 43,

178 
	mkKeyCodeP
 = 44,

179 
	mkKeyCodeQ
 = 45,

180 
	mkKeyCodeR
 = 46,

181 
	mkKeyCodeS
 = 47,

182 
	mkKeyCodeT
 = 48,

183 
	mkKeyCodeU
 = 49,

184 
	mkKeyCodeV
 = 50,

185 
	mkKeyCodeW
 = 51,

186 
	mkKeyCodeX
 = 52,

187 
	mkKeyCodeY
 = 53,

188 
	mkKeyCodeZ
 = 54,

189 
	mkKeyCodeComma
 = 55,

190 
	mkKeyCodePîiod
 = 56,

191 
	mkKeyCodeA…Le·
 = 57,

192 
	mkKeyCodeA…Right
 = 58,

193 
	mkKeyCodeShi·Le·
 = 59,

194 
	mkKeyCodeShi·Right
 = 60,

195 
	mkKeyCodeTab
 = 61,

196 
	mkKeyCodeS∑˚
 = 62,

197 
	mkKeyCodeSym
 = 63,

198 
	mkKeyCodeEx∂‹î
 = 64,

199 
	mkKeyCodeEnvñ›e
 = 65,

200 
	mkKeyCodeNewlöe
 = 66,

201 
	mkKeyCodeDñ
 = 67,

202 
	mkKeyCodeGøve
 = 68,

203 
	mkKeyCodeMöus
 = 69,

204 
	mkKeyCodeEquÆs
 = 70,

205 
	mkKeyCodeLe·Bøckë
 = 71,

206 
	mkKeyCodeRightBøckë
 = 72,

207 
	mkKeyCodeBack¶ash
 = 73,

208 
	mkKeyCodeSemicﬁ⁄
 = 74,

209 
	mkKeyCodeApo°r›he
 = 75,

210 
	mkKeyCodeSœsh
 = 76,

211 
	mkKeyCodeAt
 = 77,

212 
	mkKeyCodeNum
 = 78,

213 
	mkKeyCodeHódSëHook
 = 79,

214 
	mkKeyCodeFocus
 = 80,

215 
	mkKeyCodePlus
 = 81,

216 
	mkKeyCodeMíu
 = 82,

217 
	mkKeyCodeNŸifiˇti⁄
 = 83,

218 
	mkKeyCodeSórch
 = 84,

219 
	mkKeyCodePœyPau£
 = 85,

220 
	mkKeyCodeSt›
 = 86,

221 
	mkKeyCodeNextS⁄g
 = 87,

222 
	mkKeyCodePªviousS⁄g
 = 88,

223 
	mkKeyCodeRewöd
 = 89,

224 
	mkKeyCodeF‹w¨d
 = 90,

225 
	mkKeyCodeMuã
 = 91,

226 
	mkKeyCodePageUp
 = 92,

227 
	mkKeyCodePageDown
 = 93,

228 
	mkKeyCodePi˘Symbﬁs
 = 94,

229 
	mkKeyCodeSwôchCh¨£t
 = 95

230 } 
	tKeyCode
;

232 c⁄° 
KeycodeLabñ
 
	gFLAGS
[] = {

241 { 
NULL
, 0 }

	@jni/include/include/ui/Overlay.h

17 #i‚de‡
ANDROID_OVERLAY_H


18 
	#ANDROID_OVERLAY_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	~<utûs/Eº‹s.h
>

24 
	~<bödî/II¡îÁ˚.h
>

25 
	~<utûs/RefBa£.h
>

26 
	~<utûs/thªads.h
>

28 
	~<ui/PixñF‹m©.h
>

29 
	~<ui/IOvîœy.h
>

31 
	~<h¨dw¨e/ovîœy.h
>

33 
«me•a˚
 
	g™droid
 {

35 
˛ass
 
	gIMem‹y
;

36 
˛ass
 
	gIMem‹yHóp
;

40 
˛ass
 
	gOvîœyRef
 : 
public
 
LightRefBa£
<
OvîœyRef
>

42 
public
:

43 
OvîœyRef
(
ovîœy_h™dÀ_t
, c⁄° 
•
<
IOvîœy
>&,

44 
uöt32_t
 
w
, uöt32_à
h
, 
öt32_t
 
f
, uöt32_à
ws
, uöt32_à
hs
);

46 
	g•
<
	gOvîœyRef
> 
ªadFromP¨˚l
(c⁄° 
P¨˚l
& 
d©a
);

47 
°©us_t
 
wrôeToP¨˚l
(
P¨˚l
* 
ª∂y
, c⁄° 
•
<
OvîœyRef
>& 
o
);

49 
	g¥iv©e
:

50 
‰õnd
 
˛ass
 
LightRefBa£
<
OvîœyRef
>;

51 
‰õnd
 
˛ass
 
	gOvîœy
;

53 
OvîœyRef
();

54 
	gvútuÆ
 ~
OvîœyRef
();

56 
ovîœy_h™dÀ_t
 
	gmOvîœyH™dÀ
;

57 
	g•
<
	gIOvîœy
> 
	gmOvîœyCh™√l
;

58 
uöt32_t
 
	gmWidth
;

59 
uöt32_t
 
	gmHeight
;

60 
öt32_t
 
	gmF‹m©
;

61 
öt32_t
 
	gmWidthSåide
;

62 
öt32_t
 
	gmHeightSåide
;

63 
boﬁ
 
	gmOwnH™dÀ
;

68 ˛as†
	cOvîœy
 : 
public
 
vútuÆ
 
RefBa£


70 
public
:

71 
Ovîœy
(c⁄° 
•
<
OvîœyRef
>& 
ovîœyRef
);

74 
de°roy
();

77 
ovîœy_h™dÀ_t
 
gëH™dÀRef
() const;

80 
°©us_t
 
dequeueBuf„r
(
ovîœy_buf„r_t
* 
buf„r
);

83 
°©us_t
 
queueBuf„r
(
ovîœy_buf„r_t
 
buf„r
);

86 
°©us_t
 
ªsizeI≈ut
(
uöt32_t
 
width
, uöt32_à
height
);

88 
°©us_t
 
£tCr›
(
uöt32_t
 
x
, uöt32_à
y
, uöt32_à
w
, uöt32_à
h
) ;

90 
°©us_t
 
gëCr›
(
uöt32_t
* 
x
, uöt32_t* 
y
, uöt32_t* 
w
, uöt32_t* 
h
) ;

93 
°©us_t
 
£tP¨amëî
(
∑øm
, 
vÆue
);

96 * 
gëBuf„rAddªss
(
ovîœy_buf„r_t
 
buf„r
);

99 
uöt32_t
 
gëWidth
() const;

100 
uöt32_t
 
gëHeight
() const;

101 
öt32_t
 
gëF‹m©
() const;

102 
öt32_t
 
gëWidthSåide
() const;

103 
öt32_t
 
gëHeightSåide
() const;

104 
öt32_t
 
gëBuf„rCou¡
() const;

105 
°©us_t
 
gëSètus
() const;

107 
	g¥iv©e
:

108 
vútuÆ
 ~
Ovîœy
();

110 
	g•
<
	gOvîœyRef
> 
	gmOvîœyRef
;

111 
ovîœy_d©a_devi˚_t
 *
	gmOvîœyD©a
;

112 
°©us_t
 
	gmSètus
;

	@jni/include/include/ui/PixelFormat.h

26 #i‚de‡
UI_PIXELFORMAT_H


27 
	#UI_PIXELFORMAT_H


	)

29 
	~<°döt.h
>

30 
	~<sys/ty≥s.h
>

31 
	~<utûs/Eº‹s.h
>

32 
	~<pixñÊögî/f‹m©.h
>

33 
	~<h¨dw¨e/h¨dw¨e.h
>

35 
«me•a˚
 
	g™droid
 {

42 
	gPIXEL_FORMAT_UNKNOWN
 = 0,

43 
	gPIXEL_FORMAT_NONE
 = 0,

46 
	gPIXEL_FORMAT_CUSTOM
 = -4,

49 
	gPIXEL_FORMAT_TRANSLUCENT
 = -3,

52 
	gPIXEL_FORMAT_TRANSPARENT
 = -2,

56 
	gPIXEL_FORMAT_OPAQUE
 = -1,

61 
	gPIXEL_FORMAT_RGBA_8888
 = 
HAL_PIXEL_FORMAT_RGBA_8888
,

62 
	gPIXEL_FORMAT_RGBX_8888
 = 
HAL_PIXEL_FORMAT_RGBX_8888
,

63 
	gPIXEL_FORMAT_RGB_888
 = 
HAL_PIXEL_FORMAT_RGB_888
,

64 
	gPIXEL_FORMAT_RGB_565
 = 
HAL_PIXEL_FORMAT_RGB_565
,

65 
	gPIXEL_FORMAT_BGRA_8888
 = 
HAL_PIXEL_FORMAT_BGRA_8888
,

66 
	gPIXEL_FORMAT_RGBA_5551
 = 
HAL_PIXEL_FORMAT_RGBA_5551
,

67 
	gPIXEL_FORMAT_RGBA_4444
 = 
HAL_PIXEL_FORMAT_RGBA_4444
,

68 
	gPIXEL_FORMAT_A_8
 = 
GGL_PIXEL_FORMAT_A_8
,

69 
	gPIXEL_FORMAT_L_8
 = 
GGL_PIXEL_FORMAT_L_8
,

70 
	gPIXEL_FORMAT_LA_88
 = 
GGL_PIXEL_FORMAT_LA_88
,

71 
	gPIXEL_FORMAT_RGB_332
 = 
GGL_PIXEL_FORMAT_RGB_332
,

77 
öt32_t
 
	tPixñF‹m©
;

79 
	sPixñF‹m©Info


82 
	gINDEX_ALPHA
 = 0,

83 
	gINDEX_RED
 = 1,

84 
	gINDEX_GREEN
 = 2,

85 
	gINDEX_BLUE
 = 3

89 
	gALPHA
 = 1,

90 
	gRGB
 = 2,

91 
	gRGBA
 = 3,

92 
	gLUMINANCE
 = 4,

93 
	gLUMINANCE_ALPHA
 = 5,

94 
	gOTHER
 = 0xFF

97 
	sszöfo
 {

98 
uöt8_t
 
	gh
;

99 
uöt8_t
 
	gl
;

102 
ölöe
 
PixñF‹m©Info
(Ë: 
vîsi⁄
((PixelFormatInfo)) { }

103 
size_t
 
gëSˇ∆öeSize
(
width
) const;

104 
size_t
 
gëSize
(size_à
ci
) const {

105  (
	gci
 <3Ë? (
cöfo
[
ci
].
h
 - cöfo[ci].
l
) : 0;

107 
size_t
 
	gvîsi⁄
;

108 
PixñF‹m©
 
	gf‹m©
;

109 
size_t
 
	gbyãsPîPixñ
;

110 
size_t
 
	gbôsPîPixñ
;

112 
szöfo
 
	gcöfo
[4];

114 
uöt8_t
 
	gh_Æpha
;

115 
uöt8_t
 
	gl_Æpha
;

116 
uöt8_t
 
	gh_ªd
;

117 
uöt8_t
 
	gl_ªd
;

118 
uöt8_t
 
	gh_gªí
;

119 
uöt8_t
 
	gl_gªí
;

120 
uöt8_t
 
	gh_blue
;

121 
uöt8_t
 
	gl_blue
;

124 
uöt8_t
 
	gcomp⁄íts
;

125 
uöt8_t
 
	gª£rved0
[3];

126 
uöt32_t
 
	gª£rved1
;

131 
ssize_t
 
byãsPîPixñ
(
PixñF‹m©
 
f‹m©
);

132 
ssize_t
 
bôsPîPixñ
(
PixñF‹m©
 
f‹m©
);

133 
°©us_t
 
gëPixñF‹m©Info
(
PixñF‹m©
 
f‹m©
, 
PixñF‹m©Info
* 
öfo
);

	@jni/include/include/ui/Point.h

17 #i‚de‡
ANDROID_UI_POINT


18 
	#ANDROID_UI_POINT


	)

20 
	~<utûs/Ty≥Hñ≥rs.h
>

22 
«me•a˚
 
	g™droid
 {

24 ˛as†
	cPoöt


26 
	gpublic
:

27 
x
;

28 
	gy
;

34 
ölöe
 
Poöt
() {

36 
ölöe
 
Poöt
(
x
, 
y
) : x(x), y(y) {

39 
ölöe
 
boﬁ
 
	g›î©‹
 =(c⁄° 
Poöt
& 
rhs
) const {

40  (
x
 =
rhs
.xË&& (
y
 ==Ñhs.y);

42 
ölöe
 
boﬁ
 
	g›î©‹
 !(c⁄° 
Poöt
& 
rhs
) const {

43  !
›î©‹
 =(
rhs
);

46 
ölöe
 
boﬁ
 
isOrigö
() const {

47  !(
	gx
|
	gy
);

52 
boﬁ
 
	g›î©‹
 < (c⁄° 
	gPoöt
& 
	grhs
) const {

53  
	gy
<
	grhs
.y || (y==
rhs
.
y
 && 
x
<rhs.x);

56 
ölöe
 
	gPoöt
& 
	g›î©‹
 - () {

57 
	gx
 = -
x
;

58 
	gy
 = -
y
;

59  *
	gthis
;

62 
ölöe
 
	gPoöt
& 
	g›î©‹
 +(c⁄° 
Poöt
& 
rhs
) {

63 
x
 +
rhs
.x;

64 
	gy
 +
rhs
.
y
;

65  *
	gthis
;

67 
ölöe
 
	gPoöt
& 
	g›î©‹
 -(c⁄° 
Poöt
& 
rhs
) {

68 
x
 -
rhs
.x;

69 
	gy
 -
rhs
.
y
;

70  *
	gthis
;

73 c⁄° 
Poöt
 
	g›î©‹
 + (c⁄° 
	gPoöt
& 
	grhs
) const {

74 c⁄° 
Poöt
 
ªsu…
(
x
+
rhs
.x, 
y
+rhs.y);

75  
	gªsu…
;

77 c⁄° 
Poöt
 
	g›î©‹
 - (c⁄° 
	gPoöt
& 
	grhs
) const {

78 c⁄° 
Poöt
 
ªsu…
(
x
-
rhs
.x, 
y
-rhs.y);

79  
	gªsu…
;

83 
ANDROID_BASIC_TYPES_TRAITS
(
Poöt
)

	@jni/include/include/ui/Rect.h

17 #i‚de‡
ANDROID_UI_RECT


18 
	#ANDROID_UI_RECT


	)

20 
	~<utûs/Ty≥Hñ≥rs.h
>

21 
	~<ui/Poöt.h
>

23 
«me•a˚
 
	g™droid
 {

25 ˛as†
	cRe˘


27 
	gpublic
:

28 
À·
;

29 
	gt›
;

30 
	gright
;

31 
	gbŸtom
;

33 
	tvÆue_ty≥
;

38 
ölöe
 
Re˘
() {

40 
ölöe
 
Re˘
(
w
, 
h
)

41 : 
À·
(0), 
t›
(0), 
right
(
w
), 
bŸtom
(
h
) {

43 
ölöe
 
Re˘
(
l
, 
t
, 
r
, 
b
)

44 : 
À·
(
l
), 
t›
(
t
), 
right
(
r
), 
bŸtom
(
b
) {

46 
ölöe
 
Re˘
(c⁄° 
Poöt
& 
…
, c⁄° Poöt& 
rb
)

47 : 
À·
(
…
.
x
), 
t›
÷t.
y
), 
right
(
rb
.x), 
bŸtom
(rb.y) {

50 
makeInvÆid
();

52 
ölöe
 
˛ór
() {

53 
	gÀ·
 = 
t›
 = 
right
 = 
bŸtom
 = 0;

57 
ölöe
 
boﬁ
 
isVÆid
() const {

58  (
width
()>=0Ë&& (
height
()>=0);

62 
ölöe
 
boﬁ
 
isEm±y
() const {

63  (
width
()<=0Ë|| (
height
()<=0);

66 
ölöe
 
£t
(c⁄° 
Re˘
& 
rhs
) {

67 
	g›î©‹
 = (
rhs
);

71 
ölöe
 
width
() const {

72  
	gright
-
	gÀ·
;

76 
ölöe
 
height
() const {

77  
	gbŸtom
-
	gt›
;

80 
£tLe·T›
(c⁄° 
Poöt
& 
…
) {

81 
	gÀ·
 = 
…
.
x
;

82 
	gt›
 = 
…
.
y
;

85 
£tRightBŸtom
(c⁄° 
Poöt
& 
rb
) {

86 
	gright
 = 
rb
.
x
;

87 
	gbŸtom
 = 
rb
.
y
;

91 
Poöt
 
À·T›
() const {

92  
Poöt
(
À·
, 
t›
);

94 
Poöt
 
rightBŸtom
() const {

95  
Poöt
(
right
, 
bŸtom
);

97 
Poöt
 
rightT›
() const {

98  
Poöt
(
right
, 
t›
);

100 
Poöt
 
À·BŸtom
() const {

101  
Poöt
(
À·
, 
bŸtom
);

105 
ölöe
 
boﬁ
 
	g›î©‹
 =(c⁄° 
Re˘
& 
rhs
) const {

106  (
À·
 =
rhs
.À·Ë&& (
t›
 ==Ñhs.top) &&

107 (
right
 =
rhs
.rightË&& (
bŸtom
 ==Ñhs.bottom);

110 
ölöe
 
boﬁ
 
	g›î©‹
 !(c⁄° 
Re˘
& 
rhs
) const {

111  !
›î©‹
 =(
rhs
);

116 
boﬁ
 
	g›î©‹
 < (c⁄° 
	gRe˘
& 
	grhs
) const;

118 
	gRe˘
& 
off£tToOrigö
() {

119 
	gright
 -
À·
;

120 
	gbŸtom
 -
t›
;

121 
	gÀ·
 = 
t›
 = 0;

122  *
	gthis
;

124 
	gRe˘
& 
off£tTo
(c⁄° 
Poöt
& 
p
) {

125  
off£tTo
(
p
.
x
,Ö.
y
);

127 
	gRe˘
& 
off£tBy
(c⁄° 
Poöt
& 
dp
) {

128  
off£tBy
(
dp
.
x
, dp.
y
);

130 
	gRe˘
& 
	g›î©‹
 +(c⁄° 
Poöt
& 
rhs
) {

131  
off£tBy
(
rhs
.
x
,Ñhs.
y
);

133 
	gRe˘
& 
	g›î©‹
 -(c⁄° 
Poöt
& 
rhs
) {

134  
off£tBy
(-
rhs
.
x
, -rhs.
y
);

136 c⁄° 
Re˘
 
	g›î©‹
 + (c⁄° 
	gPoöt
& 
	grhs
) const;

137 c⁄° 
Re˘
 
	g›î©‹
 - (c⁄° 
	gPoöt
& 
	grhs
) const;

139 
å™¶©e
(
dx
, 
dy
) {

140 
off£tBy
(
dx
, 
dy
);

143 
	gRe˘
& 
off£tTo
(
x
, 
y
);

144 
	gRe˘
& 
off£tBy
(
x
, 
y
);

145 
boﬁ
 
öãr£˘
(c⁄° 
Re˘
& 
wôh
, Re˘* 
ªsu…
) const;

148 
ANDROID_BASIC_TYPES_TRAITS
(
Re˘
)

	@jni/include/include/ui/Region.h

17 #i‚de‡
ANDROID_UI_REGION_H


18 
	#ANDROID_UI_REGION_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	~<utûs/Ve˘‹.h
>

25 
	~<ui/Re˘.h
>

27 
	~<h¨dw¨e/c›ybô.h
>

29 
«me•a˚
 
	g™droid
 {

32 
˛ass
 
	gSåög8
;

35 ˛as†
	cRegi⁄


37 
	gpublic
:

38 
Regi⁄
();

39 
Regi⁄
(c⁄° Regi⁄& 
rhs
);

40 
ex∂icô
 
Regi⁄
(c⁄° 
Re˘
& 
rhs
);

41 
ex∂icô
 
Regi⁄
(c⁄° * 
buf„r
);

42 ~
Regi⁄
();

44 
	gRegi⁄
& 
	g›î©‹
 = (c⁄° 
Regi⁄
& 
rhs
);

46 
ölöe
 
boﬁ
 
isEm±y
(Ëc⁄° {  
	gmBounds
.isEmpty(); }

47 
ölöe
 
boﬁ
 
isRe˘
(Ëc⁄° {  
	gmSt‹age
.
isEm±y
(); }

49 
ölöe
 
Re˘
 
gëBounds
(Ëc⁄° {  
	gmBounds
; }

50 
ölöe
 
Re˘
 
bounds
(Ëc⁄° {  
gëBounds
(); }

53 
	gRegi⁄
& 
makeBoundsSñf
();

55 
˛ór
();

56 
£t
(c⁄° 
Re˘
& 
r
);

57 
£t
(
uöt32_t
 
w
, uöt32_à
h
);

59 
	gRegi⁄
& 
‹Sñf
(c⁄° 
Re˘
& 
rhs
);

60 
	gRegi⁄
& 
™dSñf
(c⁄° 
Re˘
& 
rhs
);

61 
	gRegi⁄
& 
subåa˘Sñf
(c⁄° 
Re˘
& 
rhs
);

64 
	gRegi⁄
& 
‹Sñf
(c⁄° 
Regi⁄
& 
rhs
);

65 
	gRegi⁄
& 
™dSñf
(c⁄° 
Regi⁄
& 
rhs
);

66 
	gRegi⁄
& 
subåa˘Sñf
(c⁄° 
Regi⁄
& 
rhs
);

69 c⁄° 
Regi⁄
 
mîge
(c⁄° 
Re˘
& 
rhs
) const;

70 c⁄° 
Regi⁄
 
öãr£˘
(c⁄° 
Re˘
& 
rhs
) const;

71 c⁄° 
Regi⁄
 
subåa˘
(c⁄° 
Re˘
& 
rhs
) const;

74 c⁄° 
Regi⁄
 
mîge
(c⁄° Regi⁄& 
rhs
) const;

75 c⁄° 
Regi⁄
 
öãr£˘
(c⁄° Regi⁄& 
rhs
) const;

76 c⁄° 
Regi⁄
 
subåa˘
(c⁄° Regi⁄& 
rhs
) const;

79 
	gRegi⁄
& 
å™¶©eSñf
(
dx
, 
dy
);

80 
	gRegi⁄
& 
‹Sñf
(c⁄° 
Regi⁄
& 
rhs
, 
dx
, 
dy
);

81 
	gRegi⁄
& 
™dSñf
(c⁄° 
Regi⁄
& 
rhs
, 
dx
, 
dy
);

82 
	gRegi⁄
& 
subåa˘Sñf
(c⁄° 
Regi⁄
& 
rhs
, 
dx
, 
dy
);

85 c⁄° 
Regi⁄
 
å™¶©e
(
dx
, 
dy
) const;

86 c⁄° 
Regi⁄
 
mîge
(c⁄° Regi⁄& 
rhs
, 
dx
, 
dy
) const;

87 c⁄° 
Regi⁄
 
öãr£˘
(c⁄° Regi⁄& 
rhs
, 
dx
, 
dy
) const;

88 c⁄° 
Regi⁄
 
subåa˘
(c⁄° Regi⁄& 
rhs
, 
dx
, 
dy
) const;

91 
ölöe
 c⁄° 
Regi⁄
 
	g›î©‹
 | (c⁄° 
	gRegi⁄
& 
	grhs
) const;

92 
ölöe
 c⁄° 
Regi⁄
 
	g›î©‹
 & (c⁄° 
	gRegi⁄
& 
	grhs
) const;

93 
ölöe
 c⁄° 
Regi⁄
 
	g›î©‹
 - (c⁄° 
	gRegi⁄
& 
	grhs
) const;

94 
ölöe
 c⁄° 
Regi⁄
 
	g›î©‹
 + (c⁄° 
	gPoöt
& 
	g±
) const;

96 
ölöe
 
	gRegi⁄
& 
	g›î©‹
 |(c⁄° 
Regi⁄
& 
rhs
);

97 
ölöe
 
	gRegi⁄
& 
	g›î©‹
 &(c⁄° 
Regi⁄
& 
rhs
);

98 
ölöe
 
	gRegi⁄
& 
	g›î©‹
 -(c⁄° 
Regi⁄
& 
rhs
);

99 
ölöe
 
	gRegi⁄
& 
	g›î©‹
 +(c⁄° 
Poöt
& 
±
);

104 
Re˘
 c⁄°* 
	tc⁄°_ôî©‹
;

106 
c⁄°_ôî©‹
 
begö
() const;

107 
c⁄°_ôî©‹
 
íd
() const;

111 
size_t
 
gëRe˘s
(
Ve˘‹
<
Re˘
>& 
ª˘Li°
) const;

112 
Re˘
 c⁄°* 
gëAºay
(
size_t
* 
cou¡
) const;

117 
addRe˘Unchecked
(
l
, 
t
, 
r
, 
b
);

120 
ssize_t
 
wrôe
(* 
buf„r
, 
size_t
 
size
) const;

121 
ssize_t
 
wrôeEm±y
(* 
buf„r
, 
size_t
 
size
);

123 
ssize_t
 
ªad
(c⁄° * 
buf„r
);

124 
boﬁ
 
isEm±y
(* 
buf„r
);

126 
dump
(
Såög8
& 
out
, c⁄° * 
wh©
, 
uöt32_t
 
Êags
=0) const;

127 
dump
(c⁄° * 
wh©
, 
uöt32_t
 
Êags
=0) const;

129 
	g¥iv©e
:

130 
˛ass
 
ø°îizî
;

131 
‰õnd
 
˛ass
 
	gø°îizî
;

133 
	gRegi⁄
& 
›î©i⁄Sñf
(c⁄° 
Re˘
& 
r
, 
›
);

134 
	gRegi⁄
& 
›î©i⁄Sñf
(c⁄° 
Regi⁄
& 
r
, 
›
);

135 
	gRegi⁄
& 
›î©i⁄Sñf
(c⁄° 
Regi⁄
& 
r
, 
dx
, 
dy
, 
›
);

136 c⁄° 
Regi⁄
 
›î©i⁄
(c⁄° 
Re˘
& 
rhs
, 
›
) const;

137 c⁄° 
Regi⁄
 
›î©i⁄
(c⁄° Regi⁄& 
rhs
, 
›
) const;

138 c⁄° 
Regi⁄
 
›î©i⁄
(c⁄° Regi⁄& 
rhs
, 
dx
, 
dy
, 
›
) const;

140 
boﬁón_›î©i⁄
(
›
, 
Regi⁄
& 
d°
,

141 c⁄° 
Regi⁄
& 
lhs
, c⁄° Regi⁄& 
rhs
, 
dx
, 
dy
);

142 
boﬁón_›î©i⁄
(
›
, 
Regi⁄
& 
d°
,

143 c⁄° 
Regi⁄
& 
lhs
, c⁄° 
Re˘
& 
rhs
, 
dx
, 
dy
);

145 
boﬁón_›î©i⁄
(
›
, 
Regi⁄
& 
d°
,

146 c⁄° 
Regi⁄
& 
lhs
, c⁄° Regi⁄& 
rhs
);

147 
boﬁón_›î©i⁄
(
›
, 
Regi⁄
& 
d°
,

148 c⁄° 
Regi⁄
& 
lhs
, c⁄° 
Re˘
& 
rhs
);

150 
å™¶©e
(
Regi⁄
& 
ªg
, 
dx
, 
dy
);

151 
å™¶©e
(
Regi⁄
& 
d°
, c⁄° Regi⁄& 
ªg
, 
dx
, 
dy
);

153 
boﬁ
 
vÆid©e
(c⁄° 
Regi⁄
& 
ªg
, c⁄° * 
«me
);

155 
Re˘
 
	gmBounds
;

156 
	gVe˘‹
<
	gRe˘
> 
	gmSt‹age
;

160 c⁄° 
Regi⁄
 
	gRegi⁄
::
›î©‹
 | (c⁄° Regi⁄& 
rhs
) const {

161  
mîge
(
rhs
);

163 c⁄° 
Regi⁄
 
	gRegi⁄
::
›î©‹
 & (c⁄° Regi⁄& 
rhs
) const {

164  
öãr£˘
(
rhs
);

166 c⁄° 
Regi⁄
 
	gRegi⁄
::
›î©‹
 - (c⁄° Regi⁄& 
rhs
) const {

167  
subåa˘
(
rhs
);

169 c⁄° 
Regi⁄
 
	gRegi⁄
::
›î©‹
 + (c⁄° 
Poöt
& 
±
) const {

170  
å™¶©e
(
±
.
x
,Öt.
y
);

174 
	gRegi⁄
& Regi⁄::
›î©‹
 |(c⁄° 
Regi⁄
& 
rhs
) {

175  
‹Sñf
(
rhs
);

177 
	gRegi⁄
& Regi⁄::
›î©‹
 &(c⁄° 
Regi⁄
& 
rhs
) {

178  
™dSñf
(
rhs
);

180 
	gRegi⁄
& Regi⁄::
›î©‹
 -(c⁄° 
Regi⁄
& 
rhs
) {

181  
subåa˘Sñf
(
rhs
);

183 
	gRegi⁄
& Regi⁄::
›î©‹
 +(c⁄° 
Poöt
& 
±
) {

184  
å™¶©eSñf
(
±
.
x
,Öt.
y
);

189 
	gªgi⁄_ôî©‹
 : 
public
 
c›ybô_ªgi⁄_t
 {

190 
ªgi⁄_ôî©‹
(c⁄° 
Regi⁄
& 
ªgi⁄
)

191 : 
b
(
ªgi⁄
.
begö
()), 
e
‘egi⁄.
íd
()) {

192 
	gthis
->
	g√xt
 = 
ôî©e
;

194 
	g¥iv©e
:

195 
ôî©e
(
c›ybô_ªgi⁄_t
 c⁄° * 
£lf
, 
c›ybô_ª˘_t
* 
ª˘
) {

196 
ªgi⁄_ôî©‹
 c⁄°* 
	gme
 = 
°©ic_ˇ°
<ªgi⁄_ôî©‹ c⁄°*>(
£lf
);

197 i‡(
	gme
->
	gb
 !
me
->
e
) {

198 *
ªöãΩªt_ˇ°
<
Re˘
*>(
ª˘
Ë*
me
->
b
++;

203 
muèbÀ
 
	gRegi⁄
::
c⁄°_ôî©‹
 
b
;

204 
	gRegi⁄
::
c⁄°_ôî©‹
 c⁄° 
e
;

	@jni/include/include/ui/android_native_buffer.h

17 #i‚de‡
ANDROID_ANDROID_NATIVES_PRIV_H


18 
	#ANDROID_ANDROID_NATIVES_PRIV_H


	)

20 
	~<ui/egl/™droid_«tives.h
>

22 #ifde‡
__˝lu•lus


28 
	s™droid_«tive_buf„r_t


30 #ifde‡
__˝lu•lus


31 
™droid_«tive_buf„r_t
() {

32 
comm⁄
.
magic
 = 
ANDROID_NATIVE_BUFFER_MAGIC
;

33 
comm⁄
.
vîsi⁄
 = (
™droid_«tive_buf„r_t
);

34 
mem£t
(
comm⁄
.
ª£rved
, 0, (common.reserved));

38 
™droid_«tive_ba£_t
 
comm⁄
;

40 
width
;

41 
height
;

42 
°ride
;

43 
f‹m©
;

44 
ußge
;

46 * 
ª£rved
[2];

48 
buf„r_h™dÀ_t
 
h™dÀ
;

50 * 
ª£rved_¥oc
[8];

51 } 
	t™droid_«tive_buf„r_t
;

56 #ifde‡
__˝lu•lus


	@jni/include/include/ui/egl/android_natives.h

17 #i‚de‡
ANDROID_ANDROID_NATIVES_H


18 
	#ANDROID_ANDROID_NATIVES_H


	)

20 
	~<sys/ty≥s.h
>

21 
	~<°rög.h
>

23 
	~<h¨dw¨e/gøŒoc.h
>

25 #ifde‡
__˝lu•lus


31 
	#ANDROID_NATIVE_MAKE_CONSTANT
(
a
,
b
,
c
,
d
) \

32 ((()(
a
)<<24)|(()(
b
)<<16)|(()(
c
)<<8)|()(
d
))

	)

34 
	#ANDROID_NATIVE_WINDOW_MAGIC
 \

35 
	`ANDROID_NATIVE_MAKE_CONSTANT
('_','w','n','d')

	)

37 
	#ANDROID_NATIVE_BUFFER_MAGIC
 \

38 
	`ANDROID_NATIVE_MAKE_CONSTANT
('_','b','f','r')

	)

42 
™droid_«tive_buf„r_t
;

46 
	s™droid_«tive_ba£_t


49 
magic
;

52 
vîsi⁄
;

54 * 
ª£rved
[4];

57 (*
öcRef
)(
™droid_«tive_ba£_t
* 
ba£
);

58 (*
decRef
)(
™droid_«tive_ba£_t
* 
ba£
);

59 } 
	t™droid_«tive_ba£_t
;

65 
NATIVE_WINDOW_WIDTH
 = 0,

66 
NATIVE_WINDOW_HEIGHT
 = 1,

67 
NATIVE_WINDOW_FORMAT
 = 2,

72 
NATIVE_WINDOW_SET_USAGE
 = 0,

73 
NATIVE_WINDOW_CONNECT
 = 1,

74 
NATIVE_WINDOW_DISCONNECT
 = 2

79 
NATIVE_WINDOW_API_EGL
 = 1

82 
	s™droid_«tive_wödow_t


84 #ifde‡
__˝lu•lus


85 
™droid_«tive_wödow_t
()

86 : 
Êags
(0), 
möSw≠I¡îvÆ
(0), 
maxSw≠I¡îvÆ
(0), 
xdpi
(0), 
ydpi
(0)

88 
comm⁄
.
magic
 = 
ANDROID_NATIVE_WINDOW_MAGIC
;

89 
comm⁄
.
vîsi⁄
 = (
™droid_«tive_wödow_t
);

90 
mem£t
(
comm⁄
.
ª£rved
, 0, (common.reserved));

94 
™droid_«tive_ba£_t
 
comm⁄
;

97 c⁄° 
uöt32_t
 
Êags
;

100 c⁄° 
möSw≠I¡îvÆ
;

103 c⁄° 
maxSw≠I¡îvÆ
;

106 c⁄° 
xdpi
;

107 c⁄° 
ydpi
;

110 
öçå_t
 
€m
[4];

118 (*
£tSw≠I¡îvÆ
)(
™droid_«tive_wödow_t
* 
wödow
,

119 
öãrvÆ
);

128 (*
dequeueBuf„r
)(
™droid_«tive_wödow_t
* 
wödow
,

129 
™droid_«tive_buf„r_t
** 
buf„r
);

138 (*
lockBuf„r
)(
™droid_«tive_wödow_t
* 
wödow
,

139 
™droid_«tive_buf„r_t
* 
buf„r
);

148 (*
queueBuf„r
)(
™droid_«tive_wödow_t
* 
wödow
,

149 
™droid_«tive_buf„r_t
* 
buf„r
);

156 (*
quîy
)(
™droid_«tive_wödow_t
* 
wödow
,

157 
wh©
, * 
vÆue
);

177 (*
≥rf‹m
)(
™droid_«tive_wödow_t
* 
wödow
,

178 
›î©i⁄
, ... );

180 * 
ª£rved_¥oc
[3];

181 } 
	t™droid_«tive_wödow_t
;

194 
ölöe
 
«tive_wödow_£t_ußge
(

195 
™droid_«tive_wödow_t
* 
wödow
, 
ußge
)

197  
wödow
->
≥rf‹m
(wödow, 
NATIVE_WINDOW_SET_USAGE
, 
ußge
);

206 
ölöe
 
«tive_wödow_c⁄√˘
(

207 
™droid_«tive_wödow_t
* 
wödow
, 
≠i
)

209  
wödow
->
≥rf‹m
(wödow, 
NATIVE_WINDOW_CONNECT
, 
≠i
);

218 
ölöe
 
«tive_wödow_disc⁄√˘
(

219 
™droid_«tive_wödow_t
* 
wödow
, 
≠i
)

221  
wödow
->
≥rf‹m
(wödow, 
NATIVE_WINDOW_DISCONNECT
, 
≠i
);

228 
	segl_«tive_pixm≠_t


230 
öt32_t
 
vîsi⁄
;

231 
öt32_t
 
width
;

232 
öt32_t
 
height
;

233 
öt32_t
 
°ride
;

234 
uöt8_t
* 
d©a
;

235 
uöt8_t
 
f‹m©
;

236 
uöt8_t
 
rfu
[3];

238 
uöt32_t
 
com¥es£dF‹m©
;

239 
öt32_t
 
v°ride
;

241 
öt32_t
 
ª£rved
;

242 } 
	tegl_«tive_pixm≠_t
;

246 #ifde‡
__˝lu•lus


253 #ifde‡
__˝lu•lus


255 
	~<utûs/RefBa£.h
>

257 
«me•a˚
 
™droid
 {

263 
ãm∂©e
 <
ty≥«me
 
NATIVE_TYPE
,Åy≥«mê
TYPE
,Åy≥«mê
REF
>

264 
˛ass
 
EGLN©iveBa£
 : 
public
 
NATIVE_TYPE
,Öubli¯
REF


266 
¥Ÿe˘ed
:

267 
EGLN©iveBa£
<
	tNATIVE_TYPE
, 
	tTYPE
, 
	tREF
> 
	tBASE
;

268 
EGLN©iveBa£
(Ë: 
NATIVE_TYPE
(), 
REF
() {

269 
NATIVE_TYPE
::
comm⁄
.
öcRef
 = incRef;

270 
NATIVE_TYPE
::
comm⁄
.
decRef
 = decRef;

272 
ölöe
 
TYPE
* 
gëSñf
(
NATIVE_TYPE
* 
£lf
) {

273  
°©ic_ˇ°
<
TYPE
*>(
£lf
);

275 
ölöe
 
TYPE
 c⁄°* 
gëSñf
(
NATIVE_TYPE
 c⁄°* 
£lf
) {

276  
°©ic_ˇ°
<
TYPE
 c⁄° *>(
£lf
);

278 
ölöe
 
TYPE
* 
gëSñf
(
™droid_«tive_ba£_t
* 
ba£
) {

279  
gëSñf
(
ªöãΩªt_ˇ°
<
NATIVE_TYPE
*>(
ba£
));

281 
ölöe
 
TYPE
 c⁄° * 
gëSñf
(
™droid_«tive_ba£_t
 c⁄°* 
ba£
) {

282  
gëSñf
(
ªöãΩªt_ˇ°
<
NATIVE_TYPE
 c⁄°*>(
ba£
));

284 
öcRef
(
™droid_«tive_ba£_t
* 
ba£
) {

285 
EGLN©iveBa£
* 
£lf
 = 
gëSñf
(
ba£
);

286 
£lf
->
öcSå⁄g
(self);

288 
decRef
(
™droid_«tive_ba£_t
* 
ba£
) {

289 
EGLN©iveBa£
* 
£lf
 = 
gëSñf
(
ba£
);

290 
£lf
->
decSå⁄g
(self);

	@jni/include/include/utils/Asset.h

21 #i‚de‡
__LIBS_ASSET_H


22 
	#__LIBS_ASSET_H


	)

24 
	~<°dio.h
>

25 
	~<sys/ty≥s.h
>

26 
	~"FûeM≠.h
"

27 
	~"Såög8.h
"

28 
	~"Eº‹s.h
"

30 
«me•a˚
 
	g™droid
 {

43 ˛as†
	cAs£t
 {

44 
	gpublic
:

45 
vútuÆ
 ~
As£t
();

47 
öt32_t
 
gëGlobÆCou¡
();

48 
Såög8
 
gëAs£tAŒoˇti⁄s
();

51 
	eAc˚ssMode
 {

52 
	gACCESS_UNKNOWN
 = 0,

55 
	gACCESS_RANDOM
,

58 
	gACCESS_STREAMING
,

61 
	gACCESS_BUFFER
,

62 } 
	tAc˚ssMode
;

66 #ifde‡
HAVE_ANDROID_OS


67 
	gUNCOMPRESS_DATA_MAX
 = 1 * 1024 * 1024

69 
UNCOMPRESS_DATA_MAX
 = 2 * 1024 * 1024

77 
vútuÆ
 
ssize_t
 
ªad
(* 
buf
, 
size_t
 
cou¡
) = 0;

84 
vútuÆ
 
off_t
 
£ek
(off_à
off£t
, 
whí˚
) = 0;

89 
vútuÆ
 
˛o£
() = 0;

94 
vútuÆ
 c⁄° * 
gëBuf„r
(
boﬁ
 
w‹dAlig√d
) = 0;

99 
vútuÆ
 
off_t
 
gëLígth
() const = 0;

104 
vútuÆ
 
off_t
 
gëRemaöögLígth
() const = 0;

111 
vútuÆ
 
›íFûeDes¸ùt‹
(
off_t
* 
outSèπ
, off_t* 
outLígth
) const = 0;

117 
vútuÆ
 
boﬁ
 
isAŒoˇãd
(Ëc⁄° {  
	gÁl£
; }

126 c⁄° * 
gëAs£tSour˚
(Ëc⁄° {  
	gmAs£tSour˚
.
°rög
(); }

128 
	g¥Ÿe˘ed
:

129 
As£t
();

132 
off_t
 
h™dÀSìk
(off_à
off£t
, 
whí˚
, off_à
curPo¢
, off_à
maxPo¢
);

135 
£tAs£tSour˚
(c⁄° 
Såög8
& 
∑th
Ë{ 
	gmAs£tSour˚
 =Öath; }

137 
Ac˚ssMode
 
gëAc˚ssMode
(Ëc⁄° {  
	gmAc˚ssMode
; }

139 
	g¥iv©e
:

141 
As£t
(c⁄° As£t& 
§c
);

142 
	gAs£t
& 
	g›î©‹
=(c⁄° 
As£t
& 
§c
);

145 
‰õnd
 
˛ass
 
	gAs£tM™agî
;

150 
As£t
* 
¸óãFromFûe
(c⁄° * 
fûeName
, 
Ac˚ssMode
 
mode
);

155 
As£t
* 
¸óãFromCom¥es£dFûe
(c⁄° * 
fûeName
,

156 
Ac˚ssMode
 
mode
);

165 
As£t
* 
¸óãFromFûeSegmít
(
fd
, 
off_t
 
off£t
, 
size_t
 
Àngth
,

166 
Ac˚ssMode
 
mode
);

178 
As£t
* 
¸óãFromCom¥es£dD©a
(
fd
, 
off_t
 
off£t
,

179 
com¥essi⁄Mëhod
, 
size_t
 
com¥es£dLígth
,

180 
size_t
 
uncom¥es£dLígth
, 
Ac˚ssMode
 
mode
);

188 
As£t
* 
¸óãFromUncom¥es£dM≠
(
FûeM≠
* 
d©aM≠
, 
Ac˚ssMode
 
mode
);

196 
As£t
* 
¸óãFromCom¥es£dM≠
(
FûeM≠
* 
d©aM≠
, 
mëhod
,

197 
size_t
 
uncom¥es£dLí
, 
Ac˚ssMode
 
mode
);

205 
Ac˚ssMode
 
	gmAc˚ssMode
;

206 
Såög8
 
	gmAs£tSour˚
;

208 
As£t
* 
	gmNext
;

209 
As£t
* 
	gmPªv
;

223 ˛as†
	c_FûeAs£t
 : 
public
 
As£t
 {

224 
public
:

225 
_FûeAs£t
();

226 
	gvútuÆ
 ~
_FûeAs£t
();

233 
°©us_t
 
›íChunk
(c⁄° * 
fûeName
, 
fd
, 
off_t
 
off£t
, 
size_t
 
Àngth
);

240 
°©us_t
 
›íChunk
(
FûeM≠
* 
d©aM≠
);

245 
vútuÆ
 
ssize_t
 
ªad
(* 
buf
, 
size_t
 
cou¡
);

246 
vútuÆ
 
off_t
 
£ek
(off_à
off£t
, 
whí˚
);

247 
vútuÆ
 
˛o£
();

248 
vútuÆ
 c⁄° * 
gëBuf„r
(
boﬁ
 
w‹dAlig√d
);

249 
vútuÆ
 
off_t
 
gëLígth
(Ëc⁄° {  
	gmLígth
; }

250 
vútuÆ
 
off_t
 
gëRemaöögLígth
(Ëc⁄° {  
	gmLígth
-
	gmOff£t
; }

251 
vútuÆ
 
›íFûeDes¸ùt‹
(
off_t
* 
outSèπ
, off_t* 
outLígth
) const;

252 
vútuÆ
 
boﬁ
 
isAŒoˇãd
(Ëc⁄° {  
	gmBuf
 !
NULL
; }

254 
	g¥iv©e
:

255 
off_t
 
mSèπ
;

256 
off_t
 
	gmLígth
;

257 
off_t
 
	gmOff£t
;

258 
FILE
* 
	gmFp
;

259 * 
	gmFûeName
;

266 íum { 
	gkRódVsM≠Thªshﬁd
 = 4096 };

268 
FûeM≠
* 
	gmM≠
;

269 * 
	gmBuf
;

271 c⁄° * 
ísuªAlignmít
(
FûeM≠
* 
m≠
);

278 ˛as†
	c_Com¥es£dAs£t
 : 
public
 
As£t
 {

279 
public
:

280 
_Com¥es£dAs£t
();

281 
	gvútuÆ
 ~
_Com¥es£dAs£t
();

288 
°©us_t
 
›íChunk
(
fd
, 
off_t
 
off£t
, 
com¥essi⁄Mëhod
,

289 
size_t
 
uncom¥es£dLí
, size_à
com¥es£dLí
);

296 
°©us_t
 
›íChunk
(
FûeM≠
* 
d©aM≠
, 
com¥essi⁄Mëhod
,

297 
size_t
 
uncom¥es£dLí
);

302 
vútuÆ
 
ssize_t
 
ªad
(* 
buf
, 
size_t
 
cou¡
);

303 
vútuÆ
 
off_t
 
£ek
(off_à
off£t
, 
whí˚
);

304 
vútuÆ
 
˛o£
();

305 
vútuÆ
 c⁄° * 
gëBuf„r
(
boﬁ
 
w‹dAlig√d
);

306 
vútuÆ
 
off_t
 
gëLígth
(Ëc⁄° {  
	gmUncom¥es£dLí
; }

307 
vútuÆ
 
off_t
 
gëRemaöögLígth
(Ëc⁄° {  
	gmUncom¥es£dLí
-
	gmOff£t
; }

308 
vútuÆ
 
›íFûeDes¸ùt‹
(
off_t
* 
outSèπ
, off_t* 
outLígth
) const {  -1; }

309 
vútuÆ
 
boﬁ
 
isAŒoˇãd
(Ëc⁄° {  
	gmBuf
 !
NULL
; }

311 
	g¥iv©e
:

312 
off_t
 
mSèπ
;

313 
off_t
 
	gmCom¥es£dLí
;

314 
off_t
 
	gmUncom¥es£dLí
;

315 
off_t
 
	gmOff£t
;

317 
FûeM≠
* 
	gmM≠
;

318 
	gmFd
;

320 * 
	gmBuf
;

	@jni/include/include/utils/AssetDir.h

20 #i‚de‡
__LIBS_ASSETDIR_H


21 
	#__LIBS_ASSETDIR_H


	)

23 
	~<utûs/Såög8.h
>

24 
	~<utûs/Ve˘‹.h
>

25 
	~<utûs/S‹ãdVe˘‹.h
>

26 
	~<utûs/misc.h
>

27 
	~<sys/ty≥s.h
>

29 
«me•a˚
 
	g™droid
 {

40 ˛as†
	cAs£tDú
 {

41 
	gpublic
:

42 
As£tDú
()

43 : 
mFûeInfo
(
NULL
)

45 
vútuÆ
 ~
As£tDú
() {

46 
dñëe
 
mFûeInfo
;

52 
size_t
 
gëFûeCou¡
(Ë{  
	gmFûeInfo
->
size
(); }

53 c⁄° 
	gSåög8
& 
gëFûeName
(
idx
) {

54  
	gmFûeInfo
->
ôemAt
(
idx
).
gëFûeName
();

56 c⁄° 
	gSåög8
& 
gëSour˚Name
(
idx
) {

57  
	gmFûeInfo
->
ôemAt
(
idx
).
gëSour˚Name
();

63 
FûeTy≥
 
gëFûeTy≥
(
idx
) {

64  
	gmFûeInfo
->
ôemAt
(
idx
).
gëFûeTy≥
();

67 
	g¥iv©e
:

69 
As£tDú
(c⁄° As£tDú& 
§c
);

70 c⁄° 
	gAs£tDú
& 
	g›î©‹
=(c⁄° 
As£tDú
& 
§c
);

72 
‰õnd
 
˛ass
 
	gAs£tM™agî
;

77 ˛as†
	cFûeInfo
 {

78 
	gpublic
:

79 
FûeInfo
() {}

80 
FûeInfo
(c⁄° 
Såög8
& 
∑th
)

81 : 
mFûeName
(
∑th
), 
mFûeTy≥
(
kFûeTy≥Unknown
)

83 ~
FûeInfo
() {}

84 
FûeInfo
(c⁄° FûeInfo& 
§c
) {

85 
c›yMembîs
(
§c
);

87 c⁄° 
	gFûeInfo
& 
	g›î©‹
(c⁄° 
FûeInfo
& 
§c
) {

88 i‡(
this
 !&
§c
)

89 
c›yMembîs
(
§c
);

90  *
	gthis
;

93 
c›yMembîs
(c⁄° 
FûeInfo
& 
§c
) {

94 
	gmFûeName
 = 
§c
.
mFûeName
;

95 
	gmFûeTy≥
 = 
§c
.
mFûeTy≥
;

96 
	gmSour˚Name
 = 
§c
.
mSour˚Name
;

100 
boﬁ
 
	g›î©‹
< (c⁄° 
	gFûeInfo
& 
	grhs
) const {

101  
	gmFûeName
 < 
	grhs
.mFileName;

105 
boﬁ
 
	g›î©‹
=(c⁄° 
FûeInfo
& 
rhs
) const {

106  
mFûeName
 =
rhs
.mFileName;

109 
£t
(c⁄° 
Såög8
& 
∑th
, 
FûeTy≥
 
ty≥
) {

110 
	gmFûeName
 = 
∑th
;

111 
	gmFûeTy≥
 = 
ty≥
;

114 c⁄° 
	gSåög8
& 
gëFûeName
(Ëc⁄° {  
	gmFûeName
; }

115 
£tFûeName
(c⁄° 
Såög8
& 
∑th
Ë{ 
	gmFûeName
 =Öath; }

117 
FûeTy≥
 
gëFûeTy≥
(Ëc⁄° {  
	gmFûeTy≥
; }

118 
£tFûeTy≥
(
FûeTy≥
 
ty≥
Ë{ 
	gmFûeTy≥
 =Åype; }

120 c⁄° 
	gSåög8
& 
gëSour˚Name
(Ëc⁄° {  
	gmSour˚Name
; }

121 
£tSour˚Name
(c⁄° 
Såög8
& 
∑th
Ë{ 
	gmSour˚Name
 =Öath; }

127 
födE¡ry
(c⁄° 
S‹ãdVe˘‹
<
FûeInfo
>* 
pVe˘‹
,

128 c⁄° 
Såög8
& 
fûeName
);

130 
	g¥iv©e
:

131 
Såög8
 
mFûeName
;

132 
FûeTy≥
 
	gmFûeTy≥
;

134 
Såög8
 
	gmSour˚Name
;

138 
£tFûeLi°
(
S‹ãdVe˘‹
<
FûeInfo
>* 
li°
Ë{ 
	gmFûeInfo
 =Üist; }

140 
	gS‹ãdVe˘‹
<
	gFûeInfo
>* 
	gmFûeInfo
;

	@jni/include/include/utils/AssetManager.h

20 #i‚de‡
__LIBS_ASSETMANAGER_H


21 
	#__LIBS_ASSETMANAGER_H


	)

23 
	~<utûs/As£t.h
>

24 
	~<utûs/As£tDú.h
>

25 
	~<utûs/KeyedVe˘‹.h
>

26 
	~<utûs/Såög8.h
>

27 
	~<utûs/Ve˘‹.h
>

28 
	~<utûs/Såög16.h
>

29 
	~<utûs/ZùFûeRO.h
>

30 
	~<utûs/thªads.h
>

32 
«me•a˚
 
	g™droid
 {

34 
˛ass
 
	gAs£t
;

35 
˛ass
 
	gResTabÀ
;

36 
	gResTabÀ_c⁄fig
;

51 ˛as†
	cAs£tM™agî
 {

52 
	gpublic
:

53 
	eCacheMode
 {

54 
CACHE_UNKNOWN
 = 0,

55 
	gCACHE_OFF
,

56 
	gCACHE_DEFER
,

58 } 
	tCacheMode
;

60 
As£tM™agî
(
CacheMode
 
ˇcheMode
 = 
CACHE_OFF
);

61 
	gvútuÆ
 ~
As£tM™agî
();

63 
öt32_t
 
gëGlobÆCou¡
();

76 
boﬁ
 
addAs£tP©h
(c⁄° 
Såög8
& 
∑th
, ** 
cookõ
);

82 
boﬁ
 
addDeÁu…As£ts
();

91 * 
√xtAs£tP©h
(* 
cookõ
) const;

97 
Såög8
 
gëAs£tP©h
(* 
cookõ
) const;

106 
£tLoˇÀ
(c⁄° * 
loˇÀ
);

107 
£tVíd‹
(c⁄° * 
víd‹
);

112 
£tC⁄figuøti⁄
(c⁄° 
ResTabÀ_c⁄fig
& 
c⁄fig
, c⁄° * 
loˇÀ
 = 
NULL
);

114 
	gAs£t
::
	tAc˚ssMode
 AccessMode;

125 
As£t
* 
›í
(c⁄° * 
fûeName
, 
Ac˚ssMode
 
mode
);

135 
As£t
* 
›íN⁄As£t
(c⁄° * 
fûeName
, 
Ac˚ssMode
 
mode
);

141 
As£t
* 
›íN⁄As£t
(* 
cookõ
, c⁄° * 
fûeName
, 
Ac˚ssMode
 
mode
);

153 
As£tDú
* 
›íDú
(c⁄° * 
dúName
);

165 
As£tDú
* 
›íN⁄As£tDú
(* 
cookõ
, c⁄° * 
dúName
);

173 
FûeTy≥
 
gëFûeTy≥
(c⁄° * 
fûeName
);

178 c⁄° 
	gResTabÀ
& 
gëResour˚s
(
boﬁ
 
ªquúed
 = 
åue
) const;

185 
purge
(Ë{ 
purgeFûeNameCacheLocked
(); }

193 
boﬁ
 
isUpToD©e
();

198 
gëLoˇÀs
(
Ve˘‹
<
Såög8
>* 
loˇÀs
) const;

200 
	g¥iv©e
:

201 
	sas£t_∑th


203 
Såög8
 
∑th
;

204 
FûeTy≥
 
	gty≥
;

207 
As£t
* 
›íInP©hLocked
(c⁄° * 
fûeName
, 
Ac˚ssMode
 
mode
,

208 c⁄° 
as£t_∑th
& 
∑th
);

209 
As£t
* 
›íN⁄As£tInP©hLocked
(c⁄° * 
fûeName
, 
Ac˚ssMode
 
mode
,

210 c⁄° 
as£t_∑th
& 
∑th
);

211 
As£t
* 
›íInLoˇÀVíd‹Locked
(c⁄° * 
fûeName
, 
Ac˚ssMode
 
mode
,

212 c⁄° 
as£t_∑th
& 
∑th
, c⁄° * 
loˇÀ
, c⁄° * 
víd‹
);

213 
Såög8
 
¸óãP©hNameLocked
(c⁄° 
as£t_∑th
& 
∑th
, c⁄° * 
loˇÀ
,

214 c⁄° * 
víd‹
);

215 
Såög8
 
¸óãP©hNameLocked
(c⁄° 
as£t_∑th
& 
∑th
, c⁄° * 
roŸDú
);

216 
Såög8
 
¸óãZùSour˚NameLocked
(c⁄° Såög8& 
zùFûeName
,

217 c⁄° 
Såög8
& 
dúName
, c⁄° Såög8& 
fûeName
);

219 
ZùFûeRO
* 
gëZùFûeLocked
(c⁄° 
as£t_∑th
& 
∑th
);

220 
As£t
* 
›íAs£tFromFûeLocked
(c⁄° 
Såög8
& 
fûeName
, 
Ac˚ssMode
 
mode
);

221 
As£t
* 
›íAs£tFromZùLocked
(c⁄° 
ZùFûeRO
* 
pZùFûe
,

222 c⁄° 
ZùE¡ryRO
 
íåy
, 
Ac˚ssMode
 
mode
, c⁄° 
Såög8
& 
íåyName
);

224 
boﬁ
 
sˇnAndMîgeDúLocked
(
S‹ãdVe˘‹
<
As£tDú
::
FûeInfo
>* 
pMîgedInfo
,

225 c⁄° 
as£t_∑th
& 
∑th
, c⁄° * 
roŸDú
, c⁄° * 
dúName
);

226 
	gS‹ãdVe˘‹
<
	gAs£tDú
::
FûeInfo
>* 
sˇnDúLocked
(c⁄° 
Såög8
& 
∑th
);

227 
boﬁ
 
sˇnAndMîgeZùLocked
(
S‹ãdVe˘‹
<
As£tDú
::
FûeInfo
>* 
pMîgedInfo
,

228 c⁄° 
as£t_∑th
& 
∑th
, c⁄° * 
roŸDú
, c⁄° * 
dúName
);

229 
mîgeInfoLocked
(
S‹ãdVe˘‹
<
As£tDú
::
FûeInfo
>* 
pMîgedInfo
,

230 c⁄° 
S‹ãdVe˘‹
<
As£tDú
::
FûeInfo
>* 
pC⁄ã¡s
);

232 
lﬂdFûeNameCacheLocked
();

233 
‚cSˇnLocked
(
S‹ãdVe˘‹
<
As£tDú
::
FûeInfo
>* 
pMîgedInfo
,

234 c⁄° * 
dúName
);

235 
boﬁ
 
‚cSˇnAndMîgeDúLocked
(

236 
S‹ãdVe˘‹
<
As£tDú
::
FûeInfo
>* 
pMîgedInfo
,

237 c⁄° 
as£t_∑th
& 
∑th
, c⁄° * 
loˇÀ
, c⁄° * 
víd‹
,

238 c⁄° * 
dúName
);

239 
purgeFûeNameCacheLocked
();

241 c⁄° 
ResTabÀ
* 
gëResTabÀ
(
boﬁ
 
ªquúed
 = 
åue
) const;

242 
£tLoˇÀLocked
(c⁄° * 
loˇÀ
);

243 
upd©eResour˚P¨amsLocked
() const;

245 ˛as†
	cSh¨edZù
 : 
public
 
RefBa£
 {

246 
public
:

247 
•
<
Sh¨edZù
> 
gë
(c⁄° 
Såög8
& 
∑th
);

249 
ZùFûeRO
* 
gëZù
();

251 
As£t
* 
gëResour˚TabÀAs£t
();

252 
As£t
* 
£tResour˚TabÀAs£t
(As£t* 
as£t
);

254 
ResTabÀ
* 
gëResour˚TabÀ
();

255 
ResTabÀ
* 
£tResour˚TabÀ
(ResTabÀ* 
ªs
);

257 
boﬁ
 
isUpToD©e
();

259 
	g¥Ÿe˘ed
:

260 ~
Sh¨edZù
();

262 
	g¥iv©e
:

263 
Sh¨edZù
(c⁄° 
Såög8
& 
∑th
, 
time_t
 
modWhí
);

264 
Sh¨edZù
();

266 
Såög8
 
	gmP©h
;

267 
ZùFûeRO
* 
	gmZùFûe
;

268 
time_t
 
	gmModWhí
;

270 
As£t
* 
	gmResour˚TabÀAs£t
;

271 
ResTabÀ
* 
	gmResour˚TabÀ
;

273 
Muãx
 
	ggLock
;

274 
	gDeÁu…KeyedVe˘‹
<
	gSåög8
, 
	gwp
<
	gSh¨edZù
> > 
	ggO≥n
;

284 ˛as†
	cZùSë
 {

285 
	gpublic
:

286 
ZùSë
();

287 ~
ZùSë
();

293 
ZùFûeRO
* 
gëZù
(c⁄° 
Såög8
& 
∑th
);

295 
As£t
* 
gëZùResour˚TabÀAs£t
(c⁄° 
Såög8
& 
∑th
);

296 
As£t
* 
£tZùResour˚TabÀAs£t
(c⁄° 
Såög8
& 
∑th
, As£t* 
as£t
);

298 
ResTabÀ
* 
gëZùResour˚TabÀ
(c⁄° 
Såög8
& 
∑th
);

299 
ResTabÀ
* 
£tZùResour˚TabÀ
(c⁄° 
Såög8
& 
∑th
, ResTabÀ* 
ªs
);

302 
Såög8
 
gëP©hName
(c⁄° * 
∑th
);

304 
boﬁ
 
isUpToD©e
();

306 
	g¥iv©e
:

307 
˛o£Zù
(
idx
);

309 
gëIndex
(c⁄° 
Såög8
& 
zù
) const;

310 
muèbÀ
 
	gVe˘‹
<
	gSåög8
> 
	gmZùP©h
;

311 
muèbÀ
 
	gVe˘‹
<
	g•
<
	gSh¨edZù
> > 
	gmZùFûe
;

315 
muèbÀ
 
Muãx
 
	gmLock
;

317 
ZùSë
 
	gmZùSë
;

319 
	gVe˘‹
<
	gas£t_∑th
> 
	gmAs£tP©hs
;

320 * 
	gmLoˇÀ
;

321 * 
	gmVíd‹
;

323 
muèbÀ
 
ResTabÀ
* 
	gmResour˚s
;

324 
ResTabÀ_c⁄fig
* 
	gmC⁄fig
;

335 
CacheMode
 
	gmCacheMode
;

336 
boﬁ
 
	gmCacheVÆid
;

337 
	gS‹ãdVe˘‹
<
	gAs£tDú
::
FûeInfo
> 
mCache
;

	@jni/include/include/utils/Atomic.h

17 #i‚de‡
ANDROID_UTILS_ATOMIC_H


18 
	#ANDROID_UTILS_ATOMIC_H


	)

20 
	~<cutûs/©omic.h
>

	@jni/include/include/utils/BackupHelpers.h

17 #i‚de‡
_UTILS_BACKUP_HELPERS_H


18 
	#_UTILS_BACKUP_HELPERS_H


	)

20 
	~<utûs/Eº‹s.h
>

21 
	~<utûs/Såög8.h
>

22 
	~<utûs/KeyedVe˘‹.h
>

24 
«me•a˚
 
	g™droid
 {

27 
	gBACKUP_HEADER_ENTITY_V1
 = 0x61746144,

31 
	gty≥
;

32 
	gkeyLí
;

33 
	gd©aSize
;

34 } 
	títôy_hódî_v1
;

36 
	sS«pshŸHódî
 {

37 
	gmagic0
;

38 
	gfûeCou¡
;

39 
	gmagic1
;

40 
	gtŸÆSize
;

43 
	sFûeSèã
 {

44 
	gmodTime_£c
;

45 
	gmodTime_n£c
;

46 
	gmode
;

47 
	gsize
;

48 
	g¸c32
;

49 
	g«meLí
;

52 
	sFûeRec
 {

53 
Såög8
 
	gfûe
;

54 
boﬁ
 
	gdñëed
;

55 
FûeSèã
 
	gs
;

65 ˛as†
	cBackupD©aWrôî


67 
	gpublic
:

68 
BackupD©aWrôî
(
fd
);

70 ~
BackupD©aWrôî
();

72 
°©us_t
 
WrôeE¡ôyHódî
(c⁄° 
Såög8
& 
key
, 
size_t
 
d©aSize
);

73 
°©us_t
 
WrôeE¡ôyD©a
(c⁄° * 
d©a
, 
size_t
 
size
);

75 
SëKeyPªfix
(c⁄° 
Såög8
& 
keyPªfix
);

77 
	g¥iv©e
:

78 
ex∂icô
 
BackupD©aWrôî
();

79 
°©us_t
 
wrôe_∑ddög_f‹
(
n
);

81 
	gm_fd
;

82 
°©us_t
 
	gm_°©us
;

83 
ssize_t
 
	gm_pos
;

84 
	gm_ítôyCou¡
;

85 
Såög8
 
	gm_keyPªfix
;

94 ˛as†
	cBackupD©aRódî


96 
	gpublic
:

97 
BackupD©aRódî
(
fd
);

99 ~
BackupD©aRódî
();

101 
°©us_t
 
Sètus
();

102 
°©us_t
 
RódNextHódî
(
boﬁ
* 
d⁄e
, * 
ty≥
);

104 
boﬁ
 
HasE¡ôõs
();

105 
°©us_t
 
RódE¡ôyHódî
(
Såög8
* 
key
, 
size_t
* 
d©aSize
);

106 
°©us_t
 
SkùE¡ôyD©a
();

107 
ssize_t
 
RódE¡ôyD©a
(* 
d©a
, 
size_t
 
size
);

109 
	g¥iv©e
:

110 
ex∂icô
 
BackupD©aRódî
();

111 
°©us_t
 
skù_∑ddög
();

113 
	gm_fd
;

114 
boﬁ
 
	gm_d⁄e
;

115 
°©us_t
 
	gm_°©us
;

116 
ssize_t
 
	gm_pos
;

117 
ssize_t
 
	gm_d©aEndPos
;

118 
	gm_ítôyCou¡
;

120 
	gty≥
;

121 
ítôy_hódî_v1
 
	gítôy
;

122 } 
	gm_hódî
;

123 
Såög8
 
	gm_key
;

126 
back_up_fûes
(
ﬁdS«pshŸFD
, 
BackupD©aWrôî
* 
d©aSåóm
, 
√wS«pshŸFD
,

127 c⁄°* c⁄°* 
fûes
, c⁄°* c⁄° *
keys
, 
fûeCou¡
);

129 ˛as†
	cRe°‹eHñ≥rBa£


131 
	gpublic
:

132 
Re°‹eHñ≥rBa£
();

133 ~
Re°‹eHñ≥rBa£
();

135 
°©us_t
 
WrôeFûe
(c⁄° 
Såög8
& 
fûíame
, 
BackupD©aRódî
* 
ö
);

136 
°©us_t
 
WrôeS«pshŸ
(
fd
);

138 
	g¥iv©e
:

139 * 
m_buf
;

140 
boﬁ
 
	gm_loggedUnknownMëad©a
;

141 
	gKeyedVe˘‹
<
	gSåög8
,
	gFûeRec
> 
	gm_fûes
;

144 
	#TEST_BACKUP_HELPERS
 1

	)

146 #i‡
TEST_BACKUP_HELPERS


147 
backup_hñ≥r_ã°_em±y
();

148 
backup_hñ≥r_ã°_four
();

149 
backup_hñ≥r_ã°_fûes
();

150 
backup_hñ≥r_ã°_nuŒ_ba£
();

151 
backup_hñ≥r_ã°_missög_fûe
();

152 
backup_hñ≥r_ã°_d©a_wrôî
();

153 
backup_hñ≥r_ã°_d©a_ªadî
();

	@jni/include/include/utils/Buffer.h

17 #i‚de‡
__UTILS_BUFFER_H__


18 
	#__UTILS_BUFFER_H__
 1

	)

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

24 
«me•a˚
 
	g™droid
 {

26 ˛as†
	cBuf„r


28 
	g¥iv©e
:

29 *
buf
;

30 
	gbufsiz
;

31 
	gu£d
;

32 
ísuªC≠acôy
(
Àn
);

35 
makeRoomF‹
(
Àn
)

37 i‡(
	gÀn
 + 
	gu£d
 >
bufsiz
) {

38 
bufsiz
 = (
Àn
 + 
u£d
) * 3/2 + 2;

39 *
	gbœh
 = 
√w
 [
bufsiz
];

41 
mem˝y
(
bœh
, 
buf
, 
u£d
);

42 
	gdñëe
[] 
	gbuf
;

43 
	gbuf
 = 
bœh
;

47 
	gpublic
:

48 
Buf„r
()

50 
bufsiz
 = 16;

51 
	gbuf
 = 
√w
 [
bufsiz
];

52 
˛ór
();

55 ~
Buf„r
()

57 
	gdñëe
[] 
	gbuf
;

61 
˛ór
()

63 
	gbuf
[0] = '\0';

64 
	gu£d
 = 0;

68 
Àngth
()

70  
	gu£d
;

74 
≠≥nd
(c⁄° 
c
)

76 
makeRoomF‹
(1);

77 
	gbuf
[
u£d
] = 
c
;

78 
	gu£d
++;

79 
	gbuf
[
u£d
] = '\0';

83 
≠≥nd
(c⁄° *
s
, 
Àn
)

85 
makeRoomF‹
(
Àn
);

87 
mem˝y
(
buf
 + 
u£d
, 
s
, 
Àn
);

88 
	gu£d
 +
Àn
;

89 
	gbuf
[
u£d
] = '\0';

93 
≠≥nd
(c⁄° *
s
)

95 
≠≥nd
(
s
, 
°æí
(s));

99 
gëByãs
()

101  
	gbuf
;

	@jni/include/include/utils/BufferedTextOutput.h

17 #i‚de‡
ANDROID_BUFFEREDTEXTOUTPUT_H


18 
	#ANDROID_BUFFEREDTEXTOUTPUT_H


	)

20 
	~<utûs/TextOuçut.h
>

21 
	~<utûs/thªads.h
>

22 
	~<cutûs/uio.h
>

25 
«me•a˚
 
	g™droid
 {

27 ˛as†
	cBuf„ªdTextOuçut
 : 
public
 
TextOuçut


29 
public
:

32 
MULTITHREADED
 = 0x0001

35 
Buf„ªdTextOuçut
(
uöt32_t
 
Êags
 = 0);

36 
	gvútuÆ
 ~
Buf„ªdTextOuçut
();

38 
vútuÆ
 
°©us_t
 
¥öt
(c⁄° * 
txt
, 
size_t
 
Àn
);

39 
vútuÆ
 
moveIndít
(
dñè
);

41 
vútuÆ
 
pushBundÀ
();

42 
vútuÆ
 
p›BundÀ
();

44 
	g¥Ÿe˘ed
:

45 
vútuÆ
 
°©us_t
 
wrôeLöes
(c⁄° 
iovec
& 
vec
, 
size_t
 
N
) = 0;

47 
	g¥iv©e
:

48 
Buf„rSèã
;

49 
	gThªadSèã
;

51 
ThªadSèã
*
gëThªadSèã
();

52 
thªadDe°ru˘‹
(*
°
);

54 
Buf„rSèã
*
gëBuf„r
() const;

56 
uöt32_t
 
	gmFœgs
;

57 c⁄° 
öt32_t
 
	gmSeq
;

58 c⁄° 
öt32_t
 
	gmIndex
;

60 
Muãx
 
	gmLock
;

61 
Buf„rSèã
* 
	gmGlobÆSèã
;

	@jni/include/include/utils/ByteOrder.h

19 #i‚de‡
_LIBS_UTILS_BYTE_ORDER_H


20 
	#_LIBS_UTILS_BYTE_ORDER_H


	)

22 
	~<°döt.h
>

23 
	~<sys/ty≥s.h
>

24 #ifde‡
HAVE_WINSOCK


25 
	~<wösock2.h
>

27 
	~<√töë/ö.h
>

41 
ölöe
 
uöt32_t
 
	$™droid_sw≠_l⁄g
(
uöt32_t
 
v
)

43  (
v
<<24) | ((v<<8)&0x00FF0000) | ((v>>8)&0x0000FF00) | (v>>24);

44 
	}
}

46 
ölöe
 
uöt16_t
 
	$™droid_sw≠_sh‹t
(
uöt16_t
 
v
)

48  (
v
<<8) | (v>>8);

49 
	}
}

51 
	#DEVICE_BYTE_ORDER
 
LITTLE_ENDIAN


	)

53 #i‡
BYTE_ORDER
 =
DEVICE_BYTE_ORDER


55 
	#dtohl
(
x
Ë(x)

	)

56 
	#dtohs
(
x
Ë(x)

	)

57 
	#htodl
(
x
Ë(x)

	)

58 
	#htods
(
x
Ë(x)

	)

62 
	#dtohl
(
x
Ë(
	`™droid_sw≠_l⁄g
(x))

	)

63 
	#dtohs
(
x
Ë(
	`™droid_sw≠_sh‹t
(x))

	)

64 
	#htodl
(
x
Ë(
	`™droid_sw≠_l⁄g
(x))

	)

65 
	#htods
(
x
Ë(
	`™droid_sw≠_sh‹t
(x))

	)

69 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


70 
	#‰omÀl
(
x
Ë(x)

	)

71 
	#‰omÀs
(
x
Ë(x)

	)

72 
	#tﬁñ
(
x
Ë(x)

	)

73 
	#tﬁes
(
x
Ë(x)

	)

75 
	#‰omÀl
(
x
Ë(
	`™droid_sw≠_l⁄g
(x))

	)

76 
	#‰omÀs
(
x
Ë(
	`™droid_sw≠_sh‹t
(x))

	)

77 
	#tﬁñ
(
x
Ë(
	`™droid_sw≠_l⁄g
(x))

	)

78 
	#tﬁes
(
x
Ë(
	`™droid_sw≠_sh‹t
(x))

	)

	@jni/include/include/utils/CallStack.h

17 #i‚de‡
ANDROID_CALLSTACK_H


18 
	#ANDROID_CALLSTACK_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	~<utûs/Såög8.h
>

27 
«me•a˚
 
	g™droid
 {

29 ˛as†
	cCÆlSèck


31 
	gpublic
:

33 
MAX_DEPTH
 = 31

36 
CÆlSèck
();

37 
CÆlSèck
(c⁄° CÆlSèck& 
rhs
);

38 ~
CÆlSèck
();

40 
	gCÆlSèck
& 
	g›î©‹
 = (c⁄° 
CÆlSèck
& 
rhs
);

42 
boﬁ
 
	g›î©‹
 =(c⁄° 
CÆlSèck
& 
rhs
) const;

43 
boﬁ
 
	g›î©‹
 !(c⁄° 
CÆlSèck
& 
rhs
) const;

44 
boﬁ
 
	g›î©‹
 < (c⁄° 
	gCÆlSèck
& 
	grhs
) const;

45 
boﬁ
 
	g›î©‹
 >(c⁄° 
CÆlSèck
& 
rhs
) const;

46 
boﬁ
 
	g›î©‹
 > (c⁄° 
	gCÆlSèck
& 
	grhs
) const;

47 
boﬁ
 
	g›î©‹
 <(c⁄° 
CÆlSèck
& 
rhs
) const;

49 c⁄° * 
	g›î©‹
 [] (
	gödex
) const;

51 
˛ór
();

53 
upd©e
(
öt32_t
 
ign‹eDïth
=0, i¡32_à
maxDïth
=
MAX_DEPTH
);

56 
dump
(c⁄° * 
¥efix
 = 0) const;

59 
Såög8
 
toSåög
(c⁄° * 
¥efix
 = 0) const;

61 
size_t
 
size
(Ëc⁄° {  
	gmCou¡
; }

63 
	g¥iv©e
:

65 
Såög8
 
toSåögSögÀLevñ
(c⁄° * 
¥efix
, 
öt32_t
 
Àvñ
) const;

67 
size_t
 
	gmCou¡
;

68 c⁄° * 
	gmSèck
[
MAX_DEPTH
];

	@jni/include/include/utils/Debug.h

17 #i‚de‡
ANDROID_DEBUG_H


18 
	#ANDROID_DEBUG_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
«me•a˚
 
	g™droid
 {

26 #ifde‡
__˝lu•lus


27 
	gãm∂©e
<
	gboﬁ
> 
	gCompûeTimeAs£π
;

28 
	gãm∂©e
<> 
	gCompûeTimeAs£π
<
	gåue
> {};

29 
	#COMPILE_TIME_ASSERT
(
_exp
) \

30 
ãm∂©e
 
˛ass
 
CompûeTimeAs£π
< (
_exp
Ë>;

	)

32 
	#COMPILE_TIME_ASSERT_FUNCTION_SCOPE
(
_exp
) \

33 
CompûeTimeAs£π
<–
_exp
 )>();

	)

37 #ifde‡
__˝lu•lus


38 
	gãm∂©e
<
boﬁ
 
	gC
, 
ty≥«me
 
	gLSH
,Åy≥«mê
	gRHS
> 
	gCompûeTimeIfEl£
;

39 
	gãm∂©e
<
ty≥«me
 
	gLHS
,Åy≥«mê
	gRHS
>

40 
	gCompûeTimeIfEl£
<
	gåue
, 
	gLHS
, 
	gRHS
> { 
LHS
 
	tTYPE
; };

41 
	gãm∂©e
<
ty≥«me
 
	gLHS
,Åy≥«mê
	gRHS
>

42 
	gCompûeTimeIfEl£
<
	gÁl£
, 
	gLHS
, 
	gRHS
> { 
RHS
 
	tTYPE
; };

47 #ifde‡
__˝lu•lus


51 c⁄° * 
°rögF‹Indít
(
öt32_t
 
ödítLevñ
);

53 (*
debugPrötFunc
)(* 
	tcookõ
, c⁄° * 
	ttxt
);

55 
¥ötTy≥Code
(
uöt32_t
 
ty≥Code
,

56 
debugPrötFunc
 
func
 = 0, * 
cookõ
 = 0);

58 
¥ötHexD©a
(
öt32_t
 
ödít
, c⁄° *
buf
, 
size_t
 
Àngth
,

59 
size_t
 
byãsPîLöe
=16, 
öt32_t
 
sögÀLöeByãsCutoff
=16,

60 
size_t
 
Æignmít
=0, 
boﬁ
 
cAºayStyÀ
=
Ál£
,

61 
debugPrötFunc
 
func
 = 0, * 
cookõ
 = 0);

63 #ifde‡
__˝lu•lus


	@jni/include/include/utils/Endian.h

20 #i‚de‡
_LIBS_UTILS_ENDIAN_H


21 
	#_LIBS_UTILS_ENDIAN_H


	)

23 #i‡
deföed
(
HAVE_ENDIAN_H
)

25 
	~<ídün.h
>

29 
	#__BIG_ENDIAN
 0x1000

	)

30 
	#__LITTLE_ENDIAN
 0x0001

	)

32 #i‡
deföed
(
HAVE_LITTLE_ENDIAN
)

33 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

35 
	#__BYTE_ORDER
 
__BIG_ENDIAN


	)

	@jni/include/include/utils/Errors.h

17 #i‚de‡
ANDROID_ERRORS_H


18 
	#ANDROID_ERRORS_H


	)

20 
	~<sys/ty≥s.h
>

21 
	~<î∫o.h
>

23 
«me•a˚
 
	g™droid
 {

26 #ifde‡
HAVE_MS_C_RUNTIME


27 
	t°©us_t
;

29 
öt32_t
 
	t°©us_t
;

41 #ifde‡
_WIN32


42 #unde‡
NO_ERROR


46 
	gOK
 = 0,

47 
	gNO_ERROR
 = 0,

49 
	gUNKNOWN_ERROR
 = 0x80000000,

51 
	gNO_MEMORY
 = -
ENOMEM
,

52 
	gINVALID_OPERATION
 = -
ENOSYS
,

53 
	gBAD_VALUE
 = -
EINVAL
,

54 
	gBAD_TYPE
 = 0x80000001,

55 
	gNAME_NOT_FOUND
 = -
ENOENT
,

56 
	gPERMISSION_DENIED
 = -
EPERM
,

57 
	gNO_INIT
 = -
ENODEV
,

58 
	gALREADY_EXISTS
 = -
EEXIST
,

59 
	gDEAD_OBJECT
 = -
EPIPE
,

60 
	gFAILED_TRANSACTION
 = 0x80000002,

61 
	gJPARKS_BROKE_IT
 = -
EPIPE
,

62 #i‡!
deföed
(
HAVE_MS_C_RUNTIME
)

63 
	gBAD_INDEX
 = -
EOVERFLOW
,

64 
	gNOT_ENOUGH_DATA
 = -
ENODATA
,

65 
	gWOULD_BLOCK
 = -
EWOULDBLOCK
,

66 
	gTIMED_OUT
 = -
ETIMEDOUT
,

67 
	gUNKNOWN_TRANSACTION
 = -
EBADMSG
,

69 
	gBAD_INDEX
 = -
E2BIG
,

70 
	gNOT_ENOUGH_DATA
 = 0x80000003,

71 
	gWOULD_BLOCK
 = 0x80000004,

72 
	gTIMED_OUT
 = 0x80000005,

73 
	gUNKNOWN_TRANSACTION
 = 0x80000006,

79 #ifde‡
_WIN32


80 
	#NO_ERROR
 0L

	)

	@jni/include/include/utils/FileMap.h

20 #i‚de‡
__LIBS_FILE_MAP_H


21 
	#__LIBS_FILE_MAP_H


	)

23 
	~<sys/ty≥s.h
>

25 #ifde‡
HAVE_WIN32_FILEMAP


26 
	~<wödows.h
>

29 
«me•a˚
 
	g™droid
 {

45 ˛as†
	cFûeM≠
 {

46 
	gpublic
:

47 
FûeM≠
();

57 
boﬁ
 
¸óã
(c⁄° * 
‹igFûeName
, 
fd
,

58 
off_t
 
off£t
, 
size_t
 
Àngth
, 
boﬁ
 
ªadO∆y
);

63 c⁄° * 
gëFûeName
(Ëc⁄° {  
	gmFûeName
; }

68 * 
gëD©aPå
(Ëc⁄° {  
	gmD©aPå
; }

73 
size_t
 
gëD©aLígth
(Ëc⁄° {  
	gmD©aLígth
; }

78 
off_t
 
gëD©aOff£t
(Ëc⁄° {  
	gmD©aOff£t
; }

83 
FûeM≠
* 
acquúe
(Ë{ 
	gmRefCou¡
++;  
	gthis
; }

88 
ªÀa£
() {

89 i‡(--
	gmRefCou¡
 <= 0)

90 
dñëe
 
this
;

97 
	eM≠Advi˚
 {

98 
	gNORMAL
, 
	gRANDOM
, 
	gSEQUENTIAL
, 
	gWILLNEED
, 
	gDONTNEED


106 
advi£
(
M≠Advi˚
 
advi˚
);

108 
	g¥Ÿe˘ed
:

110 ~
FûeM≠
();

112 
	g¥iv©e
:

114 
FûeM≠
(c⁄° FûeM≠& 
§c
);

115 c⁄° 
	gFûeM≠
& 
	g›î©‹
=(c⁄° 
FûeM≠
& 
§c
);

117 
	gmRefCou¡
;

118 * 
	gmFûeName
;

119 * 
	gmBa£På
;

120 
size_t
 
	gmBa£Lígth
;

121 
off_t
 
	gmD©aOff£t
;

122 * 
	gmD©aPå
;

123 
size_t
 
	gmD©aLígth
;

124 #ifde‡
HAVE_WIN32_FILEMAP


125 
HANDLE
 
	gmFûeH™dÀ
;

126 
HANDLE
 
	gmFûeM≠pög
;

129 
	gmPageSize
;

	@jni/include/include/utils/Flattenable.h

17 #i‚de‡
ANDROID_UTILS_FLATTENABLE_H


18 
	#ANDROID_UTILS_FLATTENABLE_H


	)

21 
	~<°döt.h
>

22 
	~<sys/ty≥s.h
>

23 
	~<utûs/Eº‹s.h
>

25 
«me•a˚
 
	g™droid
 {

27 ˛as†
	cFœâíabÀ


29 
	gpublic
:

31 
vútuÆ
 
size_t
 
gëFœâíedSize
() const = 0;

34 
vútuÆ
 
size_t
 
gëFdCou¡
() const = 0;

41 
vútuÆ
 
°©us_t
 
Ê©ãn
(* 
buf„r
, 
size_t
 
size
,

42 
fds
[], 
size_t
 
cou¡
) const = 0;

51 
vútuÆ
 
°©us_t
 
unÊ©ãn
(c⁄°* 
buf„r
, 
size_t
 
size
,

52 
fds
[], 
size_t
 
cou¡
) = 0;

54 
	g¥Ÿe˘ed
:

55 
vútuÆ
 ~
FœâíabÀ
() = 0;

	@jni/include/include/utils/KeyedVector.h

17 #i‚de‡
ANDROID_KEYED_VECTOR_H


18 
	#ANDROID_KEYED_VECTOR_H


	)

20 
	~<as£π.h
>

21 
	~<°döt.h
>

22 
	~<sys/ty≥s.h
>

24 
	~<utûs/S‹ãdVe˘‹.h
>

25 
	~<utûs/Ty≥Hñ≥rs.h
>

26 
	~<utûs/Eº‹s.h
>

30 
«me•a˚
 
	g™droid
 {

32 
	gãm∂©e
 <
ty≥«me
 
	gKEY
,Åy≥«mê
	gVALUE
>

33 ˛as†
	cKeyedVe˘‹


35 
	gpublic
:

36 
KEY
 
	tkey_ty≥
;

37 
VALUE
 
	tvÆue_ty≥
;

39 
ölöe
 
KeyedVe˘‹
();

45 
ölöe
 
˛ór
(Ë{ 
	gmVe˘‹
.clear(); }

52 
ölöe
 
size_t
 
size
(Ëc⁄° {  
	gmVe˘‹
.size(); }

54 
ölöe
 
boﬁ
 
isEm±y
(Ëc⁄° {  
	gmVe˘‹
.isEmpty(); }

56 
ölöe
 
size_t
 
ˇ∑côy
(Ëc⁄° {  
	gmVe˘‹
.capacity(); }

58 
ölöe
 
ssize_t
 
£tC≠acôy
(
size_t
 
size
Ë{  
	gmVe˘‹
.setCapacity(size); }

63 c⁄° 
	gVALUE
& 
vÆueF‹
(c⁄° 
KEY
& 
key
) const;

64 c⁄° 
	gVALUE
& 
vÆueAt
(
size_t
 
ödex
) const;

65 c⁄° 
	gKEY
& 
keyAt
(
size_t
 
ödex
) const;

66 
ssize_t
 
ödexOfKey
(c⁄° 
KEY
& 
key
) const;

72 
	gVALUE
& 
edôVÆueF‹
(c⁄° 
KEY
& 
key
);

73 
	gVALUE
& 
edôVÆueAt
(
size_t
 
ödex
);

79 
ssize_t
 
add
(c⁄° 
KEY
& 
key
, c⁄° 
VALUE
& 
ôem
);

80 
ssize_t
 
ª∂a˚VÆueF‹
(c⁄° 
KEY
& 
key
, c⁄° 
VALUE
& 
ôem
);

81 
ssize_t
 
ª∂a˚VÆueAt
(
size_t
 
ödex
, c⁄° 
VALUE
& 
ôem
);

87 
ssize_t
 
ªmoveIãm
(c⁄° 
KEY
& 
key
);

88 
ssize_t
 
ªmoveIãmsAt
(
size_t
 
ödex
, size_à
cou¡
 = 1);

90 
	g¥iv©e
:

91 
S‹ãdVe˘‹
< 
key_vÆue_∑ú_t
<
KEY
, 
	gVALUE
> > 
	gmVe˘‹
;

100 
	gãm∂©e
 <
ty≥«me
 
	gKEY
,Åy≥«mê
	gVALUE
>

101 
˛ass
 
	gDeÁu…KeyedVe˘‹
 : 
public
 
KeyedVe˘‹
<
KEY
, 
	gVALUE
>

103 
	gpublic
:

104 
ölöe
 
DeÁu…KeyedVe˘‹
(c⁄° 
VALUE
& 
defVÆue
 = VALUE());

105 c⁄° 
	gVALUE
& 
vÆueF‹
(c⁄° 
KEY
& 
key
) const;

107 
	g¥iv©e
:

108 
VALUE
 
mDeÁu…
;

113 
	gãm∂©e
<
ty≥«me
 
	gKEY
,Åy≥«mê
	gVALUE
> 
ölöe


114 
	gKeyedVe˘‹
<
	gKEY
,
	gVALUE
>::
	$KeyedVe˘‹
()

116 
	}
}

118 
ãm∂©e
<
ty≥«me
 
KEY
,Åy≥«mê
	gVALUE
> 
ölöe


119 
ssize_t
 
	gKeyedVe˘‹
<
	gKEY
,
	gVALUE
>::
	$ödexOfKey
(c⁄° 
KEY
& 
key
) const {

120  
mVe˘‹
.
	`ödexOf
–
key_vÆue_∑ú_t
<
KEY
,
VALUE
>(
key
) );

121 
	}
}

123 
	gãm∂©e
<
ty≥«me
 
	gKEY
,Åy≥«mê
	gVALUE
> 
ölöe


124 c⁄° 
	gVALUE
& 
	gKeyedVe˘‹
<
	gKEY
,VALUE>::
	$vÆueF‹
(c⁄° 
KEY
& 
key
) const {

125 
ssize_t
 
i
 = 
	`ödexOfKey
(
key
);

126 
	`as£π
(
i
>=0);

127  
mVe˘‹
.
	`ôemAt
(
i
).
vÆue
;

128 
	}
}

130 
	gãm∂©e
<
ty≥«me
 
	gKEY
,Åy≥«mê
	gVALUE
> 
ölöe


131 c⁄° 
	gVALUE
& 
	gKeyedVe˘‹
<
	gKEY
,VALUE>::
	$vÆueAt
(
size_t
 
ödex
) const {

132  
mVe˘‹
.
	`ôemAt
(
ödex
).
vÆue
;

133 
	}
}

135 
	gãm∂©e
<
ty≥«me
 
	gKEY
,Åy≥«mê
	gVALUE
> 
ölöe


136 c⁄° 
	gKEY
& 
	gKeyedVe˘‹
<KEY,
	gVALUE
>::
	$keyAt
(
size_t
 
ödex
) const {

137  
mVe˘‹
.
	`ôemAt
(
ödex
).
key
;

138 
	}
}

140 
	gãm∂©e
<
ty≥«me
 
	gKEY
,Åy≥«mê
	gVALUE
> 
ölöe


141 
	gVALUE
& 
	gKeyedVe˘‹
<
	gKEY
,VALUE>::
	$edôVÆueF‹
(c⁄° 
KEY
& 
key
) {

142 
ssize_t
 
i
 = 
	`ödexOfKey
(
key
);

143 
	`as£π
(
i
>=0);

144  
mVe˘‹
.
	`edôIãmAt
(
i
).
vÆue
;

145 
	}
}

147 
	gãm∂©e
<
ty≥«me
 
	gKEY
,Åy≥«mê
	gVALUE
> 
ölöe


148 
	gVALUE
& 
	gKeyedVe˘‹
<
	gKEY
,VALUE>::
	$edôVÆueAt
(
size_t
 
ödex
) {

149  
mVe˘‹
.
	`edôIãmAt
(
ödex
).
vÆue
;

150 
	}
}

152 
	gãm∂©e
<
ty≥«me
 
	gKEY
,Åy≥«mê
	gVALUE
> 
ölöe


153 
ssize_t
 
	gKeyedVe˘‹
<
	gKEY
,
	gVALUE
>::
	$add
(c⁄° 
KEY
& 
key
, c⁄° 
VALUE
& 
vÆue
) {

154  
mVe˘‹
.
	`add
–
key_vÆue_∑ú_t
<
KEY
,
VALUE
>(
key
, 
vÆue
) );

155 
	}
}

157 
	gãm∂©e
<
ty≥«me
 
	gKEY
,Åy≥«mê
	gVALUE
> 
ölöe


158 
ssize_t
 
	gKeyedVe˘‹
<
	gKEY
,
	gVALUE
>::
	$ª∂a˚VÆueF‹
(c⁄° 
KEY
& 
key
, c⁄° 
VALUE
& 
vÆue
) {

159 
key_vÆue_∑ú_t
<
KEY
,
VALUE
> 
	`∑ú
(
key
, 
vÆue
);

160 
mVe˘‹
.
	`ªmove
(
∑ú
);

161  
mVe˘‹
.
	`add
(
∑ú
);

162 
	}
}

164 
	gãm∂©e
<
ty≥«me
 
	gKEY
,Åy≥«mê
	gVALUE
> 
ölöe


165 
ssize_t
 
	gKeyedVe˘‹
<
	gKEY
,
	gVALUE
>::
	$ª∂a˚VÆueAt
(
size_t
 
ödex
, c⁄° 
VALUE
& 
ôem
) {

166 i‡(
ödex
<
	`size
()) {

167 
mVe˘‹
.
	`edôIãmAt
(
ödex
).
vÆue
 = 
ôem
;

168  
ödex
;

170  
BAD_INDEX
;

171 
	}
}

173 
	gãm∂©e
<
ty≥«me
 
	gKEY
,Åy≥«mê
	gVALUE
> 
ölöe


174 
ssize_t
 
	gKeyedVe˘‹
<
	gKEY
,
	gVALUE
>::
	$ªmoveIãm
(c⁄° 
KEY
& 
key
) {

175  
mVe˘‹
.
	`ªmove
(
key_vÆue_∑ú_t
<
KEY
,
VALUE
>(
key
));

176 
	}
}

178 
	gãm∂©e
<
ty≥«me
 
	gKEY
,Åy≥«mê
	gVALUE
> 
ölöe


179 
ssize_t
 
	gKeyedVe˘‹
<
	gKEY
, 
	gVALUE
>::
	$ªmoveIãmsAt
(
size_t
 
ödex
, size_à
cou¡
) {

180  
mVe˘‹
.
	`ªmoveIãmsAt
(
ödex
, 
cou¡
);

181 
	}
}

185 
	gãm∂©e
<
ty≥«me
 
	gKEY
,Åy≥«mê
	gVALUE
> 
ölöe


186 
	gDeÁu…KeyedVe˘‹
<
	gKEY
,
	gVALUE
>::
	$DeÁu…KeyedVe˘‹
(c⁄° 
VALUE
& 
defVÆue
)

187 : 
	$mDeÁu…
(
defVÆue
)

189 
	}
}

191 
ãm∂©e
<
ty≥«me
 
KEY
,Åy≥«mê
	gVALUE
> 
ölöe


192 c⁄° 
	gVALUE
& 
	gDeÁu…KeyedVe˘‹
<
	gKEY
,VALUE>::
	$vÆueF‹
(c⁄° 
KEY
& 
key
) const {

193 
ssize_t
 
i
 = 
	`ödexOfKey
(
key
);

194  
i
 >0 ? 
KeyedVe˘‹
<
KEY
,
VALUE
>::
	`vÆueAt
(iË: 
mDeÁu…
;

195 
	}
}

	@jni/include/include/utils/List.h

27 #i‚de‡
_LIBS_UTILS_LIST_H


28 
	#_LIBS_UTILS_LIST_H


	)

30 
	~<°ddef.h
>

31 
	~<°döt.h
>

33 
«me•a˚
 
	g™droid
 {

41 
	gãm∂©e
<
ty≥«me
 
	gT
>

42 ˛as†
	cLi°


44 
	g¥Ÿe˘ed
:

48 ˛as†
	c_Node
 {

49 
public
:

50 
ex∂icô
 
_Node
(c⁄° 
T
& 
vÆ
Ë: 
mVÆ
(val) {}

51 ~
_Node
() {}

52 
ölöe
 
T
& 
gëRef
(Ë{  
mVÆ
; }

53 
ölöe
 c⁄° 
	gT
& 
gëRef
(Ëc⁄° {  
	gmVÆ
; }

54 
ölöe
 
_Node
* 
gëPªv
(Ëc⁄° {  
	gmpPªv
; }

55 
ölöe
 
_Node
* 
gëNext
(Ëc⁄° {  
	gmpNext
; }

56 
ölöe
 
£tVÆ
(c⁄° 
T
& 
vÆ
Ë{ 
	gmVÆ
 = val; }

57 
ölöe
 
£tPªv
(
_Node
* 
±r
Ë{ 
	gmpPªv
 =Ötr; }

58 
ölöe
 
£tNext
(
_Node
* 
±r
Ë{ 
	gmpNext
 =Ötr; }

59 
	g¥iv©e
:

60 
‰õnd
 
˛ass
 
Li°
;

61 
‰õnd
 
˛ass
 
	g_Li°Iãøt‹
;

62 
T
 
	gmVÆ
;

63 
_Node
* 
	gmpPªv
;

64 
_Node
* 
	gmpNext
;

71 
	gãm∂©e
 <
ty≥«me
 
	gTYPE
>

72 
	sCONST_ITERATOR
 {

73 
_Node
 c⁄° * 
	tNodePå
;

74 c⁄° 
	tTYPE
 
	tTy≥
;

77 
	gãm∂©e
 <
ty≥«me
 
	gTYPE
>

78 
	sNON_CONST_ITERATOR
 {

79 
_Node
* 
	tNodePå
;

80 
TYPE
 
	tTy≥
;

83 
	gãm∂©e
<

84 
ty≥«me
 
	gU
,

85 
	gãm∂©e
 <
	g˛ass
> 
˛ass
 
	gC⁄°√ss


87 ˛as†
	c_Li°Iãøt‹
 {

88 
	g_Li°Iãøt‹
<
	tU
, 
	tC⁄°√ss
> 
	t_Iãr
;

89 
ty≥«me
 
	tC⁄°√ss
<
	tU
>::
	tNodePå
 
	t_NodePå
;

90 
ty≥«me
 
	tC⁄°√ss
<
	tU
>::
	tTy≥
 
	t_Ty≥
;

92 
ex∂icô
 
_Li°Iãøt‹
(
_NodePå
 
±r
Ë: 
mpNode
(ptr) {}

94 
public
:

95 
_Li°Iãøt‹
() {}

96 
_Li°Iãøt‹
(c⁄° 
_Iãr
& 
rhs
Ë: 
mpNode
(rhs.mpNode) {}

97 ~
_Li°Iãøt‹
() {}

103 
ãm∂©e
<
ty≥«me
 
V
> 
ex∂icô


104 
_Li°Iãøt‹
(c⁄° 
V
& 
rhs
Ë: 
mpNode
(rhs.mpNode) {}

110 
_Ty≥
& 
›î©‹
*(Ëc⁄° {  
mpNode
->
gëRef
(); }

111 
_Ty≥
* 
	g›î©‹
->(Ëc⁄° {  &(
	gmpNode
->
gëRef
()); }

116 
ölöe
 
boﬁ
 
	g›î©‹
==(c⁄° 
_Iãr
& 
right
) const {

117  
mpNode
 =
right
.mpNode; }

119 
ölöe
 
boﬁ
 
	g›î©‹
!=(c⁄° 
_Iãr
& 
right
) const {

120  
mpNode
 !
right
.mpNode; }

125 
	gãm∂©e
<
ty≥«me
 
	gOTHER
>

126 
ölöe
 
boﬁ
 
	g›î©‹
==(c⁄° 
OTHER
& 
right
) const {

127  
mpNode
 =
right
.mpNode; }

129 
	gãm∂©e
<
ty≥«me
 
	gOTHER
>

130 
ölöe
 
boﬁ
 
	g›î©‹
!=(c⁄° 
OTHER
& 
right
) const {

131  
mpNode
 !
right
.mpNode; }

136 
ölöe
 
	g_Iãr
& 
	g›î©‹
++() {

137 
	gmpNode
 = 
mpNode
->
gëNext
();

138  *
	gthis
;

140 c⁄° 
_Iãr
 
	g›î©‹
++() {

141 
_Iãr
 
tmp
(*
this
);

142 
	gmpNode
 = 
mpNode
->
gëNext
();

143  
	gtmp
;

145 
ölöe
 
	g_Iãr
& 
	g›î©‹
--() {

146 
	gmpNode
 = 
mpNode
->
gëPªv
();

147  *
	gthis
;

149 c⁄° 
_Iãr
 
	g›î©‹
--() {

150 
_Iãr
 
tmp
(*
this
);

151 
	gmpNode
 = 
mpNode
->
gëPªv
();

152  
	gtmp
;

155 
ölöe
 
_NodePå
 
gëNode
(Ëc⁄° {  
	gmpNode
; }

157 
_NodePå
 
	gmpNode
;

158 
	g¥iv©e
:

159 
‰õnd
 
˛ass
 
Li°
;

162 
	gpublic
:

163 
Li°
() {

164 
¥ï
();

166 
Li°
(c⁄° Li°<
T
>& 
§c
) {

167 
¥ï
();

168 
ö£π
(
begö
(), 
§c
.begö(), src.
íd
());

170 
	gvútuÆ
 ~
Li°
() {

171 
˛ór
();

172 
	gdñëe
[] (*Ë
	gmpMiddÀ
;

175 
	g_Li°Iãøt‹
<
	tT
, 
	tNON_CONST_ITERATOR
> 
	tôî©‹
;

176 
	g_Li°Iãøt‹
<
	tT
, 
	tCONST_ITERATOR
> 
	tc⁄°_ôî©‹
;

178 
	gLi°
<
	gT
>& 
	g›î©‹
=(c⁄° 
Li°
<
T
>& 
right
);

181 
ölöe
 
boﬁ
 
em±y
(Ëc⁄° {  
	gmpMiddÀ
->
gëNext
(Ë=
mpMiddÀ
; }

184 
size_t
 
size
() const {

185  
size_t
(
di°™˚
(
begö
(), 
íd
()));

193 
ölöe
 
ôî©‹
 
begö
() {

194  
ôî©‹
(
mpMiddÀ
->
gëNext
());

196 
ölöe
 
c⁄°_ôî©‹
 
begö
() const {

197  
c⁄°_ôî©‹
(
c⁄°_ˇ°
<
_Node
 c⁄°*>(
mpMiddÀ
->
gëNext
()));

199 
ölöe
 
ôî©‹
 
íd
() {

200  
ôî©‹
(
mpMiddÀ
);

202 
ölöe
 
c⁄°_ôî©‹
 
íd
() const {

203  
c⁄°_ôî©‹
(
c⁄°_ˇ°
<
_Node
 c⁄°*>(
mpMiddÀ
));

207 
push_‰⁄t
(c⁄° 
T
& 
vÆ
Ë{ 
ö£π
(
begö
(), val); }

208 
push_back
(c⁄° 
T
& 
vÆ
Ë{ 
ö£π
(
íd
(), val); }

211 
ôî©‹
 
ö£π
(ôî©‹ 
po¢
, c⁄° 
T
& 
vÆ
)

213 
_Node
* 
	g√wNode
 = 
√w
 _Node(
vÆ
);

214 
	g√wNode
->
£tNext
(
po¢
.
gëNode
());

215 
	g√wNode
->
£tPªv
(
po¢
.
gëNode
()->
gëPªv
());

216 
	gpo¢
.
gëNode
()->
gëPªv
()->
£tNext
(
√wNode
);

217 
	gpo¢
.
gëNode
()->
£tPªv
(
√wNode
);

218  
ôî©‹
(
√wNode
);

222 
ö£π
(
ôî©‹
 
po¢
, 
c⁄°_ôî©‹
 
fú°
, c⁄°_ôî©‹ 
œ°
) {

223  ; 
	gfú°
 !
œ°
; ++first)

224 
ö£π
(
po¢
, *
fú°
);

228 
ôî©‹
 
îa£
(ôî©‹ 
po¢
) {

229 
_Node
* 
	gpNext
 = 
po¢
.
gëNode
()->
gëNext
();

230 
_Node
* 
	gpPªv
 = 
po¢
.
gëNode
()->
gëPªv
();

231 
	gpPªv
->
£tNext
(
pNext
);

232 
	gpNext
->
£tPªv
(
pPªv
);

233 
dñëe
 
	gpo¢
.
gëNode
();

234  
ôî©‹
(
pNext
);

238 
ôî©‹
 
îa£
(ôî©‹ 
fú°
, iãøt‹ 
œ°
) {

239 
	gfú°
 !
œ°
)

240 
îa£
(
fú°
++);

241  
ôî©‹
(
œ°
);

245 
˛ór
() {

246 
_Node
* 
	gpCuºít
 = 
mpMiddÀ
->
gëNext
();

247 
_Node
* 
	gpNext
;

249 
	gpCuºít
 !
mpMiddÀ
) {

250 
pNext
 = 
pCuºít
->
gëNext
();

251 
dñëe
 
	gpCuºít
;

252 
	gpCuºít
 = 
pNext
;

254 
	gmpMiddÀ
->
£tPªv
(
mpMiddÀ
);

255 
	gmpMiddÀ
->
£tNext
(
mpMiddÀ
);

268 
	gãm∂©e
<

269 
ty≥«me
 
	gU
,

270 
	gãm∂©e
 <
	g˛ass
> 
˛ass
 
	gCL
,

271 
	gãm∂©e
 <
	g˛ass
> 
˛ass
 
	gCR


273 
±rdiff_t
 
di°™˚
(

274 
_Li°Iãøt‹
<
U
, 
CL
> 
fú°
, _Li°Iãøt‹<U, 
CR
> 
œ°
) const

276 
±rdiff_t
 
	gcou¡
 = 0;

277 
	gfú°
 !
œ°
) {

278 ++
fú°
;

279 ++
	gcou¡
;

281  
	gcou¡
;

284 
	g¥iv©e
:

291 
¥ï
() {

292 
mpMiddÀ
 = (
_Node
*Ë
√w
 [(_Node)];

293 
	gmpMiddÀ
->
£tPªv
(
mpMiddÀ
);

294 
	gmpMiddÀ
->
£tNext
(
mpMiddÀ
);

302 
_Node
* 
	gmpMiddÀ
;

312 
	gãm∂©e
<
˛ass
 
	gT
>

313 
	gLi°
<
	gT
>& Li°<T>::
›î©‹
=(c⁄° 
Li°
<
T
>& 
right
)

315 i‡(
this
 =&
right
)

316  *
this
;

317 
ôî©‹
 
	gfú°D°
 = 
begö
();

318 
ôî©‹
 
	gœ°D°
 = 
íd
();

319 
c⁄°_ôî©‹
 
	gfú°Src
 = 
right
.
begö
();

320 
c⁄°_ôî©‹
 
	gœ°Src
 = 
right
.
íd
();

321 
	gfú°Src
 !
œ°Src
 && 
fú°D°
 !
œ°D°
)

322 *
fú°D°
++ = *
fú°Src
++;

323 i‡(
	gfú°Src
 =
œ°Src
)

324 
îa£
(
fú°D°
, 
œ°D°
);

326 
ö£π
(
œ°D°
, 
fú°Src
, 
œ°Src
);

327  *
	gthis
;

	@jni/include/include/utils/Log.h

28 #i‚de‡
_LIBS_UTILS_LOG_H


29 
	#_LIBS_UTILS_LOG_H


	)

31 
	~<cutûs/log.h
>

	@jni/include/include/utils/RefBase.h

17 #i‚de‡
ANDROID_REF_BASE_H


18 
	#ANDROID_REF_BASE_H


	)

20 
	~<cutûs/©omic.h
>

21 
	~<utûs/TextOuçut.h
>

23 
	~<°döt.h
>

24 
	~<sys/ty≥s.h
>

25 
	~<°dlib.h
>

28 
«me•a˚
 
	g™droid
 {

30 
	gãm∂©e
<
ty≥«me
 
	gT
> 
˛ass
 
	gwp
;

34 
	#COMPARE
(
_›_
) \

35 
ölöe
 
boﬁ
 
›î©‹
 
	`_›_
 (c⁄° 
•
<
T
>& 
o
) const { \

36  
m_±r
 
_›_
 
o
.m_ptr; \

38 
ölöe
 
boﬁ
 
›î©‹
 
	`_›_
 (c⁄° 
wp
<
T
>& 
o
) const { \

39  
m_±r
 
_›_
 
o
.m_ptr; \

41 
ölöe
 
boﬁ
 
›î©‹
 
	`_›_
 (c⁄° 
T
* 
o
) const { \

42  
m_±r
 
_›_
 
o
; \

44 
ãm∂©e
<
ty≥«me
 
U
> \

45 
ölöe
 
boﬁ
 
›î©‹
 
	`_›_
 (c⁄° 
•
<
U
>& 
o
) const { \

46  
m_±r
 
_›_
 
o
.m_ptr; \

48 
ãm∂©e
<
ty≥«me
 
U
> \

49 
ölöe
 
boﬁ
 
›î©‹
 
	`_›_
 (c⁄° 
wp
<
U
>& 
o
) const { \

50  
m_±r
 
_›_
 
o
.m_ptr; \

52 
ãm∂©e
<
ty≥«me
 
U
> \

53 
ölöe
 
boﬁ
 
›î©‹
 
	`_›_
 (c⁄° 
U
* 
o
) const { \

54  
m_±r
 
_›_
 
o
; \

55 }

	)

59 ˛as†
	cRefBa£


61 
	gpublic
:

62 
öcSå⁄g
(c⁄° * 
id
) const;

63 
decSå⁄g
(c⁄° * 
id
) const;

65 
f‹˚IncSå⁄g
(c⁄° * 
id
) const;

68 
öt32_t
 
gëSå⁄gCou¡
() const;

70 ˛as†
	cwókªf_ty≥


72 
	gpublic
:

73 
RefBa£
* 
ªfBa£
() const;

75 
öcWók
(c⁄° * 
id
);

76 
decWók
(c⁄° * 
id
);

78 
boﬁ
 
©ãm±IncSå⁄g
(c⁄° * 
id
);

81 
boﬁ
 
©ãm±IncWók
(c⁄° * 
id
);

84 
öt32_t
 
gëWókCou¡
() const;

87 
¥ötRefs
() const;

96 
åackMe
(
boﬁ
 
íabÀ
, boﬁ 
ªèö
);

99 
wókªf_ty≥
* 
¸óãWók
(c⁄° * 
id
) const;

101 
wókªf_ty≥
* 
gëWókRefs
() const;

104 
ölöe
 
¥ötRefs
(Ëc⁄° { 
gëWókRefs
()->printRefs(); }

107 
ölöe
 
åackMe
(
boﬁ
 
íabÀ
, boﬁ 
ªèö
)

109 
gëWókRefs
()->
åackMe
(
íabÀ
, 
ªèö
);

112 
	g¥Ÿe˘ed
:

113 
RefBa£
();

114 
	gvútuÆ
 ~
RefBa£
();

118 
	gOBJECT_LIFETIME_WEAK
 = 0x0001,

119 
	gOBJECT_LIFETIME_FOREVER
 = 0x0003

122 
exãndObje˘Li„time
(
öt32_t
 
mode
);

126 
	gFIRST_INC_STRONG
 = 0x0001

129 
vútuÆ
 
⁄Fú°Ref
();

130 
vútuÆ
 
⁄La°Så⁄gRef
(c⁄° * 
id
);

131 
vútuÆ
 
boﬁ
 
⁄IncSå⁄gAâem±ed
(
uöt32_t
 
Êags
, c⁄° * 
id
);

132 
vútuÆ
 
⁄La°WókRef
(c⁄° * 
id
);

134 
	g¥iv©e
:

135 
‰õnd
 
˛ass
 
wókªf_ty≥
;

136 
˛ass
 
	gwókªf_im∂
;

138 
RefBa£
(c⁄° RefBa£& 
o
);

139 
	gRefBa£
& 
	g›î©‹
=(c⁄° 
RefBa£
& 
o
);

141 
wókªf_im∂
* c⁄° 
	gmRefs
;

146 
	gãm∂©e
 <
˛ass
 
	gT
>

147 ˛as†
	cLightRefBa£


149 
	gpublic
:

150 
ölöe
 
LightRefBa£
(Ë: 
mCou¡
(0) { }

151 
ölöe
 
öcSå⁄g
(c⁄° * 
id
) const {

152 
™droid_©omic_öc
(&
mCou¡
);

154 
ölöe
 
decSå⁄g
(c⁄° * 
id
) const {

155 i‡(
™droid_©omic_dec
(&
mCou¡
) == 1) {

156 
dñëe
 
°©ic_ˇ°
<c⁄° 
T
*>(
this
);

160 
ölöe
 
öt32_t
 
gëSå⁄gCou¡
() const {

161  
	gmCou¡
;

164 
	g¥Ÿe˘ed
:

165 
ölöe
 ~
LightRefBa£
() { }

167 
¥iv©e
:

168 
muèbÀ
 vﬁ©ûê
öt32_t
 
mCou¡
;

173 
	gãm∂©e
 <
ty≥«me
 
	gT
>

174 ˛as†
	c•


176 
	gpublic
:

177 
ty≥«me
 
	tRefBa£
::
	twókªf_ty≥
 weakref_type;

179 
ölöe
 
•
(Ë: 
m_±r
(0) { }

181 
•
(
T
* 
Ÿhî
);

182 
•
(c⁄° sp<
T
>& 
Ÿhî
);

183 
	gãm∂©e
<
ty≥«me
 
	gU
> 
•
(
U
* 
Ÿhî
);

184 
	gãm∂©e
<
ty≥«me
 
	gU
> 
•
(c⁄° sp<
U
>& 
Ÿhî
);

186 ~
•
();

190 
	g•
& 
	g›î©‹
 = (
T
* 
Ÿhî
);

191 
	g•
& 
	g›î©‹
 = (c⁄° 
•
<
T
>& 
Ÿhî
);

193 
	gãm∂©e
<
ty≥«me
 
	gU
> 
	g•
& 
	g›î©‹
 = (c⁄° 
•
<
U
>& 
Ÿhî
);

194 
	gãm∂©e
<
ty≥«me
 
	gU
> 
	g•
& 
	g›î©‹
 = (
U
* 
Ÿhî
);

197 
f‹˚_£t
(
T
* 
Ÿhî
);

201 
˛ór
();

205 
ölöe
 
	gT
& 
	g›î©‹
* (Ëc⁄° {  *
	gm_±r
; }

206 
ölöe
 
T
* 
	g›î©‹
-> (Ëc⁄° {  
	gm_±r
; }

207 
ölöe
 
T
* 
gë
(Ëc⁄° {  
	gm_±r
; }

211 
COMPARE
(==)

212 
COMPARE
(!=)

213 
COMPARE
(>)

214 
COMPARE
(<)

215 
COMPARE
(<=)

216 
COMPARE
(>=)

218 
¥iv©e
:

219 
ãm∂©e
<
ty≥«me
 
Y
> 
‰õnd
 
˛ass
 
•
;

220 
	gãm∂©e
<
ty≥«me
 
	gY
> 
‰õnd
 
˛ass
 
	gwp
;

223 
•
(
T
* 
p
, 
wókªf_ty≥
* 
ªfs
);

225 
T
* 
	gm_±r
;

228 
	gãm∂©e
 <
ty≥«me
 
	gT
>

229 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, c⁄° 
	g•
<
	gT
>& 
	gvÆ
);

233 
	gãm∂©e
 <
ty≥«me
 
	gT
>

234 ˛as†
	cwp


236 
	gpublic
:

237 
ty≥«me
 
	tRefBa£
::
	twókªf_ty≥
 weakref_type;

239 
ölöe
 
wp
(Ë: 
m_±r
(0) { }

241 
wp
(
T
* 
Ÿhî
);

242 
wp
(c⁄° wp<
T
>& 
Ÿhî
);

243 
wp
(c⁄° 
•
<
T
>& 
Ÿhî
);

244 
	gãm∂©e
<
ty≥«me
 
	gU
> 
wp
(
U
* 
Ÿhî
);

245 
	gãm∂©e
<
ty≥«me
 
	gU
> 
wp
(c⁄° 
•
<
U
>& 
Ÿhî
);

246 
	gãm∂©e
<
ty≥«me
 
	gU
> 
wp
(c⁄° wp<
U
>& 
Ÿhî
);

248 ~
wp
();

252 
	gwp
& 
	g›î©‹
 = (
T
* 
Ÿhî
);

253 
	gwp
& 
	g›î©‹
 = (c⁄° 
wp
<
T
>& 
Ÿhî
);

254 
	gwp
& 
	g›î©‹
 = (c⁄° 
•
<
T
>& 
Ÿhî
);

256 
	gãm∂©e
<
ty≥«me
 
	gU
> 
	gwp
& 
	g›î©‹
 = (
U
* 
Ÿhî
);

257 
	gãm∂©e
<
ty≥«me
 
	gU
> 
	gwp
& 
	g›î©‹
 = (c⁄° 
wp
<
U
>& 
Ÿhî
);

258 
	gãm∂©e
<
ty≥«me
 
	gU
> 
	gwp
& 
	g›î©‹
 = (c⁄° 
•
<
U
>& 
Ÿhî
);

260 
£t_obje˘_™d_ªfs
(
T
* 
Ÿhî
, 
wókªf_ty≥
* 
ªfs
);

264 
	g•
<
	gT
> 
¥omŸe
() const;

268 
˛ór
();

272 
ölöe
 
wókªf_ty≥
* 
gë_ªfs
(Ëc⁄° {  
	gm_ªfs
; }

274 
ölöe
 
T
* 
unß„_gë
(Ëc⁄° {  
	gm_±r
; }

278 
COMPARE
(==)

279 
COMPARE
(!=)

280 
COMPARE
(>)

281 
COMPARE
(<)

282 
COMPARE
(<=)

283 
COMPARE
(>=)

285 
¥iv©e
:

286 
ãm∂©e
<
ty≥«me
 
Y
> 
‰õnd
 
˛ass
 
•
;

287 
	gãm∂©e
<
ty≥«me
 
	gY
> 
‰õnd
 
˛ass
 
	gwp
;

289 
T
* 
	gm_±r
;

290 
wókªf_ty≥
* 
	gm_ªfs
;

293 
	gãm∂©e
 <
ty≥«me
 
	gT
>

294 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, c⁄° 
	gwp
<
	gT
>& 
	gvÆ
);

296 #unde‡
COMPARE


301 
	gãm∂©e
<
ty≥«me
 
	gT
>

302 
	g•
<
	gT
>::
	$•
(
T
* 
Ÿhî
)

303 : 
	$m_±r
(
Ÿhî
)

305 i‡(
Ÿhî
ËŸhî->
	`öcSå⁄g
(
this
);

306 
	}
}

308 
	gãm∂©e
<
ty≥«me
 
	gT
>

309 
	g•
<
	gT
>::
•
(c⁄° sp<
T
>& 
Ÿhî
)

310 : 
	$m_±r
(
Ÿhî
.
m_±r
)

312 i‡(
m_±r
Ëm_±r->
	`öcSå⁄g
(
this
);

313 
	}
}

315 
	gãm∂©e
<
ty≥«me
 
	gT
>Åem∂©e<ty≥«mê
	gU
>

316 
	g•
<
	gT
>::
	$•
(
U
* 
Ÿhî
Ë: 
	$m_±r
(
Ÿhî
)

318 i‡(
Ÿhî
ËŸhî->
	`öcSå⁄g
(
this
);

319 
	}
}

321 
	gãm∂©e
<
ty≥«me
 
	gT
>Åem∂©e<ty≥«mê
	gU
>

322 
	g•
<
	gT
>::
•
(c⁄° sp<
U
>& 
Ÿhî
)

323 : 
	$m_±r
(
Ÿhî
.
m_±r
)

325 i‡(
m_±r
Ëm_±r->
	`öcSå⁄g
(
this
);

326 
	}
}

328 
	gãm∂©e
<
ty≥«me
 
	gT
>

329 
	g•
<
	gT
>::~
	$•
()

331 i‡(
m_±r
Ëm_±r->
	`decSå⁄g
(
this
);

332 
	}
}

334 
	gãm∂©e
<
ty≥«me
 
	gT
>

335 
	g•
<
	gT
>& sp<T>::
›î©‹
 = (c⁄° 
•
<
T
>& 
Ÿhî
) {

336 i‡(
Ÿhî
.
m_±r
ËŸhî.m_±r->
öcSå⁄g
(
this
);

337 i‡(
	gm_±r
Ëm_±r->
decSå⁄g
(
this
);

338 
	gm_±r
 = 
Ÿhî
.
m_±r
;

339  *
	gthis
;

342 
	gãm∂©e
<
ty≥«me
 
	gT
>

343 
	g•
<
	gT
>& sp<T>::
›î©‹
 = (
T
* 
Ÿhî
)

345 i‡(
Ÿhî
ËŸhî->
öcSå⁄g
(
this
);

346 i‡(
	gm_±r
Ëm_±r->
decSå⁄g
(
this
);

347 
	gm_±r
 = 
Ÿhî
;

348  *
	gthis
;

351 
	gãm∂©e
<
ty≥«me
 
	gT
>Åem∂©e<ty≥«mê
	gU
>

352 
	g•
<
	gT
>& sp<T>::
›î©‹
 = (c⁄° 
•
<
U
>& 
Ÿhî
)

354 i‡(
Ÿhî
.
m_±r
ËŸhî.m_±r->
öcSå⁄g
(
this
);

355 i‡(
	gm_±r
Ëm_±r->
decSå⁄g
(
this
);

356 
	gm_±r
 = 
Ÿhî
.
m_±r
;

357  *
	gthis
;

360 
	gãm∂©e
<
ty≥«me
 
	gT
>Åem∂©e<ty≥«mê
	gU
>

361 
	g•
<
	gT
>& sp<T>::
›î©‹
 = (
U
* 
Ÿhî
)

363 i‡(
Ÿhî
ËŸhî->
öcSå⁄g
(
this
);

364 i‡(
	gm_±r
Ëm_±r->
decSå⁄g
(
this
);

365 
	gm_±r
 = 
Ÿhî
;

366  *
	gthis
;

369 
	gãm∂©e
<
ty≥«me
 
	gT
>

370 
	g•
<
	gT
>::
	$f‹˚_£t
(
T
* 
Ÿhî
)

372 
Ÿhî
->
	`f‹˚IncSå⁄g
(
this
);

373 
m_±r
 = 
Ÿhî
;

374 
	}
}

376 
	gãm∂©e
<
ty≥«me
 
	gT
>

377 
	g•
<
	gT
>::
	$˛ór
()

379 i‡(
m_±r
) {

380 
m_±r
->
	`decSå⁄g
(
this
);

381 
m_±r
 = 0;

383 
	}
}

385 
	gãm∂©e
<
ty≥«me
 
	gT
>

386 
	g•
<
	gT
>::
	$•
(
T
* 
p
, 
wókªf_ty≥
* 
ªfs
)

387 : 
	`m_±r
((
p
 && 
ªfs
->
	`©ãm±IncSå⁄g
(
this
)) ?Ö : 0)

389 
	}
}

391 
ãm∂©e
 <
ty≥«me
 
T
>

392 
ölöe
 
TextOuçut
& 
›î©‹
<<(TextOuçut& 
to
, c⁄° 
	g•
<
	gT
>& 
	gvÆ
)

394 
	gto
 << "•<>(" << 
	gvÆ
.
gë
() << ")";

395  
	gto
;

400 
	gãm∂©e
<
ty≥«me
 
	gT
>

401 
	gwp
<
	gT
>::
	$wp
(
T
* 
Ÿhî
)

402 : 
	$m_±r
(
Ÿhî
)

404 i‡(
Ÿhî
Ë
m_ªfs
 = othî->
	`¸óãWók
(
this
);

405 
	}
}

407 
	gãm∂©e
<
ty≥«me
 
	gT
>

408 
	gwp
<
	gT
>::
wp
(c⁄° wp<
T
>& 
Ÿhî
)

409 : 
m_±r
(
Ÿhî
.m_±r), 
	$m_ªfs
(
Ÿhî
.
m_ªfs
)

411 i‡(
m_±r
Ë
m_ªfs
->
	`öcWók
(
this
);

412 
	}
}

414 
	gãm∂©e
<
ty≥«me
 
	gT
>

415 
	gwp
<
	gT
>::
wp
(c⁄° 
•
<
T
>& 
Ÿhî
)

416 : 
	$m_±r
(
Ÿhî
.
m_±r
)

418 i‡(
m_±r
) {

419 
m_ªfs
 = 
m_±r
->
	`¸óãWók
(
this
);

421 
	}
}

423 
	gãm∂©e
<
ty≥«me
 
	gT
>Åem∂©e<ty≥«mê
	gU
>

424 
	gwp
<
	gT
>::
	$wp
(
U
* 
Ÿhî
)

425 : 
	$m_±r
(
Ÿhî
)

427 i‡(
Ÿhî
Ë
m_ªfs
 = othî->
	`¸óãWók
(
this
);

428 
	}
}

430 
	gãm∂©e
<
ty≥«me
 
	gT
>Åem∂©e<ty≥«mê
	gU
>

431 
	gwp
<
	gT
>::
wp
(c⁄° wp<
U
>& 
Ÿhî
)

432 : 
	$m_±r
(
Ÿhî
.
m_±r
)

434 i‡(
m_±r
) {

435 
m_ªfs
 = 
Ÿhî
.m_refs;

436 
m_ªfs
->
	`öcWók
(
this
);

438 
	}
}

440 
	gãm∂©e
<
ty≥«me
 
	gT
>Åem∂©e<ty≥«mê
	gU
>

441 
	gwp
<
	gT
>::
wp
(c⁄° 
•
<
U
>& 
Ÿhî
)

442 : 
	$m_±r
(
Ÿhî
.
m_±r
)

444 i‡(
m_±r
) {

445 
m_ªfs
 = 
m_±r
->
	`¸óãWók
(
this
);

447 
	}
}

449 
	gãm∂©e
<
ty≥«me
 
	gT
>

450 
	gwp
<
	gT
>::~
	$wp
()

452 i‡(
m_±r
Ë
m_ªfs
->
	`decWók
(
this
);

453 
	}
}

455 
	gãm∂©e
<
ty≥«me
 
	gT
>

456 
	gwp
<
	gT
>& wp<T>::
›î©‹
 = (
T
* 
Ÿhî
)

458 
wókªf_ty≥
* 
√wRefs
 =

459 
Ÿhî
 ? othî->
¸óãWók
(
this
) : 0;

460 i‡(
	gm_±r
Ë
	gm_ªfs
->
decWók
(
this
);

461 
	gm_±r
 = 
Ÿhî
;

462 
	gm_ªfs
 = 
√wRefs
;

463  *
	gthis
;

466 
	gãm∂©e
<
ty≥«me
 
	gT
>

467 
	gwp
<
	gT
>& wp<T>::
›î©‹
 = (c⁄° 
wp
<
T
>& 
Ÿhî
)

469 i‡(
Ÿhî
.
m_±r
ËŸhî.
m_ªfs
->
öcWók
(
this
);

470 i‡(
	gm_±r
Ë
	gm_ªfs
->
decWók
(
this
);

471 
	gm_±r
 = 
Ÿhî
.
m_±r
;

472 
	gm_ªfs
 = 
Ÿhî
.
m_ªfs
;

473  *
	gthis
;

476 
	gãm∂©e
<
ty≥«me
 
	gT
>

477 
	gwp
<
	gT
>& wp<T>::
›î©‹
 = (c⁄° 
•
<
T
>& 
Ÿhî
)

479 
wókªf_ty≥
* 
√wRefs
 =

480 
Ÿhî
 !
NULL
 ? othî->
¸óãWók
(
this
) : 0;

481 i‡(
	gm_±r
Ë
	gm_ªfs
->
decWók
(
this
);

482 
	gm_±r
 = 
Ÿhî
.
gë
();

483 
	gm_ªfs
 = 
√wRefs
;

484  *
	gthis
;

487 
	gãm∂©e
<
ty≥«me
 
	gT
>Åem∂©e<ty≥«mê
	gU
>

488 
	gwp
<
	gT
>& wp<T>::
›î©‹
 = (
U
* 
Ÿhî
)

490 
wókªf_ty≥
* 
√wRefs
 =

491 
Ÿhî
 ? othî->
¸óãWók
(
this
) : 0;

492 i‡(
	gm_±r
Ë
	gm_ªfs
->
decWók
(
this
);

493 
	gm_±r
 = 
Ÿhî
;

494 
	gm_ªfs
 = 
√wRefs
;

495  *
	gthis
;

498 
	gãm∂©e
<
ty≥«me
 
	gT
>Åem∂©e<ty≥«mê
	gU
>

499 
	gwp
<
	gT
>& wp<T>::
›î©‹
 = (c⁄° 
wp
<
U
>& 
Ÿhî
)

501 i‡(
Ÿhî
.
m_±r
ËŸhî.
m_ªfs
->
öcWók
(
this
);

502 i‡(
	gm_±r
Ë
	gm_ªfs
->
decWók
(
this
);

503 
	gm_±r
 = 
Ÿhî
.
m_±r
;

504 
	gm_ªfs
 = 
Ÿhî
.
m_ªfs
;

505  *
	gthis
;

508 
	gãm∂©e
<
ty≥«me
 
	gT
>Åem∂©e<ty≥«mê
	gU
>

509 
	gwp
<
	gT
>& wp<T>::
›î©‹
 = (c⁄° 
•
<
U
>& 
Ÿhî
)

511 
wókªf_ty≥
* 
√wRefs
 =

512 
Ÿhî
 !
NULL
 ? othî->
¸óãWók
(
this
) : 0;

513 i‡(
	gm_±r
Ë
	gm_ªfs
->
decWók
(
this
);

514 
	gm_±r
 = 
Ÿhî
.
gë
();

515 
	gm_ªfs
 = 
√wRefs
;

516  *
	gthis
;

519 
	gãm∂©e
<
ty≥«me
 
	gT
>

520 
	gwp
<
	gT
>::
	$£t_obje˘_™d_ªfs
(
T
* 
Ÿhî
, 
wókªf_ty≥
* 
ªfs
)

522 i‡(
Ÿhî
Ë
ªfs
->
	`öcWók
(
this
);

523 i‡(
m_±r
Ë
m_ªfs
->
	`decWók
(
this
);

524 
m_±r
 = 
Ÿhî
;

525 
m_ªfs
 = 
ªfs
;

526 
	}
}

528 
	gãm∂©e
<
ty≥«me
 
	gT
>

529 
	g•
<
	gT
> 
	gwp
<T>::
	$¥omŸe
() const

531  
•
<
T
>(
m_±r
, 
m_ªfs
);

532 
	}
}

534 
	gãm∂©e
<
ty≥«me
 
	gT
>

535 
	gwp
<
	gT
>::
	$˛ór
()

537 i‡(
m_±r
) {

538 
m_ªfs
->
	`decWók
(
this
);

539 
m_±r
 = 0;

541 
	}
}

543 
	gãm∂©e
 <
ty≥«me
 
	gT
>

544 
ölöe
 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, c⁄° 
	gwp
<
	gT
>& 
	gvÆ
)

546 
	gto
 << "wp<>(" << 
	gvÆ
.
unß„_gë
() << ")";

547  
	gto
;

	@jni/include/include/utils/ResourceTypes.h

20 #i‚de‡
_LIBS_UTILS_RESOURCE_TYPES_H


21 
	#_LIBS_UTILS_RESOURCE_TYPES_H


	)

23 
	~<utûs/As£t.h
>

24 
	~<utûs/ByãOrdî.h
>

25 
	~<utûs/Eº‹s.h
>

26 
	~<utûs/Såög16.h
>

27 
	~<utûs/Ve˘‹.h
>

29 
	~<utûs/thªads.h
>

31 
	~<°döt.h
>

32 
	~<sys/ty≥s.h
>

34 
«me•a˚
 
	g™droid
 {

102 
	sRes_≤g_9∑tch


104 
Res_≤g_9∑tch
(Ë: 
wasDe£rülized
(
Ál£
), 
xDivs
(
NULL
),

105 
yDivs
(
NULL
), 
cﬁ‹s
(NULL) { }

107 
öt8_t
 
	gwasDe£rülized
;

108 
öt8_t
 
	gnumXDivs
;

109 
öt8_t
 
	gnumYDivs
;

110 
öt8_t
 
	gnumCﬁ‹s
;

117 
öt32_t
* 
	gxDivs
;

118 
öt32_t
* 
	gyDivs
;

120 
öt32_t
 
	g∑ddögLe·
, 
	g∑ddögRight
;

121 
öt32_t
 
	g∑ddögT›
, 
	g∑ddögBŸtom
;

125 
	gNO_COLOR
 = 0x00000001,

128 
	gTRANSPARENT_COLOR
 = 0x00000000

131 
uöt32_t
* 
	gcﬁ‹s
;

134 
devi˚ToFûe
();

136 
fûeToDevi˚
();

138 * 
£rülize
();

140 
£rülize
(* 
outD©a
);

142 
Res_≤g_9∑tch
* 
de£rülize
(c⁄° * 
d©a
);

144 
size_t
 
£rülizedSize
();

158 
	sResChunk_hódî


162 
uöt16_t
 
	gty≥
;

167 
uöt16_t
 
	ghódîSize
;

174 
uöt32_t
 
	gsize
;

178 
	gRES_NULL_TYPE
 = 0x0000,

179 
	gRES_STRING_POOL_TYPE
 = 0x0001,

180 
	gRES_TABLE_TYPE
 = 0x0002,

181 
	gRES_XML_TYPE
 = 0x0003,

184 
	gRES_XML_FIRST_CHUNK_TYPE
 = 0x0100,

185 
	gRES_XML_START_NAMESPACE_TYPE
= 0x0100,

186 
	gRES_XML_END_NAMESPACE_TYPE
 = 0x0101,

187 
	gRES_XML_START_ELEMENT_TYPE
 = 0x0102,

188 
	gRES_XML_END_ELEMENT_TYPE
 = 0x0103,

189 
	gRES_XML_CDATA_TYPE
 = 0x0104,

190 
	gRES_XML_LAST_CHUNK_TYPE
 = 0x017f,

193 
	gRES_XML_RESOURCE_MAP_TYPE
 = 0x0180,

196 
	gRES_TABLE_PACKAGE_TYPE
 = 0x0200,

197 
	gRES_TABLE_TYPE_TYPE
 = 0x0201,

198 
	gRES_TABLE_TYPE_SPEC_TYPE
 = 0x0202

204 
	#Res_VALIDID
(
ªsid
Ë‘esid !0)

	)

205 
	#Res_CHECKID
(
ªsid
Ë(‘esid&0xFFFF0000Ë!0)

	)

206 
	#Res_MAKEID
(
∑ckage
, 
ty≥
, 
íåy
) \

207 (((
∑ckage
+1)<<24Ë| (((
ty≥
+1)&0xFF)<<16Ë| (
íåy
&0xFFFF))

	)

208 
	#Res_GETPACKAGE
(
id
Ë((id>>24)-1)

	)

209 
	#Res_GETTYPE
(
id
Ë(((id>>16)&0xFF)-1)

	)

210 
	#Res_GETENTRY
(
id
Ë(id&0xFFFF)

	)

212 
	#Res_INTERNALID
(
ªsid
Ë(‘esid&0xFFFF0000Ë!0 && (ªsid&0xFF0000Ë=0)

	)

213 
	#Res_MAKEINTERNAL
(
íåy
Ë(0x01000000 | (íåy&0xFFFF))

	)

214 
	#Res_MAKEARRAY
(
íåy
Ë(0x02000000 | (íåy&0xFFFF))

	)

216 
	#Res_MAXPACKAGE
 255

	)

222 
	sRes_vÆue


225 
uöt16_t
 
	gsize
;

228 
uöt8_t
 
	gªs0
;

233 
	gTYPE_NULL
 = 0x00,

236 
	gTYPE_REFERENCE
 = 0x01,

238 
	gTYPE_ATTRIBUTE
 = 0x02,

241 
	gTYPE_STRING
 = 0x03,

243 
	gTYPE_FLOAT
 = 0x04,

246 
	gTYPE_DIMENSION
 = 0x05,

249 
	gTYPE_FRACTION
 = 0x06,

252 
	gTYPE_FIRST_INT
 = 0x10,

255 
	gTYPE_INT_DEC
 = 0x10,

257 
	gTYPE_INT_HEX
 = 0x11,

259 
	gTYPE_INT_BOOLEAN
 = 0x12,

262 
	gTYPE_FIRST_COLOR_INT
 = 0x1c,

265 
	gTYPE_INT_COLOR_ARGB8
 = 0x1c,

267 
	gTYPE_INT_COLOR_RGB8
 = 0x1d,

269 
	gTYPE_INT_COLOR_ARGB4
 = 0x1e,

271 
	gTYPE_INT_COLOR_RGB4
 = 0x1f,

274 
	gTYPE_LAST_COLOR_INT
 = 0x1f,

277 
	gTYPE_LAST_INT
 = 0x1f

279 
uöt8_t
 
	gd©aTy≥
;

285 
	gCOMPLEX_UNIT_SHIFT
 = 0,

286 
	gCOMPLEX_UNIT_MASK
 = 0xf,

289 
	gCOMPLEX_UNIT_PX
 = 0,

291 
	gCOMPLEX_UNIT_DIP
 = 1,

293 
	gCOMPLEX_UNIT_SP
 = 2,

295 
	gCOMPLEX_UNIT_PT
 = 3,

297 
	gCOMPLEX_UNIT_IN
 = 4,

299 
	gCOMPLEX_UNIT_MM
 = 5,

302 
	gCOMPLEX_UNIT_FRACTION
 = 0,

304 
	gCOMPLEX_UNIT_FRACTION_PARENT
 = 1,

309 
	gCOMPLEX_RADIX_SHIFT
 = 4,

310 
	gCOMPLEX_RADIX_MASK
 = 0x3,

313 
	gCOMPLEX_RADIX_23p0
 = 0,

315 
	gCOMPLEX_RADIX_16p7
 = 1,

317 
	gCOMPLEX_RADIX_8p15
 = 2,

319 
	gCOMPLEX_RADIX_0p23
 = 3,

323 
	gCOMPLEX_MANTISSA_SHIFT
 = 8,

324 
	gCOMPLEX_MANTISSA_MASK
 = 0xffffff

328 
uöt32_t
 
	gd©a
;

330 
c›yFrom_dtoh
(c⁄° 
Res_vÆue
& 
§c
);

341 
	sResTabÀ_ªf


343 
uöt32_t
 
	gidít
;

349 
	sResSåögPoﬁ_ªf


354 
uöt32_t
 
	gödex
;

380 
	sResSåögPoﬁ_hódî


382 
ResChunk_hódî
 
	ghódî
;

386 
uöt32_t
 
	g°rögCou¡
;

390 
uöt32_t
 
	g°yÀCou¡
;

396 
	gSORTED_FLAG
 = 1<<0,

399 
	gUTF8_FLAG
 = 1<<8

401 
uöt32_t
 
	gÊags
;

404 
uöt32_t
 
	g°rögsSèπ
;

407 
uöt32_t
 
	g°yÀsSèπ
;

414 
	sResSåögPoﬁ_•™


417 
	gEND
 = 0xFFFFFFFF

423 
ResSåögPoﬁ_ªf
 
	g«me
;

426 
uöt32_t
 
	gfú°Ch¨
, 
	gœ°Ch¨
;

432 ˛as†
	cResSåögPoﬁ


434 
	gpublic
:

435 
ResSåögPoﬁ
();

436 
ResSåögPoﬁ
(c⁄° * 
d©a
, 
size_t
 
size
, 
boﬁ
 
c›yD©a
=
Ál£
);

437 ~
ResSåögPoﬁ
();

439 
°©us_t
 
£tTo
(c⁄° * 
d©a
, 
size_t
 
size
, 
boﬁ
 
c›yD©a
=
Ál£
);

441 
°©us_t
 
gëEº‹
() const;

443 
unöô
();

445 
ölöe
 c⁄° 
ch¨16_t
* 
°rögAt
(c⁄° 
ResSåögPoﬁ_ªf
& 
ªf
, 
size_t
* 
outLí
) const {

446  
°rögAt
(
ªf
.
ödex
, 
outLí
);

448 c⁄° 
ch¨16_t
* 
°rögAt
(
size_t
 
idx
, size_t* 
outLí
) const;

450 c⁄° * 
°rög8At
(
size_t
 
idx
, size_t* 
outLí
) const;

452 c⁄° 
ResSåögPoﬁ_•™
* 
°yÀAt
(c⁄° 
ResSåögPoﬁ_ªf
& 
ªf
) const;

453 c⁄° 
ResSåögPoﬁ_•™
* 
°yÀAt
(
size_t
 
idx
) const;

455 
ssize_t
 
ödexOfSåög
(c⁄° 
ch¨16_t
* 
°r
, 
size_t
 
°rLí
) const;

457 
size_t
 
size
() const;

459 #i‚de‡
HAVE_ANDROID_OS


460 
boﬁ
 
isUTF8
() const;

463 
	g¥iv©e
:

464 
°©us_t
 
mEº‹
;

465 * 
	gmOw√dD©a
;

466 c⁄° 
ResSåögPoﬁ_hódî
* 
	gmHódî
;

467 
size_t
 
	gmSize
;

468 
muèbÀ
 
Muãx
 
	gmDecodeLock
;

469 c⁄° 
uöt32_t
* 
	gmE¡rõs
;

470 c⁄° 
uöt32_t
* 
	gmE¡ryStyÀs
;

471 c⁄° * 
	gmSåögs
;

472 
ch¨16_t
** 
	gmCache
;

473 
uöt32_t
 
	gmSåögPoﬁSize
;

474 c⁄° 
uöt32_t
* 
	gmStyÀs
;

475 
uöt32_t
 
	gmStyÀPoﬁSize
;

494 
	sResXMLTªe_hódî


496 
ResChunk_hódî
 
	ghódî
;

503 
	sResXMLTªe_node


505 
ResChunk_hódî
 
	ghódî
;

508 
uöt32_t
 
	glöeNumbî
;

511 
ResSåögPoﬁ_ªf
 
	gcommít
;

518 
	sResXMLTªe_cd©aExt


521 
ResSåögPoﬁ_ªf
 
	gd©a
;

524 
Res_vÆue
 
	gty≥dD©a
;

531 
	sResXMLTªe_«me•a˚Ext


534 
ResSåögPoﬁ_ªf
 
	g¥efix
;

537 
ResSåögPoﬁ_ªf
 
	guri
;

544 
	sResXMLTªe_ídEÀmítExt


547 
ResSåögPoﬁ_ªf
 
	gns
;

551 
ResSåögPoﬁ_ªf
 
	g«me
;

559 
	sResXMLTªe_©åExt


562 
ResSåögPoﬁ_ªf
 
	gns
;

566 
ResSåögPoﬁ_ªf
 
	g«me
;

569 
uöt16_t
 
	g©åibuãSèπ
;

572 
uöt16_t
 
	g©åibuãSize
;

577 
uöt16_t
 
	g©åibuãCou¡
;

580 
uöt16_t
 
	gidIndex
;

583 
uöt16_t
 
	g˛assIndex
;

586 
uöt16_t
 
	g°yÀIndex
;

589 
	sResXMLTªe_©åibuã


592 
ResSåögPoﬁ_ªf
 
	gns
;

595 
ResSåögPoﬁ_ªf
 
	g«me
;

598 
ResSåögPoﬁ_ªf
 
	gøwVÆue
;

601 
Res_vÆue
 
	gty≥dVÆue
;

604 
˛ass
 
	gResXMLTªe
;

606 ˛as†
	cResXMLP¨£r


608 
	gpublic
:

609 
ResXMLP¨£r
(c⁄° 
ResXMLTªe
& 
åì
);

611 
	eevít_code_t
 {

612 
	gBAD_DOCUMENT
 = -1,

613 
	gSTART_DOCUMENT
 = 0,

614 
	gEND_DOCUMENT
 = 1,

616 
	gFIRST_CHUNK_CODE
 = 
RES_XML_FIRST_CHUNK_TYPE
,

618 
	gSTART_NAMESPACE
 = 
RES_XML_START_NAMESPACE_TYPE
,

619 
	gEND_NAMESPACE
 = 
RES_XML_END_NAMESPACE_TYPE
,

620 
	gSTART_TAG
 = 
RES_XML_START_ELEMENT_TYPE
,

621 
	gEND_TAG
 = 
RES_XML_END_ELEMENT_TYPE
,

622 
	gTEXT
 = 
RES_XML_CDATA_TYPE


625 
	sResXMLPosôi⁄


627 
evít_code_t
 
	gevítCode
;

628 c⁄° 
ResXMLTªe_node
* 
	gcurNode
;

629 c⁄° * 
	gcurExt
;

632 
ª°¨t
();

634 c⁄° 
	gResSåögPoﬁ
& 
gëSåögs
() const;

636 
evít_code_t
 
gëEvítTy≥
() const;

639 
evít_code_t
 
√xt
();

642 
öt32_t
 
gëCommítID
() const;

643 c⁄° 
uöt16_t
* 
gëCommít
(
size_t
* 
outLí
) const;

644 
uöt32_t
 
gëLöeNumbî
() const;

647 
öt32_t
 
gëTextID
() const;

648 c⁄° 
uöt16_t
* 
gëText
(
size_t
* 
outLí
) const;

649 
ssize_t
 
gëTextVÆue
(
Res_vÆue
* 
outVÆue
) const;

652 
öt32_t
 
gëName•a˚PªfixID
() const;

653 c⁄° 
uöt16_t
* 
gëName•a˚Pªfix
(
size_t
* 
outLí
) const;

654 
öt32_t
 
gëName•a˚UriID
() const;

655 c⁄° 
uöt16_t
* 
gëName•a˚Uri
(
size_t
* 
outLí
) const;

658 
öt32_t
 
gëEÀmítName•a˚ID
() const;

659 c⁄° 
uöt16_t
* 
gëEÀmítName•a˚
(
size_t
* 
outLí
) const;

660 
öt32_t
 
gëEÀmítNameID
() const;

661 c⁄° 
uöt16_t
* 
gëEÀmítName
(
size_t
* 
outLí
) const;

666 
size_t
 
gëAâribuãCou¡
() const;

669 
öt32_t
 
gëAâribuãName•a˚ID
(
size_t
 
idx
) const;

670 c⁄° 
uöt16_t
* 
gëAâribuãName•a˚
(
size_t
 
idx
, size_t* 
outLí
) const;

672 
öt32_t
 
gëAâribuãNameID
(
size_t
 
idx
) const;

673 c⁄° 
uöt16_t
* 
gëAâribuãName
(
size_t
 
idx
, size_t* 
outLí
) const;

674 
uöt32_t
 
gëAâribuãNameResID
(
size_t
 
idx
) const;

676 
öt32_t
 
gëAâribuãVÆueSåögID
(
size_t
 
idx
) const;

677 c⁄° 
uöt16_t
* 
gëAâribuãSåögVÆue
(
size_t
 
idx
, size_t* 
outLí
) const;

679 
öt32_t
 
gëAâribuãD©aTy≥
(
size_t
 
idx
) const;

680 
öt32_t
 
gëAâribuãD©a
(
size_t
 
idx
) const;

681 
ssize_t
 
gëAâribuãVÆue
(
size_t
 
idx
, 
Res_vÆue
* 
outVÆue
) const;

683 
ssize_t
 
ödexOfAâribuã
(c⁄° * 
ns
, c⁄° * 
©å
) const;

684 
ssize_t
 
ödexOfAâribuã
(c⁄° 
ch¨16_t
* 
ns
, 
size_t
 
nsLí
,

685 c⁄° 
ch¨16_t
* 
©å
, 
size_t
 
©åLí
) const;

687 
ssize_t
 
ödexOfID
() const;

688 
ssize_t
 
ödexOfCœss
() const;

689 
ssize_t
 
ödexOfStyÀ
() const;

691 
gëPosôi⁄
(
ResXMLPosôi⁄
* 
pos
) const;

692 
£tPosôi⁄
(c⁄° 
ResXMLPosôi⁄
& 
pos
);

694 
	g¥iv©e
:

695 
‰õnd
 
˛ass
 
ResXMLTªe
;

697 
evít_code_t
 
√xtNode
();

699 c⁄° 
	gResXMLTªe
& 
	gmTªe
;

700 
evít_code_t
 
	gmEvítCode
;

701 c⁄° 
ResXMLTªe_node
* 
	gmCurNode
;

702 c⁄° * 
	gmCurExt
;

708 ˛as†
	cResXMLTªe
 : 
public
 
ResXMLP¨£r


710 
public
:

711 
ResXMLTªe
();

712 
ResXMLTªe
(c⁄° * 
d©a
, 
size_t
 
size
, 
boﬁ
 
c›yD©a
=
Ál£
);

713 ~
ResXMLTªe
();

715 
°©us_t
 
£tTo
(c⁄° * 
d©a
, 
size_t
 
size
, 
boﬁ
 
c›yD©a
=
Ál£
);

717 
°©us_t
 
gëEº‹
() const;

719 
unöô
();

721 
	g¥iv©e
:

722 
‰õnd
 
˛ass
 
ResXMLP¨£r
;

724 
°©us_t
 
vÆid©eNode
(c⁄° 
ResXMLTªe_node
* 
node
) const;

726 
°©us_t
 
	gmEº‹
;

727 * 
	gmOw√dD©a
;

728 c⁄° 
ResXMLTªe_hódî
* 
	gmHódî
;

729 
size_t
 
	gmSize
;

730 c⁄° 
uöt8_t
* 
	gmD©aEnd
;

731 
ResSåögPoﬁ
 
	gmSåögs
;

732 c⁄° 
uöt32_t
* 
	gmResIds
;

733 
size_t
 
	gmNumResIds
;

734 c⁄° 
ResXMLTªe_node
* 
	gmRoŸNode
;

735 c⁄° * 
	gmRoŸExt
;

736 
evít_code_t
 
	gmRoŸCode
;

753 
	sResTabÀ_hódî


755 
ResChunk_hódî
 
	ghódî
;

758 
uöt32_t
 
	g∑ckageCou¡
;

766 
	sResTabÀ_∑ckage


768 
ResChunk_hódî
 
	ghódî
;

773 
uöt32_t
 
	gid
;

776 
ch¨16_t
 
	g«me
[128];

781 
uöt32_t
 
	gty≥Såögs
;

784 
uöt32_t
 
	gœ°PublicTy≥
;

789 
uöt32_t
 
	gkeySåögs
;

792 
uöt32_t
 
	gœ°PublicKey
;

798 
	sResTabÀ_c⁄fig


801 
uöt32_t
 
	gsize
;

806 
uöt16_t
 
	gmcc
;

808 
uöt16_t
 
	gmnc
;

810 
uöt32_t
 
	gimsi
;

816 
	gœnguage
[2];

819 
	gcou¡ry
[2];

821 
uöt32_t
 
	gloˇÀ
;

825 
	gORIENTATION_ANY
 = 0x0000,

826 
	gORIENTATION_PORT
 = 0x0001,

827 
	gORIENTATION_LAND
 = 0x0002,

828 
	gORIENTATION_SQUARE
 = 0x0003,

832 
	gTOUCHSCREEN_ANY
 = 0x0000,

833 
	gTOUCHSCREEN_NOTOUCH
 = 0x0001,

834 
	gTOUCHSCREEN_STYLUS
 = 0x0002,

835 
	gTOUCHSCREEN_FINGER
 = 0x0003,

839 
	gDENSITY_DEFAULT
 = 0,

840 
	gDENSITY_LOW
 = 120,

841 
	gDENSITY_MEDIUM
 = 160,

842 
	gDENSITY_HIGH
 = 240,

843 
	gDENSITY_NONE
 = 0xffff

848 
uöt8_t
 
	g‹õ¡©i⁄
;

849 
uöt8_t
 
	gtouchs¸ìn
;

850 
uöt16_t
 
	gdísôy
;

852 
uöt32_t
 
	gs¸ìnTy≥
;

856 
	gKEYBOARD_ANY
 = 0x0000,

857 
	gKEYBOARD_NOKEYS
 = 0x0001,

858 
	gKEYBOARD_QWERTY
 = 0x0002,

859 
	gKEYBOARD_12KEY
 = 0x0003,

863 
	gNAVIGATION_ANY
 = 0x0000,

864 
	gNAVIGATION_NONAV
 = 0x0001,

865 
	gNAVIGATION_DPAD
 = 0x0002,

866 
	gNAVIGATION_TRACKBALL
 = 0x0003,

867 
	gNAVIGATION_WHEEL
 = 0x0004,

871 
	gMASK_KEYSHIDDEN
 = 0x0003,

872 
	gKEYSHIDDEN_ANY
 = 0x0000,

873 
	gKEYSHIDDEN_NO
 = 0x0001,

874 
	gKEYSHIDDEN_YES
 = 0x0002,

875 
	gKEYSHIDDEN_SOFT
 = 0x0003,

879 
	gMASK_NAVHIDDEN
 = 0x000c,

880 
	gNAVHIDDEN_ANY
 = 0x0000,

881 
	gNAVHIDDEN_NO
 = 0x0004,

882 
	gNAVHIDDEN_YES
 = 0x0008,

887 
uöt8_t
 
	gkeybﬂrd
;

888 
uöt8_t
 
	g«vig©i⁄
;

889 
uöt8_t
 
	göputFœgs
;

890 
uöt8_t
 
	göputPad0
;

892 
uöt32_t
 
	göput
;

896 
	gSCREENWIDTH_ANY
 = 0

900 
	gSCREENHEIGHT_ANY
 = 0

905 
uöt16_t
 
	gs¸ìnWidth
;

906 
uöt16_t
 
	gs¸ìnHeight
;

908 
uöt32_t
 
	gs¸ìnSize
;

912 
	gSDKVERSION_ANY
 = 0

916 
	gMINORVERSION_ANY
 = 0

921 
uöt16_t
 
	gsdkVîsi⁄
;

924 
uöt16_t
 
	gmö‹Vîsi⁄
;

926 
uöt32_t
 
	gvîsi⁄
;

931 
	gMASK_SCREENSIZE
 = 0x0f,

932 
	gSCREENSIZE_ANY
 = 0x00,

933 
	gSCREENSIZE_SMALL
 = 0x01,

934 
	gSCREENSIZE_NORMAL
 = 0x02,

935 
	gSCREENSIZE_LARGE
 = 0x03,

938 
	gMASK_SCREENLONG
 = 0x30,

939 
	gSCREENLONG_ANY
 = 0x00,

940 
	gSCREENLONG_NO
 = 0x10,

941 
	gSCREENLONG_YES
 = 0x20,

946 
	gMASK_UI_MODE_TYPE
 = 0x0f,

947 
	gUI_MODE_TYPE_ANY
 = 0x00,

948 
	gUI_MODE_TYPE_NORMAL
 = 0x01,

949 
	gUI_MODE_TYPE_DESK
 = 0x02,

950 
	gUI_MODE_TYPE_CAR
 = 0x03,

953 
	gMASK_UI_MODE_NIGHT
 = 0x30,

954 
	gUI_MODE_NIGHT_ANY
 = 0x00,

955 
	gUI_MODE_NIGHT_NO
 = 0x10,

956 
	gUI_MODE_NIGHT_YES
 = 0x20,

961 
uöt8_t
 
	gs¸ìnLayout
;

962 
uöt8_t
 
	guiMode
;

963 
uöt8_t
 
	gs¸ìnC⁄figPad1
;

964 
uöt8_t
 
	gs¸ìnC⁄figPad2
;

966 
uöt32_t
 
	gs¸ìnC⁄fig
;

969 
ölöe
 
c›yFromDevi˚NoSw≠
(c⁄° 
ResTabÀ_c⁄fig
& 
o
) {

970 c⁄° 
size_t
 
	gsize
 = 
dtohl
(
o
.
size
);

971 i‡(
	gsize
 >(
ResTabÀ_c⁄fig
)) {

972 *
this
 = 
o
;

974 
mem˝y
(
this
, &
o
, 
size
);

975 
mem£t
(((
uöt8_t
*)
this
)+
size
, 0, (
ResTabÀ_c⁄fig
)-size);

979 
ölöe
 
c›yFromDtoH
(c⁄° 
ResTabÀ_c⁄fig
& 
o
) {

980 
c›yFromDevi˚NoSw≠
(
o
);

981 
	gsize
 = (
ResTabÀ_c⁄fig
);

982 
	gmcc
 = 
dtohs
(
mcc
);

983 
	gmnc
 = 
dtohs
(
mnc
);

984 
	gdísôy
 = 
dtohs
(
dísôy
);

985 
	gs¸ìnWidth
 = 
dtohs
(
s¸ìnWidth
);

986 
	gs¸ìnHeight
 = 
dtohs
(
s¸ìnHeight
);

987 
	gsdkVîsi⁄
 = 
dtohs
(
sdkVîsi⁄
);

988 
	gmö‹Vîsi⁄
 = 
dtohs
(
mö‹Vîsi⁄
);

991 
ölöe
 
sw≠HtoD
() {

992 
	gsize
 = 
htodl
(
size
);

993 
	gmcc
 = 
htods
(
mcc
);

994 
	gmnc
 = 
htods
(
mnc
);

995 
	gdísôy
 = 
htods
(
dísôy
);

996 
	gs¸ìnWidth
 = 
htods
(
s¸ìnWidth
);

997 
	gs¸ìnHeight
 = 
htods
(
s¸ìnHeight
);

998 
	gsdkVîsi⁄
 = 
htods
(
sdkVîsi⁄
);

999 
	gmö‹Vîsi⁄
 = 
htods
(
mö‹Vîsi⁄
);

1002 
ölöe
 
com∑ª
(c⁄° 
ResTabÀ_c⁄fig
& 
o
) const {

1003 
öt32_t
 
	gdiff
 = (öt32_t)(
imsi
 - 
o
.imsi);

1004 i‡(
	gdiff
 !0Ë 
diff
;

1005 
	gdiff
 = (
öt32_t
)(
loˇÀ
 - 
o
.locale);

1006 i‡(
	gdiff
 !0Ë 
diff
;

1007 
	gdiff
 = (
öt32_t
)(
s¸ìnTy≥
 - 
o
.screenType);

1008 i‡(
	gdiff
 !0Ë 
diff
;

1009 
	gdiff
 = (
öt32_t
)(
öput
 - 
o
.input);

1010 i‡(
	gdiff
 !0Ë 
diff
;

1011 
	gdiff
 = (
öt32_t
)(
s¸ìnSize
 - 
o
.screenSize);

1012 i‡(
	gdiff
 !0Ë 
diff
;

1013 
	gdiff
 = (
öt32_t
)(
vîsi⁄
 - 
o
.version);

1014 i‡(
	gdiff
 !0Ë 
diff
;

1015 
	gdiff
 = (
öt32_t
)(
s¸ìnLayout
 - 
o
.screenLayout);

1016 i‡(
	gdiff
 !0Ë 
diff
;

1017 
	gdiff
 = (
öt32_t
)(
uiMode
 - 
o
.uiMode);

1018  ()
	gdiff
;

1025 
	gCONFIG_MCC
 = 0x0001,

1026 
	gCONFIG_MNC
 = 0x0002,

1027 
	gCONFIG_LOCALE
 = 0x0004,

1028 
	gCONFIG_TOUCHSCREEN
 = 0x0008,

1029 
	gCONFIG_KEYBOARD
 = 0x0010,

1030 
	gCONFIG_KEYBOARD_HIDDEN
 = 0x0020,

1031 
	gCONFIG_NAVIGATION
 = 0x0040,

1032 
	gCONFIG_ORIENTATION
 = 0x0080,

1033 
	gCONFIG_DENSITY
 = 0x0100,

1034 
	gCONFIG_SCREEN_SIZE
 = 0x0200,

1035 
	gCONFIG_VERSION
 = 0x0400,

1036 
	gCONFIG_SCREEN_LAYOUT
 = 0x0800,

1037 
	gCONFIG_UI_MODE
 = 0x1000

1042 
ölöe
 
diff
(c⁄° 
ResTabÀ_c⁄fig
& 
o
) const {

1043 
	gdiffs
 = 0;

1044 i‡(
	gmcc
 !
o
.
mcc
Ë
diffs
 |
CONFIG_MCC
;

1045 i‡(
	gmnc
 !
o
.
mnc
Ë
diffs
 |
CONFIG_MNC
;

1046 i‡(
	gloˇÀ
 !
o
.
loˇÀ
Ë
diffs
 |
CONFIG_LOCALE
;

1047 i‡(
	g‹õ¡©i⁄
 !
o
.
‹õ¡©i⁄
Ë
diffs
 |
CONFIG_ORIENTATION
;

1048 i‡(
	gdísôy
 !
o
.
dísôy
Ë
diffs
 |
CONFIG_DENSITY
;

1049 i‡(
	gtouchs¸ìn
 !
o
.
touchs¸ìn
Ë
diffs
 |
CONFIG_TOUCHSCREEN
;

1050 i‡(((
	göputFœgs
^
	go
.öputFœgs)&(
	gMASK_KEYSHIDDEN
|
	gMASK_NAVHIDDEN
)) != 0)

1051 
diffs
 |
CONFIG_KEYBOARD_HIDDEN
;

1052 i‡(
	gkeybﬂrd
 !
o
.
keybﬂrd
Ë
diffs
 |
CONFIG_KEYBOARD
;

1053 i‡(
	g«vig©i⁄
 !
o
.
«vig©i⁄
Ë
diffs
 |
CONFIG_NAVIGATION
;

1054 i‡(
	gs¸ìnSize
 !
o
.
s¸ìnSize
Ë
diffs
 |
CONFIG_SCREEN_SIZE
;

1055 i‡(
	gvîsi⁄
 !
o
.
vîsi⁄
Ë
diffs
 |
CONFIG_VERSION
;

1056 i‡(
	gs¸ìnLayout
 !
o
.
s¸ìnLayout
Ë
diffs
 |
CONFIG_SCREEN_LAYOUT
;

1057 i‡(
	guiMode
 !
o
.
uiMode
Ë
diffs
 |
CONFIG_UI_MODE
;

1058  
	gdiffs
;

1062 
ölöe
 
boﬁ


1063 
isM‹eS≥cificTh™
(c⁄° 
ResTabÀ_c⁄fig
& 
o
) const {

1067 i‡(
	gimsi
 || 
	go
.imsi) {

1068 i‡(
	gmcc
 !
o
.
mcc
) {

1069 i‡(!
mcc
Ë 
Ál£
;

1070 i‡(!
	go
.
	gmcc
Ë 
	gåue
;

1073 i‡(
	gmnc
 !
o
.
mnc
) {

1074 i‡(!
mnc
Ë 
Ál£
;

1075 i‡(!
	go
.
	gmnc
Ë 
	gåue
;

1079 i‡(
	gloˇÀ
 || 
	go
.locale) {

1080 i‡(
	gœnguage
[0] !
o
.
œnguage
[0]) {

1081 i‡(!
œnguage
[0]Ë 
Ál£
;

1082 i‡(!
	go
.
	gœnguage
[0]Ë 
	gåue
;

1085 i‡(
	gcou¡ry
[0] !
o
.
cou¡ry
[0]) {

1086 i‡(!
cou¡ry
[0]Ë 
Ál£
;

1087 i‡(!
	go
.
	gcou¡ry
[0]Ë 
	gåue
;

1091 i‡(
	gs¸ìnLayout
 || 
	go
.screenLayout) {

1092 i‡(((
	gs¸ìnLayout
^
	go
.s¸ìnLayoutË& 
	gMASK_SCREENSIZE
) != 0) {

1093 i‡(!(
s¸ìnLayout
 & 
MASK_SCREENSIZE
)Ë 
Ál£
;

1094 i‡(!(
	go
.
	gs¸ìnLayout
 & 
	gMASK_SCREENSIZE
)Ë 
	gåue
;

1096 i‡(((
	gs¸ìnLayout
^
	go
.s¸ìnLayoutË& 
	gMASK_SCREENLONG
) != 0) {

1097 i‡(!(
s¸ìnLayout
 & 
MASK_SCREENLONG
)Ë 
Ál£
;

1098 i‡(!(
	go
.
	gs¸ìnLayout
 & 
	gMASK_SCREENLONG
)Ë 
	gåue
;

1102 i‡(
	g‹õ¡©i⁄
 !
o
.
‹õ¡©i⁄
) {

1103 i‡(!
‹õ¡©i⁄
Ë 
Ál£
;

1104 i‡(!
	go
.
	g‹õ¡©i⁄
Ë 
	gåue
;

1107 i‡(
	guiMode
 || 
	go
.uiMode) {

1108 i‡(((
	guiMode
^
	go
.uiModeË& 
	gMASK_UI_MODE_TYPE
) != 0) {

1109 i‡(!(
uiMode
 & 
MASK_UI_MODE_TYPE
)Ë 
Ál£
;

1110 i‡(!(
	go
.
	guiMode
 & 
	gMASK_UI_MODE_TYPE
)Ë 
	gåue
;

1112 i‡(((
	guiMode
^
	go
.uiModeË& 
	gMASK_UI_MODE_NIGHT
) != 0) {

1113 i‡(!(
uiMode
 & 
MASK_UI_MODE_NIGHT
)Ë 
Ál£
;

1114 i‡(!(
	go
.
	guiMode
 & 
	gMASK_UI_MODE_NIGHT
)Ë 
	gåue
;

1121 i‡(
	gtouchs¸ìn
 !
o
.
touchs¸ìn
) {

1122 i‡(!
touchs¸ìn
Ë 
Ál£
;

1123 i‡(!
	go
.
	gtouchs¸ìn
Ë 
	gåue
;

1126 i‡(
	göput
 || 
	go
.input) {

1127 i‡(((
	göputFœgs
^
	go
.öputFœgsË& 
	gMASK_KEYSHIDDEN
) != 0) {

1128 i‡(!(
öputFœgs
 & 
MASK_KEYSHIDDEN
)Ë 
Ál£
;

1129 i‡(!(
	go
.
	göputFœgs
 & 
	gMASK_KEYSHIDDEN
)Ë 
	gåue
;

1132 i‡(((
	göputFœgs
^
	go
.öputFœgsË& 
	gMASK_NAVHIDDEN
) != 0) {

1133 i‡(!(
öputFœgs
 & 
MASK_NAVHIDDEN
)Ë 
Ál£
;

1134 i‡(!(
	go
.
	göputFœgs
 & 
	gMASK_NAVHIDDEN
)Ë 
	gåue
;

1137 i‡(
	gkeybﬂrd
 !
o
.
keybﬂrd
) {

1138 i‡(!
keybﬂrd
Ë 
Ál£
;

1139 i‡(!
	go
.
	gkeybﬂrd
Ë 
	gåue
;

1142 i‡(
	g«vig©i⁄
 !
o
.
«vig©i⁄
) {

1143 i‡(!
«vig©i⁄
Ë 
Ál£
;

1144 i‡(!
	go
.
	g«vig©i⁄
Ë 
	gåue
;

1148 i‡(
	gs¸ìnSize
 || 
	go
.screenSize) {

1149 i‡(
	gs¸ìnWidth
 !
o
.
s¸ìnWidth
) {

1150 i‡(!
s¸ìnWidth
Ë 
Ál£
;

1151 i‡(!
	go
.
	gs¸ìnWidth
Ë 
	gåue
;

1154 i‡(
	gs¸ìnHeight
 !
o
.
s¸ìnHeight
) {

1155 i‡(!
s¸ìnHeight
Ë 
Ál£
;

1156 i‡(!
	go
.
	gs¸ìnHeight
Ë 
	gåue
;

1160 i‡(
	gvîsi⁄
 || 
	go
.version) {

1161 i‡(
	gsdkVîsi⁄
 !
o
.
sdkVîsi⁄
) {

1162 i‡(!
sdkVîsi⁄
Ë 
Ál£
;

1163 i‡(!
	go
.
	gsdkVîsi⁄
Ë 
	gåue
;

1166 i‡(
	gmö‹Vîsi⁄
 !
o
.
mö‹Vîsi⁄
) {

1167 i‡(!
mö‹Vîsi⁄
Ë 
Ál£
;

1168 i‡(!
	go
.
	gmö‹Vîsi⁄
Ë 
	gåue
;

1171  
	gÁl£
;

1184 
ölöe
 
boﬁ


1185 
isBëãrTh™
(c⁄° 
ResTabÀ_c⁄fig
& 
o
,

1186 c⁄° 
ResTabÀ_c⁄fig
* 
ªque°ed
) const {

1187 i‡(
	gªque°ed
) {

1188 i‡(
	gimsi
 || 
	go
.imsi) {

1189 i‡((
	gmcc
 !
o
.
mcc
Ë&& 
ªque°ed
->mcc) {

1190  (
mcc
);

1193 i‡((
	gmnc
 !
o
.
mnc
Ë&& 
ªque°ed
->mnc) {

1194  (
mnc
);

1198 i‡(
	gloˇÀ
 || 
	go
.locale) {

1199 i‡((
	gœnguage
[0] !
o
.
œnguage
[0]Ë&& 
ªque°ed
->language[0]) {

1200  (
œnguage
[0]);

1203 i‡((
	gcou¡ry
[0] !
o
.
cou¡ry
[0]Ë&& 
ªque°ed
->country[0]) {

1204  (
cou¡ry
[0]);

1208 i‡(
	gs¸ìnLayout
 || 
	go
.screenLayout) {

1209 i‡(((
	gs¸ìnLayout
^
	go
.s¸ìnLayoutË& 
	gMASK_SCREENSIZE
) != 0

1210 && (
ªque°ed
->
s¸ìnLayout
 & 
MASK_SCREENSIZE
)) {

1211  (
s¸ìnLayout
 & 
MASK_SCREENSIZE
);

1213 i‡(((
	gs¸ìnLayout
^
	go
.s¸ìnLayoutË& 
	gMASK_SCREENLONG
) != 0

1214 && (
ªque°ed
->
s¸ìnLayout
 & 
MASK_SCREENLONG
)) {

1215  (
s¸ìnLayout
 & 
MASK_SCREENLONG
);

1219 i‡((
	g‹õ¡©i⁄
 !
o
.
‹õ¡©i⁄
Ë&& 
ªque°ed
->orientation) {

1220  (
‹õ¡©i⁄
);

1223 i‡(
	guiMode
 || 
	go
.uiMode) {

1224 i‡(((
	guiMode
^
	go
.uiModeË& 
	gMASK_UI_MODE_TYPE
) != 0

1225 && (
ªque°ed
->
uiMode
 & 
MASK_UI_MODE_TYPE
)) {

1226  (
uiMode
 & 
MASK_UI_MODE_TYPE
);

1228 i‡(((
	guiMode
^
	go
.uiModeË& 
	gMASK_UI_MODE_NIGHT
) != 0

1229 && (
ªque°ed
->
uiMode
 & 
MASK_UI_MODE_NIGHT
)) {

1230  (
uiMode
 & 
MASK_UI_MODE_NIGHT
);

1234 i‡(
	gs¸ìnTy≥
 || 
	go
.screenType) {

1235 i‡(
	gdísôy
 !
o
.
dísôy
) {

1241 
h
 = (
dísôy
?density:160);

1242 
	gl
 = (
o
.
dísôy
?o.density:160);

1243 
boﬁ
 
	gbImBiggî
 = 
åue
;

1244 i‡(
	gl
 > 
	gh
) {

1245 
	gt
 = 
h
;

1246 
	gh
 = 
l
;

1247 
	gl
 = 
t
;

1248 
	gbImBiggî
 = 
Ál£
;

1251 
	gªqVÆue
 = (
ªque°ed
->
dísôy
?requested->density:160);

1252 i‡(
	gªqVÆue
 >
h
) {

1254  
bImBiggî
;

1256 i‡(
	gl
 >
ªqVÆue
) {

1258  !
bImBiggî
;

1261 i‡(((2 * 
	gl
Ë- 
	gªqVÆue
Ë* 
	gh
 > 
ªqVÆue
 *ÑeqValue) {

1262  !
	gbImBiggî
;

1264  
	gbImBiggî
;

1268 i‡((
	gtouchs¸ìn
 !
o
.
touchs¸ìn
Ë&& 
ªque°ed
->touchscreen) {

1269  (
touchs¸ìn
);

1273 i‡(
	göput
 || 
	go
.input) {

1274 c⁄° 
	gkeysHiddí
 = 
öputFœgs
 & 
MASK_KEYSHIDDEN
;

1275 c⁄° 
	goKeysHiddí
 = 
o
.
öputFœgs
 & 
MASK_KEYSHIDDEN
;

1276 i‡(
	gkeysHiddí
 !
oKeysHiddí
) {

1277 c⁄° 
ªqKeysHiddí
 =

1278 
ªque°ed
->
öputFœgs
 & 
MASK_KEYSHIDDEN
;

1279 i‡(
	gªqKeysHiddí
) {

1281 i‡(!
	gkeysHiddí
Ë 
	gÁl£
;

1282 i‡(!
	goKeysHiddí
Ë 
	gåue
;

1286 i‡(
	gªqKeysHiddí
 =
keysHiddí
Ë 
åue
;

1287 i‡(
	gªqKeysHiddí
 =
oKeysHiddí
Ë 
Ál£
;

1291 c⁄° 
	g«vHiddí
 = 
öputFœgs
 & 
MASK_NAVHIDDEN
;

1292 c⁄° 
	goNavHiddí
 = 
o
.
öputFœgs
 & 
MASK_NAVHIDDEN
;

1293 i‡(
	g«vHiddí
 !
oNavHiddí
) {

1294 c⁄° 
ªqNavHiddí
 =

1295 
ªque°ed
->
öputFœgs
 & 
MASK_NAVHIDDEN
;

1296 i‡(
	gªqNavHiddí
) {

1298 i‡(!
	g«vHiddí
Ë 
	gÁl£
;

1299 i‡(!
	goNavHiddí
Ë 
	gåue
;

1303 i‡((
	gkeybﬂrd
 !
o
.
keybﬂrd
Ë&& 
ªque°ed
->keyboard) {

1304  (
keybﬂrd
);

1307 i‡((
	g«vig©i⁄
 !
o
.
«vig©i⁄
Ë&& 
ªque°ed
->navigation) {

1308  (
«vig©i⁄
);

1312 i‡(
	gs¸ìnSize
 || 
	go
.screenSize) {

1313 i‡((
	gs¸ìnWidth
 !
o
.
s¸ìnWidth
Ë&& 
ªque°ed
->screenWidth) {

1314  (
s¸ìnWidth
);

1317 i‡((
	gs¸ìnHeight
 !
o
.
s¸ìnHeight
) &&

1318 
ªque°ed
->
s¸ìnHeight
) {

1319  (
s¸ìnHeight
);

1323 i‡(
	gvîsi⁄
 || 
	go
.version) {

1324 i‡((
	gsdkVîsi⁄
 !
o
.
sdkVîsi⁄
Ë&& 
ªque°ed
->sdkVersion) {

1325  (
sdkVîsi⁄
 > 
o
.sdkVersion);

1328 i‡((
	gmö‹Vîsi⁄
 !
o
.
mö‹Vîsi⁄
) &&

1329 
ªque°ed
->
mö‹Vîsi⁄
) {

1330  (
mö‹Vîsi⁄
);

1334  
	gÁl£
;

1336  
isM‹eS≥cificTh™
(
o
);

1345 
ölöe
 
boﬁ
 
m©ch
(c⁄° 
ResTabÀ_c⁄fig
& 
£âögs
) const {

1346 i‡(
	gimsi
 != 0) {

1347 i‡((
£âögs
.
mcc
 != 0 && mcc != 0

1348 && 
mcc
 !
£âögs
.mcc) ||

1349 (
£âögs
.
mcc
 == 0 && mcc != 0)) {

1350  
Ál£
;

1352 i‡((
	g£âögs
.
	gmnc
 !0 && 
mnc
 != 0

1353 && 
mnc
 !
£âögs
.mnc) ||

1354 (
£âögs
.
mnc
 == 0 && mnc != 0)) {

1355  
Ál£
;

1358 i‡(
	gloˇÀ
 != 0) {

1359 i‡(
£âögs
.
œnguage
[0] != 0 &&Üanguage[0] != 0

1360 && (
œnguage
[0] !
£âögs
.language[0]

1361 || 
œnguage
[1] !
£âögs
.language[1])) {

1362  
Ál£
;

1364 i‡(
	g£âögs
.
	gcou¡ry
[0] !0 && 
cou¡ry
[0] != 0

1365 && (
cou¡ry
[0] !
£âögs
.country[0]

1366 || 
cou¡ry
[1] !
£âögs
.country[1])) {

1367  
Ál£
;

1370 i‡(
	gs¸ìnC⁄fig
 != 0) {

1371 c⁄° 
s¸ìnSize
 = 
s¸ìnLayout
&
MASK_SCREENSIZE
;

1372 c⁄° 
	g£tS¸ìnSize
 = 
£âögs
.
s¸ìnLayout
&
MASK_SCREENSIZE
;

1373 i‡(
	g£tS¸ìnSize
 !0 && 
s¸ìnSize
 != 0

1374 && 
s¸ìnSize
 !
£tS¸ìnSize
) {

1375  
Ál£
;

1378 c⁄° 
	gs¸ìnL⁄g
 = 
s¸ìnLayout
&
MASK_SCREENLONG
;

1379 c⁄° 
	g£tS¸ìnL⁄g
 = 
£âögs
.
s¸ìnLayout
&
MASK_SCREENLONG
;

1380 i‡(
	g£tS¸ìnL⁄g
 !0 && 
s¸ìnL⁄g
 != 0

1381 && 
s¸ìnL⁄g
 !
£tS¸ìnL⁄g
) {

1382  
Ál£
;

1385 c⁄° 
	guiModeTy≥
 = 
uiMode
&
MASK_UI_MODE_TYPE
;

1386 c⁄° 
	g£tUiModeTy≥
 = 
£âögs
.
uiMode
&
MASK_UI_MODE_TYPE
;

1387 i‡(
	g£tUiModeTy≥
 !0 && 
uiModeTy≥
 != 0

1388 && 
uiModeTy≥
 !
£tUiModeTy≥
) {

1389  
Ál£
;

1392 c⁄° 
	guiModeNight
 = 
uiMode
&
MASK_UI_MODE_NIGHT
;

1393 c⁄° 
	g£tUiModeNight
 = 
£âögs
.
uiMode
&
MASK_UI_MODE_NIGHT
;

1394 i‡(
	g£tUiModeNight
 !0 && 
uiModeNight
 != 0

1395 && 
uiModeNight
 !
£tUiModeNight
) {

1396  
Ál£
;

1399 i‡(
	gs¸ìnTy≥
 != 0) {

1400 i‡(
£âögs
.
‹õ¡©i⁄
 != 0 && orientation != 0

1401 && 
‹õ¡©i⁄
 !
£âögs
.orientation) {

1402  
Ál£
;

1405 i‡(
	g£âögs
.
	gtouchs¸ìn
 !0 && 
touchs¸ìn
 != 0

1406 && 
touchs¸ìn
 !
£âögs
.touchscreen) {

1407  
Ál£
;

1410 i‡(
	göput
 != 0) {

1411 c⁄° 
keysHiddí
 = 
öputFœgs
&
MASK_KEYSHIDDEN
;

1412 c⁄° 
	g£tKeysHiddí
 = 
£âögs
.
öputFœgs
&
MASK_KEYSHIDDEN
;

1413 i‡(
	g£tKeysHiddí
 !0 && 
keysHiddí
 != 0

1414 && 
keysHiddí
 !
£tKeysHiddí
) {

1419 i‡(
keysHiddí
 !
KEYSHIDDEN_NO
 || 
£tKeysHiddí
 !
KEYSHIDDEN_SOFT
) {

1421  
Ál£
;

1424 c⁄° 
	g«vHiddí
 = 
öputFœgs
&
MASK_NAVHIDDEN
;

1425 c⁄° 
	g£tNavHiddí
 = 
£âögs
.
öputFœgs
&
MASK_NAVHIDDEN
;

1426 i‡(
	g£tNavHiddí
 !0 && 
«vHiddí
 != 0

1427 && 
«vHiddí
 !
£tNavHiddí
) {

1428  
Ál£
;

1430 i‡(
	g£âögs
.
	gkeybﬂrd
 !0 && 
keybﬂrd
 != 0

1431 && 
keybﬂrd
 !
£âögs
.keyboard) {

1432  
Ál£
;

1434 i‡(
	g£âögs
.
	g«vig©i⁄
 !0 && 
«vig©i⁄
 != 0

1435 && 
«vig©i⁄
 !
£âögs
.navigation) {

1436  
Ál£
;

1439 i‡(
	gs¸ìnSize
 != 0) {

1440 i‡(
£âögs
.
s¸ìnWidth
 != 0 && screenWidth != 0

1441 && 
s¸ìnWidth
 !
£âögs
.screenWidth) {

1442  
Ál£
;

1444 i‡(
	g£âögs
.
	gs¸ìnHeight
 !0 && 
s¸ìnHeight
 != 0

1445 && 
s¸ìnHeight
 !
£âögs
.screenHeight) {

1446  
Ál£
;

1449 i‡(
	gvîsi⁄
 != 0) {

1450 i‡(
£âögs
.
sdkVîsi⁄
 != 0 && sdkVersion != 0

1451 && 
sdkVîsi⁄
 > 
£âögs
.sdkVersion) {

1452  
Ál£
;

1454 i‡(
	g£âögs
.
	gmö‹Vîsi⁄
 !0 && 
mö‹Vîsi⁄
 != 0

1455 && 
mö‹Vîsi⁄
 !
£âögs
.minorVersion) {

1456  
Ál£
;

1459  
	gåue
;

1462 
gëLoˇÀ
(
°r
[6]) const {

1463 
mem£t
(
°r
, 0, 6);

1464 i‡(
	gœnguage
[0]) {

1465 
	g°r
[0] = 
œnguage
[0];

1466 
	g°r
[1] = 
œnguage
[1];

1467 i‡(
	gcou¡ry
[0]) {

1468 
	g°r
[2] = '_';

1469 
	g°r
[3] = 
cou¡ry
[0];

1470 
	g°r
[4] = 
cou¡ry
[1];

1475 
Såög8
 
toSåög
() const {

1476 
	gbuf
[200];

1477 
•rötf
(
buf
, "imsi=%d/%dÜang=%c%cÑeg=%c%c orient=%dÅouch=%d dens=%d "

1480 
mcc
, 
mnc
,

1481 
œnguage
[0] ?Üanguage[0] : '-',Üanguage[1] ?Üanguage[1] : '-',

1482 
cou¡ry
[0] ? country[0] : '-', country[1] ? country[1] : '-',

1483 
‹õ¡©i⁄
, 
touchs¸ìn
, 
dísôy
, 
keybﬂrd
, 
«vig©i⁄
, 
öputFœgs
,

1484 
s¸ìnWidth
, 
s¸ìnHeight
,

1485 
s¸ìnLayout
&
MASK_SCREENSIZE
, s¸ìnLayout&
MASK_SCREENLONG
,

1486 
uiMode
&
MASK_UI_MODE_TYPE
, uiMode&
MASK_UI_MODE_NIGHT
,

1487 
sdkVîsi⁄
, 
mö‹Vîsi⁄
);

1488  
Såög8
(
buf
);

1502 
	sResTabÀ_ty≥S≥c


1504 
ResChunk_hódî
 
	ghódî
;

1509 
uöt8_t
 
	gid
;

1512 
uöt8_t
 
	gªs0
;

1514 
uöt16_t
 
	gªs1
;

1517 
uöt32_t
 
	gíåyCou¡
;

1521 
	gSPEC_PUBLIC
 = 0x40000000

1540 
	sResTabÀ_ty≥


1542 
ResChunk_hódî
 
	ghódî
;

1545 
	gNO_ENTRY
 = 0xFFFFFFFF

1551 
uöt8_t
 
	gid
;

1554 
uöt8_t
 
	gªs0
;

1556 
uöt16_t
 
	gªs1
;

1559 
uöt32_t
 
	gíåyCou¡
;

1562 
uöt32_t
 
	gíåõsSèπ
;

1565 
ResTabÀ_c⁄fig
 
	gc⁄fig
;

1576 
	sResTabÀ_íåy


1579 
uöt16_t
 
	gsize
;

1584 
	gFLAG_COMPLEX
 = 0x0001,

1587 
	gFLAG_PUBLIC
 = 0x0002

1589 
uöt16_t
 
	gÊags
;

1592 
ResSåögPoﬁ_ªf
 
	gkey
;

1599 
	gResTabÀ_m≠_íåy
 : 
public
 
ResTabÀ_íåy


1602 
ResTabÀ_ªf
 
∑ª¡
;

1604 
uöt32_t
 
	gcou¡
;

1611 
	sResTabÀ_m≠


1617 
ResTabÀ_ªf
 
	g«me
;

1622 
	gATTR_TYPE
 = 
Res_MAKEINTERNAL
(0),

1625 
	gATTR_MIN
 = 
Res_MAKEINTERNAL
(1),

1628 
	gATTR_MAX
 = 
Res_MAKEINTERNAL
(2),

1632 
	gATTR_L10N
 = 
Res_MAKEINTERNAL
(3),

1635 
	gATTR_OTHER
 = 
Res_MAKEINTERNAL
(4),

1636 
	gATTR_ZERO
 = 
Res_MAKEINTERNAL
(5),

1637 
	gATTR_ONE
 = 
Res_MAKEINTERNAL
(6),

1638 
	gATTR_TWO
 = 
Res_MAKEINTERNAL
(7),

1639 
	gATTR_FEW
 = 
Res_MAKEINTERNAL
(8),

1640 
	gATTR_MANY
 = 
Res_MAKEINTERNAL
(9)

1650 
	gTYPE_ANY
 = 0x0000FFFF,

1653 
	gTYPE_REFERENCE
 = 1<<0,

1656 
	gTYPE_STRING
 = 1<<1,

1660 
	gTYPE_INTEGER
 = 1<<2,

1663 
	gTYPE_BOOLEAN
 = 1<<3,

1666 
	gTYPE_COLOR
 = 1<<4,

1669 
	gTYPE_FLOAT
 = 1<<5,

1672 
	gTYPE_DIMENSION
 = 1<<6,

1675 
	gTYPE_FRACTION
 = 1<<7,

1679 
	gTYPE_ENUM
 = 1<<16,

1683 
	gTYPE_FLAGS
 = 1<<17

1688 
	gL10N_NOT_REQUIRED
 = 0,

1689 
	gL10N_SUGGESTED
 = 1

1693 
Res_vÆue
 
	gvÆue
;

1699 ˛as†
	cResTabÀ


1701 
	gpublic
:

1702 
ResTabÀ
();

1703 
ResTabÀ
(c⁄° * 
d©a
, 
size_t
 
size
, * 
cookõ
,

1704 
boﬁ
 
c›yD©a
=
Ál£
);

1705 ~
ResTabÀ
();

1707 
°©us_t
 
add
(c⁄° * 
d©a
, 
size_t
 
size
, * 
cookõ
,

1708 
boﬁ
 
c›yD©a
=
Ál£
);

1709 
°©us_t
 
add
(
As£t
* 
as£t
, * 
cookõ
,

1710 
boﬁ
 
c›yD©a
=
Ál£
);

1711 
°©us_t
 
add
(
ResTabÀ
* 
§c
);

1713 
°©us_t
 
gëEº‹
() const;

1715 
unöô
();

1717 
	sªsour˚_«me


1719 c⁄° 
ch¨16_t
* 
	g∑ckage
;

1720 
size_t
 
	g∑ckageLí
;

1721 c⁄° 
ch¨16_t
* 
	gty≥
;

1722 
size_t
 
	gty≥Lí
;

1723 c⁄° 
ch¨16_t
* 
	g«me
;

1724 
size_t
 
	g«meLí
;

1727 
boﬁ
 
gëResour˚Name
(
uöt32_t
 
ªsID
, 
ªsour˚_«me
* 
outName
) const;

1744 
ssize_t
 
gëResour˚
(
uöt32_t
 
ªsID
, 
Res_vÆue
* 
outVÆue
, 
boﬁ
 
mayBeBag
=
Ál£
,

1745 
uöt32_t
* 
outS≥cFœgs
=
NULL
, 
ResTabÀ_c⁄fig
* 
outC⁄fig
=NULL) const;

1747 
ölöe
 
ssize_t
 
gëResour˚
(c⁄° 
ResTabÀ_ªf
& 
ªs
, 
Res_vÆue
* 
outVÆue
,

1748 
uöt32_t
* 
outS≥cFœgs
=
NULL
) const {

1749  
gëResour˚
(
ªs
.
idít
, 
outVÆue
, 
Ál£
, 
outS≥cFœgs
, 
NULL
);

1752 
ssize_t
 
ªsﬁveRe„ªn˚
(
Res_vÆue
* 
öOutVÆue
,

1753 
ssize_t
 
blockIndex
,

1754 
uöt32_t
* 
outLa°Ref
 = 
NULL
,

1755 
uöt32_t
* 
öoutTy≥S≥cFœgs
 = 
NULL
,

1756 
ResTabÀ_c⁄fig
* 
outC⁄fig
 = 
NULL
) const;

1759 
	gTMP_BUFFER_SIZE
 = 16

1761 c⁄° 
ch¨16_t
* 
vÆueToSåög
(c⁄° 
Res_vÆue
* 
vÆue
, 
size_t
 
°rögBlock
,

1762 
ch¨16_t
 
tmpBuf„r
[
TMP_BUFFER_SIZE
],

1763 
size_t
* 
outLí
);

1765 
	sbag_íåy
 {

1766 
ssize_t
 
	g°rögBlock
;

1767 
ResTabÀ_m≠
 
	gm≠
;

1782 
ssize_t
 
lockBag
(
uöt32_t
 
ªsID
, c⁄° 
bag_íåy
** 
outBag
) const;

1784 
u∆ockBag
(c⁄° 
bag_íåy
* 
bag
) const;

1786 
lock
() const;

1788 
ssize_t
 
gëBagLocked
(
uöt32_t
 
ªsID
, c⁄° 
bag_íåy
** 
outBag
,

1789 
uöt32_t
* 
outTy≥S≥cFœgs
=
NULL
) const;

1791 
u∆ock
() const;

1793 ˛as†
	cTheme
 {

1794 
	gpublic
:

1795 
Theme
(c⁄° 
ResTabÀ
& 
èbÀ
);

1796 ~
Theme
();

1798 
ölöe
 c⁄° 
	gResTabÀ
& 
gëResTabÀ
(Ëc⁄° {  
	gmTabÀ
; }

1800 
°©us_t
 
≠∂yStyÀ
(
uöt32_t
 
ªsID
, 
boﬁ
 
f‹˚
=
Ál£
);

1801 
°©us_t
 
£tTo
(c⁄° 
Theme
& 
Ÿhî
);

1821 
ssize_t
 
gëAâribuã
(
uöt32_t
 
ªsID
, 
Res_vÆue
* 
outVÆue
,

1822 
uöt32_t
* 
outTy≥S≥cFœgs
 = 
NULL
) const;

1828 
ssize_t
 
ªsﬁveAâribuãRe„ªn˚
(
Res_vÆue
* 
öOutVÆue
,

1829 
ssize_t
 
blockIndex
, 
uöt32_t
* 
outLa°Ref
 = 
NULL
,

1830 
uöt32_t
* 
öoutTy≥S≥cFœgs
 = 
NULL
,

1831 
ResTabÀ_c⁄fig
* 
öoutC⁄fig
 = 
NULL
) const;

1833 
dumpToLog
() const;

1835 
	g¥iv©e
:

1836 
Theme
(const Theme&);

1837 
	gTheme
& 
	g›î©‹
=(c⁄° 
Theme
&);

1839 
	stheme_íåy
 {

1840 
ssize_t
 
	g°rögBlock
;

1841 
uöt32_t
 
	gty≥S≥cFœgs
;

1842 
Res_vÆue
 
	gvÆue
;

1844 
	sty≥_öfo
 {

1845 
size_t
 
	gnumE¡rõs
;

1846 
theme_íåy
* 
	gíåõs
;

1848 
	s∑ckage_öfo
 {

1849 
size_t
 
	gnumTy≥s
;

1850 
ty≥_öfo
 
	gty≥s
[];

1853 
‰ì_∑ckage
(
∑ckage_öfo
* 
pi
);

1854 
∑ckage_öfo
* 
c›y_∑ckage
’ackage_öfo* 
pi
);

1856 c⁄° 
	gResTabÀ
& 
	gmTabÀ
;

1857 
∑ckage_öfo
* 
	gmPackages
[
Res_MAXPACKAGE
];

1860 
£tP¨amëîs
(c⁄° 
ResTabÀ_c⁄fig
* 
∑øms
);

1861 
gëP¨amëîs
(
ResTabÀ_c⁄fig
* 
∑øms
) const;

1869 
uöt32_t
 
idítifõrF‹Name
(c⁄° 
ch¨16_t
* 
«me
, 
size_t
 
«meLí
,

1870 c⁄° 
ch¨16_t
* 
ty≥
 = 0, 
size_t
 
ty≥Lí
 = 0,

1871 c⁄° 
ch¨16_t
* 
defPackage
 = 0,

1872 
size_t
 
defPackageLí
 = 0,

1873 
uöt32_t
* 
outTy≥S≥cFœgs
 = 
NULL
) const;

1875 
boﬁ
 
ex∑ndResour˚Ref
(c⁄° 
uöt16_t
* 
ªfSå
, 
size_t
 
ªfLí
,

1876 
Såög16
* 
outPackage
,

1877 
Såög16
* 
outTy≥
,

1878 
Såög16
* 
outName
,

1879 c⁄° 
Såög16
* 
defTy≥
 = 
NULL
,

1880 c⁄° 
Såög16
* 
defPackage
 = 
NULL
,

1881 c⁄° ** 
outEº‹Msg
 = 
NULL
);

1883 
boﬁ
 
°rögToI¡
(c⁄° 
ch¨16_t
* 
s
, 
size_t
 
Àn
, 
Res_vÆue
* 
outVÆue
);

1884 
boﬁ
 
°rögToFlﬂt
(c⁄° 
ch¨16_t
* 
s
, 
size_t
 
Àn
, 
Res_vÆue
* 
outVÆue
);

1887 ˛as†
	cAc˚ss‹


1889 
	gpublic
:

1890 
ölöe
 
vútuÆ
 ~
Ac˚ss‹
() { }

1892 
vútuÆ
 
uöt32_t
 
gëCu°omResour˚
(c⁄° 
Såög16
& 
∑ckage
,

1893 c⁄° 
Såög16
& 
ty≥
,

1894 c⁄° 
Såög16
& 
«me
) const = 0;

1895 
vútuÆ
 
uöt32_t
 
gëCu°omResour˚WôhCª©i⁄
(c⁄° 
Såög16
& 
∑ckage
,

1896 c⁄° 
Såög16
& 
ty≥
,

1897 c⁄° 
Såög16
& 
«me
,

1898 c⁄° 
boﬁ
 
¸óãIfNìded
 = 
Ál£
) = 0;

1899 
vútuÆ
 
uöt32_t
 
gëRem≠≥dPackage
(uöt32_à
‹igPackage
) const = 0;

1900 
vútuÆ
 
boﬁ
 
gëAâribuãTy≥
(
uöt32_t
 
©åID
, uöt32_t* 
outTy≥
) = 0;

1901 
vútuÆ
 
boﬁ
 
gëAâribuãMö
(
uöt32_t
 
©åID
, uöt32_t* 
outMö
) = 0;

1902 
vútuÆ
 
boﬁ
 
gëAâribuãMax
(
uöt32_t
 
©åID
, uöt32_t* 
outMax
) = 0;

1903 
vútuÆ
 
boﬁ
 
gëAâribuãEnum
(
uöt32_t
 
©åID
,

1904 c⁄° 
ch¨16_t
* 
«me
, 
size_t
 
«meLí
,

1905 
Res_vÆue
* 
outVÆue
) = 0;

1906 
vútuÆ
 
boﬁ
 
gëAâribuãFœgs
(
uöt32_t
 
©åID
,

1907 c⁄° 
ch¨16_t
* 
«me
, 
size_t
 
«meLí
,

1908 
Res_vÆue
* 
outVÆue
) = 0;

1909 
vútuÆ
 
uöt32_t
 
gëAâribuãL10N
(uöt32_à
©åID
) = 0;

1910 
vútuÆ
 
boﬁ
 
gëLoˇliz©i⁄Sëtög
() = 0;

1911 
vútuÆ
 
ªp‹tEº‹
(* 
ac˚ss‹Cookõ
, c⁄° * 
fmt
, ...) = 0;

1923 
boﬁ
 
°rögToVÆue
(
Res_vÆue
* 
outVÆue
, 
Såög16
* 
outSåög
,

1924 c⁄° 
ch¨16_t
* 
s
, 
size_t
 
Àn
,

1925 
boﬁ
 
¥e£rveS∑˚s
, boﬁ 
c€r˚Ty≥
,

1926 
uöt32_t
 
©åID
 = 0,

1927 c⁄° 
Såög16
* 
defTy≥
 = 
NULL
,

1928 c⁄° 
Såög16
* 
defPackage
 = 
NULL
,

1929 
Ac˚ss‹
* 
ac˚ss‹
 = 
NULL
,

1930 * 
ac˚ss‹Cookõ
 = 
NULL
,

1931 
uöt32_t
 
©åTy≥
 = 
ResTabÀ_m≠
::
TYPE_ANY
,

1932 
boﬁ
 
íf‹˚Priv©e
 = 
åue
) const;

1935 
boﬁ
 
cﬁÀ˘Såög
(
Såög16
* 
outSåög
,

1936 c⁄° 
ch¨16_t
* 
s
, 
size_t
 
Àn
,

1937 
boﬁ
 
¥e£rveS∑˚s
,

1938 c⁄° ** 
outEº‹Msg
 = 
NULL
,

1939 
boﬁ
 
≠≥nd
 = 
Ál£
);

1941 
size_t
 
gëBa£PackageCou¡
() const;

1942 c⁄° 
ch¨16_t
* 
gëBa£PackageName
(
size_t
 
idx
) const;

1943 
uöt32_t
 
gëBa£PackageId
(
size_t
 
idx
) const;

1945 
size_t
 
gëTabÀCou¡
() const;

1946 c⁄° 
ResSåögPoﬁ
* 
gëTabÀSåögBlock
(
size_t
 
ödex
) const;

1947 * 
gëTabÀCookõ
(
size_t
 
ödex
) const;

1950 
gëC⁄figuøti⁄s
(
Ve˘‹
<
ResTabÀ_c⁄fig
>* 
c⁄figs
) const;

1952 
gëLoˇÀs
(
Ve˘‹
<
Såög8
>* 
loˇÀs
) const;

1954 #i‚de‡
HAVE_ANDROID_OS


1955 
¥öt
(
boﬁ
 
ö˛VÆues
) const;

1958 
	g¥iv©e
:

1959 
Hódî
;

1960 
	gTy≥
;

1961 
	gPackage
;

1962 
	gPackageGroup
;

1963 
	gbag_£t
;

1965 
°©us_t
 
add
(c⁄° * 
d©a
, 
size_t
 
size
, * 
cookõ
,

1966 
As£t
* 
as£t
, 
boﬁ
 
c›yD©a
);

1968 
ssize_t
 
gëResour˚PackageIndex
(
uöt32_t
 
ªsID
) const;

1969 
ssize_t
 
gëE¡ry
(

1970 c⁄° 
Package
* 
∑ckage
, 
ty≥Index
, 
íåyIndex
,

1971 c⁄° 
ResTabÀ_c⁄fig
* 
c⁄fig
,

1972 c⁄° 
ResTabÀ_ty≥
** 
outTy≥
, c⁄° 
ResTabÀ_íåy
** 
outE¡ry
,

1973 c⁄° 
Ty≥
** 
outTy≥Cœss
) const;

1974 
°©us_t
 
∑r£Package
(

1975 c⁄° 
ResTabÀ_∑ckage
* c⁄° 
pkg
, c⁄° 
Hódî
* c⁄° 
hódî
);

1977 
¥öt_vÆue
(c⁄° 
Package
* 
pkg
, c⁄° 
Res_vÆue
& 
vÆue
) const;

1979 
muèbÀ
 
Muãx
 
	gmLock
;

1981 
°©us_t
 
	gmEº‹
;

1983 
ResTabÀ_c⁄fig
 
	gmP¨ams
;

1986 
	gVe˘‹
<
	gHódî
*> 
	gmHódîs
;

1989 
	gVe˘‹
<
	gPackageGroup
*> 
	gmPackageGroups
;

1993 
uöt8_t
 
	gmPackageM≠
[256];

	@jni/include/include/utils/SharedBuffer.h

17 #i‚de‡
ANDROID_SHARED_BUFFER_H


18 
	#ANDROID_SHARED_BUFFER_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

25 
«me•a˚
 
	g™droid
 {

27 ˛as†
	cSh¨edBuf„r


29 
	gpublic
:

33 
eKìpSt‹age
 = 0x00000001

39 
Sh¨edBuf„r
* 
Æloc
(
size_t
 
size
);

46 
ssize_t
 
dóŒoc
(c⁄° 
Sh¨edBuf„r
* 
ªÀa£d
);

49 
ölöe
 c⁄° 
Sh¨edBuf„r
* 
sh¨edBuf„r
(c⁄° * 
d©a
);

52 
ölöe
 c⁄° * 
d©a
() const;

55 
ölöe
 * 
d©a
();

58 
ölöe
 
size_t
 
size
() const;

61 
ölöe
 
Sh¨edBuf„r
* 
buf„rFromD©a
(* 
d©a
);

64 
ölöe
 c⁄° 
Sh¨edBuf„r
* 
buf„rFromD©a
(c⁄° * 
d©a
);

67 
ölöe
 
size_t
 
sizeFromD©a
(c⁄° * 
d©a
);

70 
Sh¨edBuf„r
* 
edô
() const;

73 
Sh¨edBuf„r
* 
edôResize
(
size_t
 
size
) const;

76 
Sh¨edBuf„r
* 
©ãm±Edô
() const;

79 
Sh¨edBuf„r
* 
ª£t
(
size_t
 
size
) const;

82 
acquúe
() const;

88 
öt32_t
 
ªÀa£
(
uöt32_t
 
Êags
 = 0) const;

91 
ölöe
 
boﬁ
 
⁄lyOw√r
() const;

94 
	g¥iv©e
:

95 
ölöe
 
Sh¨edBuf„r
() { }

96 
ölöe
 ~
Sh¨edBuf„r
() { }

97 
ölöe
 
Sh¨edBuf„r
(const SharedBuffer&);

100 
muèbÀ
 
öt32_t
 
	gmRefs
;

101 
size_t
 
	gmSize
;

102 
uöt32_t
 
	gmRe£rved
[2];

107 c⁄° 
Sh¨edBuf„r
* 
	gSh¨edBuf„r
::
	$sh¨edBuf„r
(c⁄° * 
d©a
) {

108  
d©a
 ? 
ªöãΩªt_ˇ°
<c⁄° 
Sh¨edBuf„r
 *>(data)-1 : 0;

109 
	}
}

111 c⁄° * 
	gSh¨edBuf„r
::
	$d©a
() const {

112  
this
 + 1;

113 
	}
}

115 * 
	gSh¨edBuf„r
::
	$d©a
() {

116  
this
 + 1;

117 
	}
}

119 
size_t
 
	gSh¨edBuf„r
::
	$size
() const {

120  
mSize
;

121 
	}
}

123 
Sh¨edBuf„r
* 
	gSh¨edBuf„r
::
	$buf„rFromD©a
(* 
d©a
)

125  ((
Sh¨edBuf„r
*)
d©a
)-1;

126 
	}
}

128 c⁄° 
Sh¨edBuf„r
* 
	gSh¨edBuf„r
::
	$buf„rFromD©a
(c⁄° * 
d©a
)

130  ((c⁄° 
Sh¨edBuf„r
*)
d©a
)-1;

131 
	}
}

133 
size_t
 
	gSh¨edBuf„r
::
	$sizeFromD©a
(c⁄° * 
d©a
)

135  (((c⁄° 
Sh¨edBuf„r
*)
d©a
)-1)->
mSize
;

136 
	}
}

138 
boﬁ
 
	gSh¨edBuf„r
::
	$⁄lyOw√r
() const {

139  (
mRefs
 == 1);

140 
	}
}

	@jni/include/include/utils/Singleton.h

17 #i‚de‡
ANDROID_UTILS_SINGLETON_H


18 
	#ANDROID_UTILS_SINGLETON_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<utûs/thªads.h
>

24 
«me•a˚
 
	g™droid
 {

27 
	gãm∂©e
 <
ty≥«me
 
	gTYPE
>

28 ˛as†
	cSögÀt⁄


30 
	gpublic
:

31 
TYPE
& 
gëIn°™˚
() {

32 
Muãx
::
Autﬁock
 
_l
(
sLock
);

33 
TYPE
* 
	gö°™˚
 = 
sIn°™˚
;

34 i‡(
	gö°™˚
 == 0) {

35 
ö°™˚
 = 
√w
 
TYPE
();

36 
	gsIn°™˚
 = 
ö°™˚
;

38  *
	gö°™˚
;

41 
	g¥Ÿe˘ed
:

42 ~
SögÀt⁄
() { };

43 
SögÀt⁄
() { };

45 
	g¥iv©e
:

46 
SögÀt⁄
(const Singleton&);

47 
	gSögÀt⁄
& 
	g›î©‹
 = (c⁄° 
SögÀt⁄
&);

48 
Muãx
 
	gsLock
;

49 
TYPE
* 
	gsIn°™˚
;

59 
	#ANDROID_SINGLETON_STATIC_INSTANCE
(
TYPE
) \

60 
ãm∂©e
 
˛ass
 
SögÀt⁄
< 
TYPE
 >; \

61 
ãm∂©e
< 
˛ass
 
TYPE
 > 
Muãx
 
SögÀt⁄
< TYPE >::
sLock
; \

62 
ãm∂©e
<> 
TYPE
* 
SögÀt⁄
< TYPE >::
	`sIn°™˚
(0);

	)

	@jni/include/include/utils/SortedVector.h

17 #i‚de‡
ANDROID_SORTED_VECTOR_H


18 
	#ANDROID_SORTED_VECTOR_H


	)

20 
	~<as£π.h
>

21 
	~<°döt.h
>

22 
	~<sys/ty≥s.h
>

24 
	~<utûs/Ve˘‹.h
>

25 
	~<utûs/Ve˘‹Im∂.h
>

26 
	~<utûs/Ty≥Hñ≥rs.h
>

30 
«me•a˚
 
	g™droid
 {

32 
	gãm∂©e
 <
˛ass
 
	gTYPE
>

33 ˛as†
	cS‹ãdVe˘‹
 : 
¥iv©e
 
S‹ãdVe˘‹Im∂


35 
public
:

36 
TYPE
 
	tvÆue_ty≥
;

42 
S‹ãdVe˘‹
();

43 
S‹ãdVe˘‹
(c⁄° S‹ãdVe˘‹<
TYPE
>& 
rhs
);

44 
	gvútuÆ
 ~
S‹ãdVe˘‹
();

47 c⁄° 
	gS‹ãdVe˘‹
<
	gTYPE
>& 
	g›î©‹
 = (c⁄° 
S‹ãdVe˘‹
<
TYPE
>& 
rhs
) const;

48 
	gS‹ãdVe˘‹
<
	gTYPE
>& 
	g›î©‹
 = (c⁄° 
S‹ãdVe˘‹
<
TYPE
>& 
rhs
);

54 
ölöe
 
˛ór
(Ë{ 
	gVe˘‹Im∂
::clear(); }

61 
ölöe
 
size_t
 
size
(Ëc⁄° {  
	gVe˘‹Im∂
::size(); }

63 
ölöe
 
boﬁ
 
isEm±y
(Ëc⁄° {  
	gVe˘‹Im∂
::isEmpty(); }

65 
ölöe
 
size_t
 
ˇ∑côy
(Ëc⁄° {  
	gVe˘‹Im∂
::capacity(); }

67 
ölöe
 
ssize_t
 
£tC≠acôy
(
size_t
 
size
Ë{  
	gVe˘‹Im∂
::setCapacity(size); }

74 
ölöe
 c⁄° 
TYPE
* 
¨øy
() const;

78 
TYPE
* 
edôAºay
();

81 
ssize_t
 
ödexOf
(c⁄° 
TYPE
& 
ôem
) const;

84 
size_t
 
‹dîOf
(c⁄° 
TYPE
& 
ôem
) const;

92 
ölöe
 c⁄° 
	gTYPE
& 
	g›î©‹
 [] (
size_t
 
	gödex
) const;

94 
ölöe
 c⁄° 
	gTYPE
& 
ôemAt
(
size_t
 
ödex
) const;

96 c⁄° 
	gTYPE
& 
t›
() const;

98 c⁄° 
	gTYPE
& 
múr‹IãmAt
(
ssize_t
 
ödex
) const;

105 
ssize_t
 
add
(c⁄° 
TYPE
& 
ôem
);

108 
	gTYPE
& 
edôIãmAt
(
size_t
 
ödex
) {

109  *–
	g°©ic_ˇ°
<
	gTYPE
 *>(
	gVe˘‹Im∂
::
edôIãmLoˇti⁄
(
ödex
)) );

113 
ssize_t
 
mîge
(c⁄° 
Ve˘‹
<
TYPE
>& 
ve˘‹
);

114 
ssize_t
 
mîge
(c⁄° 
S‹ãdVe˘‹
<
TYPE
>& 
ve˘‹
);

117 
ssize_t
 
ªmove
(c⁄° 
TYPE
&);

120 
ölöe
 
ssize_t
 
ªmoveIãmsAt
(
size_t
 
ödex
, size_à
cou¡
 = 1);

122 
ölöe
 
ssize_t
 
ªmoveAt
(
size_t
 
ödex
Ë{  
ªmoveIãmsAt
(index); }

124 
	g¥Ÿe˘ed
:

125 
vútuÆ
 
do_c⁄°ru˘
(* 
°‹age
, 
size_t
 
num
) const;

126 
vútuÆ
 
do_de°roy
(* 
°‹age
, 
size_t
 
num
) const;

127 
vútuÆ
 
do_c›y
(* 
de°
, c⁄° * 
‰om
, 
size_t
 
num
) const;

128 
vútuÆ
 
do_•œt
(* 
de°
, c⁄° * 
ôem
, 
size_t
 
num
) const;

129 
vútuÆ
 
do_move_f‹w¨d
(* 
de°
, c⁄° * 
‰om
, 
size_t
 
num
) const;

130 
vútuÆ
 
do_move_backw¨d
(* 
de°
, c⁄° * 
‰om
, 
size_t
 
num
) const;

131 
vútuÆ
 
do_com∑ª
(c⁄° * 
lhs
, c⁄° * 
rhs
) const;

139 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


140 
	gS‹ãdVe˘‹
<
	gTYPE
>::
	$S‹ãdVe˘‹
()

141 : 
	`S‹ãdVe˘‹Im∂
((
TYPE
),

142 ((
åaôs
<
TYPE
>::
has_åivül_˘‹
 ? 
HAS_TRIVIAL_CTOR
 : 0)

143 |(
åaôs
<
TYPE
>::
has_åivül_dt‹
 ? 
HAS_TRIVIAL_DTOR
 : 0)

144 |(
åaôs
<
TYPE
>::
has_åivül_c›y
 ? 
HAS_TRIVIAL_COPY
 : 0))

147 
	}
}

149 
ãm∂©e
<
˛ass
 
TYPE
> 
ölöe


150 
S‹ãdVe˘‹
<
TYPE
>::S‹ãdVe˘‹(c⁄° S‹ãdVe˘‹<TYPE>& 
rhs
)

151 : 
	$S‹ãdVe˘‹Im∂
(
rhs
) {

152 
	}
}

154 
ãm∂©e
<
˛ass
 
TYPE
> 
ölöe


155 
S‹ãdVe˘‹
<
TYPE
>::~
	$S‹ãdVe˘‹
() {

156 
	`föish_ve˘‹
();

157 
	}
}

159 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


160 
	gS‹ãdVe˘‹
<
	gTYPE
>& S‹ãdVe˘‹<TYPE>::
›î©‹
 = (c⁄° 
S‹ãdVe˘‹
<
TYPE
>& 
rhs
) {

161 
S‹ãdVe˘‹Im∂
::
›î©‹
 = (
rhs
);

162  *
	gthis
;

165 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


166 c⁄° 
	gS‹ãdVe˘‹
<
	gTYPE
>& S‹ãdVe˘‹<TYPE>::
›î©‹
 = (c⁄° 
S‹ãdVe˘‹
<
TYPE
>& 
rhs
) const {

167 
S‹ãdVe˘‹Im∂
::
›î©‹
 = (
rhs
);

168  *
	gthis
;

171 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


172 c⁄° 
TYPE
* 
	gS‹ãdVe˘‹
<
	gTYPE
>::
	$¨øy
() const {

173  
°©ic_ˇ°
<c⁄° 
TYPE
 *>(
	`¨øyIm∂
());

174 
	}
}

176 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


177 
TYPE
* 
	gS‹ãdVe˘‹
<
	gTYPE
>::
	$edôAºay
() {

178  
°©ic_ˇ°
<
TYPE
 *>(
	`edôAºayIm∂
());

179 
	}
}

182 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


183 c⁄° 
	gTYPE
& 
	gS‹ãdVe˘‹
<TYPE>::
›î©‹
[](
size_t
 
ödex
) const {

184 
as£π
–
ödex
<
size
() );

185  *(
¨øy
(Ë+ 
	gödex
);

188 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


189 c⁄° 
	gTYPE
& 
	gS‹ãdVe˘‹
<TYPE>::
	$ôemAt
(
size_t
 
ödex
) const {

190  
›î©‹
[](
ödex
);

191 
	}
}

193 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


194 c⁄° 
	gTYPE
& 
	gS‹ãdVe˘‹
<TYPE>::
	$múr‹IãmAt
(
ssize_t
 
ödex
) const {

195 
	`as£π
–(
ödex
>0 ? index : -ödex)<
	`size
() );

196  *(
	`¨øy
(Ë+ ((
ödex
<0Ë? (
	`size
()-index) : index));

197 
	}
}

199 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


200 c⁄° 
	gTYPE
& 
	gS‹ãdVe˘‹
<TYPE>::
	$t›
() const {

201  *(
	`¨øy
(Ë+ 
	`size
() - 1);

202 
	}
}

204 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


205 
ssize_t
 
	gS‹ãdVe˘‹
<
	gTYPE
>::
	$add
(c⁄° 
TYPE
& 
ôem
) {

206  
S‹ãdVe˘‹Im∂
::
	`add
(&
ôem
);

207 
	}
}

209 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


210 
ssize_t
 
	gS‹ãdVe˘‹
<
	gTYPE
>::
	$ödexOf
(c⁄° 
TYPE
& 
ôem
) const {

211  
S‹ãdVe˘‹Im∂
::
	`ödexOf
(&
ôem
);

212 
	}
}

214 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


215 
size_t
 
	gS‹ãdVe˘‹
<
	gTYPE
>::
	$‹dîOf
(c⁄° 
TYPE
& 
ôem
) const {

216  
S‹ãdVe˘‹Im∂
::
	`‹dîOf
(&
ôem
);

217 
	}
}

219 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


220 
ssize_t
 
	gS‹ãdVe˘‹
<
	gTYPE
>::
mîge
(c⁄° 
Ve˘‹
<
TYPE
>& 
ve˘‹
) {

221  
S‹ãdVe˘‹Im∂
::
mîge
(
ªöãΩªt_ˇ°
<c⁄° 
Ve˘‹Im∂
&>(
ve˘‹
));

224 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


225 
ssize_t
 
	gS‹ãdVe˘‹
<
	gTYPE
>::
mîge
(c⁄° 
S‹ãdVe˘‹
<
TYPE
>& 
ve˘‹
) {

226  
S‹ãdVe˘‹Im∂
::
mîge
(
ªöãΩªt_ˇ°
<c⁄° S‹ãdVe˘‹Im∂&>(
ve˘‹
));

229 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


230 
ssize_t
 
	gS‹ãdVe˘‹
<
	gTYPE
>::
	$ªmove
(c⁄° 
TYPE
& 
ôem
) {

231  
S‹ãdVe˘‹Im∂
::
	`ªmove
(&
ôem
);

232 
	}
}

234 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


235 
ssize_t
 
	gS‹ãdVe˘‹
<
	gTYPE
>::
	$ªmoveIãmsAt
(
size_t
 
ödex
, size_à
cou¡
) {

236  
Ve˘‹Im∂
::
	`ªmoveIãmsAt
(
ödex
, 
cou¡
);

237 
	}
}

241 
	gãm∂©e
<
˛ass
 
	gTYPE
>

242 
	gS‹ãdVe˘‹
<
	gTYPE
>::
	$do_c⁄°ru˘
(* 
°‹age
, 
size_t
 
num
) const {

243 
	`c⁄°ru˘_ty≥
–
ªöãΩªt_ˇ°
<
TYPE
*>(
°‹age
), 
num
 );

244 
	}
}

246 
	gãm∂©e
<
˛ass
 
	gTYPE
>

247 
	gS‹ãdVe˘‹
<
	gTYPE
>::
	$do_de°roy
(* 
°‹age
, 
size_t
 
num
) const {

248 
	`de°roy_ty≥
–
ªöãΩªt_ˇ°
<
TYPE
*>(
°‹age
), 
num
 );

249 
	}
}

251 
	gãm∂©e
<
˛ass
 
	gTYPE
>

252 
	gS‹ãdVe˘‹
<
	gTYPE
>::
	$do_c›y
(* 
de°
, c⁄° * 
‰om
, 
size_t
 
num
) const {

253 
	`c›y_ty≥
–
ªöãΩªt_ˇ°
<
TYPE
*>(
de°
),ÑeöãΩªt_ˇ°<c⁄° TYPE*>(
‰om
), 
num
 );

254 
	}
}

256 
	gãm∂©e
<
˛ass
 
	gTYPE
>

257 
	gS‹ãdVe˘‹
<
	gTYPE
>::
	$do_•œt
(* 
de°
, c⁄° * 
ôem
, 
size_t
 
num
) const {

258 
	`•œt_ty≥
–
ªöãΩªt_ˇ°
<
TYPE
*>(
de°
),ÑeöãΩªt_ˇ°<c⁄° TYPE*>(
ôem
), 
num
 );

259 
	}
}

261 
	gãm∂©e
<
˛ass
 
	gTYPE
>

262 
	gS‹ãdVe˘‹
<
	gTYPE
>::
	$do_move_f‹w¨d
(* 
de°
, c⁄° * 
‰om
, 
size_t
 
num
) const {

263 
	`move_f‹w¨d_ty≥
–
ªöãΩªt_ˇ°
<
TYPE
*>(
de°
),ÑeöãΩªt_ˇ°<c⁄° TYPE*>(
‰om
), 
num
 );

264 
	}
}

266 
	gãm∂©e
<
˛ass
 
	gTYPE
>

267 
	gS‹ãdVe˘‹
<
	gTYPE
>::
	$do_move_backw¨d
(* 
de°
, c⁄° * 
‰om
, 
size_t
 
num
) const {

268 
	`move_backw¨d_ty≥
–
ªöãΩªt_ˇ°
<
TYPE
*>(
de°
),ÑeöãΩªt_ˇ°<c⁄° TYPE*>(
‰om
), 
num
 );

269 
	}
}

271 
	gãm∂©e
<
˛ass
 
	gTYPE
>

272 
	gS‹ãdVe˘‹
<
	gTYPE
>::
	$do_com∑ª
(c⁄° * 
lhs
, c⁄° * 
rhs
) const {

273  
	`com∑ª_ty≥
–*
ªöãΩªt_ˇ°
<c⁄° 
TYPE
*>(
lhs
), *ªöãΩªt_ˇ°<c⁄° TYPE*>(
rhs
) );

274 
	}
}

	@jni/include/include/utils/StopWatch.h

17 #i‚de‡
ANDROID_STOPWATCH_H


18 
	#ANDROID_STOPWATCH_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	~<utûs/Timîs.h
>

27 
«me•a˚
 
	g™droid
 {

29 ˛as†
	cSt›W©ch


31 
	gpublic
:

32 
St›W©ch
–c⁄° *
«me
,

33 
˛ock
 = 
SYSTEM_TIME_MONOTONIC
,

34 
uöt32_t
 
Êags
 = 0);

35 ~
St›W©ch
();

37 c⁄° * 
«me
() const;

38 
n£cs_t
 
œp
();

39 
n£cs_t
 
ñ≠£dTime
() const;

41 
	g¥iv©e
:

42 c⁄° * 
mName
;

43 
	gmClock
;

44 
uöt32_t
 
	gmFœgs
;

46 
	sœp_t
 {

47 
n£cs_t
 
	gsoF¨
;

48 
n£cs_t
 
	gthisL≠
;

51 
n£cs_t
 
	gmSèπTime
;

52 
œp_t
 
	gmL≠s
[8];

53 
	gmNumL≠s
;

	@jni/include/include/utils/String16.h

17 #i‚de‡
ANDROID_STRING16_H


18 
	#ANDROID_STRING16_H


	)

20 
	~<utûs/Eº‹s.h
>

21 
	~<utûs/Sh¨edBuf„r.h
>

23 
	~<°döt.h
>

24 
	~<sys/ty≥s.h
>

30 
uöt16_t
 
	tch¨16_t
;

33 
°rcmp16
(c⁄° 
ch¨16_t
 *, const char16_t *);

34 
°∫cmp16
(c⁄° 
ch¨16_t
 *
s1
, c⁄° ch¨16_à*
s2
, 
size_t
 
n
);

35 
size_t
 
°æí16
(c⁄° 
ch¨16_t
 *);

36 
size_t
 
°∫Àn16
(c⁄° 
ch¨16_t
 *, size_t);

37 
ch¨16_t
 *
°r˝y16
(char16_t *, const char16_t *);

38 
ch¨16_t
 *
°∫˝y16
(ch¨16_à*, c⁄° ch¨16_à*, 
size_t
);

47 
°rzcmp16
(c⁄° 
ch¨16_t
 *
s1
, 
size_t
 
n1
, c⁄° ch¨16_à*
s2
, size_à
n2
);

50 
°rzcmp16_h_n
(c⁄° 
ch¨16_t
 *
s1H
, 
size_t
 
n1
, c⁄° ch¨16_à*
s2N
, size_à
n2
);

53 
utf8_to_utf16
(c⁄° 
uöt8_t
 *
§c
, 
size_t
 
§cLí
, 
ch¨16_t
* 
d°
, c⁄° size_à
d°Lí
);

59 
«me•a˚
 
™droid
 {

63 
˛ass
 
Såög8
;

64 
˛ass
 
TextOuçut
;

67 ˛as†
	cSåög16


69 
public
:

70 
Såög16
();

71 
Såög16
(c⁄° Såög16& 
o
);

72 
Såög16
(c⁄° Såög16& 
o
,

73 
size_t
 
Àn
,

74 
size_t
 
begö
=0);

75 
ex∂icô
 
Såög16
(c⁄° 
ch¨16_t
* 
o
);

76 
ex∂icô
 
Såög16
(c⁄° 
ch¨16_t
* 
o
, 
size_t
 
Àn
);

77 
ex∂icô
 
Såög16
(c⁄° 
Såög8
& 
o
);

78 
ex∂icô
 
Såög16
(c⁄° * 
o
);

79 
ex∂icô
 
Såög16
(c⁄° * 
o
, 
size_t
 
Àn
);

81 ~
Såög16
();

83 
ölöe
 c⁄° 
ch¨16_t
* 
°rög
() const;

84 
ölöe
 
size_t
 
size
() const;

86 
ölöe
 c⁄° 
Sh¨edBuf„r
* 
sh¨edBuf„r
() const;

88 
£tTo
(c⁄° 
Såög16
& 
Ÿhî
);

89 
°©us_t
 
£tTo
(c⁄° 
ch¨16_t
* 
Ÿhî
);

90 
°©us_t
 
£tTo
(c⁄° 
ch¨16_t
* 
Ÿhî
, 
size_t
 
Àn
);

91 
°©us_t
 
£tTo
(c⁄° 
Såög16
& 
Ÿhî
,

92 
size_t
 
Àn
,

93 
size_t
 
begö
=0);

95 
°©us_t
 
≠≥nd
(c⁄° 
Såög16
& 
Ÿhî
);

96 
°©us_t
 
≠≥nd
(c⁄° 
ch¨16_t
* 
Ÿhî
, 
size_t
 
Àn
);

98 
ölöe
 
Såög16
& 
›î©‹
=(c⁄° Såög16& 
Ÿhî
);

100 
ölöe
 
Såög16
& 
›î©‹
+=(c⁄° Såög16& 
Ÿhî
);

101 
ölöe
 
Såög16
 
›î©‹
+(c⁄° Såög16& 
Ÿhî
) const;

103 
°©us_t
 
ö£π
(
size_t
 
pos
, c⁄° 
ch¨16_t
* 
chrs
);

104 
°©us_t
 
ö£π
(
size_t
 
pos
,

105 c⁄° 
ch¨16_t
* 
chrs
, 
size_t
 
Àn
);

107 
ssize_t
 
födFú°
(
ch¨16_t
 
c
) const;

108 
ssize_t
 
födLa°
(
ch¨16_t
 
c
) const;

110 
boﬁ
 
°¨tsWôh
(c⁄° 
Såög16
& 
¥efix
) const;

111 
boﬁ
 
°¨tsWôh
(c⁄° 
ch¨16_t
* 
¥efix
) const;

113 
°©us_t
 
makeLowî
();

115 
°©us_t
 
ª∂a˚AŒ
(
ch¨16_t
 
ª∂a˚This
,

116 
ch¨16_t
 
wôhThis
);

118 
°©us_t
 
ªmove
(
size_t
 
Àn
, size_à
begö
=0);

120 
ölöe
 
com∑ª
(c⁄° 
Såög16
& 
Ÿhî
) const;

122 
ölöe
 
boﬁ
 
›î©‹
<(c⁄° 
Såög16
& 
Ÿhî
) const;

123 
ölöe
 
boﬁ
 
›î©‹
<=(c⁄° 
Såög16
& 
Ÿhî
) const;

124 
ölöe
 
boﬁ
 
›î©‹
==(c⁄° 
Såög16
& 
Ÿhî
) const;

125 
ölöe
 
boﬁ
 
›î©‹
!=(c⁄° 
Såög16
& 
Ÿhî
) const;

126 
ölöe
 
boﬁ
 
›î©‹
>=(c⁄° 
Såög16
& 
Ÿhî
) const;

127 
ölöe
 
boﬁ
 
›î©‹
>(c⁄° 
Såög16
& 
Ÿhî
) const;

129 
ölöe
 
boﬁ
 
›î©‹
<(c⁄° 
ch¨16_t
* 
Ÿhî
) const;

130 
ölöe
 
boﬁ
 
›î©‹
<=(c⁄° 
ch¨16_t
* 
Ÿhî
) const;

131 
ölöe
 
boﬁ
 
›î©‹
==(c⁄° 
ch¨16_t
* 
Ÿhî
) const;

132 
ölöe
 
boﬁ
 
›î©‹
!=(c⁄° 
ch¨16_t
* 
Ÿhî
) const;

133 
ölöe
 
boﬁ
 
›î©‹
>=(c⁄° 
ch¨16_t
* 
Ÿhî
) const;

134 
ölöe
 
boﬁ
 
›î©‹
>(c⁄° 
ch¨16_t
* 
Ÿhî
) const;

136 
ölöe
 
›î©‹
 c⁄° 
ch¨16_t
*() const;

138 
¥iv©e
:

139 c⁄° 
ch¨16_t
* 
mSåög
;

142 
TextOuçut
& 
›î©‹
<<(TextOuçut& 
to
, c⁄° 
Såög16
& 
vÆ
);

147 
ölöe
 
	$com∑ª_ty≥
(c⁄° 
Såög16
& 
lhs
, c⁄° Såög16& 
rhs
)

149  
lhs
.
	`com∑ª
(
rhs
);

150 
	}
}

152 
ölöe
 
	$°ri˘ly_‹dî_ty≥
(c⁄° 
Såög16
& 
lhs
, c⁄° Såög16& 
rhs
)

154  
	`com∑ª_ty≥
(
lhs
, 
rhs
) < 0;

155 
	}
}

157 
ölöe
 c⁄° 
ch¨16_t
* 
Såög16
::
	$°rög
() const

159  
mSåög
;

160 
	}
}

162 
ölöe
 
size_t
 
Såög16
::
	$size
() const

164  
Sh¨edBuf„r
::
	`sizeFromD©a
(
mSåög
)/(
ch¨16_t
)-1;

165 
	}
}

167 
ölöe
 c⁄° 
Sh¨edBuf„r
* 
Såög16
::
	$sh¨edBuf„r
() const

169  
Sh¨edBuf„r
::
	`buf„rFromD©a
(
mSåög
);

170 
	}
}

172 
ölöe
 
Såög16
& Såög16::
›î©‹
=(c⁄° Såög16& 
Ÿhî
)

174 
£tTo
(
Ÿhî
);

175  *
this
;

178 
ölöe
 
Såög16
& Såög16::
›î©‹
+=(c⁄° Såög16& 
Ÿhî
)

180 
≠≥nd
(
Ÿhî
);

181  *
this
;

184 
ölöe
 
Såög16
 Såög16::
›î©‹
+(c⁄° Såög16& 
Ÿhî
) const

186 
Såög16
 
tmp
;

187 
tmp
 +
Ÿhî
;

188  
tmp
;

191 
ölöe
 
Såög16
::
	$com∑ª
(c⁄° 
Såög16
& 
Ÿhî
) const

193  
	`°rzcmp16
(
mSåög
, 
	`size
(), 
Ÿhî
.mString, other.size());

194 
	}
}

196 
ölöe
 
boﬁ
 
Såög16
::
›î©‹
<(c⁄° Såög16& 
Ÿhî
) const

198  
°rzcmp16
(
mSåög
, 
size
(), 
Ÿhî
.mString, other.size()) < 0;

201 
ölöe
 
boﬁ
 
Såög16
::
›î©‹
<=(c⁄° Såög16& 
Ÿhî
) const

203  
°rzcmp16
(
mSåög
, 
size
(), 
Ÿhî
.mString, other.size()) <= 0;

206 
ölöe
 
boﬁ
 
Såög16
::
›î©‹
==(c⁄° Såög16& 
Ÿhî
) const

208  
°rzcmp16
(
mSåög
, 
size
(), 
Ÿhî
.mString, other.size()) == 0;

211 
ölöe
 
boﬁ
 
Såög16
::
›î©‹
!=(c⁄° Såög16& 
Ÿhî
) const

213  
°rzcmp16
(
mSåög
, 
size
(), 
Ÿhî
.mString, other.size()) != 0;

216 
ölöe
 
boﬁ
 
Såög16
::
›î©‹
>=(c⁄° Såög16& 
Ÿhî
) const

218  
°rzcmp16
(
mSåög
, 
size
(), 
Ÿhî
.mString, other.size()) >= 0;

221 
ölöe
 
boﬁ
 
Såög16
::
›î©‹
>(c⁄° Såög16& 
Ÿhî
) const

223  
°rzcmp16
(
mSåög
, 
size
(), 
Ÿhî
.mString, other.size()) > 0;

226 
ölöe
 
boﬁ
 
Såög16
::
›î©‹
<(c⁄° 
ch¨16_t
* 
Ÿhî
) const

228  
°rcmp16
(
mSåög
, 
Ÿhî
) < 0;

231 
ölöe
 
boﬁ
 
Såög16
::
›î©‹
<=(c⁄° 
ch¨16_t
* 
Ÿhî
) const

233  
°rcmp16
(
mSåög
, 
Ÿhî
) <= 0;

236 
ölöe
 
boﬁ
 
Såög16
::
›î©‹
==(c⁄° 
ch¨16_t
* 
Ÿhî
) const

238  
°rcmp16
(
mSåög
, 
Ÿhî
) == 0;

241 
ölöe
 
boﬁ
 
Såög16
::
›î©‹
!=(c⁄° 
ch¨16_t
* 
Ÿhî
) const

243  
°rcmp16
(
mSåög
, 
Ÿhî
) != 0;

246 
ölöe
 
boﬁ
 
Såög16
::
›î©‹
>=(c⁄° 
ch¨16_t
* 
Ÿhî
) const

248  
°rcmp16
(
mSåög
, 
Ÿhî
) >= 0;

251 
ölöe
 
boﬁ
 
Såög16
::
›î©‹
>(c⁄° 
ch¨16_t
* 
Ÿhî
) const

253  
°rcmp16
(
mSåög
, 
Ÿhî
) > 0;

256 
ölöe
 
Såög16
::
›î©‹
 c⁄° 
ch¨16_t
*() const

258  
mSåög
;

	@jni/include/include/utils/String8.h

17 #i‚de‡
ANDROID_STRING8_H


18 
	#ANDROID_STRING8_H


	)

20 
	~<utûs/Eº‹s.h
>

24 
	~<utûs/Såög16.h
>

26 
	~<°döt.h
>

27 
	~<°rög.h
>

28 
	~<sys/ty≥s.h
>

34 
uöt32_t
 
	tch¨32_t
;

36 
size_t
 
°æí32
(c⁄° 
ch¨32_t
 *);

37 
size_t
 
°∫Àn32
(c⁄° 
ch¨32_t
 *, size_t);

53 
size_t
 
utf8_Àngth
(c⁄° *
§c
);

58 
size_t
 
utf32_Àngth
(c⁄° *
§c
, size_à
§c_Àn
);

63 
size_t
 
utf8_Àngth_‰om_utf16
(c⁄° 
ch¨16_t
 *
§c
, size_à
§c_Àn
);

68 
size_t
 
utf8_Àngth_‰om_utf32
(c⁄° 
ch¨32_t
 *
§c
, size_à
§c_Àn
);

77 
öt32_t
 
utf32_©
(c⁄° *
§c
, 
size_t
 
§c_Àn
,

78 
size_t
 
ödex
, size_à*
√xt_ödex
);

87 
size_t
 
utf8_to_utf32
(c⁄° * 
§c
, size_à
§c_Àn
,

88 
ch¨32_t
* 
d°
, 
size_t
 
d°_Àn
);

125 
size_t
 
utf32_to_utf8
(c⁄° 
ch¨32_t
* 
§c
, size_à
§c_Àn
,

126 * 
d°
, 
size_t
 
d°_Àn
);

128 
size_t
 
utf16_to_utf8
(c⁄° 
ch¨16_t
* 
§c
, size_à
§c_Àn
,

129 * 
d°
, 
size_t
 
d°_Àn
);

135 
«me•a˚
 
™droid
 {

137 
˛ass
 
TextOuçut
;

141 ˛as†
	cSåög8


143 
public
:

144 
Såög8
();

145 
Såög8
(c⁄° Såög8& 
o
);

146 
ex∂icô
 
Såög8
(c⁄° * 
o
);

147 
ex∂icô
 
Såög8
(c⁄° * 
o
, 
size_t
 
numCh¨s
);

149 
ex∂icô
 
Såög8
(c⁄° 
Såög16
& 
o
);

150 
ex∂icô
 
Såög8
(c⁄° 
ch¨16_t
* 
o
);

151 
ex∂icô
 
Såög8
(c⁄° 
ch¨16_t
* 
o
, 
size_t
 
numCh¨s
);

152 
ex∂icô
 
Såög8
(c⁄° 
ch¨32_t
* 
o
);

153 
ex∂icô
 
Såög8
(c⁄° 
ch¨32_t
* 
o
, 
size_t
 
numCh¨s
);

154 ~
Såög8
();

156 
ölöe
 c⁄° * 
°rög
() const;

157 
ölöe
 
size_t
 
size
() const;

158 
ölöe
 
size_t
 
Àngth
() const;

159 
ölöe
 
size_t
 
byãs
() const;

161 
ölöe
 c⁄° 
Sh¨edBuf„r
* 
sh¨edBuf„r
() const;

163 
£tTo
(c⁄° 
Såög8
& 
Ÿhî
);

164 
°©us_t
 
£tTo
(c⁄° * 
Ÿhî
);

165 
°©us_t
 
£tTo
(c⁄° * 
Ÿhî
, 
size_t
 
numCh¨s
);

166 
°©us_t
 
£tTo
(c⁄° 
ch¨16_t
* 
Ÿhî
, 
size_t
 
numCh¨s
);

167 
°©us_t
 
£tTo
(c⁄° 
ch¨32_t
* 
Ÿhî
,

168 
size_t
 
Àngth
);

170 
°©us_t
 
≠≥nd
(c⁄° 
Såög8
& 
Ÿhî
);

171 
°©us_t
 
≠≥nd
(c⁄° * 
Ÿhî
);

172 
°©us_t
 
≠≥nd
(c⁄° * 
Ÿhî
, 
size_t
 
numCh¨s
);

176 
size_t
 
gëUtf32Lígth
() const;

177 
öt32_t
 
gëUtf32At
(
size_t
 
ödex
,

178 
size_t
 *
√xt_ödex
) const;

179 
size_t
 
gëUtf32
(
ch¨32_t
* 
d°
, size_à
d°_Àn
) const;

181 
ölöe
 
Såög8
& 
›î©‹
=(c⁄° Såög8& 
Ÿhî
);

182 
ölöe
 
Såög8
& 
›î©‹
=(c⁄° * 
Ÿhî
);

184 
ölöe
 
Såög8
& 
›î©‹
+=(c⁄° Såög8& 
Ÿhî
);

185 
ölöe
 
Såög8
 
›î©‹
+(c⁄° Såög8& 
Ÿhî
) const;

187 
ölöe
 
Såög8
& 
›î©‹
+=(c⁄° * 
Ÿhî
);

188 
ölöe
 
Såög8
 
›î©‹
+(c⁄° * 
Ÿhî
) const;

190 
ölöe
 
com∑ª
(c⁄° 
Såög8
& 
Ÿhî
) const;

192 
ölöe
 
boﬁ
 
›î©‹
<(c⁄° 
Såög8
& 
Ÿhî
) const;

193 
ölöe
 
boﬁ
 
›î©‹
<=(c⁄° 
Såög8
& 
Ÿhî
) const;

194 
ölöe
 
boﬁ
 
›î©‹
==(c⁄° 
Såög8
& 
Ÿhî
) const;

195 
ölöe
 
boﬁ
 
›î©‹
!=(c⁄° 
Såög8
& 
Ÿhî
) const;

196 
ölöe
 
boﬁ
 
›î©‹
>=(c⁄° 
Såög8
& 
Ÿhî
) const;

197 
ölöe
 
boﬁ
 
›î©‹
>(c⁄° 
Såög8
& 
Ÿhî
) const;

199 
ölöe
 
boﬁ
 
›î©‹
<(c⁄° * 
Ÿhî
) const;

200 
ölöe
 
boﬁ
 
›î©‹
<=(c⁄° * 
Ÿhî
) const;

201 
ölöe
 
boﬁ
 
›î©‹
==(c⁄° * 
Ÿhî
) const;

202 
ölöe
 
boﬁ
 
›î©‹
!=(c⁄° * 
Ÿhî
) const;

203 
ölöe
 
boﬁ
 
›î©‹
>=(c⁄° * 
Ÿhî
) const;

204 
ölöe
 
boﬁ
 
›î©‹
>(c⁄° * 
Ÿhî
) const;

206 
ölöe
 
›î©‹
 const *() const;

208 * 
lockBuf„r
(
size_t
 
size
);

209 
u∆ockBuf„r
();

210 
°©us_t
 
u∆ockBuf„r
(
size_t
 
size
);

214 
ssize_t
 
föd
(c⁄° * 
Ÿhî
, 
size_t
 
°¨t
 = 0) const;

216 
toLowî
();

217 
toLowî
(
size_t
 
°¨t
, size_à
numCh¨s
);

218 
toUµî
();

219 
toUµî
(
size_t
 
°¨t
, size_à
numCh¨s
);

230 
£tP©hName
(c⁄° * 
«me
);

231 
£tP©hName
(c⁄° * 
«me
, 
size_t
 
numCh¨s
);

238 
Såög8
 
gëP©hLóf
() const;

248 
Såög8
 
gëP©hDú
() const;

258 
Såög8
 
wÆkP©h
(Såög8* 
outRemaös
 = 
NULL
) const;

271 
Såög8
 
gëP©hExãnsi⁄
() const;

279 
Såög8
 
gëBa£P©h
() const;

289 
Såög8
& 
≠≥ndP©h
(c⁄° * 
Àaf
);

290 
Såög8
& 
≠≥ndP©h
(c⁄° Såög8& 
Àaf
Ë{ áµídP©h÷óf.
°rög
()); }

295 
Såög8
 
≠≥ndP©hC›y
(c⁄° * 
Àaf
) const

296 { 
Såög8
 
p
(*
this
);Ö.
≠≥ndP©h
(
Àaf
); Ö; }

297 
Såög8
 
≠≥ndP©hC›y
(c⁄° Såög8& 
Àaf
Ëc⁄° { áµídP©hC›y÷óf.
°rög
()); }

306 
Såög8
& 
c⁄vîtToResP©h
();

308 
¥iv©e
:

309 
°©us_t
 
ªÆ_≠≥nd
(c⁄° * 
Ÿhî
, 
size_t
 
numCh¨s
);

310 * 
föd_exãnsi⁄
() const;

312 c⁄° * 
mSåög
;

315 
TextOuçut
& 
›î©‹
<<(TextOuçut& 
to
, c⁄° 
Såög16
& 
vÆ
);

320 
ölöe
 
	$com∑ª_ty≥
(c⁄° 
Såög8
& 
lhs
, c⁄° Såög8& 
rhs
)

322  
lhs
.
	`com∑ª
(
rhs
);

323 
	}
}

325 
ölöe
 
	$°ri˘ly_‹dî_ty≥
(c⁄° 
Såög8
& 
lhs
, c⁄° Såög8& 
rhs
)

327  
	`com∑ª_ty≥
(
lhs
, 
rhs
) < 0;

328 
	}
}

330 
ölöe
 c⁄° * 
Såög8
::
	$°rög
() const

332  
mSåög
;

333 
	}
}

335 
ölöe
 
size_t
 
Såög8
::
	$Àngth
() const

337  
Sh¨edBuf„r
::
	`sizeFromD©a
(
mSåög
)-1;

338 
	}
}

340 
ölöe
 
size_t
 
Såög8
::
	$size
() const

342  
	`Àngth
();

343 
	}
}

345 
ölöe
 
size_t
 
Såög8
::
	$byãs
() const

347  
Sh¨edBuf„r
::
	`sizeFromD©a
(
mSåög
)-1;

348 
	}
}

350 
ölöe
 c⁄° 
Sh¨edBuf„r
* 
Såög8
::
	$sh¨edBuf„r
() const

352  
Sh¨edBuf„r
::
	`buf„rFromD©a
(
mSåög
);

353 
	}
}

355 
ölöe
 
Såög8
& Såög8::
›î©‹
=(c⁄° Såög8& 
Ÿhî
)

357 
£tTo
(
Ÿhî
);

358  *
this
;

361 
ölöe
 
Såög8
& Såög8::
›î©‹
=(c⁄° * 
Ÿhî
)

363 
£tTo
(
Ÿhî
);

364  *
this
;

367 
ölöe
 
Såög8
& Såög8::
›î©‹
+=(c⁄° Såög8& 
Ÿhî
)

369 
≠≥nd
(
Ÿhî
);

370  *
this
;

373 
ölöe
 
Såög8
 Såög8::
›î©‹
+(c⁄° Såög8& 
Ÿhî
) const

375 
Såög8
 
tmp
;

376 
tmp
 +
Ÿhî
;

377  
tmp
;

380 
ölöe
 
Såög8
& Såög8::
›î©‹
+=(c⁄° * 
Ÿhî
)

382 
≠≥nd
(
Ÿhî
);

383  *
this
;

386 
ölöe
 
Såög8
 Såög8::
›î©‹
+(c⁄° * 
Ÿhî
) const

388 
Såög8
 
tmp
;

389 
tmp
 +
Ÿhî
;

390  
tmp
;

393 
ölöe
 
Såög8
::
	$com∑ª
(c⁄° 
Såög8
& 
Ÿhî
) const

395  
	`°rcmp
(
mSåög
, 
Ÿhî
.mString);

396 
	}
}

398 
ölöe
 
boﬁ
 
Såög8
::
›î©‹
<(c⁄° Såög8& 
Ÿhî
) const

400  
°rcmp
(
mSåög
, 
Ÿhî
.mString) < 0;

403 
ölöe
 
boﬁ
 
Såög8
::
›î©‹
<=(c⁄° Såög8& 
Ÿhî
) const

405  
°rcmp
(
mSåög
, 
Ÿhî
.mString) <= 0;

408 
ölöe
 
boﬁ
 
Såög8
::
›î©‹
==(c⁄° Såög8& 
Ÿhî
) const

410  
°rcmp
(
mSåög
, 
Ÿhî
.mString) == 0;

413 
ölöe
 
boﬁ
 
Såög8
::
›î©‹
!=(c⁄° Såög8& 
Ÿhî
) const

415  
°rcmp
(
mSåög
, 
Ÿhî
.mString) != 0;

418 
ölöe
 
boﬁ
 
Såög8
::
›î©‹
>=(c⁄° Såög8& 
Ÿhî
) const

420  
°rcmp
(
mSåög
, 
Ÿhî
.mString) >= 0;

423 
ölöe
 
boﬁ
 
Såög8
::
›î©‹
>(c⁄° Såög8& 
Ÿhî
) const

425  
°rcmp
(
mSåög
, 
Ÿhî
.mString) > 0;

428 
ölöe
 
boﬁ
 
Såög8
::
›î©‹
<(c⁄° * 
Ÿhî
) const

430  
°rcmp
(
mSåög
, 
Ÿhî
) < 0;

433 
ölöe
 
boﬁ
 
Såög8
::
›î©‹
<=(c⁄° * 
Ÿhî
) const

435  
°rcmp
(
mSåög
, 
Ÿhî
) <= 0;

438 
ölöe
 
boﬁ
 
Såög8
::
›î©‹
==(c⁄° * 
Ÿhî
) const

440  
°rcmp
(
mSåög
, 
Ÿhî
) == 0;

443 
ölöe
 
boﬁ
 
Såög8
::
›î©‹
!=(c⁄° * 
Ÿhî
) const

445  
°rcmp
(
mSåög
, 
Ÿhî
) != 0;

448 
ölöe
 
boﬁ
 
Såög8
::
›î©‹
>=(c⁄° * 
Ÿhî
) const

450  
°rcmp
(
mSåög
, 
Ÿhî
) >= 0;

453 
ölöe
 
boﬁ
 
Såög8
::
›î©‹
>(c⁄° * 
Ÿhî
) const

455  
°rcmp
(
mSåög
, 
Ÿhî
) > 0;

458 
ölöe
 
Såög8
::
›î©‹
 const *() const

460  
mSåög
;

	@jni/include/include/utils/StringArray.h

20 #i‚de‡
_LIBS_UTILS_STRING_ARRAY_H


21 
	#_LIBS_UTILS_STRING_ARRAY_H


	)

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

26 
«me•a˚
 
	g™droid
 {

31 ˛as†
	cSåögAºay
 {

32 
	gpublic
:

33 
SåögAºay
();

34 
	gvútuÆ
 ~
SåögAºay
();

39 
boﬁ
 
push_back
(c⁄° * 
°r
);

44 
îa£
(
idx
);

49 
s‹t
((*
com∑ª
)(const *, const *));

54 
cmpAs˚ndögAÕha
(c⁄° * 
p°r1
, c⁄° * 
p°r2
);

59 
ölöe
 
size
(Ëc⁄° {  
	gmCuºít
; }

65 c⁄° * 
gëE¡ry
(
idx
) const {

66  ((
	gidx
Ë>(
mCuºít
)Ë? 
NULL
 : 
mAºay
[
idx
];

73 
£tE¡ry
(
idx
, c⁄° * 
°r
);

75 
	g¥iv©e
:

76 
mMax
;

77 
	gmCuºít
;

78 ** 
	gmAºay
;

	@jni/include/include/utils/SystemClock.h

17 #i‚de‡
ANDROID_UTILS_SYSTEMCLOCK_H


18 
	#ANDROID_UTILS_SYSTEMCLOCK_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
«me•a˚
 
	g™droid
 {

25 
£tCuºítTimeMûlis
(
öt64_t
 
mûlis
);

26 
öt64_t
 
u±imeMûlis
();

27 
öt64_t
 
ñ≠£dRó…ime
();

	@jni/include/include/utils/TextOutput.h

17 #i‚de‡
ANDROID_TEXTOUTPUT_H


18 
	#ANDROID_TEXTOUTPUT_H


	)

20 
	~<utûs/Eº‹s.h
>

22 
	~<°döt.h
>

23 
	~<°rög.h
>

26 
«me•a˚
 
	g™droid
 {

28 ˛as†
	cTextOuçut


30 
	gpublic
:

31 
TextOuçut
();

32 
	gvútuÆ
 ~
TextOuçut
();

34 
vútuÆ
 
°©us_t
 
¥öt
(c⁄° * 
txt
, 
size_t
 
Àn
) = 0;

35 
vútuÆ
 
moveIndít
(
dñè
) = 0;

37 ˛as†
	cBundÀ
 {

38 
	gpublic
:

39 
ölöe
 
BundÀ
(
TextOuçut
& 
to
Ë: 
mTO
—oË{Åo.
pushBundÀ
(); }

40 
	gölöe
 ~
BundÀ
(Ë{ 
	gmTO
.
p›BundÀ
(); }

41 
	g¥iv©e
:

42 
TextOuçut
& 
mTO
;

45 
vútuÆ
 
pushBundÀ
() = 0;

46 
vútuÆ
 
p›BundÀ
() = 0;

52 
TextOuçut
& 
Æog
;

55 
TextOuçut
& 
aout
;

58 
TextOuçut
& 
´º
;

60 
	gTextOuçut
& (*
	tTextOuçutM™ùFunc
)(
	tTextOuçut
&);

62 
	gTextOuçut
& 
ídl
(
TextOuçut
& 
to
);

63 
	gTextOuçut
& 
ödít
(
TextOuçut
& 
to
);

64 
	gTextOuçut
& 
dedít
(
TextOuçut
& 
to
);

66 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, c⁄° * 
	g°r
);

67 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, );

68 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, 
	gboﬁ
);

69 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, );

70 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, );

71 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, );

72 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, );

73 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, );

74 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, );

75 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, );

76 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, );

77 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, 
TextOuçutM™ùFunc
 
	gfunc
);

78 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, const *);

80 ˛as†
	cTy≥Code


82 
	gpublic
:

83 
ölöe
 
Ty≥Code
(
uöt32_t
 
code
);

84 
	gölöe
 ~
Ty≥Code
();

86 
ölöe
 
uöt32_t
 
ty≥Code
() const;

88 
	g¥iv©e
:

89 
uöt32_t
 
mCode
;

92 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, c⁄° 
	gTy≥Code
& 
	gvÆ
);

94 ˛as†
	cHexDump


96 
	gpublic
:

97 
HexDump
(c⁄° *
buf
, 
size_t
 
size
, size_à
byãsPîLöe
=16);

98 
	gölöe
 ~
HexDump
();

100 
ölöe
 
	gHexDump
& 
£tByãsPîLöe
(
size_t
 
byãsPîLöe
);

101 
ölöe
 
	gHexDump
& 
£tSögÀLöeCutoff
(
öt32_t
 
byãs
);

102 
ölöe
 
	gHexDump
& 
£tAlignmít
(
size_t
 
Æignmít
);

103 
ölöe
 
	gHexDump
& 
£tCAºayStyÀ
(
boﬁ
 
íabÀd
);

105 
ölöe
 c⁄° * 
buf„r
() const;

106 
ölöe
 
size_t
 
size
() const;

107 
ölöe
 
size_t
 
byãsPîLöe
() const;

108 
ölöe
 
öt32_t
 
sögÀLöeCutoff
() const;

109 
ölöe
 
size_t
 
Æignmít
() const;

110 
ölöe
 
boﬁ
 
ˇºayStyÀ
() const;

112 
	g¥iv©e
:

113 c⁄° * 
mBuf„r
;

114 
size_t
 
	gmSize
;

115 
size_t
 
	gmByãsPîLöe
;

116 
öt32_t
 
	gmSögÀLöeCutoff
;

117 
size_t
 
	gmAlignmít
;

118 
boﬁ
 
	gmCAºayStyÀ
;

121 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, c⁄° 
	gHexDump
& 
	gvÆ
);

126 
ölöe
 
	gTextOuçut
& 
	$ídl
(
TextOuçut
& 
to
)

128 
to
.
	`¥öt
("\n", 1);

129  
to
;

130 
	}
}

132 
ölöe
 
	gTextOuçut
& 
	$ödít
(
TextOuçut
& 
to
)

134 
to
.
	`moveIndít
(1);

135  
to
;

136 
	}
}

138 
ölöe
 
	gTextOuçut
& 
	$dedít
(
TextOuçut
& 
to
)

140 
to
.
	`moveIndít
(-1);

141  
to
;

142 
	}
}

144 
ölöe
 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, c⁄° * 
	g°r
)

146 
	gto
.
¥öt
(
°r
, 
°æí
(str));

147  
	gto
;

150 
ölöe
 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, 
	gc
)

152 
	gto
.
¥öt
(&
c
, 1);

153  
	gto
;

156 
ölöe
 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, 
TextOuçutM™ùFunc
 
	gfunc
)

158  (*
	gfunc
)(
	gto
);

161 
ölöe
 
	gTy≥Code
::
	$Ty≥Code
(
uöt32_t
 
code
Ë: 
	$mCode
(
code
Ë{ 
	}
}

162 
ölöe
 
Ty≥Code
::~
	$Ty≥Code
(Ë{ 
	}
}

163 
ölöe
 
uöt32_t
 
Ty≥Code
::
	$ty≥Code
(Ëc⁄° {  
mCode
; 
	}
}

165 
ölöe
 
	gHexDump
::~
	$HexDump
(Ë{ 
	}
}

167 
ölöe
 
HexDump
& HexDump::
	$£tByãsPîLöe
(
size_t
 
byãsPîLöe
) {

168 
mByãsPîLöe
 = 
byãsPîLöe
;  *
this
;

169 
	}
}

170 
ölöe
 
	gHexDump
& HexDump::
	$£tSögÀLöeCutoff
(
öt32_t
 
byãs
) {

171 
mSögÀLöeCutoff
 = 
byãs
;  *
this
;

172 
	}
}

173 
ölöe
 
	gHexDump
& HexDump::
	$£tAlignmít
(
size_t
 
Æignmít
) {

174 
mAlignmít
 = 
Æignmít
;  *
this
;

175 
	}
}

176 
ölöe
 
	gHexDump
& HexDump::
	$£tCAºayStyÀ
(
boﬁ
 
íabÀd
) {

177 
mCAºayStyÀ
 = 
íabÀd
;  *
this
;

178 
	}
}

180 
ölöe
 c⁄° * 
	gHexDump
::
	$buf„r
(Ëc⁄° {  
mBuf„r
; 
	}
}

181 
ölöe
 
size_t
 
	gHexDump
::
	$size
(Ëc⁄° {  
mSize
; 
	}
}

182 
ölöe
 
size_t
 
	gHexDump
::
	$byãsPîLöe
(Ëc⁄° {  
mByãsPîLöe
; 
	}
}

183 
ölöe
 
öt32_t
 
	gHexDump
::
	$sögÀLöeCutoff
(Ëc⁄° {  
mSögÀLöeCutoff
; 
	}
}

184 
ölöe
 
size_t
 
	gHexDump
::
	$Æignmít
(Ëc⁄° {  
mAlignmít
; 
	}
}

185 
ölöe
 
boﬁ
 
	gHexDump
::
	$ˇºayStyÀ
(Ëc⁄° {  
mCAºayStyÀ
; 
	}
}

	@jni/include/include/utils/Timers.h

20 #i‚de‡
_LIBS_UTILS_TIMERS_H


21 
	#_LIBS_UTILS_TIMERS_H


	)

23 
	~<°döt.h
>

24 
	~<sys/ty≥s.h
>

25 
	~<sys/time.h
>

30 #ifde‡
__˝lu•lus


34 
öt64_t
 
	tn£cs_t
;

36 
ölöe
 
n£cs_t
 
£c⁄ds_to_«no£c⁄ds
“£cs_à
£cs
)

38  
£cs
*1000000000;

41 
ölöe
 
n£cs_t
 
mûli£c⁄ds_to_«no£c⁄ds
“£cs_à
£cs
)

43  
£cs
*1000000;

46 
ölöe
 
n£cs_t
 
mi¸o£c⁄ds_to_«no£c⁄ds
“£cs_à
£cs
)

48  
£cs
*1000;

51 
ölöe
 
n£cs_t
 
«no£c⁄ds_to_£c⁄ds
“£cs_à
£cs
)

53  
£cs
/1000000000;

56 
ölöe
 
n£cs_t
 
«no£c⁄ds_to_mûli£c⁄ds
“£cs_à
£cs
)

58  
£cs
/1000000;

61 
ölöe
 
n£cs_t
 
«no£c⁄ds_to_mi¸o£c⁄ds
“£cs_à
£cs
)

63  
£cs
/1000;

66 
ölöe
 
n£cs_t
 
s2ns
“£cs_à
v
Ë{ 
£c⁄ds_to_«no£c⁄ds
(v);}

67 
ölöe
 
n£cs_t
 
ms2ns
“£cs_à
v
Ë{ 
mûli£c⁄ds_to_«no£c⁄ds
(v);}

68 
ölöe
 
n£cs_t
 
us2ns
“£cs_à
v
Ë{ 
mi¸o£c⁄ds_to_«no£c⁄ds
(v);}

69 
ölöe
 
n£cs_t
 
ns2s
“£cs_à
v
Ë{ 
«no£c⁄ds_to_£c⁄ds
(v);}

70 
ölöe
 
n£cs_t
 
ns2ms
“£cs_à
v
Ë{ 
«no£c⁄ds_to_mûli£c⁄ds
(v);}

71 
ölöe
 
n£cs_t
 
ns2us
“£cs_à
v
Ë{ 
«no£c⁄ds_to_mi¸o£c⁄ds
(v);}

73 
ölöe
 
n£cs_t
 
£c⁄ds
“£cs_à
v
Ë{  
s2ns
(v); }

74 
ölöe
 
n£cs_t
 
mûli£c⁄ds
“£cs_à
v
Ë{  
ms2ns
(v); }

75 
ölöe
 
n£cs_t
 
mi¸o£c⁄ds
“£cs_à
v
Ë{  
us2ns
(v); }

78 
SYSTEM_TIME_REALTIME
 = 0,

79 
SYSTEM_TIME_MONOTONIC
 = 1,

80 
SYSTEM_TIME_PROCESS
 = 2,

81 
SYSTEM_TIME_THREAD
 = 3

85 #ifde‡
__˝lu•lus


86 
n£cs_t
 
sy°emTime
(
˛ock
 = 
SYSTEM_TIME_MONOTONIC
);

88 
n£cs_t
 
sy°emTime
(
˛ock
);

91 #ifde‡
__˝lu•lus


98 #ifde‡
__˝lu•lus


100 
«me•a˚
 
™droid
 {

106 ˛as†
	cDuøti⁄Timî
 {

107 
public
:

108 
Duøti⁄Timî
() {}

109 ~
Duøti⁄Timî
() {}

112 
°¨t
();

114 
°›
();

116 
duøti⁄U£cs
() const;

120 
subåa˘TimevÆs
(c⁄° 
timevÆ
* 
±v1
,

121 c⁄° 
timevÆ
* 
±v2
);

124 
addToTimevÆ
(
timevÆ
* 
±v
, 
u£c
);

126 
¥iv©e
:

127 
timevÆ
 
mSèπWhí
;

128 
timevÆ
 
mSt›Whí
;

	@jni/include/include/utils/TypeHelpers.h

17 #i‚de‡
ANDROID_TYPE_HELPERS_H


18 
	#ANDROID_TYPE_HELPERS_H


	)

20 
	~<√w
>

21 
	~<°döt.h
>

22 
	~<°rög.h
>

23 
	~<sys/ty≥s.h
>

27 
«me•a˚
 
	g™droid
 {

33 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	såaô_åivül_˘‹
 {Énum { 
	gvÆue
 = 
Ál£
 }; };

34 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	såaô_åivül_dt‹
 {Énum { 
	gvÆue
 = 
Ál£
 }; };

35 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	såaô_åivül_c›y
 {Énum { 
	gvÆue
 = 
Ál£
 }; };

36 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	såaô_åivül_move
 {Énum { 
	gvÆue
 = 
Ál£
 }; };

37 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	såaô_poöãr
 {Énum { 
	gvÆue
 = 
Ál£
 }; };

38 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	gåaô_poöãr
<T*> {Énum { 
	gvÆue
 = 
åue
 }; };

41 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
˛ass
 
	g•
;

42 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	gåaô_åivül_move
< 
	g•
<T> >{

43 íum { 
	gvÆue
 = 
åue
 };

47 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
˛ass
 
	gwp
;

48 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	gåaô_åivül_move
< 
	gwp
<T> >{

49 íum { 
	gvÆue
 = 
åue
 };

52 
	gãm∂©e
 <
ty≥«me
 
	gTYPE
>

53 
	såaôs
 {

56 
	gis_poöãr
 = 
åaô_poöãr
<
TYPE
>::
vÆue
,

58 
	ghas_åivül_˘‹
 = 
is_poöãr
 || 
åaô_åivül_˘‹
<
TYPE
>::
vÆue
,

60 
	ghas_åivül_dt‹
 = 
is_poöãr
 || 
åaô_åivül_dt‹
<
TYPE
>::
vÆue
,

62 
	ghas_åivül_c›y
 = 
is_poöãr
 || 
åaô_åivül_c›y
<
TYPE
>::
vÆue
,

64 
	ghas_åivül_move
 = 
is_poöãr
 || 
åaô_åivül_move
<
TYPE
>::
vÆue


68 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

69 
	saggªg©e_åaôs
 {

71 
	gis_poöãr
 = 
Ál£
,

72 
	ghas_åivül_˘‹
 =

73 
åaôs
<
T
>::
has_åivül_˘‹
 &&Åøôs<
U
>::has_trivial_ctor,

74 
	ghas_åivül_dt‹
 =

75 
åaôs
<
T
>::
has_åivül_dt‹
 &&Åøôs<
U
>::has_trivial_dtor,

76 
	ghas_åivül_c›y
 =

77 
åaôs
<
T
>::
has_åivül_c›y
 &&Åøôs<
U
>::has_trivial_copy,

78 
	ghas_åivül_move
 =

79 
åaôs
<
T
>::
has_åivül_move
 &&Åøôs<
U
>::has_trivial_move

83 
	#ANDROID_BASIC_TYPES_TRAITS
–
T
 ) \

84 
ãm∂©e
<> 
åaô_åivül_˘‹
< 
T
 > {Énum { 
vÆue
 = 
åue
 }; }; \

85 
ãm∂©e
<> 
åaô_åivül_dt‹
< 
T
 > {Énum { 
vÆue
 = 
åue
 }; }; \

86 
ãm∂©e
<> 
åaô_åivül_c›y
< 
T
 > {Énum { 
vÆue
 = 
åue
 }; }; \

87 
ãm∂©e
<> 
åaô_åivül_move
< 
T
 > {Énum { 
vÆue
 = 
åue
 }; };

	)

95 
ANDROID_BASIC_TYPES_TRAITS
( )

96 
ANDROID_BASIC_TYPES_TRAITS
–
boﬁ
 )

97 
ANDROID_BASIC_TYPES_TRAITS
( )

98 
ANDROID_BASIC_TYPES_TRAITS
( )

99 
ANDROID_BASIC_TYPES_TRAITS
( )

100 
ANDROID_BASIC_TYPES_TRAITS
( )

101 
ANDROID_BASIC_TYPES_TRAITS
( )

102 
ANDROID_BASIC_TYPES_TRAITS
( )

103 
ANDROID_BASIC_TYPES_TRAITS
( )

104 
ANDROID_BASIC_TYPES_TRAITS
( )

105 
ANDROID_BASIC_TYPES_TRAITS
( )

106 
ANDROID_BASIC_TYPES_TRAITS
( )

107 
ANDROID_BASIC_TYPES_TRAITS
( )

108 
ANDROID_BASIC_TYPES_TRAITS
( )

117 
	gãm∂©e
<
ty≥«me
 
	gTYPE
> 
ölöe


118 
°ri˘ly_‹dî_ty≥
(c⁄° 
TYPE
& 
lhs
, c⁄° TYPE& 
rhs
) {

119  (
	glhs
 < 
	grhs
) ? 1 : 0;

122 
	gãm∂©e
<
ty≥«me
 
	gTYPE
> 
ölöe


123 
com∑ª_ty≥
(c⁄° 
TYPE
& 
lhs
, c⁄° TYPE& 
rhs
) {

124  
°ri˘ly_‹dî_ty≥
(
rhs
, 
lhs
) - strictly_order_type(lhs,Ñhs);

131 
	gãm∂©e
<
ty≥«me
 
	gTYPE
> 
ölöe


132 
c⁄°ru˘_ty≥
(
TYPE
* 
p
, 
size_t
 
n
) {

133 i‡(!
	gåaôs
<
	gTYPE
>::
has_åivül_˘‹
) {

134 
n
--) {

135 
√w
(
p
++Ë
TYPE
;

140 
	gãm∂©e
<
ty≥«me
 
	gTYPE
> 
ölöe


141 
de°roy_ty≥
(
TYPE
* 
p
, 
size_t
 
n
) {

142 i‡(!
	gåaôs
<
	gTYPE
>::
has_åivül_dt‹
) {

143 
n
--) {

144 
p
->~
TYPE
();

145 
	gp
++;

150 
	gãm∂©e
<
ty≥«me
 
	gTYPE
> 
ölöe


151 
c›y_ty≥
(
TYPE
* 
d
, c⁄° TYPE* 
s
, 
size_t
 
n
) {

152 i‡(!
	gåaôs
<
	gTYPE
>::
has_åivül_c›y
) {

153 
n
--) {

154 
√w
(
d
Ë
TYPE
(*
s
);

155 
	gd
++, 
	gs
++;

158 
mem˝y
(
d
,
s
,
n
*(
TYPE
));

162 
	gãm∂©e
<
ty≥«me
 
	gTYPE
> 
ölöe


163 
•œt_ty≥
(
TYPE
* 
whîe
, c⁄° TYPE* 
wh©
, 
size_t
 
n
) {

164 i‡(!
	gåaôs
<
	gTYPE
>::
has_åivül_c›y
) {

165 
n
--) {

166 
√w
(
whîe
Ë
TYPE
(*
wh©
);

167 
	gwhîe
++;

170 
	gn
--) {

171 *
	gwhîe
++ = *
wh©
;

176 
	gãm∂©e
<
ty≥«me
 
	gTYPE
> 
ölöe


177 
move_f‹w¨d_ty≥
(
TYPE
* 
d
, c⁄° TYPE* 
s
, 
size_t
 
n
 = 1) {

178 i‡((
åaôs
<
TYPE
>::
has_åivül_dt‹
 &&Åøôs<TYPE>::
has_åivül_c›y
)

179 || 
åaôs
<
TYPE
>::
has_åivül_move
)

181 
memmove
(
d
,
s
,
n
*(
TYPE
));

183 
	gd
 +
n
;

184 
	gs
 +
n
;

185 
	gn
--) {

186 --
	gd
, --
	gs
;

187 i‡(!
	gåaôs
<
	gTYPE
>::
has_åivül_c›y
) {

188 
√w
(
d
Ë
TYPE
(*
s
);

190 *
	gd
 = *
s
;

192 i‡(!
	gåaôs
<
	gTYPE
>::
has_åivül_dt‹
) {

193 
s
->~
TYPE
();

199 
	gãm∂©e
<
ty≥«me
 
	gTYPE
> 
ölöe


200 
move_backw¨d_ty≥
(
TYPE
* 
d
, c⁄° TYPE* 
s
, 
size_t
 
n
 = 1) {

201 i‡((
åaôs
<
TYPE
>::
has_åivül_dt‹
 &&Åøôs<TYPE>::
has_åivül_c›y
)

202 || 
åaôs
<
TYPE
>::
has_åivül_move
)

204 
memmove
(
d
,
s
,
n
*(
TYPE
));

206 
	gn
--) {

207 i‡(!
	gåaôs
<
	gTYPE
>::
has_åivül_c›y
) {

208 
√w
(
d
Ë
TYPE
(*
s
);

210 *
	gd
 = *
s
;

212 i‡(!
	gåaôs
<
	gTYPE
>::
has_åivül_dt‹
) {

213 
s
->~
TYPE
();

215 
	gd
++, 
	gs
++;

227 
	gãm∂©e
 <
ty≥«me
 
	gKEY
,Åy≥«mê
	gVALUE
>

228 
	skey_vÆue_∑ú_t
 {

229 
KEY
 
	gkey
;

230 
VALUE
 
	gvÆue
;

231 
key_vÆue_∑ú_t
() { }

232 
key_vÆue_∑ú_t
(c⁄° key_vÆue_∑ú_t& 
o
Ë: 
key
(o.key), 
vÆue
(o.value) { }

233 
key_vÆue_∑ú_t
(c⁄° 
KEY
& 
k
, c⁄° 
VALUE
& 
v
Ë: 
key
(k), 
vÆue
(v) { }

234 
key_vÆue_∑ú_t
(c⁄° 
KEY
& 
k
Ë: 
key
(k) { }

235 
ölöe
 
boﬁ
 
›î©‹
 < (c⁄° 
key_vÆue_∑ú_t
& 
o
) const {

236  
°ri˘ly_‹dî_ty≥
(
key
, 
o
.key);

240 
	gãm∂©e
<>

241 
	gãm∂©e
 <
ty≥«me
 
	gK
,Åy≥«mê
	gV
>

242 
	gåaô_åivül_˘‹
< 
	gkey_vÆue_∑ú_t
<
	gK
, 
	gV
> >

243 {Énum { 
	gvÆue
 = 
aggªg©e_åaôs
<
K
,
	gV
>::
has_åivül_˘‹
 }; };

244 
	gãm∂©e
<>

245 
	gãm∂©e
 <
ty≥«me
 
	gK
,Åy≥«mê
	gV
>

246 
	gåaô_åivül_dt‹
< 
	gkey_vÆue_∑ú_t
<
	gK
, 
	gV
> >

247 {Énum { 
	gvÆue
 = 
aggªg©e_åaôs
<
K
,
	gV
>::
has_åivül_dt‹
 }; };

248 
	gãm∂©e
<>

249 
	gãm∂©e
 <
ty≥«me
 
	gK
,Åy≥«mê
	gV
>

250 
	gåaô_åivül_c›y
< 
	gkey_vÆue_∑ú_t
<
	gK
, 
	gV
> >

251 {Énum { 
	gvÆue
 = 
aggªg©e_åaôs
<
K
,
	gV
>::
has_åivül_c›y
 }; };

252 
	gãm∂©e
<>

253 
	gãm∂©e
 <
ty≥«me
 
	gK
,Åy≥«mê
	gV
>

254 
	gåaô_åivül_move
< 
	gkey_vÆue_∑ú_t
<
	gK
, 
	gV
> >

255 {Énum { 
	gvÆue
 = 
aggªg©e_åaôs
<
K
,
	gV
>::
has_åivül_move
 }; };

	@jni/include/include/utils/Vector.h

17 #i‚de‡
ANDROID_VECTOR_H


18 
	#ANDROID_VECTOR_H


	)

20 
	~<√w
>

21 
	~<°döt.h
>

22 
	~<sys/ty≥s.h
>

24 
	~<utûs/Log.h
>

25 
	~<utûs/Ve˘‹Im∂.h
>

26 
	~<utûs/Ty≥Hñ≥rs.h
>

30 
«me•a˚
 
	g™droid
 {

38 
	gãm∂©e
 <
˛ass
 
	gTYPE
>

39 ˛as†
	cVe˘‹
 : 
¥iv©e
 
Ve˘‹Im∂


41 
public
:

42 
TYPE
 
	tvÆue_ty≥
;

48 
Ve˘‹
();

49 
Ve˘‹
(c⁄° Ve˘‹<
TYPE
>& 
rhs
);

50 
	gvútuÆ
 ~
Ve˘‹
();

53 c⁄° 
	gVe˘‹
<
	gTYPE
>& 
	g›î©‹
 = (c⁄° 
Ve˘‹
<
TYPE
>& 
rhs
) const;

54 
	gVe˘‹
<
	gTYPE
>& 
	g›î©‹
 = (c⁄° 
Ve˘‹
<
TYPE
>& 
rhs
);

60 
ölöe
 
˛ór
(Ë{ 
	gVe˘‹Im∂
::clear(); }

67 
ölöe
 
size_t
 
size
(Ëc⁄° {  
	gVe˘‹Im∂
::size(); }

69 
ölöe
 
boﬁ
 
isEm±y
(Ëc⁄° {  
	gVe˘‹Im∂
::isEmpty(); }

71 
ölöe
 
size_t
 
ˇ∑côy
(Ëc⁄° {  
	gVe˘‹Im∂
::capacity(); }

73 
ölöe
 
ssize_t
 
£tC≠acôy
(
size_t
 
size
Ë{  
	gVe˘‹Im∂
::setCapacity(size); }

80 
ölöe
 c⁄° 
TYPE
* 
¨øy
() const;

82 
TYPE
* 
edôAºay
();

89 
ölöe
 c⁄° 
	gTYPE
& 
	g›î©‹
 [] (
size_t
 
	gödex
) const;

91 
ölöe
 c⁄° 
	gTYPE
& 
ôemAt
(
size_t
 
ödex
) const;

93 c⁄° 
	gTYPE
& 
t›
() const;

95 c⁄° 
	gTYPE
& 
múr‹IãmAt
(
ssize_t
 
ödex
) const;

102 
	gTYPE
& 
edôIãmAt
(
size_t
 
ödex
);

104 
	gTYPE
& 
edôT›
();

111 
ssize_t
 
ö£πVe˘‹At
(c⁄° 
Ve˘‹
<
TYPE
>& 
ve˘‹
, 
size_t
 
ödex
);

114 
ssize_t
 
≠≥ndVe˘‹
(c⁄° 
Ve˘‹
<
TYPE
>& 
ve˘‹
);

122 
ölöe
 
ssize_t
 
ö£πAt
(
size_t
 
ödex
, size_à
numIãms
 = 1);

124 
ssize_t
 
ö£πAt
(c⁄° 
TYPE
& 
¥ŸŸy≥_ôem
, 
size_t
 
ödex
, size_à
numIãms
 = 1);

126 
ölöe
 
p›
();

128 
ölöe
 
push
();

130 
push
(c⁄° 
TYPE
& 
ôem
);

132 
ölöe
 
ssize_t
 
add
();

134 
ssize_t
 
add
(c⁄° 
TYPE
& 
ôem
);

136 
ölöe
 
ssize_t
 
ª∂a˚At
(
size_t
 
ödex
);

138 
ssize_t
 
ª∂a˚At
(c⁄° 
TYPE
& 
ôem
, 
size_t
 
ödex
);

145 
ölöe
 
ssize_t
 
ªmoveIãmsAt
(
size_t
 
ödex
, size_à
cou¡
 = 1);

147 
ölöe
 
ssize_t
 
ªmoveAt
(
size_t
 
ödex
Ë{  
ªmoveIãmsAt
(index); }

153 (*
	gcom∑r_t
)(c⁄° 
	tTYPE
* 
	tlhs
, c⁄° TYPE* 
	trhs
);

154 (*
	gcom∑r_r_t
)(c⁄° 
	tTYPE
* 
	tlhs
, c⁄° TYPE* 
	trhs
, * 
	t°©e
);

156 
ölöe
 
°©us_t
 
s‹t
(
com∑r_t
 
cmp
);

157 
ölöe
 
°©us_t
 
s‹t
(
com∑r_r_t
 
cmp
, * 
°©e
);

159 
	g¥Ÿe˘ed
:

160 
vútuÆ
 
do_c⁄°ru˘
(* 
°‹age
, 
size_t
 
num
) const;

161 
vútuÆ
 
do_de°roy
(* 
°‹age
, 
size_t
 
num
) const;

162 
vútuÆ
 
do_c›y
(* 
de°
, c⁄° * 
‰om
, 
size_t
 
num
) const;

163 
vútuÆ
 
do_•œt
(* 
de°
, c⁄° * 
ôem
, 
size_t
 
num
) const;

164 
vútuÆ
 
do_move_f‹w¨d
(* 
de°
, c⁄° * 
‰om
, 
size_t
 
num
) const;

165 
vútuÆ
 
do_move_backw¨d
(* 
de°
, c⁄° * 
‰om
, 
size_t
 
num
) const;

173 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


174 
	gVe˘‹
<
	gTYPE
>::
	$Ve˘‹
()

175 : 
	`Ve˘‹Im∂
((
TYPE
),

176 ((
åaôs
<
TYPE
>::
has_åivül_˘‹
 ? 
HAS_TRIVIAL_CTOR
 : 0)

177 |(
åaôs
<
TYPE
>::
has_åivül_dt‹
 ? 
HAS_TRIVIAL_DTOR
 : 0)

178 |(
åaôs
<
TYPE
>::
has_åivül_c›y
 ? 
HAS_TRIVIAL_COPY
 : 0))

181 
	}
}

183 
ãm∂©e
<
˛ass
 
TYPE
> 
ölöe


184 
Ve˘‹
<
TYPE
>::Ve˘‹(c⁄° Ve˘‹<TYPE>& 
rhs
)

185 : 
	$Ve˘‹Im∂
(
rhs
) {

186 
	}
}

188 
ãm∂©e
<
˛ass
 
TYPE
> 
ölöe


189 
Ve˘‹
<
TYPE
>::~
	$Ve˘‹
() {

190 
	`föish_ve˘‹
();

191 
	}
}

193 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


194 
	gVe˘‹
<
	gTYPE
>& Ve˘‹<TYPE>::
›î©‹
 = (c⁄° 
Ve˘‹
<
TYPE
>& 
rhs
) {

195 
Ve˘‹Im∂
::
›î©‹
 = (
rhs
);

196  *
	gthis
;

199 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


200 c⁄° 
	gVe˘‹
<
	gTYPE
>& Ve˘‹<TYPE>::
›î©‹
 = (c⁄° 
Ve˘‹
<
TYPE
>& 
rhs
) const {

201 
Ve˘‹Im∂
::
›î©‹
 = (
rhs
);

202  *
	gthis
;

205 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


206 c⁄° 
TYPE
* 
	gVe˘‹
<
	gTYPE
>::
	$¨øy
() const {

207  
°©ic_ˇ°
<c⁄° 
TYPE
 *>(
	`¨øyIm∂
());

208 
	}
}

210 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


211 
TYPE
* 
	gVe˘‹
<
	gTYPE
>::
	$edôAºay
() {

212  
°©ic_ˇ°
<
TYPE
 *>(
	`edôAºayIm∂
());

213 
	}
}

216 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


217 c⁄° 
	gTYPE
& 
	gVe˘‹
<TYPE>::
›î©‹
[](
size_t
 
ödex
) const {

218 
LOG_FATAL_IF
–
ödex
>=
size
(),

219 "ôemAt: index %d i†∑° sizê%d", ()
ödex
, ()
size
() );

220  *(
¨øy
(Ë+ 
	gödex
);

223 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


224 c⁄° 
	gTYPE
& 
	gVe˘‹
<TYPE>::
	$ôemAt
(
size_t
 
ödex
) const {

225  
›î©‹
[](
ödex
);

226 
	}
}

228 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


229 c⁄° 
	gTYPE
& 
	gVe˘‹
<TYPE>::
	$múr‹IãmAt
(
ssize_t
 
ödex
) const {

230 
	`LOG_FATAL_IF
–(
ödex
>0 ? index : -ödex)>=
	`size
(),

232 ()
ödex
, ()
	`size
() );

233  *(
	`¨øy
(Ë+ ((
ödex
<0Ë? (
	`size
()-index) : index));

234 
	}
}

236 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


237 c⁄° 
	gTYPE
& 
	gVe˘‹
<TYPE>::
	$t›
() const {

238  *(
	`¨øy
(Ë+ 
	`size
() - 1);

239 
	}
}

241 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


242 
	gTYPE
& 
	gVe˘‹
<TYPE>::
	$edôIãmAt
(
size_t
 
ödex
) {

243  *–
°©ic_ˇ°
<
TYPE
 *>(
	`edôIãmLoˇti⁄
(
ödex
)) );

244 
	}
}

246 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


247 
	gTYPE
& 
	gVe˘‹
<TYPE>::
	$edôT›
() {

248  *–
°©ic_ˇ°
<
TYPE
 *>(
	`edôIãmLoˇti⁄
(
	`size
()-1)) );

249 
	}
}

251 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


252 
ssize_t
 
	gVe˘‹
<
	gTYPE
>::
ö£πVe˘‹At
(c⁄° 
Ve˘‹
<
TYPE
>& 
ve˘‹
, 
size_t
 
ödex
) {

253  
	gVe˘‹Im∂
::
ö£πVe˘‹At
(
ªöãΩªt_ˇ°
<c⁄° 
Ve˘‹Im∂
&>(
ve˘‹
), 
ödex
);

256 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


257 
ssize_t
 
	gVe˘‹
<
	gTYPE
>::
≠≥ndVe˘‹
(c⁄° 
Ve˘‹
<
TYPE
>& 
ve˘‹
) {

258  
Ve˘‹Im∂
::
≠≥ndVe˘‹
(
ªöãΩªt_ˇ°
<c⁄° Ve˘‹Im∂&>(
ve˘‹
));

261 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


262 
ssize_t
 
	gVe˘‹
<
	gTYPE
>::
	$ö£πAt
(c⁄° 
TYPE
& 
ôem
, 
size_t
 
ödex
, size_à
numIãms
) {

263  
Ve˘‹Im∂
::
	`ö£πAt
(&
ôem
, 
ödex
, 
numIãms
);

264 
	}
}

266 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


267 
	gVe˘‹
<
	gTYPE
>::
	$push
(c⁄° 
TYPE
& 
ôem
) {

268  
Ve˘‹Im∂
::
	`push
(&
ôem
);

269 
	}
}

271 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


272 
ssize_t
 
	gVe˘‹
<
	gTYPE
>::
	$add
(c⁄° 
TYPE
& 
ôem
) {

273  
Ve˘‹Im∂
::
	`add
(&
ôem
);

274 
	}
}

276 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


277 
ssize_t
 
	gVe˘‹
<
	gTYPE
>::
	$ª∂a˚At
(c⁄° 
TYPE
& 
ôem
, 
size_t
 
ödex
) {

278  
Ve˘‹Im∂
::
	`ª∂a˚At
(&
ôem
, 
ödex
);

279 
	}
}

281 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


282 
ssize_t
 
	gVe˘‹
<
	gTYPE
>::
	$ö£πAt
(
size_t
 
ödex
, size_à
numIãms
) {

283  
Ve˘‹Im∂
::
	`ö£πAt
(
ödex
, 
numIãms
);

284 
	}
}

286 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


287 
	gVe˘‹
<
	gTYPE
>::
	$p›
() {

288 
Ve˘‹Im∂
::
	`p›
();

289 
	}
}

291 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


292 
	gVe˘‹
<
	gTYPE
>::
	$push
() {

293 
Ve˘‹Im∂
::
	`push
();

294 
	}
}

296 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


297 
ssize_t
 
	gVe˘‹
<
	gTYPE
>::
	$add
() {

298  
Ve˘‹Im∂
::
	`add
();

299 
	}
}

301 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


302 
ssize_t
 
	gVe˘‹
<
	gTYPE
>::
	$ª∂a˚At
(
size_t
 
ödex
) {

303  
Ve˘‹Im∂
::
	`ª∂a˚At
(
ödex
);

304 
	}
}

306 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


307 
ssize_t
 
	gVe˘‹
<
	gTYPE
>::
	$ªmoveIãmsAt
(
size_t
 
ödex
, size_à
cou¡
) {

308  
Ve˘‹Im∂
::
	`ªmoveIãmsAt
(
ödex
, 
cou¡
);

309 
	}
}

311 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


312 
°©us_t
 
	gVe˘‹
<
	gTYPE
>::
s‹t
(
Ve˘‹
<
TYPE
>::
com∑r_t
 
cmp
) {

313  
Ve˘‹Im∂
::
s‹t
((Ve˘‹Im∂::
com∑r_t
)
cmp
);

316 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


317 
°©us_t
 
	gVe˘‹
<
	gTYPE
>::
s‹t
(
Ve˘‹
<
TYPE
>::
com∑r_r_t
 
cmp
, * 
°©e
) {

318  
	gVe˘‹Im∂
::
s‹t
((
Ve˘‹Im∂
::
com∑r_r_t
)
cmp
, 
°©e
);

323 
	gãm∂©e
<
˛ass
 
	gTYPE
>

324 
	gVe˘‹
<
	gTYPE
>::
	$do_c⁄°ru˘
(* 
°‹age
, 
size_t
 
num
) const {

325 
	`c⁄°ru˘_ty≥
–
ªöãΩªt_ˇ°
<
TYPE
*>(
°‹age
), 
num
 );

326 
	}
}

328 
	gãm∂©e
<
˛ass
 
	gTYPE
>

329 
	gVe˘‹
<
	gTYPE
>::
	$do_de°roy
(* 
°‹age
, 
size_t
 
num
) const {

330 
	`de°roy_ty≥
–
ªöãΩªt_ˇ°
<
TYPE
*>(
°‹age
), 
num
 );

331 
	}
}

333 
	gãm∂©e
<
˛ass
 
	gTYPE
>

334 
	gVe˘‹
<
	gTYPE
>::
	$do_c›y
(* 
de°
, c⁄° * 
‰om
, 
size_t
 
num
) const {

335 
	`c›y_ty≥
–
ªöãΩªt_ˇ°
<
TYPE
*>(
de°
),ÑeöãΩªt_ˇ°<c⁄° TYPE*>(
‰om
), 
num
 );

336 
	}
}

338 
	gãm∂©e
<
˛ass
 
	gTYPE
>

339 
	gVe˘‹
<
	gTYPE
>::
	$do_•œt
(* 
de°
, c⁄° * 
ôem
, 
size_t
 
num
) const {

340 
	`•œt_ty≥
–
ªöãΩªt_ˇ°
<
TYPE
*>(
de°
),ÑeöãΩªt_ˇ°<c⁄° TYPE*>(
ôem
), 
num
 );

341 
	}
}

343 
	gãm∂©e
<
˛ass
 
	gTYPE
>

344 
	gVe˘‹
<
	gTYPE
>::
	$do_move_f‹w¨d
(* 
de°
, c⁄° * 
‰om
, 
size_t
 
num
) const {

345 
	`move_f‹w¨d_ty≥
–
ªöãΩªt_ˇ°
<
TYPE
*>(
de°
),ÑeöãΩªt_ˇ°<c⁄° TYPE*>(
‰om
), 
num
 );

346 
	}
}

348 
	gãm∂©e
<
˛ass
 
	gTYPE
>

349 
	gVe˘‹
<
	gTYPE
>::
	$do_move_backw¨d
(* 
de°
, c⁄° * 
‰om
, 
size_t
 
num
) const {

350 
	`move_backw¨d_ty≥
–
ªöãΩªt_ˇ°
<
TYPE
*>(
de°
),ÑeöãΩªt_ˇ°<c⁄° TYPE*>(
‰om
), 
num
 );

351 
	}
}

	@jni/include/include/utils/VectorImpl.h

17 #i‚de‡
ANDROID_VECTOR_IMPL_H


18 
	#ANDROID_VECTOR_IMPL_H


	)

20 
	~<as£π.h
>

21 
	~<°döt.h
>

22 
	~<sys/ty≥s.h
>

23 
	~<utûs/Eº‹s.h
>

29 
«me•a˚
 
	g™droid
 {

40 ˛as†
	cVe˘‹Im∂


42 
	gpublic
:

44 
HAS_TRIVIAL_CTOR
 = 0x00000001,

45 
	gHAS_TRIVIAL_DTOR
 = 0x00000002,

46 
	gHAS_TRIVIAL_COPY
 = 0x00000004,

49 
Ve˘‹Im∂
(
size_t
 
ôemSize
, 
uöt32_t
 
Êags
);

50 
Ve˘‹Im∂
(c⁄° Ve˘‹Im∂& 
rhs
);

51 
	gvútuÆ
 ~
Ve˘‹Im∂
();

54 
föish_ve˘‹
();

56 
	gVe˘‹Im∂
& 
	g›î©‹
 = (c⁄° 
Ve˘‹Im∂
& 
rhs
);

59 
ölöe
 c⁄° * 
¨øyIm∂
(Ëc⁄° {  
	gmSt‹age
; }

60 * 
edôAºayIm∂
();

63 
ölöe
 
size_t
 
size
(Ëc⁄° {  
	gmCou¡
; }

64 
ölöe
 
boﬁ
 
isEm±y
(Ëc⁄° {  
	gmCou¡
 == 0; }

65 
size_t
 
ˇ∑côy
() const;

66 
ssize_t
 
£tC≠acôy
(
size_t
 
size
);

69 
ssize_t
 
ö£πVe˘‹At
(c⁄° 
Ve˘‹Im∂
& 
ve˘‹
, 
size_t
 
ödex
);

70 
ssize_t
 
≠≥ndVe˘‹
(c⁄° 
Ve˘‹Im∂
& 
ve˘‹
);

73 
ssize_t
 
ö£πAt
(
size_t
 
whîe
, size_à
numIãms
 = 1);

74 
ssize_t
 
ö£πAt
(c⁄° * 
ôem
, 
size_t
 
whîe
, size_à
numIãms
 = 1);

75 
p›
();

76 
push
();

77 
push
(c⁄° * 
ôem
);

78 
ssize_t
 
add
();

79 
ssize_t
 
add
(c⁄° * 
ôem
);

80 
ssize_t
 
ª∂a˚At
(
size_t
 
ödex
);

81 
ssize_t
 
ª∂a˚At
(c⁄° * 
ôem
, 
size_t
 
ödex
);

84 
ssize_t
 
ªmoveIãmsAt
(
size_t
 
ödex
, size_à
cou¡
 = 1);

85 
˛ór
();

87 c⁄° * 
ôemLoˇti⁄
(
size_t
 
ödex
) const;

88 * 
edôIãmLoˇti⁄
(
size_t
 
ödex
);

90 (*
	gcom∑r_t
)(c⁄° * 
	tlhs
, c⁄° * 
	trhs
);

91 (*
	gcom∑r_r_t
)(c⁄° * 
	tlhs
, c⁄° * 
	trhs
, * 
	t°©e
);

92 
°©us_t
 
s‹t
(
com∑r_t
 
cmp
);

93 
°©us_t
 
s‹t
(
com∑r_r_t
 
cmp
, * 
°©e
);

95 
	g¥Ÿe˘ed
:

96 
size_t
 
ôemSize
() const;

97 
ªÀa£_°‹age
();

99 
vútuÆ
 
do_c⁄°ru˘
(* 
°‹age
, 
size_t
 
num
) const = 0;

100 
vútuÆ
 
do_de°roy
(* 
°‹age
, 
size_t
 
num
) const = 0;

101 
vútuÆ
 
do_c›y
(* 
de°
, c⁄° * 
‰om
, 
size_t
 
num
) const = 0;

102 
vútuÆ
 
do_•œt
(* 
de°
, c⁄° * 
ôem
, 
size_t
 
num
) const = 0;

103 
vútuÆ
 
do_move_f‹w¨d
(* 
de°
, c⁄° * 
‰om
, 
size_t
 
num
) const = 0;

104 
vútuÆ
 
do_move_backw¨d
(* 
de°
, c⁄° * 
‰om
, 
size_t
 
num
) const = 0;

107 
vútuÆ
 
ª£rvedVe˘‹Im∂1
();

108 
vútuÆ
 
ª£rvedVe˘‹Im∂2
();

109 
vútuÆ
 
ª£rvedVe˘‹Im∂3
();

110 
vútuÆ
 
ª£rvedVe˘‹Im∂4
();

111 
vútuÆ
 
ª£rvedVe˘‹Im∂5
();

112 
vútuÆ
 
ª£rvedVe˘‹Im∂6
();

113 
vútuÆ
 
ª£rvedVe˘‹Im∂7
();

114 
vútuÆ
 
ª£rvedVe˘‹Im∂8
();

116 
	g¥iv©e
:

117 * 
_grow
(
size_t
 
whîe
, size_à
amou¡
);

118 
_shrök
(
size_t
 
whîe
, size_à
amou¡
);

120 
ölöe
 
_do_c⁄°ru˘
(* 
°‹age
, 
size_t
 
num
) const;

121 
ölöe
 
_do_de°roy
(* 
°‹age
, 
size_t
 
num
) const;

122 
ölöe
 
_do_c›y
(* 
de°
, c⁄° * 
‰om
, 
size_t
 
num
) const;

123 
ölöe
 
_do_•œt
(* 
de°
, c⁄° * 
ôem
, 
size_t
 
num
) const;

124 
ölöe
 
_do_move_f‹w¨d
(* 
de°
, c⁄° * 
‰om
, 
size_t
 
num
) const;

125 
ölöe
 
_do_move_backw¨d
(* 
de°
, c⁄° * 
‰om
, 
size_t
 
num
) const;

129 * 
	gmSt‹age
;

130 
size_t
 
	gmCou¡
;

132 c⁄° 
uöt32_t
 
	gmFœgs
;

133 c⁄° 
size_t
 
	gmIãmSize
;

138 ˛as†
	cS‹ãdVe˘‹Im∂
 : 
public
 
Ve˘‹Im∂


140 
public
:

141 
S‹ãdVe˘‹Im∂
(
size_t
 
ôemSize
, 
uöt32_t
 
Êags
);

142 
S‹ãdVe˘‹Im∂
(c⁄° 
Ve˘‹Im∂
& 
rhs
);

143 
	gvútuÆ
 ~
S‹ãdVe˘‹Im∂
();

145 
	gS‹ãdVe˘‹Im∂
& 
	g›î©‹
 = (c⁄° 
S‹ãdVe˘‹Im∂
& 
rhs
);

148 
ssize_t
 
ödexOf
(c⁄° * 
ôem
) const;

151 
size_t
 
‹dîOf
(c⁄° * 
ôem
) const;

154 
ssize_t
 
add
(c⁄° * 
ôem
);

157 
ssize_t
 
mîge
(c⁄° 
Ve˘‹Im∂
& 
ve˘‹
);

158 
ssize_t
 
mîge
(c⁄° 
S‹ãdVe˘‹Im∂
& 
ve˘‹
);

161 
ssize_t
 
ªmove
(c⁄° * 
ôem
);

163 
	g¥Ÿe˘ed
:

164 
vútuÆ
 
do_com∑ª
(c⁄° * 
lhs
, c⁄° * 
rhs
) const = 0;

167 
vútuÆ
 
ª£rvedS‹ãdVe˘‹Im∂1
();

168 
vútuÆ
 
ª£rvedS‹ãdVe˘‹Im∂2
();

169 
vútuÆ
 
ª£rvedS‹ãdVe˘‹Im∂3
();

170 
vútuÆ
 
ª£rvedS‹ãdVe˘‹Im∂4
();

171 
vútuÆ
 
ª£rvedS‹ãdVe˘‹Im∂5
();

172 
vútuÆ
 
ª£rvedS‹ãdVe˘‹Im∂6
();

173 
vútuÆ
 
ª£rvedS‹ãdVe˘‹Im∂7
();

174 
vútuÆ
 
ª£rvedS‹ãdVe˘‹Im∂8
();

176 
	g¥iv©e
:

177 
ssize_t
 
_ödexOrdîOf
(c⁄° * 
ôem
, 
size_t
* 
‹dî
 = 0) const;

181 
ssize_t
 
add
();

182 
p›
();

183 
push
();

184 
push
(c⁄° * 
ôem
);

185 
ssize_t
 
ö£πVe˘‹At
(c⁄° 
Ve˘‹Im∂
& 
ve˘‹
, 
size_t
 
ödex
);

186 
ssize_t
 
≠≥ndVe˘‹
(c⁄° 
Ve˘‹Im∂
& 
ve˘‹
);

187 
ssize_t
 
ö£πAt
(
size_t
 
whîe
, size_à
numIãms
 = 1);

188 
ssize_t
 
ö£πAt
(c⁄° * 
ôem
, 
size_t
 
whîe
, size_à
numIãms
 = 1);

189 
ssize_t
 
ª∂a˚At
(
size_t
 
ödex
);

190 
ssize_t
 
ª∂a˚At
(c⁄° * 
ôem
, 
size_t
 
ödex
);

	@jni/include/include/utils/ZipFileCRO.h

20 #i‚de‡
__LIBS_ZIPFILECRO_H


21 
	#__LIBS_ZIPFILECRO_H


	)

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<uni°d.h
>

27 #ifde‡
__˝lu•lus


34 * 
	tZùFûeCRO
;

40 * 
	tZùE¡ryCRO
;

42 
ZùFûeCRO
 
ZùFûeXRO_›í
(c⁄° * 
∑th
);

44 
ZùFûeCRO_de°roy
(
ZùFûeCRO
 
zù
);

46 
ZùE¡ryCRO
 
ZùFûeCRO_födE¡ryByName
(
ZùFûeCRO
 
zù
,

47 c⁄° * 
fûeName
);

49 
boﬁ
 
ZùFûeCRO_gëE¡ryInfo
(
ZùFûeCRO
 
zù
, 
ZùE¡ryCRO
 
íåy
,

50 * 
pMëhod
, * 
pUncompLí
,

51 * 
pCompLí
, 
off_t
* 
pOff£t
, * 
pModWhí
, * 
pCrc32
);

53 
boﬁ
 
ZùFûeCRO_uncom¥essE¡ry
(
ZùFûeCRO
 
zù
, 
ZùE¡ryCRO
 
íåy
, 
fd
);

55 #ifde‡
__˝lu•lus


	@jni/include/include/utils/ZipFileRO.h

24 #i‚de‡
__LIBS_ZIPFILERO_H


25 
	#__LIBS_ZIPFILERO_H


	)

27 
	~"Eº‹s.h
"

28 
	~"FûeM≠.h
"

30 
	~<°dio.h
>

31 
	~<°dlib.h
>

32 
	~<uni°d.h
>

34 
«me•a˚
 
	g™droid
 {

40 * 
	tZùE¡ryRO
;

58 ˛as†
	cZùFûeRO
 {

59 
	gpublic
:

60 
ZùFûeRO
()

61 : 
mFd
(-1), 
mFûeM≠
(
NULL
), 
mHashTabÀSize
(-1), 
mHashTabÀ
(NULL)

62 , 
mNumE¡rõs
(0)

64 ~
ZùFûeRO
() {

65 
‰ì
(
mHashTabÀ
);

66 i‡(
	gmFûeM≠
)

67 
	gmFûeM≠
->
ªÀa£
();

68 i‡(
	gmFd
 >= 0)

69 
˛o£
(
mFd
);

75 
°©us_t
 
›í
(c⁄° * 
zùFûeName
);

83 
ZùE¡ryRO
 
födE¡ryByName
(c⁄° * 
fûeName
) const;

88 
gëNumE¡rõs
() const {

89  
	gmNumE¡rõs
;

104 
ZùE¡ryRO
 
födE¡ryByIndex
(
idx
) const;

111 
gëE¡ryFûeName
(
ZùE¡ryRO
 
íåy
, * 
buf„r
, 
bufLí
) const;

122 
boﬁ
 
gëE¡ryInfo
(
ZùE¡ryRO
 
íåy
, * 
pMëhod
, * 
pUncompLí
,

123 * 
pCompLí
, 
off_t
* 
pOff£t
, * 
pModWhí
, * 
pCrc32
) const;

131 
FûeM≠
* 
¸óãE¡ryFûeM≠
(
ZùE¡ryRO
 
íåy
) const;

142 
boﬁ
 
uncom¥essE¡ry
(
ZùE¡ryRO
 
íåy
, * 
buf„r
) const;

147 
boﬁ
 
uncom¥essE¡ry
(
ZùE¡ryRO
 
íåy
, 
fd
) const;

151 
	gkCom¥essSt‹ed
 = 0,

152 
	gkCom¥essDeÊ©ed
 = 8,

158 
boﬁ
 
öÊ©eBuf„r
(* 
outBuf
, c⁄° * 
öBuf
,

159 
uncompLí
, 
compLí
);

164 
boﬁ
 
öÊ©eBuf„r
(
fd
, c⁄° * 
öBuf
,

165 
uncompLí
, 
compLí
);

171 
ölöe
 
gë2LE
(c⁄° * 
buf
) {

172  
	gbuf
[0] | (buf[1] << 8);

174 
ölöe
 
gë4LE
(c⁄° * 
buf
) {

175  
	gbuf
[0] | (buf[1] << 8) | (buf[2] << 16) | (buf[3] << 24);

178 
	g¥iv©e
:

180 
ZùFûeRO
(c⁄° ZùFûeRO& 
§c
);

181 
	gZùFûeRO
& 
	g›î©‹
=(c⁄° 
ZùFûeRO
& 
§c
);

184 
boﬁ
 
∑r£ZùArchive
();

187 
addToHash
(c⁄° * 
°r
, 
°rLí
, 
hash
);

190 
compuãHash
(c⁄° * 
°r
, 
Àn
);

193 
íåyToIndex
(c⁄° 
ZùE¡ryRO
 
íåy
) const;

198 
	sHashE¡ry
 {

199 c⁄° * 
	g«me
;

200 
	g«meLí
;

202 } 
	tHashE¡ry
;

205 
	gmFd
;

208 
FûeM≠
* 
	gmFûeM≠
;

211 
	gmNumE¡rõs
;

217 
	gmHashTabÀSize
;

218 
HashE¡ry
* 
	gmHashTabÀ
;

	@jni/include/include/utils/ZipUtils.h

20 #i‚de‡
__LIBS_ZIPUTILS_H


21 
	#__LIBS_ZIPUTILS_H


	)

23 
	~<°dio.h
>

25 
«me•a˚
 
	g™droid
 {

30 ˛as†
	cZùUtûs
 {

31 
	gpublic
:

36 
boﬁ
 
öÊ©eToBuf„r
(
fd
, * 
buf
, 
uncom¥es£dLí
,

37 
com¥es£dLí
);

38 
boﬁ
 
öÊ©eToBuf„r
(
FILE
* 
Â
, * 
buf
, 
uncom¥es£dLí
,

39 
com¥es£dLí
);

57 
boﬁ
 
examöeGzù
(
FILE
* 
Â
, * 
pCom¥essi⁄Mëhod
,

58 * 
pUncom¥es£dLí
, * 
pCom¥es£dLí
, * 
pCRC32
);

60 
	g¥iv©e
:

61 
ZùUtûs
() {}

62 ~
ZùUtûs
() {}

	@jni/include/include/utils/ashmem.h

10 #i‚de‡
_UTILS_ASHMEM_H


11 
	#_UTILS_ASHMEM_H


	)

13 
	~<löux/limôs.h
>

14 
	~<löux/io˘l.h
>

16 
	#ASHMEM_NAME_LEN
 256

	)

18 
	#ASHMEM_NAME_DEF
 "dev/ashmem"

	)

21 
	#ASHMEM_NOT_REAPED
 0

	)

22 
	#ASHMEM_WAS_REAPED
 1

	)

25 
	#ASHMEM_NOW_UNPINNED
 0

	)

26 
	#ASHMEM_NOW_PINNED
 1

	)

28 
	#__ASHMEMIOC
 0x77

	)

30 
	#ASHMEM_SET_NAME
 
	`_IOW
(
__ASHMEMIOC
, 1, [
ASHMEM_NAME_LEN
])

	)

31 
	#ASHMEM_GET_NAME
 
	`_IOR
(
__ASHMEMIOC
, 2, [
ASHMEM_NAME_LEN
])

	)

32 
	#ASHMEM_SET_SIZE
 
	`_IOW
(
__ASHMEMIOC
, 3, 
size_t
)

	)

33 
	#ASHMEM_GET_SIZE
 
	`_IO
(
__ASHMEMIOC
, 4)

	)

34 
	#ASHMEM_SET_PROT_MASK
 
	`_IOW
(
__ASHMEMIOC
, 5, )

	)

35 
	#ASHMEM_GET_PROT_MASK
 
	`_IO
(
__ASHMEMIOC
, 6)

	)

36 
	#ASHMEM_PIN
 
	`_IO
(
__ASHMEMIOC
, 7)

	)

37 
	#ASHMEM_UNPIN
 
	`_IO
(
__ASHMEMIOC
, 8)

	)

38 
	#ASHMEM_ISPINNED
 
	`_IO
(
__ASHMEMIOC
, 9)

	)

39 
	#ASHMEM_PURGE_ALL_CACHES
 
	`_IO
(
__ASHMEMIOC
, 10)

	)

	@jni/include/include/utils/misc.h

20 #i‚de‡
_LIBS_UTILS_MISC_H


21 
	#_LIBS_UTILS_MISC_H


	)

23 
	~<sys/time.h
>

24 
	~<utûs/Endün.h
>

26 
«me•a˚
 
	g™droid
 {

29 #i‚de‡
NELEM


30 
	#NELEM
(
x
Ë((Ë((xË/ ((x)[0])))

	)

39 * 
°rdupNew
(c⁄° * 
°r
);

54 * 
c⁄ˇtArgv
(
¨gc
, c⁄° * c⁄° 
¨gv
[]);

60 
cou¡Argv
(c⁄° * c⁄° 
¨gv
[]);

66 
	eFûeTy≥
 {

67 
	gkFûeTy≥Unknown
 = 0,

68 
	gkFûeTy≥N⁄exi°ít
,

69 
	gkFûeTy≥Reguœr
,

70 
	gkFûeTy≥Dúe˘‹y
,

71 
	gkFûeTy≥Ch¨Dev
,

72 
	gkFûeTy≥BlockDev
,

73 
	gkFûeTy≥Fifo
,

74 
	gkFûeTy≥Symlök
,

75 
	gkFûeTy≥Sockë
,

76 } 
	tFûeTy≥
;

78 
FûeTy≥
 
gëFûeTy≥
(c⁄° * 
fûeName
);

80 
time_t
 
gëFûeModD©e
(c⁄° * 
fûeName
);

85 
roundUpPowî2
(
vÆ
);

87 
°ºevî£
(* 
begö
, * 
íd
);

88 
k_ôﬂ
(
vÆue
, * 
°r
, 
ba£
);

89 * 
ôﬂ
(
vÆ
, 
ba£
);

	@jni/include/include/utils/threads.h

17 #i‚de‡
_LIBS_UTILS_THREADS_H


18 
	#_LIBS_UTILS_THREADS_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<time.h
>

24 #i‡
deföed
(
HAVE_PTHREADS
)

25 
	~<±hªad.h
>

31 #ifde‡
__˝lu•lus


35 * 
	t™droid_thªad_id_t
;

37 (*
™droid_thªad_func_t
)(*);

54 
ANDROID_PRIORITY_LOWEST
 = 19,

57 
ANDROID_PRIORITY_BACKGROUND
 = 10,

60 
ANDROID_PRIORITY_NORMAL
 = 0,

63 
ANDROID_PRIORITY_FOREGROUND
 = -2,

66 
ANDROID_PRIORITY_DISPLAY
 = -4,

69 
ANDROID_PRIORITY_URGENT_DISPLAY
 = -8,

72 
ANDROID_PRIORITY_AUDIO
 = -16,

75 
ANDROID_PRIORITY_URGENT_AUDIO
 = -19,

79 
ANDROID_PRIORITY_HIGHEST
 = -20,

81 
ANDROID_PRIORITY_DEFAULT
 = 
ANDROID_PRIORITY_NORMAL
,

82 
ANDROID_PRIORITY_MORE_FAVORABLE
 = -1,

83 
ANDROID_PRIORITY_LESS_FAVORABLE
 = +1,

87 
ANDROID_TGROUP_DEFAULT
 = 0,

88 
ANDROID_TGROUP_BG_NONINTERACT
 = 1,

89 
ANDROID_TGROUP_FG_BOOST
 = 2,

90 
ANDROID_TGROUP_MAX
 = 
ANDROID_TGROUP_FG_BOOST
,

94 
™droidCª©eThªad
(
™droid_thªad_func_t
, *);

97 
™droidCª©eThªadEtc
(
™droid_thªad_func_t
 
íåyFun˘i⁄
,

98 *
u£rD©a
,

99 c⁄° * 
thªadName
,

100 
öt32_t
 
thªadPri‹ôy
,

101 
size_t
 
thªadSèckSize
,

102 
™droid_thªad_id_t
 *
thªadId
);

105 
™droid_thªad_id_t
 
™droidGëThªadId
();

109 
™droidCª©eRawThªadEtc
(
™droid_thªad_func_t
 
íåyFun˘i⁄
,

110 *
u£rD©a
,

111 c⁄° * 
thªadName
,

112 
öt32_t
 
thªadPri‹ôy
,

113 
size_t
 
thªadSèckSize
,

114 
™droid_thªad_id_t
 *
thªadId
);

118 (*
	g™droid_¸óã_thªad_‚
)(
	t™droid_thªad_func_t
 
	tíåyFun˘i⁄
,

119 *
	tu£rD©a
,

120 c⁄° * 
	tthªadName
,

121 
	töt32_t
 
	tthªadPri‹ôy
,

122 
	tsize_t
 
	tthªadSèckSize
,

123 
	t™droid_thªad_id_t
 *
	tthªadId
);

125 
™droidSëCª©eThªadFunc
(
™droid_¸óã_thªad_‚
 
func
);

131 
pid_t
 
™droidGëTid
();

137 
™droidSëThªadSchedulögGroup
(
pid_t
 
tid
, 
gΩ
);

143 
™droidSëThªadPri‹ôy
(
pid_t
 
tid
, 
¥io
);

145 #ifde‡
__˝lu•lus


152 #ifde‡
__˝lu•lus


154 
	~<utûs/Eº‹s.h
>

155 
	~<utûs/RefBa£.h
>

156 
	~<utûs/Timîs.h
>

158 
«me•a˚
 
	g™droid
 {

160 
™droid_thªad_id_t
 
	tthªad_id_t
;

162 
™droid_thªad_func_t
 
	tthªad_func_t
;

165 
	gPRIORITY_LOWEST
 = 
ANDROID_PRIORITY_LOWEST
,

166 
	gPRIORITY_BACKGROUND
 = 
ANDROID_PRIORITY_BACKGROUND
,

167 
	gPRIORITY_NORMAL
 = 
ANDROID_PRIORITY_NORMAL
,

168 
	gPRIORITY_FOREGROUND
 = 
ANDROID_PRIORITY_FOREGROUND
,

169 
	gPRIORITY_DISPLAY
 = 
ANDROID_PRIORITY_DISPLAY
,

170 
	gPRIORITY_URGENT_DISPLAY
 = 
ANDROID_PRIORITY_URGENT_DISPLAY
,

171 
	gPRIORITY_AUDIO
 = 
ANDROID_PRIORITY_AUDIO
,

172 
	gPRIORITY_URGENT_AUDIO
 = 
ANDROID_PRIORITY_URGENT_AUDIO
,

173 
	gPRIORITY_HIGHEST
 = 
ANDROID_PRIORITY_HIGHEST
,

174 
	gPRIORITY_DEFAULT
 = 
ANDROID_PRIORITY_DEFAULT
,

175 
	gPRIORITY_MORE_FAVORABLE
 = 
ANDROID_PRIORITY_MORE_FAVORABLE
,

176 
	gPRIORITY_LESS_FAVORABLE
 = 
ANDROID_PRIORITY_LESS_FAVORABLE
,

180 
ölöe
 
boﬁ
 
¸óãThªad
(
thªad_func_t
 
f
, *
a
) {

181  
™droidCª©eThªad
(
f
, 
a
Ë? 
	gåue
 : 
Ál£
;

185 
ölöe
 
boﬁ
 
¸óãThªadEtc
(
thªad_func_t
 
íåyFun˘i⁄
,

186 *
u£rD©a
,

187 c⁄° * 
thªadName
 = "android:unnamed_thread",

188 
öt32_t
 
thªadPri‹ôy
 = 
PRIORITY_DEFAULT
,

189 
size_t
 
thªadSèckSize
 = 0,

190 
thªad_id_t
 *
thªadId
 = 0)

192  
™droidCª©eThªadEtc
(
íåyFun˘i⁄
, 
u£rD©a
, 
thªadName
,

193 
thªadPri‹ôy
, 
thªadSèckSize
, 
thªadId
Ë? 
åue
 : 
Ál£
;

197 
ölöe
 
thªad_id_t
 
gëThªadId
() {

198  
™droidGëThªadId
();

209 ˛as†
	cMuãx
 {

210 
	gpublic
:

212 
PRIVATE
 = 0,

213 
	gSHARED
 = 1

216 
Muãx
();

217 
Muãx
(c⁄° * 
«me
);

218 
Muãx
(
ty≥
, c⁄° * 
«me
 = 
NULL
);

219 ~
Muãx
();

222 
°©us_t
 
lock
();

223 
u∆ock
();

226 
°©us_t
 
åyLock
();

230 ˛as†
	cAutﬁock
 {

231 
	gpublic
:

232 
ölöe
 
Autﬁock
(
Muãx
& 
muãx
Ë: 
mLock
(muãxË{ mLock.
lock
(); }

233 
ölöe
 
Autﬁock
(
Muãx
* 
muãx
Ë: 
mLock
(*muãxË{ mLock.
lock
(); }

234 
	gölöe
 ~
Autﬁock
(Ë{ 
	gmLock
.
u∆ock
(); }

235 
	g¥iv©e
:

236 
Muãx
& 
mLock
;

239 
	g¥iv©e
:

240 
‰õnd
 
˛ass
 
C⁄dôi⁄
;

243 
Muãx
(const Mutex&);

244 
	gMuãx
& 
	g›î©‹
 = (c⁄° 
Muãx
&);

246 #i‡
deföed
(
HAVE_PTHREADS
)

247 
±hªad_muãx_t
 
	gmMuãx
;

249 
_öô
();

250 * 
	gmSèã
;

254 #i‡
deföed
(
HAVE_PTHREADS
)

256 
ölöe
 
	gMuãx
::
Muãx
() {

257 
±hªad_muãx_öô
(&
mMuãx
, 
NULL
);

259 
ölöe
 
	gMuãx
::
Muãx
(c⁄° * 
«me
) {

260 
±hªad_muãx_öô
(&
mMuãx
, 
NULL
);

262 
ölöe
 
	gMuãx
::
Muãx
(
ty≥
, c⁄° * 
«me
) {

263 i‡(
	gty≥
 =
SHARED
) {

264 
±hªad_muãx©å_t
 
©å
;

265 
±hªad_muãx©å_öô
(&
©å
);

266 
±hªad_muãx©å_£çsh¨ed
(&
©å
, 
PTHREAD_PROCESS_SHARED
);

267 
±hªad_muãx_öô
(&
mMuãx
, &
©å
);

268 
±hªad_muãx©å_de°roy
(&
©å
);

270 
±hªad_muãx_öô
(&
mMuãx
, 
NULL
);

273 
ölöe
 
	gMuãx
::~
Muãx
() {

274 
±hªad_muãx_de°roy
(&
mMuãx
);

276 
ölöe
 
°©us_t
 
	gMuãx
::
lock
() {

277  -
±hªad_muãx_lock
(&
mMuãx
);

279 
ölöe
 
	gMuãx
::
u∆ock
() {

280 
±hªad_muãx_u∆ock
(&
mMuãx
);

282 
ölöe
 
°©us_t
 
	gMuãx
::
åyLock
() {

283  -
±hªad_muãx_åylock
(&
mMuãx
);

294 
	gMuãx
::
	tAutﬁock
 
	tAutoMuãx
;

306 ˛as†
	cC⁄dôi⁄
 {

307 
	gpublic
:

309 
PRIVATE
 = 0,

310 
	gSHARED
 = 1

313 
C⁄dôi⁄
();

314 
C⁄dôi⁄
(
ty≥
);

315 ~
C⁄dôi⁄
();

317 
°©us_t
 
waô
(
Muãx
& 
muãx
);

319 
°©us_t
 
waôRñ©ive
(
Muãx
& 
muãx
, 
n£cs_t
 
ª…ime
);

321 
sig«l
();

323 
brﬂdˇ°
();

325 
	g¥iv©e
:

326 #i‡
deföed
(
HAVE_PTHREADS
)

327 
±hªad_c⁄d_t
 
mC⁄d
;

329 * 
	gmSèã
;

333 #i‡
deföed
(
HAVE_PTHREADS
)

335 
ölöe
 
	gC⁄dôi⁄
::
C⁄dôi⁄
() {

336 
±hªad_c⁄d_öô
(&
mC⁄d
, 
NULL
);

338 
ölöe
 
	gC⁄dôi⁄
::
C⁄dôi⁄
(
ty≥
) {

339 i‡(
ty≥
 =
SHARED
) {

340 
±hªad_c⁄d©å_t
 
©å
;

341 
±hªad_c⁄d©å_öô
(&
©å
);

342 
±hªad_c⁄d©å_£çsh¨ed
(&
©å
, 
PTHREAD_PROCESS_SHARED
);

343 
±hªad_c⁄d_öô
(&
mC⁄d
, &
©å
);

344 
±hªad_c⁄d©å_de°roy
(&
©å
);

346 
±hªad_c⁄d_öô
(&
mC⁄d
, 
NULL
);

349 
ölöe
 
	gC⁄dôi⁄
::~
C⁄dôi⁄
() {

350 
±hªad_c⁄d_de°roy
(&
mC⁄d
);

352 
ölöe
 
°©us_t
 
	gC⁄dôi⁄
::
waô
(
Muãx
& 
muãx
) {

353  -
±hªad_c⁄d_waô
(&
mC⁄d
, &
muãx
.
mMuãx
);

355 
ölöe
 
°©us_t
 
	gC⁄dôi⁄
::
waôRñ©ive
(
Muãx
& 
muãx
, 
n£cs_t
 
ª…ime
) {

356 #i‡
deföed
(
HAVE_PTHREAD_COND_TIMEDWAIT_RELATIVE
)

357 
time•ec
 
	gts
;

358 
	gts
.
	gtv_£c
 = 
ª…ime
/1000000000;

359 
	gts
.
	gtv_n£c
 = 
ª…ime
%1000000000;

360  -
±hªad_c⁄d_timedwaô_ªœtive_≈
(&
mC⁄d
, &
muãx
.
mMuãx
, &
ts
);

362 
time•ec
 
	gts
;

363 #i‡
deföed
(
HAVE_POSIX_CLOCKS
)

364 
˛ock_gëtime
(
CLOCK_REALTIME
, &
ts
);

367 
timevÆ
 
	gt
;

368 
gëtimeofday
(&
t
, 
NULL
);

369 
	gts
.
	gtv_£c
 = 
t
.
tv_£c
;

370 
	gts
.
	gtv_n£c

t
.
tv_u£c
*1000;

372 
	gts
.
	gtv_£c
 +
ª…ime
/1000000000;

373 
	gts
.
	gtv_n£c
+
ª…ime
%1000000000;

374 i‡(
	gts
.
	gtv_n£c
 >= 1000000000) {

375 
ts
.
tv_n£c
 -= 1000000000;

376 
	gts
.
	gtv_£c
 += 1;

378  -
±hªad_c⁄d_timedwaô
(&
mC⁄d
, &
muãx
.
mMuãx
, &
ts
);

381 
ölöe
 
	gC⁄dôi⁄
::
sig«l
() {

382 
±hªad_c⁄d_sig«l
(&
mC⁄d
);

384 
ölöe
 
	gC⁄dôi⁄
::
brﬂdˇ°
() {

385 
±hªad_c⁄d_brﬂdˇ°
(&
mC⁄d
);

396 ˛as†
	cThªad
 : 
vútuÆ
 
public
 
RefBa£


398 
public
:

401 
Thªad
(
boﬁ
 
ˇnCÆlJava
 = 
åue
);

402 
	gvútuÆ
 ~
Thªad
();

405 
vútuÆ
 
°©us_t
 
run
–c⁄° * 
«me
 = 0,

406 
öt32_t
 
¥i‹ôy
 = 
PRIORITY_DEFAULT
,

407 
size_t
 
°ack
 = 0);

412 
vútuÆ
 
ªque°Exô
();

415 
vútuÆ
 
°©us_t
 
ªadyToRun
();

421 
°©us_t
 
ªque°ExôAndWaô
();

423 
	g¥Ÿe˘ed
:

425 
boﬁ
 
exôPídög
() const;

427 
	g¥iv©e
:

433 
vútuÆ
 
boﬁ
 
thªadLo›
() = 0;

435 
	g¥iv©e
:

436 
Thªad
& 
›î©‹
=(const Thread&);

437 
_thªadLo›
(* 
u£r
);

438 c⁄° 
boﬁ
 
	gmC™CÆlJava
;

439 
thªad_id_t
 
	gmThªad
;

440 
Muãx
 
	gmLock
;

441 
C⁄dôi⁄
 
	gmThªadExôedC⁄dôi⁄
;

442 
°©us_t
 
	gmSètus
;

443 vﬁ©ûê
boﬁ
 
	gmExôPídög
;

444 vﬁ©ûê
boﬁ
 
	gmRu¬ög
;

445 
	g•
<
	gThªad
> 
	gmHﬁdSñf
;

446 #i‡
HAVE_ANDROID_OS


447 
	gmTid
;

	@jni/include/nativehelper/AndroidSystemNatives.h

20 #i‚de‡
_NATIVEHELPER_ANDROIDSYSTEMNATIVES


21 
	#_NATIVEHELPER_ANDROIDSYSTEMNATIVES


	)

23 
	~"jni.h
"

25 #ifde‡
__˝lu•lus


33 
jniRegi°îSy°emJavaMëhods
(
JNIEnv
* 
ív
);

39 
ªgi°î_‹g_≠ache_h¨m⁄y_dÆvik_N©iveTe°T¨gë
(
JNIEnv
* 
ív
);

41 
ªgi°î_dÆvik_sy°em_TouchDex
(
JNIEnv
* 
ív
);

43 
ªgi°î_‹g_≠ache_h¨m⁄y_xml_Ex∑tP¨£r
(
JNIEnv
 *
ív
);

45 
ªgi°î_java_io_Fûe
(
JNIEnv
* 
ív
);

46 
ªgi°î_java_io_FûeDes¸ùt‹
(
JNIEnv
* 
ív
);

47 
ªgi°î_java_io_Obje˘OuçutSåóm
(
JNIEnv
* 
ív
);

48 
ªgi°î_java_io_Obje˘I≈utSåóm
(
JNIEnv
* 
ív
);

49 
ªgi°î_java_io_Obje˘SåómCœss
(
JNIEnv
* 
ív
);

51 
ªgi°î_java_œng_Ch¨a˘î
(
JNIEnv
* 
ív
);

52 
ªgi°î_java_œng_DoubÀ
(
JNIEnv
* 
ív
);

53 
ªgi°î_java_œng_Flﬂt
(
JNIEnv
* 
ív
);

54 
ªgi°î_java_œng_M©h
(
JNIEnv
* 
ív
);

55 
ªgi°î_java_œng_Pro˚ssM™agî
(
JNIEnv
* 
ív
);

56 
ªgi°î_java_œng_Såi˘M©h
(
JNIEnv
* 
ív
);

57 
ªgi°î_java_œng_Sy°em
(
JNIEnv
* 
ív
);

59 
ªgi°î_‹g_≠ache_h¨m⁄y_luni_∂©f‹m_OSFûeSy°em
(
JNIEnv
* 
ív
);

60 
ªgi°î_‹g_≠ache_h¨m⁄y_luni_∂©f‹m_OSMem‹y
(
JNIEnv
* 
ív
);

61 
ªgi°î_‹g_≠ache_h¨m⁄y_luni_∂©f‹m_OSNëw‹kSy°em
(
JNIEnv
* 
ív
);

62 
ªgi°î_‹g_≠ache_h¨m⁄y_ãxt_BidiWøµî
(
JNIEnv
 *
ív
);

64 
ªgi°î_‹g_≠ache_h¨m⁄y_x√t_¥ovidî_js£_O≥nSSLSîvîSockëIm∂
(
JNIEnv
 *
ív
);

65 
ªgi°î_‹g_≠ache_h¨m⁄y_x√t_¥ovidî_js£_O≥nSSLSessi⁄Im∂
(
JNIEnv
 *
ív
);

66 
ªgi°î_‹g_≠ache_h¨m⁄y_x√t_¥ovidî_js£_O≥nSSLSockëIm∂
(
JNIEnv
 *
ív
);

67 
ªgi°î_‹g_›ís¶_N©iveBN
(
JNIEnv
 *
ív
);

68 
ªgi°î_‹g_≠ache_h¨m⁄y_x√t_¥ovidî_js£_N©iveCry±o
(
JNIEnv
 *
ív
);

70 
ªgi°î_java_utû_j¨_J¨Fûe
(
JNIEnv
* 
ív
);

71 
ªgi°î_java_utû_zù_AdÀr32
(
JNIEnv
* 
ív
);

72 
ªgi°î_java_utû_zù_CRC32
(
JNIEnv
* 
ív
);

73 
ªgi°î_java_utû_zù_DeÊ©î
(
JNIEnv
* 
ív
);

74 
ªgi°î_java_utû_zù_InÊ©î
(
JNIEnv
* 
ív
);

75 
ªgi°î_java_utû_zù_ZùFûe
(
JNIEnv
* 
ív
);

76 
ªgi°î_java_√t_I√tAddªss
(
JNIEnv
* 
ív
);

77 
ªgi°î_java_√t_Nëw‹kI¡îÁ˚
(
JNIEnv
* 
ív
);

79 
ªgi°î_‹g_≠ache_h¨m⁄y_luni_utû_Êç¨£
(
JNIEnv
 *
ív
);

80 
ªgi°î_‹g_≠ache_h¨m⁄y_luni_utû_NumbîC⁄vît
(
JNIEnv
 *
ív
);

82 
ªgi°î_com_ibm_icu4jni_c⁄vîãrs_N©iveC⁄vîãr
(
JNIEnv
* 
ív
);

83 
ªgi°î_com_ibm_icu4jni_œng_UCh¨a˘î
(
JNIEnv
* 
ív
);

84 
ªgi°î_com_ibm_icu4jni_ãxt_N©iveCﬁœt‹
(
JNIEnv
* 
ív
);

85 
ªgi°î_com_ibm_icu4jni_ãxt_N©iveBªakIãøt‹
(
JNIEnv
* 
ív
);

86 
ªgi°î_com_ibm_icu4jni_ãxt_N©iveDecimÆF‹m©
(
JNIEnv
* 
ív
);

87 
ªgi°î_com_ibm_icu4jni_ªgex_N©iveRegEx
(
JNIEnv
* 
ív
);

88 
ªgi°î_com_ibm_icu4jni_utû_Resour˚s
(
JNIEnv
* 
ív
);

89 
ªgi°î_com_ibm_icu4jni_ãxt_N©iveRBNF
(
JNIEnv
* 
ív
);

91 
ªgi°î_sun_misc_Unß„
(
JNIEnv
* 
ív
);

93 
ªgi°î_SQLôe_D©aba£
(
JNIEnv
* 
ív
);

94 
ªgi°î_SQLôe_Vm
(
JNIEnv
* 
ív
);

95 
ªgi°î_SQLôe_Fun˘i⁄C⁄ãxt
(
JNIEnv
* 
ív
);

96 
ªgi°î_SQLôe_Stmt
(
JNIEnv
* 
ív
);

97 
ªgi°î_SQLôe_Blob
(
JNIEnv
* 
ív
);

99 
ªgi°î_‹g_›ís¶_N©iveBN
(
JNIEnv
* 
ív
);

101 #ifde‡
__˝lu•lus


	@jni/include/nativehelper/JNIHelp.h

23 #i‚de‡
_NATIVEHELPER_JNIHELP_H


24 
	#_NATIVEHELPER_JNIHELP_H


	)

26 
	~"jni.h
"

27 
	~"utûs/Log.h
"

28 
	~<uni°d.h
>

30 #i‚de‡
NELEM


31 
	#NELEM
(
x
Ë((Ë((xË/ ((x)[0])))

	)

34 #ifde‡
__˝lu•lus


41 
jniRegi°îN©iveMëhods
(
C_JNIEnv
* 
ív
, c⁄° * 
˛assName
,

42 c⁄° 
JNIN©iveMëhod
* 
gMëhods
, 
numMëhods
);

54 
jniThrowEx˚±i⁄
(
C_JNIEnv
* 
ív
, c⁄° * 
˛assName
, c⁄° * 
msg
);

59 
jniThrowNuŒPoöãrEx˚±i⁄
(
C_JNIEnv
* 
ív
, c⁄° * 
msg
);

64 
jniThrowRu¡imeEx˚±i⁄
(
C_JNIEnv
* 
ív
, c⁄° * 
msg
);

69 
jniThrowIOEx˚±i⁄
(
C_JNIEnv
* 
ív
, 
î∫um
);

77 c⁄° * 
jniSåEº‹
(
î∫um
, * 
buf
, 
size_t
 
buÊí
);

82 
jobje˘
 
jniCª©eFûeDes¸ùt‹
(
C_JNIEnv
* 
ív
, 
fd
);

87 
jniGëFDFromFûeDes¸ùt‹
(
C_JNIEnv
* 
ív
, 
jobje˘
 
fûeDes¸ùt‹
);

92 
jniSëFûeDes¸ùt‹OfFD
(
C_JNIEnv
* 
ív
, 
jobje˘
 
fûeDes¸ùt‹
, 
vÆue
);

94 #ifde‡
__˝lu•lus


103 #i‡
deföed
(
__˝lu•lus
Ë&& !deföed(
JNI_FORCE_C
)

104 
ölöe
 
jniRegi°îN©iveMëhods
(
JNIEnv
* 
ív
, c⁄° * 
˛assName
,

105 c⁄° 
JNIN©iveMëhod
* 
gMëhods
, 
numMëhods
)

107  
jniRegi°îN©iveMëhods
(&
ív
->
fun˘i⁄s
, 
˛assName
, 
gMëhods
,

108 
numMëhods
);

110 
ölöe
 
jniThrowEx˚±i⁄
(
JNIEnv
* 
ív
, c⁄° * 
˛assName
,

111 c⁄° * 
msg
)

113  
jniThrowEx˚±i⁄
(&
ív
->
fun˘i⁄s
, 
˛assName
, 
msg
);

115 
ölöe
 
jniThrowNuŒPoöãrEx˚±i⁄
(
JNIEnv
* 
ív
, c⁄° * 
msg
)

117  
jniThrowNuŒPoöãrEx˚±i⁄
(&
ív
->
fun˘i⁄s
, 
msg
);

119 
ölöe
 
jniThrowRu¡imeEx˚±i⁄
(
JNIEnv
* 
ív
, c⁄° * 
msg
)

121  
jniThrowRu¡imeEx˚±i⁄
(&
ív
->
fun˘i⁄s
, 
msg
);

123 
ölöe
 
jniThrowIOEx˚±i⁄
(
JNIEnv
* 
ív
, 
î∫um
)

125  
jniThrowIOEx˚±i⁄
(&
ív
->
fun˘i⁄s
, 
î∫um
);

127 
ölöe
 
jobje˘
 
jniCª©eFûeDes¸ùt‹
(
JNIEnv
* 
ív
, 
fd
)

129  
jniCª©eFûeDes¸ùt‹
(&
ív
->
fun˘i⁄s
, 
fd
);

131 
ölöe
 
jniGëFDFromFûeDes¸ùt‹
(
JNIEnv
* 
ív
, 
jobje˘
 
fûeDes¸ùt‹
)

133  
jniGëFDFromFûeDes¸ùt‹
(&
ív
->
fun˘i⁄s
, 
fûeDes¸ùt‹
);

135 
ölöe
 
jniSëFûeDes¸ùt‹OfFD
(
JNIEnv
* 
ív
, 
jobje˘
 
fûeDes¸ùt‹
,

136 
vÆue
)

138  
jniSëFûeDes¸ùt‹OfFD
(&
ív
->
fun˘i⁄s
, 
fûeDes¸ùt‹
, 
vÆue
);

147 #i‚de‡
TEMP_FAILURE_RETRY


149 
	#TEMP_FAILURE_RETRY
(
exp
) ({ \

150 
	`ty≥of
 (
exp
Ë
_rc
; \

152 
_rc
 = (
exp
); \

153 } 
_rc
 =-1 && 
î∫o
 =
EINTR
); \

154 
_rc
; })

	)

	@jni/include/pixelflinger/format.h

17 #i‚de‡
ANDROID_PIXELFLINGER_FORMAT_H


18 
	#ANDROID_PIXELFLINGER_FORMAT_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	eGGLPixñF‹m©
 {

26 
	mGGL_PIXEL_FORMAT_UNKNOWN
 = 0,

27 
	mGGL_PIXEL_FORMAT_NONE
 = 0,

29 
	mGGL_PIXEL_FORMAT_RGBA_8888
 = 1,

30 
	mGGL_PIXEL_FORMAT_RGBX_8888
 = 2,

31 
	mGGL_PIXEL_FORMAT_RGB_888
 = 3,

32 
	mGGL_PIXEL_FORMAT_RGB_565
 = 4,

33 
	mGGL_PIXEL_FORMAT_BGRA_8888
 = 5,

34 
	mGGL_PIXEL_FORMAT_RGBA_5551
 = 6,

35 
	mGGL_PIXEL_FORMAT_RGBA_4444
 = 7,

37 
	mGGL_PIXEL_FORMAT_A_8
 = 8,

38 
	mGGL_PIXEL_FORMAT_L_8
 = 9,

39 
	mGGL_PIXEL_FORMAT_LA_88
 = 0xA,

40 
	mGGL_PIXEL_FORMAT_RGB_332
 = 0xB,

43 
	mGGL_PIXEL_FORMAT_RESERVED_10
 = 0x10,

44 
	mGGL_PIXEL_FORMAT_RESERVED_11
 = 0x11,

45 
	mGGL_PIXEL_FORMAT_RESERVED_12
 = 0x12,

46 
	mGGL_PIXEL_FORMAT_RESERVED_13
 = 0x13,

47 
	mGGL_PIXEL_FORMAT_RESERVED_14
 = 0x14,

48 
	mGGL_PIXEL_FORMAT_RESERVED_15
 = 0x15,

49 
	mGGL_PIXEL_FORMAT_RESERVED_16
 = 0x16,

50 
	mGGL_PIXEL_FORMAT_RESERVED_17
 = 0x17,

53 
	mGGL_PIXEL_FORMAT_Z_16
 = 0x18,

54 
	mGGL_PIXEL_FORMAT_S_8
 = 0x19,

55 
	mGGL_PIXEL_FORMAT_SZ_24
 = 0x1A,

56 
	mGGL_PIXEL_FORMAT_SZ_8
 = 0x1B,

59 
	mGGL_PIXEL_FORMAT_RESERVED_20
 = 0x20,

60 
	mGGL_PIXEL_FORMAT_RESERVED_21
 = 0x21,

63 
	eGGLF‹m©Comp⁄íts
 {

64 
	mGGL_STENCIL_INDEX
 = 0x1901,

65 
	mGGL_DEPTH_COMPONENT
 = 0x1902,

66 
	mGGL_ALPHA
 = 0x1906,

67 
	mGGL_RGB
 = 0x1907,

68 
	mGGL_RGBA
 = 0x1908,

69 
	mGGL_LUMINANCE
 = 0x1909,

70 
	mGGL_LUMINANCE_ALPHA
 = 0x190A,

73 
	eGGLF‹m©Comp⁄ítIndex
 {

74 
	mGGL_INDEX_ALPHA
 = 0,

75 
	mGGL_INDEX_RED
 = 1,

76 
	mGGL_INDEX_GREEN
 = 2,

77 
	mGGL_INDEX_BLUE
 = 3,

78 
	mGGL_INDEX_STENCIL
 = 0,

79 
	mGGL_INDEX_DEPTH
 = 1,

80 
	mGGL_INDEX_Y
 = 0,

81 
	mGGL_INDEX_CB
 = 1,

82 
	mGGL_INDEX_CR
 = 2,

86 #ifde‡
__˝lu•lus


88 
	mALPHA
 = 
GGL_INDEX_ALPHA
,

89 
	mRED
 = 
GGL_INDEX_RED
,

90 
	mGREEN
 = 
GGL_INDEX_GREEN
,

91 
	mBLUE
 = 
GGL_INDEX_BLUE
,

92 
	mSTENCIL
 = 
GGL_INDEX_STENCIL
,

93 
	mDEPTH
 = 
GGL_INDEX_DEPTH
,

94 
	mLUMA
 = 
GGL_INDEX_Y
,

95 
	mCHROMAB
 = 
GGL_INDEX_CB
,

96 
	mCHROMAR
 = 
GGL_INDEX_CR
,

98 
ölöe
 
uöt32_t
 
mask
(
i
) const {

99  ((1<<(
	mc
[
i
].
	mh
-c[i].
	ml
))-1)<<c[i].l;

101 
ölöe
 
uöt32_t
 
bôs
(
i
) const {

102  
	mc
[
i
].
	mh
 - c[i].
	ml
;

105 
uöt8_t
 
	msize
;

106 
uöt8_t
 
	mbôsPîPixñ
;

109 
uöt8_t
 
	mah
;

110 
uöt8_t
 
	mÆ
;

111 
uöt8_t
 
	mrh
;

112 
uöt8_t
 
	mæ
;

113 
uöt8_t
 
	mgh
;

114 
uöt8_t
 
	mgl
;

115 
uöt8_t
 
	mbh
;

116 
uöt8_t
 
	mbl
;

119 
uöt8_t
 
	mh
;

120 
uöt8_t
 
	ml
;

121 } 
__©åibuã__
((
__∑cked__
)Ë
	mc
[4];

122 } 
__©åibuã__
((
__∑cked__
));

123 
uöt16_t
 
	mcomp⁄íts
;

124 } 
	tGGLF‹m©
;

127 #ifde‡
__˝lu•lus


128 "C" c⁄° 
GGLF‹m©
* 
gglGëPixñF‹m©TabÀ
(
size_t
* 
numE¡rõs
 = 0);

130 c⁄° 
GGLF‹m©
* 
gglGëPixñF‹m©TabÀ
(
size_t
* 
numE¡rõs
);

	@jni/include/pixelflinger/pixelflinger.h

17 #i‚de‡
ANDROID_PIXELFLINGER_H


18 
	#ANDROID_PIXELFLINGER_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	~<pixñÊögî/f‹m©.h
>

27 
öt8_t
 
	tGGLbyã
;

28 
öt16_t
 
	tGGLsh‹t
;

29 
öt32_t
 
	tGGLöt
;

30 
ssize_t
 
	tGGLsizei
;

31 
öt32_t
 
	tGGLfixed
;

32 
öt32_t
 
	tGGL˛ampx
;

33 
	tGGLÊﬂt
;

34 
	tGGL˛ampf
;

35 
	tGGLdoubÀ
;

36 
	tGGL˛ampd
;

37 
uöt8_t
 
	tGGLubyã
;

38 
uöt8_t
 
	tGGLboﬁón
;

39 
uöt16_t
 
	tGGLush‹t
;

40 
uöt32_t
 
	tGGLuöt
;

41 
	tGGLíum
;

42 
	tGGLbôfõld
;

43 
	tGGLvoid
;

44 
öt32_t
 
	tGGLfixed32
;

45 
öt32_t
 
	tGGLcﬁ‹
;

46 
öt32_t
 
	tGGLco‹d
;

50 
	#GGL_MAX_VIEWPORT_DIMS
 4096

	)

51 
	#GGL_MAX_TEXTURE_SIZE
 4096

	)

52 
	#GGL_MAX_ALIASED_POINT_SIZE
 0x7FFFFFF

	)

53 
	#GGL_MAX_SMOOTH_POINT_SIZE
 2048

	)

54 
	#GGL_MAX_SMOOTH_LINE_WIDTH
 2048

	)

60 
	eGGLNames
 {

61 
	mGGL_FALSE
 = 0,

62 
	mGGL_TRUE
 = 1,

65 
	mGGL_SCISSOR_TEST
 = 0x0C11,

66 
	mGGL_TEXTURE_2D
 = 0x0DE1,

67 
	mGGL_ALPHA_TEST
 = 0x0BC0,

68 
	mGGL_BLEND
 = 0x0BE2,

69 
	mGGL_COLOR_LOGIC_OP
 = 0x0BF2,

70 
	mGGL_DITHER
 = 0x0BD0,

71 
	mGGL_STENCIL_TEST
 = 0x0B90,

72 
	mGGL_DEPTH_TEST
 = 0x0B71,

73 
	mGGL_AA
 = 0x80000001,

74 
	mGGL_W_LERP
 = 0x80000004,

75 
	mGGL_POINT_SMOOTH_NICE
 = 0x80000005,

78 
	mGGL_COLOR
 = 0x1800,

81 
	mGGL_FOG
 = 0x0B60,

84 
	mGGL_FLAT
 = 0x1D00,

85 
	mGGL_SMOOTH
 = 0x1D01,

88 
	mGGL_TEXTURE_MIN_FILTER
 = 0x2801,

89 
	mGGL_TEXTURE_MAG_FILTER
 = 0x2800,

90 
	mGGL_TEXTURE_WRAP_S
 = 0x2802,

91 
	mGGL_TEXTURE_WRAP_T
 = 0x2803,

92 
	mGGL_TEXTURE_WRAP_R
 = 0x2804,

95 
	mGGL_NEAREST
 = 0x2600,

96 
	mGGL_LINEAR
 = 0x2601,

97 
	mGGL_NEAREST_MIPMAP_NEAREST
 = 0x2700,

98 
	mGGL_LINEAR_MIPMAP_NEAREST
 = 0x2701,

99 
	mGGL_NEAREST_MIPMAP_LINEAR
 = 0x2702,

100 
	mGGL_LINEAR_MIPMAP_LINEAR
 = 0x2703,

103 
	mGGL_CLAMP
 = 0x2900,

104 
	mGGL_REPEAT
 = 0x2901,

105 
	mGGL_CLAMP_TO_EDGE
 = 0x812F,

108 
	mGGL_REPLACE
 = 0x1E01,

109 
	mGGL_MODULATE
 = 0x2100,

110 
	mGGL_DECAL
 = 0x2101,

111 
	mGGL_ADD
 = 0x0104,

114 
	mGGL_TEXTURE_ENV_MODE
 = 0x2200,

115 
	mGGL_TEXTURE_ENV_COLOR
 = 0x2201,

118 
	mGGL_TEXTURE_ENV
 = 0x2300,

121 
	mGGL_TEXTURE_GEN_MODE
 = 0x2500,

122 
	mGGL_S
 = 0x2000,

123 
	mGGL_T
 = 0x2001,

124 
	mGGL_R
 = 0x2002,

125 
	mGGL_Q
 = 0x2003,

126 
	mGGL_ONE_TO_ONE
 = 0x80000002,

127 
	mGGL_AUTOMATIC
 = 0x80000003,

130 
	mGGL_NEVER
 = 0x0200,

131 
	mGGL_LESS
 = 0x0201,

132 
	mGGL_EQUAL
 = 0x0202,

133 
	mGGL_LEQUAL
 = 0x0203,

134 
	mGGL_GREATER
 = 0x0204,

135 
	mGGL_NOTEQUAL
 = 0x0205,

136 
	mGGL_GEQUAL
 = 0x0206,

137 
	mGGL_ALWAYS
 = 0x0207,

140 
	mGGL_CLEAR
 = 0x1500,

141 
	mGGL_AND
 = 0x1501,

142 
	mGGL_AND_REVERSE
 = 0x1502,

143 
	mGGL_COPY
 = 0x1503,

144 
	mGGL_AND_INVERTED
 = 0x1504,

145 
	mGGL_NOOP
 = 0x1505,

146 
	mGGL_XOR
 = 0x1506,

147 
	mGGL_OR
 = 0x1507,

148 
	mGGL_NOR
 = 0x1508,

149 
	mGGL_EQUIV
 = 0x1509,

150 
	mGGL_INVERT
 = 0x150A,

151 
	mGGL_OR_REVERSE
 = 0x150B,

152 
	mGGL_COPY_INVERTED
 = 0x150C,

153 
	mGGL_OR_INVERTED
 = 0x150D,

154 
	mGGL_NAND
 = 0x150E,

155 
	mGGL_SET
 = 0x150F,

158 
	mGGL_ZERO
 = 0,

159 
	mGGL_ONE
 = 1,

160 
	mGGL_SRC_COLOR
 = 0x0300,

161 
	mGGL_ONE_MINUS_SRC_COLOR
 = 0x0301,

162 
	mGGL_SRC_ALPHA
 = 0x0302,

163 
	mGGL_ONE_MINUS_SRC_ALPHA
 = 0x0303,

164 
	mGGL_DST_ALPHA
 = 0x0304,

165 
	mGGL_ONE_MINUS_DST_ALPHA
 = 0x0305,

166 
	mGGL_DST_COLOR
 = 0x0306,

167 
	mGGL_ONE_MINUS_DST_COLOR
 = 0x0307,

168 
	mGGL_SRC_ALPHA_SATURATE
 = 0x0308,

171 
	mGGL_DEPTH_BUFFER_BIT
 = 0x00000100,

172 
	mGGL_STENCIL_BUFFER_BIT
 = 0x00000400,

173 
	mGGL_COLOR_BUFFER_BIT
 = 0x00004000,

176 
	mGGL_NO_ERROR
 = 0,

177 
	mGGL_INVALID_ENUM
 = 0x0500,

178 
	mGGL_INVALID_VALUE
 = 0x0501,

179 
	mGGL_INVALID_OPERATION
 = 0x0502,

180 
	mGGL_STACK_OVERFLOW
 = 0x0503,

181 
	mGGL_STACK_UNDERFLOW
 = 0x0504,

182 
	mGGL_OUT_OF_MEMORY
 = 0x0505

188 
GGLsizei
 
	mvîsi⁄
;

189 
GGLuöt
 
	mwidth
;

190 
GGLuöt
 
	mheight
;

191 
GGLöt
 
	m°ride
;

192 
GGLubyã
* 
	md©a
;

193 
GGLubyã
 
	mf‹m©
;

194 
GGLubyã
 
	mrfu
[3];

197 
GGLöt
 
	mcom¥es£dF‹m©
;

198 
GGLöt
 
	mv°ride
;

200 * 
	mª£rved
;

201 } 
	tGGLSurÁ˚
;

206 (*
	mpoötx
)(*
	mc⁄
, c⁄° 
GGLco‹d
* 
	mv
, GGLco‹d 
	mr
);

207 (*
	mlöex
)(*
	mc⁄
,

208 c⁄° 
GGLco‹d
* 
	mv0
, c⁄° GGLco‹d* 
	mv1
, GGLco‹d 
	mwidth
);

209 (*
	mª˘i
)(* 
	mc
, 
GGLöt
 
	ml
, GGLöà
	mt
, GGLöà
	mr
, GGLöà
	mb
);

210 (*
	måüngÀx
)(* 
	mc
,

211 
GGLco‹d
 c⁄°* 
	mv0
, GGLco‹d c⁄°* 
	mv1
, GGLco‹d c⁄°* 
	mv2
);

214 (*
	msciss‹
)(* 
	mc
, 
GGLöt
 
	mx
, GGLöà
	my
, 
GGLsizei
 
	mwidth
, GGLsizeò
	mheight
);

217 (*
	ma˘iveTextuª
)(* 
	mc
, 
GGLuöt
 
	mtmu
);

218 (*
	mbödTextuª
)(* 
	mc
, c⁄° 
GGLSurÁ˚
* 
	msurÁ˚
);

219 (*
	mcﬁ‹Buf„r
)(* 
	mc
, c⁄° 
GGLSurÁ˚
* 
	msurÁ˚
);

220 (*
	mªadBuf„r
)(* 
	mc
, c⁄° 
GGLSurÁ˚
* 
	msurÁ˚
);

221 (*
	mdïthBuf„r
)(* 
	mc
, c⁄° 
GGLSurÁ˚
* 
	msurÁ˚
);

222 (*
	mbödTextuªLod
)(* 
	mc
, 
GGLuöt
 
	mtmu
, c⁄° 
GGLSurÁ˚
* 
	msurÁ˚
);

225 (*
	míabÀ
)(* 
	mc
, 
GGLíum
 
	m«me
);

226 (*
	mdißbÀ
)(* 
	mc
, 
GGLíum
 
	m«me
);

227 (*
	míabÀDißbÀ
)(* 
	mc
, 
GGLíum
 
	m«me
, 
GGLboﬁón
 
	mí
);

230 (*
	mshadeModñ
)(* 
	mc
, 
GGLíum
 
	mmode
);

231 (*
	mcﬁ‹4xv
)(* 
	mc
, c⁄° 
GGL˛ampx
* 
	mcﬁ‹
);

233 (*
	mcﬁ‹Gød12xv
)(* 
	mc
, c⁄° 
GGLcﬁ‹
* 
	mgød
);

236 (*
	mzGød3xv
)(* 
	mc
, c⁄° 
GGLfixed32
* 
	mgød
);

239 (*
	mwGød3xv
)(* 
	mc
, c⁄° 
GGLfixed
* 
	mgød
);

242 (*
	mfogGød3xv
)(* 
	mc
, c⁄° 
GGLfixed
* 
	mgød
);

243 (*
	mfogCﬁ‹3xv
)(* 
	mc
, c⁄° 
GGL˛ampx
* 
	mcﬁ‹
);

246 (*
	mbÀndFunc
)(* 
	mc
, 
GGLíum
 
	m§c
, GGLíum 
	md°
);

247 (*
	mbÀndFuncSï¨©e
)(* 
	mc
, 
GGLíum
 
	m§c
, GGLíum 
	md°
,

248 
GGLíum
 
	m§cAÕha
, GGLíum 
	md°A∂ha
);

251 (*
	mãxEnvi
)(* 
	mc
, 
GGLíum
 
	mèrgë
,

252 
GGLíum
 
	m≤ame
,

253 
GGLöt
 
	m∑øm
);

255 (*
	mãxEnvxv
)(* 
	mc
, 
GGLíum
 
	mèrgë
,

256 
GGLíum
 
	m≤ame
, c⁄° 
GGLfixed
* 
	m∑øms
);

259 (*
	mãxP¨amëîi
)(* 
	mc
, 
GGLíum
 
	mèrgë
,

260 
GGLíum
 
	m≤ame
,

261 
GGLöt
 
	m∑øm
);

264 (*
	mãxCo‹d2i
)(* 
	mc
, 
GGLöt
 
	ms
, GGLöà
	mt
);

265 (*
	mãxCo‹d2x
)(* 
	mc
, 
GGLfixed
 
	ms
, GGLfixed 
	mt
);

271 (*
	mãxCo‹dGødSˇÀ8xv
)(* 
	mc
, 
GGLöt
 
	mtmu
, c⁄° 
öt32_t
* 
	mgød8
);

273 (*
	mãxGíi
)(* 
	mc
, 
GGLíum
 
	mco‹d
, GGLíum 
	m≤ame
, 
GGLöt
 
	m∑øm
);

276 (*
	mcﬁ‹Mask
)(* 
	mc
, 
GGLboﬁón
 
	mªd
,

277 
GGLboﬁón
 
	mgªí
,

278 
GGLboﬁón
 
	mblue
,

279 
GGLboﬁón
 
	mÆpha
);

281 (*
	mdïthMask
)(* 
	mc
, 
GGLboﬁón
 
	mÊag
);

283 (*
	m°ícûMask
)(* 
	mc
, 
GGLuöt
 
	mmask
);

286 (*
	mÆphaFuncx
)(* 
	mc
, 
GGLíum
 
	mfunc
, 
GGL˛ampx
 
	mªf
);

289 (*
	mdïthFunc
)(* 
	mc
, 
GGLíum
 
	mfunc
);

292 (*
	mlogicOp
)(* 
	mc
, 
GGLíum
 
	m›code
);

295 (*
	m˛ór
)(* 
	mc
, 
GGLbôfõld
 
	mmask
);

296 (*
	m˛órCﬁ‹x
)(* 
	mc
,

297 
GGL˛ampx
 
	mr
, GGL˛ampx 
	mg
, GGL˛ampx 
	mb
, GGL˛ampx 
	ma
);

298 (*
	m˛órDïthx
)(* 
	mc
, 
GGL˛ampx
 
	mdïth
);

299 (*
	m˛órSãncû
)(* 
	mc
, 
GGLöt
 
	ms
);

302 (*
	mc›yPixñs
)(* 
	mc
, 
GGLöt
 
	mx
, GGLöà
	my
,

303 
GGLsizei
 
	mwidth
, GGLsizeò
	mheight
, 
GGLíum
 
	mty≥
);

304 (*
	mø°îPos2x
)(* 
	mc
, 
GGLfixed
 
	mx
, GGLfixed 
	my
);

305 (*
	mø°îPos2i
)(* 
	mc
, 
GGLöt
 
	mx
, GGLöà
	my
);

306 } 
	tGGLC⁄ãxt
;

310 #ifde‡
__˝lu•lus


315 
ssize_t
 
gglInô
(
GGLC⁄ãxt
** 
c⁄ãxt
);

316 
ssize_t
 
gglUnöô
(
GGLC⁄ãxt
* 
c⁄ãxt
);

318 
GGLöt
 
gglBôBlô
(

319 
GGLC⁄ãxt
* 
c
,

320 
tmu
,

321 
GGLöt
 
¸›
[4],

322 
GGLöt
 
whîe
[4]);

324 #ifde‡
__˝lu•lus


	@jni/include/surfaceflinger/ISurface.h

17 #i‚de‡
ANDROID_SF_ISURFACE_H


18 
	#ANDROID_SF_ISURFACE_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	~<utûs/Eº‹s.h
>

24 
	~<utûs/RefBa£.h
>

26 
	~<bödî/II¡îÁ˚.h
>

28 
	~<ui/PixñF‹m©.h
>

30 
	~<h¨dw¨e/h¨dw¨e.h
>

31 
	~<h¨dw¨e/gøŒoc.h
>

33 
«me•a˚
 
	g™droid
 {

35 
öt32_t
 
	tSurÁ˚ID
;

37 
˛ass
 
	gIMem‹yHóp
;

38 
˛ass
 
	gOvîœyRef
;

39 
˛ass
 
	gGøphicBuf„r
;

41 ˛as†
	cISurÁ˚
 : 
public
 
II¡îÁ˚


43 
¥Ÿe˘ed
:

45 
REGISTER_BUFFERS
 = 
IBödî
::
FIRST_CALL_TRANSACTION
,

46 
	gUNREGISTER_BUFFERS
,

47 
	gPOST_BUFFER
,

48 
	gCREATE_OVERLAY
,

49 
	gREQUEST_BUFFER
,

52 
	gpublic
:

53 
DECLARE_META_INTERFACE
(
SurÁ˚
);

55 
vútuÆ
 
	g•
<
	gGøphicBuf„r
> 
ªque°Buf„r
(
buf„rIdx
, 
ußge
) = 0;

57 ˛as†
	cBuf„rHóp
 {

58 
	gpublic
:

61 
ROT_0
 = 0,

62 
	gROT_90
 = 
HAL_TRANSFORM_ROT_90
,

63 
	gROT_180
 = 
HAL_TRANSFORM_ROT_180
,

64 
	gROT_270
 = 
HAL_TRANSFORM_ROT_270
,

66 
Buf„rHóp
();

68 
Buf„rHóp
(
uöt32_t
 
w
, uöt32_à
h
,

69 
öt32_t
 
h‹_°ride
, i¡32_à
vî_°ride
,

70 
PixñF‹m©
 
f‹m©
, c⁄° 
•
<
IMem‹yHóp
>& 
hóp
);

72 
Buf„rHóp
(
uöt32_t
 
w
, uöt32_à
h
,

73 
öt32_t
 
h‹_°ride
, i¡32_à
vî_°ride
,

74 
PixñF‹m©
 
f‹m©
, 
uöt32_t
 
å™sf‹m
, uöt32_à
Êags
,

75 c⁄° 
•
<
IMem‹yHóp
>& 
hóp
);

77 ~
Buf„rHóp
();

79 
uöt32_t
 
	gw
;

80 
uöt32_t
 
	gh
;

81 
öt32_t
 
	gh‹_°ride
;

82 
öt32_t
 
	gvî_°ride
;

83 
PixñF‹m©
 
	gf‹m©
;

84 
uöt32_t
 
	gå™sf‹m
;

85 
uöt32_t
 
	gÊags
;

86 
	g•
<
	gIMem‹yHóp
> 
	ghóp
;

89 
vútuÆ
 
°©us_t
 
ªgi°îBuf„rs
(c⁄° 
Buf„rHóp
& 
buf„rs
) = 0;

90 
vútuÆ
 
po°Buf„r
(
ssize_t
 
off£t
) = 0;

91 
vútuÆ
 
uƒegi°îBuf„rs
() = 0;

93 
vútuÆ
 
	g•
<
	gOvîœyRef
> 
¸óãOvîœy
(

94 
uöt32_t
 
w
, uöt32_à
h
, 
öt32_t
 
f‹m©
, i¡32_à
‹õ¡©i⁄
) = 0;

99 
˛ass
 
	gBnSurÁ˚
 : 
public
 
BnI¡îÁ˚
<
ISurÁ˚
>

101 
public
:

102 
vútuÆ
 
°©us_t
 
⁄Tønß˘
–
uöt32_t
 
code
,

103 c⁄° 
P¨˚l
& 
d©a
,

104 
P¨˚l
* 
ª∂y
,

105 
uöt32_t
 
Êags
 = 0);

	@jni/include/surfaceflinger/ISurfaceComposer.h

17 #i‚de‡
ANDROID_SF_ISURFACE_COMPOSER_H


18 
	#ANDROID_SF_ISURFACE_COMPOSER_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	~<utûs/RefBa£.h
>

24 
	~<utûs/Eº‹s.h
>

26 
	~<bödî/II¡îÁ˚.h
>

28 
	~<ui/PixñF‹m©.h
>

30 
	~<surÁ˚Êögî/ISurÁ˚FlögîClõ¡.h
>

32 
«me•a˚
 
	g™droid
 {

35 ˛as†
	cISurÁ˚Compo£r
 : 
public
 
II¡îÁ˚


37 
public
:

38 
DECLARE_META_INTERFACE
(
SurÁ˚Compo£r
);

41 
	geHiddí
 = 0x00000004,

42 
	geDe°royBackbuf„r
 = 0x00000020,

43 
	geSecuª
 = 0x00000080,

44 
	geN⁄Pªmu…ùlõd
 = 0x00000100,

45 
	gePushBuf„rs
 = 0x00000200,

47 
	geFXSurÁ˚N‹mÆ
 = 0x00000000,

48 
	geFXSurÁ˚Blur
 = 0x00010000,

49 
	geFXSurÁ˚Dim
 = 0x00020000,

50 
	geFXSurÁ˚Mask
 = 0x000F0000,

54 
	gePosôi⁄Ch™ged
 = 0x00000001,

55 
	geLayîCh™ged
 = 0x00000002,

56 
	geSizeCh™ged
 = 0x00000004,

57 
	geAÕhaCh™ged
 = 0x00000008,

58 
	geM©rixCh™ged
 = 0x00000010,

59 
	geTøn•¨ítRegi⁄Ch™ged
 = 0x00000020,

60 
	geVisibûôyCh™ged
 = 0x00000040,

61 
	geFªezeTötCh™ged
 = 0x00000080,

65 
	geLayîHiddí
 = 0x01,

66 
	geLayîFrozí
 = 0x02,

67 
	geLayîDôhî
 = 0x04,

68 
	geLayîFûãr
 = 0x08,

69 
	geLayîBlurFªeze
 = 0x10

73 
	geOrõ¡©i⁄DeÁu…
 = 0,

74 
	geOrõ¡©i⁄90
 = 1,

75 
	geOrõ¡©i⁄180
 = 2,

76 
	geOrõ¡©i⁄270
 = 3,

77 
	geOrõ¡©i⁄Sw≠Mask
 = 0x01

82 
	geOrõ¡©i⁄Anim©i⁄DißbÀ
 = 0x00000001

89 
vútuÆ
 
	g•
<
	gISurÁ˚FlögîClõ¡
> 
¸óãC⁄√˘i⁄
() = 0;

92 
vútuÆ
 
	g•
<
	gIMem‹yHóp
> 
gëCblk
() const = 0;

95 
vútuÆ
 
›íGlobÆTønß˘i⁄
() = 0;

96 
vútuÆ
 
˛o£GlobÆTønß˘i⁄
() = 0;

99 
vútuÆ
 
°©us_t
 
‰ìzeDi•œy
(
Di•œyID
 
dpy
, 
uöt32_t
 
Êags
) = 0;

100 
vútuÆ
 
°©us_t
 
un‰ìzeDi•œy
(
Di•œyID
 
dpy
, 
uöt32_t
 
Êags
) = 0;

103 
vútuÆ
 
£tOrõ¡©i⁄
(
Di•œyID
 
dpy
, 
‹õ¡©i⁄
, 
uöt32_t
 
Êags
) = 0;

108 
vútuÆ
 
boŸFöished
() = 0;

113 
vútuÆ
 
sig«l
() const = 0;

118 
˛ass
 
	gBnSurÁ˚Compo£r
 : 
public
 
BnI¡îÁ˚
<
ISurÁ˚Compo£r
>

120 
public
:

124 
BOOT_FINISHED
 = 
IBödî
::
FIRST_CALL_TRANSACTION
,

125 
	gCREATE_CONNECTION
,

126 
	gGET_CBLK
,

127 
	gOPEN_GLOBAL_TRANSACTION
,

128 
	gCLOSE_GLOBAL_TRANSACTION
,

129 
	gSET_ORIENTATION
,

130 
	gFREEZE_DISPLAY
,

131 
	gUNFREEZE_DISPLAY
,

132 
	gSIGNAL


135 
vútuÆ
 
°©us_t
 
⁄Tønß˘
–
uöt32_t
 
code
,

136 c⁄° 
P¨˚l
& 
d©a
,

137 
P¨˚l
* 
ª∂y
,

138 
uöt32_t
 
Êags
 = 0);

	@jni/include/surfaceflinger/ISurfaceFlingerClient.h

17 #i‚de‡
ANDROID_SF_ISURFACE_FLINGER_CLIENT_H


18 
	#ANDROID_SF_ISURFACE_FLINGER_CLIENT_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	~<utûs/Eº‹s.h
>

24 
	~<utûs/RefBa£.h
>

26 
	~<bödî/II¡îÁ˚.h
>

28 
	~<ui/PixñF‹m©.h
>

30 
	~<surÁ˚Êögî/ISurÁ˚.h
>

32 
«me•a˚
 
	g™droid
 {

36 
˛ass
 
	gIMem‹yHóp
;

38 
öt32_t
 
	tClõ¡ID
;

39 
öt32_t
 
	tDi•œyID
;

43 
˛ass
 
	gœyî_°©e_t
;

45 ˛as†
	cISurÁ˚FlögîClõ¡
 : 
public
 
II¡îÁ˚


47 
public
:

48 
DECLARE_META_INTERFACE
(
SurÁ˚FlögîClõ¡
);

50 
	ssurÁ˚_d©a_t
 {

51 
öt32_t
 
	gtokí
;

52 
öt32_t
 
	gidítôy
;

53 
uöt32_t
 
	gwidth
;

54 
uöt32_t
 
	gheight
;

55 
uöt32_t
 
	gf‹m©
;

56 
°©us_t
 
ªadFromP¨˚l
(c⁄° 
P¨˚l
& 
∑r˚l
);

57 
°©us_t
 
wrôeToP¨˚l
(
P¨˚l
* 
∑r˚l
) const;

60 
vútuÆ
 
	g•
<
	gIMem‹yHóp
> 
gëC⁄åﬁBlock
() const = 0;

62 
vútuÆ
 
	g•
<
	gISurÁ˚
> 
¸óãSurÁ˚
–
surÁ˚_d©a_t
* 
d©a
,

63 
pid
,

64 c⁄° 
Såög8
& 
«me
,

65 
Di•œyID
 
di•œy
,

66 
uöt32_t
 
w
,

67 
uöt32_t
 
h
,

68 
PixñF‹m©
 
f‹m©
,

69 
uöt32_t
 
Êags
) = 0;

71 
vútuÆ
 
°©us_t
 
de°roySurÁ˚
(
SurÁ˚ID
 
sid
) = 0;

73 
vútuÆ
 
°©us_t
 
£tSèã
(
öt32_t
 
cou¡
, c⁄° 
œyî_°©e_t
* 
°©es
) = 0;

78 
˛ass
 
	gBnSurÁ˚FlögîClõ¡
 : 
public
 
BnI¡îÁ˚
<
ISurÁ˚FlögîClõ¡
>

80 
public
:

81 
vútuÆ
 
°©us_t
 
⁄Tønß˘
–
uöt32_t
 
code
,

82 c⁄° 
P¨˚l
& 
d©a
,

83 
P¨˚l
* 
ª∂y
,

84 
uöt32_t
 
Êags
 = 0);

	@jni/include/surfaceflinger/Surface.h

17 #i‚de‡
ANDROID_SF_SURFACE_H


18 
	#ANDROID_SF_SURFACE_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	~<utûs/RefBa£.h
>

24 
	~<utûs/thªads.h
>

26 
	~<ui/PixñF‹m©.h
>

27 
	~<ui/Regi⁄.h
>

28 
	~<ui/egl/™droid_«tives.h
>

30 
	~<surÁ˚Êögî/ISurÁ˚.h
>

31 
	~<surÁ˚Êögî/ISurÁ˚FlögîClõ¡.h
>

33 
«me•a˚
 
	g™droid
 {

37 
˛ass
 
	gGøphicBuf„rM≠≥r
;

38 
˛ass
 
	gIOMX
;

39 
˛ass
 
	gRe˘
;

40 
˛ass
 
	gSurÁ˚
;

41 
˛ass
 
	gSurÁ˚Compo£rClõ¡
;

42 
˛ass
 
	gSh¨edClõ¡
;

43 
˛ass
 
	gSh¨edBuf„rClõ¡
;

47 ˛as†
	cSurÁ˚C⁄åﬁ
 : 
public
 
RefBa£


49 
public
:

50 
boﬁ
 
isVÆid
(c⁄° 
•
<
SurÁ˚C⁄åﬁ
>& 
surÁ˚
) {

51  (
surÁ˚
 !0Ë&& surÁ˚->
isVÆid
();

53 
boﬁ
 
isVÆid
() {

54  
	gmTokí
>=0 && 
mClõ¡
!=0;

56 
boﬁ
 
isSameSurÁ˚
(

57 c⁄° 
•
<
SurÁ˚C⁄åﬁ
>& 
lhs
, c⁄° sp<SurÁ˚C⁄åﬁ>& 
rhs
);

59 
SurÁ˚ID
 
ID
(Ëc⁄° {  
	gmTokí
; }

60 
uöt32_t
 
gëFœgs
(Ëc⁄° {  
	gmFœgs
; }

61 
uöt32_t
 
gëIdítôy
(Ëc⁄° {  
	gmIdítôy
; }

64 
˛ór
();

66 
°©us_t
 
£tLayî
(
öt32_t
 
œyî
);

67 
°©us_t
 
£tPosôi⁄
(
öt32_t
 
x
, i¡32_à
y
);

68 
°©us_t
 
£tSize
(
uöt32_t
 
w
, uöt32_à
h
);

69 
°©us_t
 
hide
();

70 
°©us_t
 
show
(
öt32_t
 
œyî
 = -1);

71 
°©us_t
 
‰ìze
();

72 
°©us_t
 
un‰ìze
();

73 
°©us_t
 
£tFœgs
(
uöt32_t
 
Êags
, uöt32_à
mask
);

74 
°©us_t
 
£tTøn•¨ítRegi⁄Höt
(c⁄° 
Regi⁄
& 
å™•¨ít
);

75 
°©us_t
 
£tAÕha
(
Æpha
=1.0f);

76 
°©us_t
 
£tM©rix
(
dsdx
, 
dtdx
, 
dsdy
, 
dtdy
);

77 
°©us_t
 
£tFªezeTöt
(
uöt32_t
 
töt
);

79 
°©us_t
 
wrôeSurÁ˚ToP¨˚l
(

80 c⁄° 
•
<
SurÁ˚C⁄åﬁ
>& 
c⁄åﬁ
, 
P¨˚l
* 
∑r˚l
);

82 
	g•
<
	gSurÁ˚
> 
gëSurÁ˚
() const;

84 
	g¥iv©e
:

86 
SurÁ˚C⁄åﬁ
& 
›î©‹
 = (SurÁ˚C⁄åﬁ& 
rhs
);

87 
SurÁ˚C⁄åﬁ
(c⁄° SurÁ˚C⁄åﬁ& 
rhs
);

90 
‰õnd
 
˛ass
 
	gSurÁ˚Compo£rClõ¡
;

93 
‰õnd
 
˛ass
 
	gCamîa
;

94 
‰õnd
 
˛ass
 
	gMedüRec‹dî
;

96 
‰õnd
 
˛ass
 
	gMedüPœyî
;

98 
‰õnd
 
˛ass
 
	gTe°
;

99 c⁄° 
	g•
<
	gISurÁ˚
>& 
gëISurÁ˚
(Ëc⁄° {  
	gmSurÁ˚
; }

102 
‰õnd
 
˛ass
 
	gSurÁ˚
;

104 
SurÁ˚C⁄åﬁ
(

105 c⁄° 
•
<
SurÁ˚Compo£rClõ¡
>& 
˛õ¡
,

106 c⁄° 
•
<
ISurÁ˚
>& 
surÁ˚
,

107 c⁄° 
ISurÁ˚FlögîClõ¡
::
surÁ˚_d©a_t
& 
d©a
,

108 
uöt32_t
 
w
, uöt32_à
h
, 
PixñF‹m©
 
f‹m©
, uöt32_à
Êags
);

110 ~
SurÁ˚C⁄åﬁ
();

112 
°©us_t
 
vÆid©e
() const;

113 
de°roy
();

115 
	g•
<
	gSurÁ˚Compo£rClõ¡
> 
	gmClõ¡
;

116 
	g•
<
	gISurÁ˚
> 
	gmSurÁ˚
;

117 
SurÁ˚ID
 
	gmTokí
;

118 
uöt32_t
 
	gmIdítôy
;

119 
uöt32_t
 
	gmWidth
;

120 
uöt32_t
 
	gmHeight
;

121 
PixñF‹m©
 
	gmF‹m©
;

122 
uöt32_t
 
	gmFœgs
;

123 
muèbÀ
 
Muãx
 
	gmLock
;

125 
muèbÀ
 
	g•
<
	gSurÁ˚
> 
	gmSurÁ˚D©a
;

130 
˛ass
 
	gSurÁ˚


131 : 
public
 
EGLN©iveBa£
<
™droid_«tive_wödow_t
, 
	gSurÁ˚
, 
	gRefBa£
>

133 
	gpublic
:

134 
	sSurÁ˚Info
 {

135 
uöt32_t
 
w
;

136 
uöt32_t
 
	gh
;

137 
uöt32_t
 
	gs
;

138 
uöt32_t
 
	gußge
;

139 
PixñF‹m©
 
	gf‹m©
;

140 * 
	gbôs
;

141 
uöt32_t
 
	gª£rved
[2];

144 
SurÁ˚
(c⁄° 
P¨˚l
& 
d©a
);

146 
boﬁ
 
isVÆid
(c⁄° 
•
<
SurÁ˚
>& 
surÁ˚
) {

147  (
	gsurÁ˚
 !0Ë&& 
surÁ˚
->
isVÆid
();

150 
boﬁ
 
isSameSurÁ˚
(

151 c⁄° 
•
<
SurÁ˚
>& 
lhs
, c⁄° sp<SurÁ˚>& 
rhs
);

153 
boﬁ
 
isVÆid
();

154 
SurÁ˚ID
 
ID
(Ëc⁄° {  
	gmTokí
; }

155 
uöt32_t
 
gëFœgs
(Ëc⁄° {  
	gmFœgs
; }

156 
uöt32_t
 
gëIdítôy
(Ëc⁄° {  
	gmIdítôy
; }

159 
°©us_t
 
lock
(
SurÁ˚Info
* 
öfo
, 
boﬁ
 
blockög
 = 
åue
);

160 
°©us_t
 
lock
(
SurÁ˚Info
* 
öfo
, 
Regi⁄
* 
dúty
, 
boﬁ
 
blockög
 = 
åue
);

161 
°©us_t
 
u∆ockAndPo°
();

164 
£tSw≠Re˘™gÀ
(c⁄° 
Re˘
& 
r
);

166 
	g¥iv©e
:

168 
SurÁ˚
& 
›î©‹
 = (SurÁ˚& 
rhs
);

169 
SurÁ˚
(c⁄° SurÁ˚& 
rhs
);

171 
SurÁ˚
(c⁄° 
•
<
SurÁ˚C⁄åﬁ
>& 
c⁄åﬁ
);

172 
öô
();

173 ~
SurÁ˚
();

175 
‰õnd
 
˛ass
 
	gSurÁ˚Compo£rClõ¡
;

176 
‰õnd
 
˛ass
 
	gSurÁ˚C⁄åﬁ
;

180 
‰õnd
 
˛ass
 
	gCamîa
;

181 
‰õnd
 
˛ass
 
	gMedüRec‹dî
;

183 
‰õnd
 
˛ass
 
	gMedüPœyî
;

184 
‰õnd
 
˛ass
 
	gIOMX
;

186 
‰õnd
 
˛ass
 
	gTe°
;

188 
	g•
<
	gSurÁ˚Compo£rClõ¡
> 
gëClõ¡
() const;

189 
	g•
<
	gISurÁ˚
> 
gëISurÁ˚
() const;

191 
°©us_t
 
gëBuf„rLocked
(
ödex
, 
ußge
);

193 
°©us_t
 
vÆid©e
() const;

195 
ölöe
 c⁄° 
	gGøphicBuf„rM≠≥r
& 
gëBuf„rM≠≥r
(Ëc⁄° {  
	gmBuf„rM≠≥r
; }

196 
ölöe
 
	gGøphicBuf„rM≠≥r
& 
gëBuf„rM≠≥r
(Ë{  
	gmBuf„rM≠≥r
; }

198 
£tSw≠I¡îvÆ
(
™droid_«tive_wödow_t
* 
wödow
, 
öãrvÆ
);

199 
dequeueBuf„r
(
™droid_«tive_wödow_t
* 
wödow
, 
™droid_«tive_buf„r_t
** 
buf„r
);

200 
lockBuf„r
(
™droid_«tive_wödow_t
* 
wödow
, 
™droid_«tive_buf„r_t
* 
buf„r
);

201 
queueBuf„r
(
™droid_«tive_wödow_t
* 
wödow
, 
™droid_«tive_buf„r_t
* 
buf„r
);

202 
quîy
(
™droid_«tive_wödow_t
* 
wödow
, 
wh©
, * 
vÆue
);

203 
≥rf‹m
(
™droid_«tive_wödow_t
* 
wödow
, 
›î©i⁄
, ...);

205 
dequeueBuf„r
(
™droid_«tive_buf„r_t
** 
buf„r
);

206 
lockBuf„r
(
™droid_«tive_buf„r_t
* 
buf„r
);

207 
queueBuf„r
(
™droid_«tive_buf„r_t
* 
buf„r
);

208 
quîy
(
wh©
, * 
vÆue
);

209 
≥rf‹m
(
›î©i⁄
, 
va_li°
 
¨gs
);

211 
°©us_t
 
dequeueBuf„r
(
•
<
GøphicBuf„r
>* 
buf„r
);

213 
di•©ch_£tUßge
(
va_li°
 
¨gs
);

214 
di•©ch_c⁄√˘
(
va_li°
 
¨gs
);

215 
di•©ch_disc⁄√˘
(
va_li°
 
¨gs
);

217 
£tUßge
(
uöt32_t
 
ªqUßge
);

218 
c⁄√˘
(
≠i
);

219 
disc⁄√˘
(
≠i
);

221 
uöt32_t
 
gëUßge
() const;

222 
gëC⁄√˘edApi
() const;

225 
	g•
<
	gSurÁ˚Compo£rClõ¡
> 
	gmClõ¡
;

226 
	g•
<
	gISurÁ˚
> 
	gmSurÁ˚
;

227 
SurÁ˚ID
 
	gmTokí
;

228 
uöt32_t
 
	gmIdítôy
;

229 
PixñF‹m©
 
	gmF‹m©
;

230 
uöt32_t
 
	gmFœgs
;

231 
	gGøphicBuf„rM≠≥r
& 
	gmBuf„rM≠≥r
;

232 
Sh¨edBuf„rClõ¡
* 
	gmSh¨edBuf„rClõ¡
;

235 
Re˘
 
	gmSw≠Re˘™gÀ
;

236 
uöt32_t
 
	gmUßge
;

237 
	gmC⁄√˘ed
;

241 
	g•
<
	gGøphicBuf„r
> 
	gmBuf„rs
[2];

242 
muèbÀ
 
Regi⁄
 
	gmDútyRegi⁄
;

245 
	g•
<
	gGøphicBuf„r
> 
	gmLockedBuf„r
;

246 
	g•
<
	gGøphicBuf„r
> 
	gmPo°edBuf„r
;

247 
muèbÀ
 
Regi⁄
 
	gmOldDútyRegi⁄
;

248 
boﬁ
 
	gmNìdFuŒUpd©e
;

251 
uöt32_t
 
	gmWidth
;

252 
uöt32_t
 
	gmHeight
;

255 
muèbÀ
 
Muãx
 
	gmSurÁ˚Lock
;

256 
muèbÀ
 
Muãx
 
	gmApiLock
;

	@jni/include/surfaceflinger/SurfaceComposerClient.h

17 #i‚de‡
ANDROID_SF_SURFACE_COMPOSER_CLIENT_H


18 
	#ANDROID_SF_SURFACE_COMPOSER_CLIENT_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	~<bödî/IBödî.h
>

25 
	~<utûs/S‹ãdVe˘‹.h
>

26 
	~<utûs/RefBa£.h
>

27 
	~<utûs/thªads.h
>

29 
	~<ui/PixñF‹m©.h
>

30 
	~<ui/Regi⁄.h
>

32 
	~<surÁ˚Êögî/SurÁ˚.h
>

34 
«me•a˚
 
	g™droid
 {

38 
˛ass
 
	gRegi⁄
;

39 
˛ass
 
	gSh¨edClõ¡
;

40 
˛ass
 
	gISurÁ˚Compo£r
;

41 
˛ass
 
	gDi•œyInfo
;

43 ˛as†
	cSurÁ˚Compo£rClõ¡
 : 
vútuÆ
 
public
 
RefBa£


45 
public
:

46 
SurÁ˚Compo£rClõ¡
();

47 
	gvútuÆ
 ~
SurÁ˚Compo£rClõ¡
();

50 
°©us_t
 
öôCheck
() const;

53 
	g•
<
	gIBödî
> 
c⁄√˘i⁄
() const;

56 
	g•
<
	gSurÁ˚Compo£rClõ¡
>

57 
˛õ¡F‹C⁄√˘i⁄
(c⁄° 
•
<
IBödî
>& 
c⁄n
);

60 
di•o£
();

66 
	g•
<
	gSurÁ˚C⁄åﬁ
> 
¸óãSurÁ˚
(

67 
pid
,

68 c⁄° 
Såög8
& 
«me
,

69 
Di•œyID
 
di•œy
,

70 
uöt32_t
 
w
,

71 
uöt32_t
 
h
,

72 
PixñF‹m©
 
f‹m©
,

73 
uöt32_t
 
Êags
 = 0

76 
	g•
<
	gSurÁ˚C⁄åﬁ
> 
¸óãSurÁ˚
(

77 
pid
,

78 
Di•œyID
 
di•œy
,

79 
uöt32_t
 
w
,

80 
uöt32_t
 
h
,

81 
PixñF‹m©
 
f‹m©
,

82 
uöt32_t
 
Êags
 = 0

94 
°©us_t
 
›íTønß˘i⁄
();

97 
°©us_t
 
˛o£Tønß˘i⁄
();

100 
›íGlobÆTønß˘i⁄
();

103 
˛o£GlobÆTønß˘i⁄
();

106 
°©us_t
 
‰ìzeDi•œy
(
Di•œyID
 
dpy
, 
uöt32_t
 
Êags
 = 0);

109 
°©us_t
 
un‰ìzeDi•œy
(
Di•œyID
 
dpy
, 
uöt32_t
 
Êags
 = 0);

112 
£tOrõ¡©i⁄
(
Di•œyID
 
dpy
, 
‹õ¡©i⁄
, 
uöt32_t
 
Êags
);

115 
ssize_t
 
gëNumbîOfDi•œys
();

118 
°©us_t
 
gëDi•œyInfo
(
Di•œyID
 
dpy
, 
Di•œyInfo
* 
öfo
);

119 
ssize_t
 
gëDi•œyWidth
(
Di•œyID
 
dpy
);

120 
ssize_t
 
gëDi•œyHeight
(
Di•œyID
 
dpy
);

121 
ssize_t
 
gëDi•œyOrõ¡©i⁄
(
Di•œyID
 
dpy
);

123 
°©us_t
 
lökToCompo£rDóth
(c⁄° 
•
<
IBödî
::
DóthRecùõ¡
>& 
ªcùõ¡
,

124 * 
cookõ
 = 
NULL
, 
uöt32_t
 
Êags
 = 0);

126 
	g¥iv©e
:

127 
‰õnd
 
˛ass
 
SurÁ˚
;

128 
‰õnd
 
˛ass
 
	gSurÁ˚C⁄åﬁ
;

130 
SurÁ˚Compo£rClõ¡
(c⁄° 
•
<
ISurÁ˚Compo£r
>& 
sm
,

131 c⁄° 
•
<
IBödî
>& 
c⁄n
);

133 
°©us_t
 
hide
(
SurÁ˚ID
 
id
);

134 
°©us_t
 
show
(
SurÁ˚ID
 
id
, 
öt32_t
 
œyî
 = -1);

135 
°©us_t
 
‰ìze
(
SurÁ˚ID
 
id
);

136 
°©us_t
 
un‰ìze
(
SurÁ˚ID
 
id
);

137 
°©us_t
 
£tFœgs
(
SurÁ˚ID
 
id
, 
uöt32_t
 
Êags
, uöt32_à
mask
);

138 
°©us_t
 
£tTøn•¨ítRegi⁄Höt
(
SurÁ˚ID
 
id
, c⁄° 
Regi⁄
& 
å™•¨ít
);

139 
°©us_t
 
£tLayî
(
SurÁ˚ID
 
id
, 
öt32_t
 
œyî
);

140 
°©us_t
 
£tAÕha
(
SurÁ˚ID
 
id
, 
Æpha
=1.0f);

141 
°©us_t
 
£tFªezeTöt
(
SurÁ˚ID
 
id
, 
uöt32_t
 
töt
);

142 
°©us_t
 
£tM©rix
(
SurÁ˚ID
 
id
, 
dsdx
, 
dtdx
, 
dsdy
, 
dtdy
);

143 
°©us_t
 
£tPosôi⁄
(
SurÁ˚ID
 
id
, 
öt32_t
 
x
, i¡32_à
y
);

144 
°©us_t
 
£tSize
(
SurÁ˚ID
 
id
, 
uöt32_t
 
w
, uöt32_à
h
);

146 
sig«lSîvî
();

148 
°©us_t
 
de°roySurÁ˚
(
SurÁ˚ID
 
sid
);

150 
_öô
(c⁄° 
•
<
ISurÁ˚Compo£r
>& 
sm
,

151 c⁄° 
•
<
ISurÁ˚FlögîClõ¡
>& 
c⁄n
);

153 
ölöe
 
œyî_°©e_t
* 
_gë_°©e_l
(
SurÁ˚ID
 
id
);

154 
œyî_°©e_t
* 
_lockLayîSèã
(
SurÁ˚ID
 
id
);

155 
ölöe
 
_u∆ockLayîSèã
();

157 
muèbÀ
 
Muãx
 
	gmLock
;

158 
œyî_°©e_t
* 
	gmPªbuûtLayîSèã
;

159 
	gS‹ãdVe˘‹
<
	gœyî_°©e_t
> 
	gmSèãs
;

160 
öt32_t
 
	gmTønß˘i⁄O≥n
;

164 
°©us_t
 
	gmSètus
;

165 
Sh¨edClõ¡
* 
	gmC⁄åﬁ
;

166 
	g•
<
	gIMem‹yHóp
> 
	gmC⁄åﬁMem‹y
;

167 
	g•
<
	gISurÁ˚FlögîClõ¡
> 
	gmClõ¡
;

168 
	g•
<
	gISurÁ˚Compo£r
> 
	gmSig«lSîvî
;

	@jni/include/system/core/include/arch/linux-arm/AndroidConfig.h

20 #i‚de‡
_ANDROID_CONFIG_H


21 
	#_ANDROID_CONFIG_H


	)

42 
	#HAVE_PTHREADS


	)

50 
	#HAVE_ANDROID_PTHREAD_SETNAME_NP


	)

55 
	#HAVE_FUTEX


	)

61 
	#HAVE_FUTEX_WRAPPERS
 1

	)

69 
	#HAVE_FORKEXEC


	)

76 
	#HAVE_OOM_ADJ


	)

86 
	#HAVE_ANDROID_IPC


	)

94 
	#HAVE_POSIX_FILEMAP


	)

99 
	#HAVE_TERMIO_H


	)

104 
	#HAVE_SYS_SENDFILE_H
 1

	)

114 
	#HAVE_SYS_UIO_H


	)

120 
	#HAVE_SYMLINKS


	)

135 
	#HAVE_IOCTL


	)

145 
	#HAVE_POSIX_CLOCKS


	)

151 
	#HAVE_TIMEDWAIT_MONOTONIC


	)

156 
	#HAVE_EPOLL


	)

165 
	#HAVE_ENDIAN_H


	)

166 
	#HAVE_LITTLE_ENDIAN


	)

179 
	#HAVE_OFF64_T


	)

186 
	#HAVE_BACKTRACE
 0

	)

193 
	#HAVE_DLADDR
 1

	)

199 
	#HAVE_CXXABI
 0

	)

204 
	#HAVE_GETTID


	)

209 
	#HAVE_SCHED_SETSCHEDULER


	)

214 #i‚de‡
__löux__


215 
	#__löux__


	)

221 
	#HAVE_MALLOC_H


	)

226 
	#HAVE_ANDROID_OS
 1

	)

231 
	#HAVE_LINUX_LOCAL_SOCKET_NAMESPACE
 1

	)

236 
	#HAVE_INOTIFY
 1

	)

241 
	#HAVE_MADVISE
 1

	)

246 
	#HAVE_TM_GMTOFF
 1

	)

251 
	#HAVE_DIRENT_D_TYPE
 1

	)

256 
	#HAVE_LIBC_SYSTEM_PROPERTIES
 1

	)

267 
	#ARCH_ARM


	)

277 
	#OS_SHARED_LIB_FORMAT_STR
 "lib%s.so"

	)

282 
	#HAVE__MEMCMP16
 1

	)

287 
	#MINCORE_POINTER_TYPE
 *

	)

292 
	#HAVE_SA_NOCLDWAIT


	)

297 
	#OS_PATH_SEPARATOR
 '/'

	)

302 
	#OS_CASE_SENSITIVE


	)

307 
	#HAVE_SYS_SOCKET_H
 1

	)

312 
	#HAVE_STRLCPY
 1

	)

322 
	#HAVE_FUNOPEN
 1

	)

327 
	#HAVE_PRCTL
 1

	)

332 
	#HAVE_WRITEV
 1

	)

337 
	#HAVE_STDINT_H
 1

	)

342 
	#HAVE_STDBOOL_H
 1

	)

347 
	#HAVE_SCHED_H
 1

	)

352 
	#HAVE_PREAD
 1

	)

357 
	#HAVE_STAT_ST_MTIM
 1

	)

362 
	#HAVE_PRINTF_ZD
 1

	)

	@jni/include/ui/ANativeObjectBase.h

17 #i‚de‡
ANDROID_ANDROID_NATIVES_H


18 
	#ANDROID_ANDROID_NATIVES_H


	)

20 
	~<sys/ty≥s.h
>

21 
	~<°rög.h
>

23 
	~<h¨dw¨e/gøŒoc.h
>

24 
	~<sy°em/wödow.h
>

29 
	segl_«tive_pixm≠_t


31 
öt32_t
 
	mvîsi⁄
;

32 
öt32_t
 
	mwidth
;

33 
öt32_t
 
	mheight
;

34 
öt32_t
 
	m°ride
;

35 
uöt8_t
* 
	md©a
;

36 
uöt8_t
 
	mf‹m©
;

37 
uöt8_t
 
	mrfu
[3];

39 
uöt32_t
 
	mcom¥es£dF‹m©
;

40 
öt32_t
 
	mv°ride
;

42 
öt32_t
 
	mª£rved
;

43 } 
	tegl_«tive_pixm≠_t
;

47 #ifde‡
__˝lu•lus


49 
	~<utûs/RefBa£.h
>

51 
«me•a˚
 
	g™droid
 {

57 
	gãm∂©e
 <
ty≥«me
 
	gNATIVE_TYPE
,Åy≥«mê
	gTYPE
,Åy≥«mê
	gREF
>

58 
˛ass
 
	gAN©iveObje˘Ba£
 : 
public
 
NATIVE_TYPE
,Öubli¯
	gREF


60 
	gpublic
:

62 
öcSå⁄g
(c⁄° * 
id
) const {

63 
REF
::
öcSå⁄g
(
id
);

65 
decSå⁄g
(c⁄° * 
id
) const {

66 
	gREF
::
decSå⁄g
(
id
);

69 
	g¥Ÿe˘ed
:

70 
AN©iveObje˘Ba£
<
	tNATIVE_TYPE
, 
	tTYPE
, 
	tREF
> 
	tBASE
;

71 
AN©iveObje˘Ba£
(Ë: 
NATIVE_TYPE
(), 
REF
() {

72 
	gNATIVE_TYPE
::
comm⁄
.
öcRef
 = incRef;

73 
	gNATIVE_TYPE
::
comm⁄
.
decRef
 = decRef;

75 
ölöe
 
TYPE
* 
gëSñf
(
NATIVE_TYPE
* 
£lf
) {

76  
	g°©ic_ˇ°
<
	gTYPE
*>(
	g£lf
);

78 
ölöe
 
TYPE
 c⁄°* 
gëSñf
(
NATIVE_TYPE
 c⁄°* 
£lf
) {

79  
	g°©ic_ˇ°
<
TYPE
 c⁄° *>(
	g£lf
);

81 
ölöe
 
TYPE
* 
gëSñf
(
™droid_«tive_ba£_t
* 
ba£
) {

82  
gëSñf
(
ªöãΩªt_ˇ°
<
NATIVE_TYPE
*>(
ba£
));

84 
ölöe
 
TYPE
 c⁄° * 
gëSñf
(
™droid_«tive_ba£_t
 c⁄°* 
ba£
) {

85  
gëSñf
(
ªöãΩªt_ˇ°
<
NATIVE_TYPE
 c⁄°*>(
ba£
));

87 
öcRef
(
™droid_«tive_ba£_t
* 
ba£
) {

88 
AN©iveObje˘Ba£
* 
	g£lf
 = 
gëSñf
(
ba£
);

89 
	g£lf
->
öcSå⁄g
(
£lf
);

91 
decRef
(
™droid_«tive_ba£_t
* 
ba£
) {

92 
AN©iveObje˘Ba£
* 
	g£lf
 = 
gëSñf
(
ba£
);

93 
	g£lf
->
decSå⁄g
(
£lf
);

	@jni/include/ui/DisplayInfo.h

18 #i‚de‡
ANDROID_UI_DISPLAY_INFO_H


19 
	#ANDROID_UI_DISPLAY_INFO_H


	)

21 
	~<°döt.h
>

22 
	~<sys/ty≥s.h
>

24 
	~<ui/PixñF‹m©.h
>

26 
«me•a˚
 
	g™droid
 {

28 
	sDi•œyInfo
 {

29 
uöt32_t
 
	gw
;

30 
uöt32_t
 
	gh
;

31 
PixñF‹m©Info
 
	gpixñF‹m©Info
;

32 
uöt8_t
 
	g‹õ¡©i⁄
;

33 
uöt8_t
 
	gª£rved
[3];

34 
	gÂs
;

35 
	gdísôy
;

36 
	gxdpi
;

37 
	gydpi
;

	@jni/include/ui/EGLNativeSurface.h

17 #i‚de‡
ANDROID_EGL_NATIVE_SURFACE_H


18 
	#ANDROID_EGL_NATIVE_SURFACE_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	~<cutûs/©omic.h
>

24 
	~<utûs/RefBa£.h
>

26 
	~<EGL/eg ©ives.h
>

29 
«me•a˚
 
	g™droid
 {

32 
	gãm∂©e
 <
˛ass
 
	gTYPE
>

33 
˛ass
 
	gEGLN©iveSurÁ˚
 : 
public
 
egl_«tive_wödow_t
,Öubli¯
	gLightRefBa£
<
	gTYPE
>

35 
	gpublic
:

36 
EGLN©iveSurÁ˚
() {

37 
mem£t
(
egl_«tive_wödow_t
::
ª£rved
, 0,

38 (
egl_«tive_wödow_t
::
ª£rved
));

39 
mem£t
(
egl_«tive_wödow_t
::
ª£rved_¥oc
, 0,

40 (
egl_«tive_wödow_t
::
ª£rved_¥oc
));

41 
mem£t
(
egl_«tive_wödow_t
::
€m
, 0,

42 (
egl_«tive_wödow_t
::
€m
));

44 
	g¥Ÿe˘ed
:

45 
EGLN©iveSurÁ˚
& 
›î©‹
 = (c⁄° EGLN©iveSurÁ˚& 
rhs
);

46 
EGLN©iveSurÁ˚
(c⁄° EGLN©iveSurÁ˚& 
rhs
);

47 
	gölöe
 ~
EGLN©iveSurÁ˚
() { };

	@jni/include/ui/EGLUtils.h

18 #i‚de‡
ANDROID_UI_EGLUTILS_H


19 
	#ANDROID_UI_EGLUTILS_H


	)

21 
	~<utûs/Eº‹s.h
>

22 
	~<ui/PixñF‹m©.h
>

23 
	~<EGL/egl.h
>

27 
«me•a˚
 
	g™droid
 {

30 ˛as†
	cEGLUtûs


32 
	gpublic
:

34 c⁄° *
°ªº‹
(
EGLöt
 
îr
);

36 
°©us_t
 
£À˘C⁄figF‹PixñF‹m©
(

37 
EGLDi•œy
 
dpy
,

38 
EGLöt
 c⁄°* 
©ås
,

39 
PixñF‹m©
 
f‹m©
,

40 
EGLC⁄fig
* 
outC⁄fig
);

42 
°©us_t
 
£À˘C⁄figF‹N©iveWödow
(

43 
EGLDi•œy
 
dpy
,

44 
EGLöt
 c⁄°* 
©ås
,

45 
EGLN©iveWödowTy≥
 
wödow
,

46 
EGLC⁄fig
* 
outC⁄fig
);

	@jni/include/ui/EventHub.h

18 #i‚de‡
_RUNTIME_EVENT_HUB_H


19 
	#_RUNTIME_EVENT_HUB_H


	)

21 
	~<utûs/Såög8.h
>

22 
	~<utûs/thªads.h
>

23 
	~<utûs/Log.h
>

24 
	~<utûs/thªads.h
>

25 
	~<utûs/Li°.h
>

26 
	~<utûs/Eº‹s.h
>

28 
	~<löux/öput.h
>

30 
	gpﬁlfd
;

32 
«me•a˚
 
	g™droid
 {

34 
˛ass
 
	gKeyLayoutM≠
;

46 ˛as†
	cEvítHub
 : 
public
 
RefBa£


48 
public
:

49 
EvítHub
();

51 
°©us_t
 
îr‹Check
() const;

55 
	gCLASS_KEYBOARD
 = 0x00000001,

56 
	gCLASS_ALPHAKEY
 = 0x00000002,

57 
	gCLASS_TOUCHSCREEN
 = 0x00000004,

58 
	gCLASS_TRACKBALL
 = 0x00000008,

59 
	gCLASS_TOUCHSCREEN_MT
= 0x00000010,

60 
	gCLASS_DPAD
 = 0x00000020

62 
uöt32_t
 
gëDevi˚Cœs£s
(
öt32_t
 
devi˚Id
) const;

64 
Såög8
 
gëDevi˚Name
(
öt32_t
 
devi˚Id
) const;

66 
gëAbsﬁuãInfo
(
öt32_t
 
devi˚Id
, 
axis
, *
outMöVÆue
,

67 * 
outMaxVÆue
, * 
outFœt
, * 
outFuzz
) const;

69 
gëSwôchSèã
(
sw
) const;

70 
gëSwôchSèã
(
öt32_t
 
devi˚Id
, 
sw
) const;

72 
gëSˇncodeSèã
(
key
) const;

73 
gëSˇncodeSèã
(
öt32_t
 
devi˚Id
, 
key
) const;

75 
gëKeycodeSèã
(
key
) const;

76 
gëKeycodeSèã
(
öt32_t
 
devi˚Id
, 
key
) const;

78 
°©us_t
 
sˇncodeToKeycode
(
öt32_t
 
devi˚Id
, 
sˇncode
,

79 
öt32_t
* 
outKeycode
, 
uöt32_t
* 
outFœgs
) const;

83 
addEx˛udedDevi˚
(c⁄° * 
devi˚Name
);

87 
	gDEVICE_ADDED
 = 0x10000000,

88 
	gDEVICE_REMOVED
 = 0x20000000

92 
boﬁ
 
hasKeys
(
size_t
 
numCodes
, 
öt32_t
* 
keyCodes
, 
uöt8_t
* 
outFœgs
);

94 
vútuÆ
 
boﬁ
 
gëEvít
(
öt32_t
* 
outDevi˚Id
, i¡32_t* 
outTy≥
,

95 
öt32_t
* 
outSˇncode
, i¡32_t* 
outKeycode
, 
uöt32_t
 *
outFœgs
,

96 
öt32_t
* 
outVÆue
, 
n£cs_t
* 
outWhí
);

98 
	g¥Ÿe˘ed
:

99 
vútuÆ
 ~
EvítHub
();

101 
	g¥iv©e
:

102 
boﬁ
 
›íPœtf‹mI≈ut
();

103 
öt32_t
 
c⁄vîtDevi˚Key_TI_P2
(
code
);

105 
›í_devi˚
(c⁄° *
devi˚
);

106 
˛o£_devi˚
(c⁄° *
devi˚
);

107 
sˇn_dú
(c⁄° *
dú«me
);

108 
ªad_nŸify
(
nfd
);

110 
°©us_t
 
	gmEº‹
;

112 
	sdevi˚_t
 {

113 c⁄° 
öt32_t
 
	gid
;

114 c⁄° 
Såög8
 
	g∑th
;

115 
Såög8
 
	g«me
;

116 
uöt32_t
 
	g˛as£s
;

117 
uöt8_t
* 
	gkeyBômask
;

118 
KeyLayoutM≠
* 
	gœyoutM≠
;

119 
Såög8
 
	gkeyœyoutFûíame
;

120 
devi˚_t
* 
	g√xt
;

122 
devi˚_t
(
öt32_t
 
_id
, c⁄° * 
_∑th
, c⁄° * 
«me
);

123 ~
devi˚_t
();

126 
devi˚_t
* 
gëDevi˚
(
öt32_t
 
devi˚Id
) const;

127 
boﬁ
 
hasKeycode
(
devi˚_t
* 
devi˚
, 
keycode
) const;

130 
muèbÀ
 
Muãx
 
	gmLock
;

132 
boﬁ
 
	gmHaveFú°Keybﬂrd
;

133 
öt32_t
 
	gmFú°KeybﬂrdId
;

135 
	sdevi˚_ít
 {

136 
devi˚_t
* 
	gdevi˚
;

137 
uöt32_t
 
	g£q
;

139 
devi˚_ít
 *
	gmDevi˚sById
;

140 
	gmNumDevi˚sById
;

142 
devi˚_t
 *
	gmO≥nögDevi˚s
;

143 
devi˚_t
 *
	gmClosögDevi˚s
;

145 
devi˚_t
 **
	gmDevi˚s
;

146 
pﬁlfd
 *
	gmFDs
;

147 
	gmFDCou¡
;

149 
boﬁ
 
	gmO≥√d
;

150 
	gLi°
<
	gSåög8
> 
	gmEx˛udedDevi˚s
;

153 #ifde‡
EV_SW


154 
öt32_t
 
	gmSwôches
[
SW_MAX
+1];

	@jni/include/ui/Fence.h

17 #i‚de‡
ANDROID_FENCE_H


18 
	#ANDROID_FENCE_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	~<ui/AN©iveObje˘Ba£.h
>

24 
	~<ui/PixñF‹m©.h
>

25 
	~<ui/Re˘.h
>

26 
	~<utûs/FœâíabÀ.h
>

27 
	~<utûs/Såög8.h
>

28 
	~<utûs/Timîs.h
>

30 
	gAN©iveWödowBuf„r
;

32 
«me•a˚
 
	g™droid
 {

38 
˛ass
 
	gFí˚


39 : 
public
 
LightRefBa£
<
Fí˚
>,Öubli¯
	gFœâíabÀ


41 
	gpublic
:

42 c⁄° 
•
<
Fí˚
> 
NO_FENCE
;

46 íum { 
	gTIMEOUT_NEVER
 = -1 };

51 
Fí˚
();

56 
Fí˚
(
„n˚Fd
);

61 
boﬁ
 
isVÆid
(Ëc⁄° {  
	gmFí˚Fd
 != -1; }

68 
°©us_t
 
waô
(
timeout
);

76 
°©us_t
 
waôF‹evî
(c⁄° * 
log«me
);

82 
	g•
<
	gFí˚
> 
mîge
(c⁄° 
Såög8
& 
«me
, c⁄° 
•
<
Fí˚
>& 
f1
,

83 c⁄° 
•
<
Fí˚
>& 
f2
);

88 
dup
() const;

94 
n£cs_t
 
gëSig«lTime
() const;

97 
size_t
 
gëFœâíedSize
() const;

98 
size_t
 
gëFdCou¡
() const;

99 
°©us_t
 
Ê©ãn
(* 
buf„r
, 
size_t
 
size
,

100 
fds
[], 
size_t
 
cou¡
) const;

101 
°©us_t
 
unÊ©ãn
(c⁄°* 
buf„r
, 
size_t
 
size
,

102 
fds
[], 
size_t
 
cou¡
);

104 
	g¥iv©e
:

106 
‰õnd
 
˛ass
 
LightRefBa£
<
Fí˚
>;

107 
	gvútuÆ
 ~
Fí˚
();

110 
Fí˚
(c⁄° Fí˚& 
rhs
);

111 
	gFí˚
& 
	g›î©‹
 = (c⁄° 
Fí˚
& 
rhs
);

112 c⁄° 
	gFí˚
& 
	g›î©‹
 = (c⁄° 
Fí˚
& 
rhs
) const;

114 
	gmFí˚Fd
;

	@jni/include/ui/FramebufferNativeWindow.h

17 #i‚de‡
ANDROID_FRAMEBUFFER_NATIVE_WINDOW_H


18 
	#ANDROID_FRAMEBUFFER_NATIVE_WINDOW_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	~<EGL/egl.h
>

25 
	~<utûs/thªads.h
>

26 
	~<ui/Re˘.h
>

28 
	~<pixñÊögî/pixñÊögî.h
>

30 
	~<ui/egl/™droid_«tives.h
>

33 "C" 
EGLN©iveWödowTy≥
 
™droid_¸óãDi•œySurÁ˚
();

36 
«me•a˚
 
	g™droid
 {

39 
˛ass
 
	gSurÁ˚
;

40 
˛ass
 
	gN©iveBuf„r
;

44 
˛ass
 
	gFømebuf„rN©iveWödow


45 : 
public
 
EGLN©iveBa£
<

46 
™droid_«tive_wödow_t
,

47 
	gFømebuf„rN©iveWödow
,

48 
	gLightRefBa£
<
	gFømebuf„rN©iveWödow
> >

50 
	gpublic
:

51 
Fømebuf„rN©iveWödow
();

53 
‰amebuf„r_devi˚_t
 c⁄° * 
gëDevi˚
(Ëc⁄° {  
	gfbDev
; }

55 
boﬁ
 
isUpd©eOnDem™d
(Ëc⁄° {  
	gmUpd©eOnDem™d
; }

56 
°©us_t
 
£tUpd©eRe˘™gÀ
(c⁄° 
Re˘
& 
upd©eRe˘
);

57 
°©us_t
 
composôi⁄Com∂ëe
();

59 
	g¥iv©e
:

60 
‰õnd
 
˛ass
 
LightRefBa£
<
Fømebuf„rN©iveWödow
>;

61 ~
Fømebuf„rN©iveWödow
();

62 
£tSw≠I¡îvÆ
(
™droid_«tive_wödow_t
* 
wödow
, 
öãrvÆ
);

63 
dequeueBuf„r
(
™droid_«tive_wödow_t
* 
wödow
, 
™droid_«tive_buf„r_t
** 
buf„r
);

64 
lockBuf„r
(
™droid_«tive_wödow_t
* 
wödow
, 
™droid_«tive_buf„r_t
* 
buf„r
);

65 
queueBuf„r
(
™droid_«tive_wödow_t
* 
wödow
, 
™droid_«tive_buf„r_t
* 
buf„r
);

66 
quîy
(
™droid_«tive_wödow_t
* 
wödow
, 
wh©
, * 
vÆue
);

67 
≥rf‹m
(
™droid_«tive_wödow_t
* 
wödow
, 
›î©i⁄
, ...);

69 
‰amebuf„r_devi˚_t
* 
	gfbDev
;

70 
Æloc_devi˚_t
* 
	ggrDev
;

72 
	g•
<
	gN©iveBuf„r
> 
	gbuf„rs
[2];

73 
	g•
<
	gN©iveBuf„r
> 
	g‰⁄t
;

75 
muèbÀ
 
Muãx
 
	gmuãx
;

76 
C⁄dôi⁄
 
	gmC⁄dôi⁄
;

77 
öt32_t
 
	gmNumBuf„rs
;

78 
öt32_t
 
	gmNumFªeBuf„rs
;

79 
öt32_t
 
	gmBuf„rHód
;

80 
boﬁ
 
	gmUpd©eOnDem™d
;

	@jni/include/ui/GraphicBuffer.h

17 #i‚de‡
ANDROID_GRAPHIC_BUFFER_H


18 
	#ANDROID_GRAPHIC_BUFFER_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	~<ui/™droid_«tive_buf„r.h
>

24 
	~<ui/PixñF‹m©.h
>

25 
	~<ui/Re˘.h
>

26 
	~<utûs/FœâíabÀ.h
>

27 
	~<pixñÊögî/pixñÊögî.h
>

29 
	g™droid_«tive_buf„r_t
;

31 
«me•a˚
 
	g™droid
 {

33 
˛ass
 
	gGøphicBuf„rM≠≥r
;

39 
˛ass
 
	gGøphicBuf„r


40 : 
public
 
EGLN©iveBa£
<

41 
™droid_«tive_buf„r_t
,

42 
	gGøphicBuf„r
,

43 
	gLightRefBa£
<
	gGøphicBuf„r
> >, 
public
 
	gFœâíabÀ


45 
	gpublic
:

48 
USAGE_SW_READ_NEVER
 = 
GRALLOC_USAGE_SW_READ_NEVER
,

49 
	gUSAGE_SW_READ_RARELY
 = 
GRALLOC_USAGE_SW_READ_RARELY
,

50 
	gUSAGE_SW_READ_OFTEN
 = 
GRALLOC_USAGE_SW_READ_OFTEN
,

51 
	gUSAGE_SW_READ_MASK
 = 
GRALLOC_USAGE_SW_READ_MASK
,

53 
	gUSAGE_SW_WRITE_NEVER
 = 
GRALLOC_USAGE_SW_WRITE_NEVER
,

54 
	gUSAGE_SW_WRITE_RARELY
 = 
GRALLOC_USAGE_SW_WRITE_RARELY
,

55 
	gUSAGE_SW_WRITE_OFTEN
 = 
GRALLOC_USAGE_SW_WRITE_OFTEN
,

56 
	gUSAGE_SW_WRITE_MASK
 = 
GRALLOC_USAGE_SW_WRITE_MASK
,

58 
	gUSAGE_SOFTWARE_MASK
 = 
USAGE_SW_READ_MASK
|
USAGE_SW_WRITE_MASK
,

60 
	gUSAGE_HW_TEXTURE
 = 
GRALLOC_USAGE_HW_TEXTURE
,

61 
	gUSAGE_HW_RENDER
 = 
GRALLOC_USAGE_HW_RENDER
,

62 
	gUSAGE_HW_2D
 = 
GRALLOC_USAGE_HW_2D
,

63 
	gUSAGE_HW_MASK
 = 
GRALLOC_USAGE_HW_MASK


66 
GøphicBuf„r
();

69 
GøphicBuf„r
(
uöt32_t
 
w
, uöt32_à
h
, 
PixñF‹m©
 
f‹m©
, uöt32_à
ußge
);

72 
GøphicBuf„r
(
uöt32_t
 
w
, uöt32_à
h
, 
PixñF‹m©
 
f‹m©
, uöt32_à
ußge
,

73 
uöt32_t
 
°ride
, 
«tive_h™dÀ_t
* 
h™dÀ
, 
boﬁ
 
kìpOw√rshù
);

76 
°©us_t
 
öôCheck
() const;

78 
uöt32_t
 
gëWidth
(Ëc⁄° {  
	gwidth
; }

79 
uöt32_t
 
gëHeight
(Ëc⁄° {  
	gheight
; }

80 
uöt32_t
 
gëSåide
(Ëc⁄° {  
	g°ride
; }

81 
uöt32_t
 
gëUßge
(Ëc⁄° {  
	gußge
; }

82 
PixñF‹m©
 
gëPixñF‹m©
(Ëc⁄° {  
	gf‹m©
; }

83 
Re˘
 
gëBounds
(Ëc⁄° {  Re˘(
width
, 
height
); }

85 
°©us_t
 
ªÆloˇã
(
uöt32_t
 
w
, uöt32_à
h
, 
PixñF‹m©
 
f
, uöt32_à
ußge
);

87 
°©us_t
 
lock
(
uöt32_t
 
ußge
, ** 
vaddr
);

88 
°©us_t
 
lock
(
uöt32_t
 
ußge
, c⁄° 
Re˘
& 
ª˘
, ** 
vaddr
);

89 
°©us_t
 
lock
(
GGLSurÁ˚
* 
surÁ˚
, 
uöt32_t
 
ußge
);

90 
°©us_t
 
u∆ock
();

92 
™droid_«tive_buf„r_t
* 
gëN©iveBuf„r
() const;

94 
£tIndex
(
ödex
);

95 
gëIndex
() const;

96 
£tVîtiˇlSåide
(
uöt32_t
 
v°ride
);

97 
uöt32_t
 
gëVîtiˇlSåide
() const;

99 
	g¥Ÿe˘ed
:

100 
vútuÆ
 ~
GøphicBuf„r
();

103 
	gownN⁄e
 = 0,

104 
	gownH™dÀ
 = 1,

105 
	gownD©a
 = 2,

108 
ölöe
 c⁄° 
	gGøphicBuf„rM≠≥r
& 
gëBuf„rM≠≥r
(Ëc⁄° {  
	gmBuf„rM≠≥r
; }

109 
ölöe
 
	gGøphicBuf„rM≠≥r
& 
gëBuf„rM≠≥r
(Ë{  
	gmBuf„rM≠≥r
; }

110 
uöt8_t
 
	gmOw√r
;

112 
	g¥iv©e
:

113 
‰õnd
 
˛ass
 
SurÁ˚
;

114 
‰õnd
 
˛ass
 
	gBpSurÁ˚
;

115 
‰õnd
 
˛ass
 
	gBnSurÁ˚
;

116 
‰õnd
 
˛ass
 
	gLightRefBa£
<
	gGøphicBuf„r
>;

117 
GøphicBuf„r
(c⁄° GøphicBuf„r& 
rhs
);

118 
	gGøphicBuf„r
& 
	g›î©‹
 = (c⁄° 
GøphicBuf„r
& 
rhs
);

119 c⁄° 
	gGøphicBuf„r
& 
	g›î©‹
 = (c⁄° 
GøphicBuf„r
& 
rhs
) const;

121 
°©us_t
 
öôSize
(
uöt32_t
 
w
, uöt32_à
h
, 
PixñF‹m©
 
f‹m©
,

122 
uöt32_t
 
ußge
);

124 
‰ì_h™dÀ
();

127 
size_t
 
gëFœâíedSize
() const;

128 
size_t
 
gëFdCou¡
() const;

129 
°©us_t
 
Ê©ãn
(* 
buf„r
, 
size_t
 
size
,

130 
fds
[], 
size_t
 
cou¡
) const;

131 
°©us_t
 
unÊ©ãn
(c⁄°* 
buf„r
, 
size_t
 
size
,

132 
fds
[], 
size_t
 
cou¡
);

135 
	gGøphicBuf„rM≠≥r
& 
	gmBuf„rM≠≥r
;

136 
ssize_t
 
	gmInôCheck
;

137 
uöt32_t
 
	gmVSåide
;

138 
	gmIndex
;

	@jni/include/ui/GraphicBufferAllocator.h

18 #i‚de‡
ANDROID_BUFFER_ALLOCATOR_H


19 
	#ANDROID_BUFFER_ALLOCATOR_H


	)

21 
	~<°döt.h
>

23 
	~<cutûs/«tive_h™dÀ.h
>

25 
	~<utûs/Eº‹s.h
>

26 
	~<utûs/KeyedVe˘‹.h
>

27 
	~<utûs/thªads.h
>

28 
	~<utûs/SögÀt⁄.h
>

30 
	~<ui/PixñF‹m©.h
>

32 
	~<h¨dw¨e/gøŒoc.h
>

35 
«me•a˚
 
	g™droid
 {

38 
˛ass
 
	gSåög8
;

40 
˛ass
 
	gGøphicBuf„rAŒoˇt‹
 : 
public
 
SögÀt⁄
<
GøphicBuf„rAŒoˇt‹
>

42 
public
:

44 
USAGE_SW_READ_NEVER
 = 
GRALLOC_USAGE_SW_READ_NEVER
,

45 
	gUSAGE_SW_READ_RARELY
 = 
GRALLOC_USAGE_SW_READ_RARELY
,

46 
	gUSAGE_SW_READ_OFTEN
 = 
GRALLOC_USAGE_SW_READ_OFTEN
,

47 
	gUSAGE_SW_READ_MASK
 = 
GRALLOC_USAGE_SW_READ_MASK
,

49 
	gUSAGE_SW_WRITE_NEVER
 = 
GRALLOC_USAGE_SW_WRITE_NEVER
,

50 
	gUSAGE_SW_WRITE_RARELY
 = 
GRALLOC_USAGE_SW_WRITE_RARELY
,

51 
	gUSAGE_SW_WRITE_OFTEN
 = 
GRALLOC_USAGE_SW_WRITE_OFTEN
,

52 
	gUSAGE_SW_WRITE_MASK
 = 
GRALLOC_USAGE_SW_WRITE_MASK
,

54 
	gUSAGE_SOFTWARE_MASK
 = 
USAGE_SW_READ_MASK
|
USAGE_SW_WRITE_MASK
,

56 
	gUSAGE_HW_TEXTURE
 = 
GRALLOC_USAGE_HW_TEXTURE
,

57 
	gUSAGE_HW_RENDER
 = 
GRALLOC_USAGE_HW_RENDER
,

58 
	gUSAGE_HW_2D
 = 
GRALLOC_USAGE_HW_2D
,

59 
	gUSAGE_HW_MASK
 = 
GRALLOC_USAGE_HW_MASK


62 
ölöe
 
	gGøphicBuf„rAŒoˇt‹
& 
gë
(Ë{  
gëIn°™˚
(); }

65 
°©us_t
 
Æloc
(
uöt32_t
 
w
, uöt32_à
h
, 
PixñF‹m©
 
f‹m©
, 
ußge
,

66 
buf„r_h™dÀ_t
* 
h™dÀ
, 
öt32_t
* 
°ride
);

68 
°©us_t
 
‰ì
(
buf„r_h™dÀ_t
 
h™dÀ
);

70 
dump
(
Såög8
& 
ªs
) const;

72 
	g¥iv©e
:

73 
	sÆloc_ªc_t
 {

74 
uöt32_t
 
w
;

75 
uöt32_t
 
	gh
;

76 
PixñF‹m©
 
	gf‹m©
;

77 
uöt32_t
 
	gußge
;

78 * 
	gvaddr
;

79 
size_t
 
	gsize
;

82 
Muãx
 
	gsLock
;

83 
	gKeyedVe˘‹
<
	gbuf„r_h™dÀ_t
, 
	gÆloc_ªc_t
> 
	gsAŒocLi°
;

85 
‰õnd
 
˛ass
 
	gSögÀt⁄
<
	gGøphicBuf„rAŒoˇt‹
>;

86 
GøphicBuf„rAŒoˇt‹
();

87 ~
GøphicBuf„rAŒoˇt‹
();

89 
Æloc_devi˚_t
 *
	gmAŒocDev
;

	@jni/include/ui/GraphicBufferMapper.h

17 #i‚de‡
ANDROID_UI_BUFFER_MAPPER_H


18 
	#ANDROID_UI_BUFFER_MAPPER_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	~<utûs/SögÀt⁄.h
>

25 
	~<h¨dw¨e/gøŒoc.h
>

28 
	ggøŒoc_moduÀ_t
;

30 
«me•a˚
 
	g™droid
 {

34 
˛ass
 
	gRe˘
;

36 
˛ass
 
	gGøphicBuf„rM≠≥r
 : 
public
 
SögÀt⁄
<
GøphicBuf„rM≠≥r
>

38 
public
:

39 
ölöe
 
GøphicBuf„rM≠≥r
& 
gë
(Ë{  
gëIn°™˚
(); }

41 
°©us_t
 
ªgi°îBuf„r
(
buf„r_h™dÀ_t
 
h™dÀ
);

43 
°©us_t
 
uƒegi°îBuf„r
(
buf„r_h™dÀ_t
 
h™dÀ
);

45 
°©us_t
 
lock
(
buf„r_h™dÀ_t
 
h™dÀ
,

46 
ußge
, c⁄° 
Re˘
& 
bounds
, ** 
vaddr
);

48 
°©us_t
 
u∆ock
(
buf„r_h™dÀ_t
 
h™dÀ
);

51 
dump
(
buf„r_h™dÀ_t
 
h™dÀ
);

53 
	g¥iv©e
:

54 
‰õnd
 
˛ass
 
SögÀt⁄
<
GøphicBuf„rM≠≥r
>;

55 
GøphicBuf„rM≠≥r
();

56 
gøŒoc_moduÀ_t
 c⁄° *
	gmAŒocMod
;

	@jni/include/ui/IOverlay.h

17 #i‚de‡
ANDROID_IOVERLAY_H


18 
	#ANDROID_IOVERLAY_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	~<utûs/Eº‹s.h
>

24 
	~<bödî/II¡îÁ˚.h
>

25 
	~<utûs/RefBa£.h
>

26 
	~<ui/PixñF‹m©.h
>

28 
«me•a˚
 
	g™droid
 {

30 ˛as†
	cIOvîœy
 : 
public
 
II¡îÁ˚


32 
public
:

33 
DECLARE_META_INTERFACE
(
Ovîœy
);

35 
vútuÆ
 
de°roy
() = 0;

40 
˛ass
 
	gBnOvîœy
 : 
public
 
BnI¡îÁ˚
<
IOvîœy
>

42 
public
:

43 
vútuÆ
 
°©us_t
 
⁄Tønß˘
–
uöt32_t
 
code
,

44 c⁄° 
P¨˚l
& 
d©a
,

45 
P¨˚l
* 
ª∂y
,

46 
uöt32_t
 
Êags
 = 0);

	@jni/include/ui/KeyCharacterMap.h

17 #i‚de‡
_UI_KEY_CHARACTER_MAP_H


18 
	#_UI_KEY_CHARACTER_MAP_H


	)

20 
	~<°döt.h
>

21 
	~<utûs/Ve˘‹.h
>

23 
usög
 
«me•a˚
 
	g™droid
;

25 ˛as†
	cKeyCh¨a˘îM≠


27 
	mpublic
:

28 ~
KeyCh¨a˘îM≠
();

32 
gë
(
keycode
, 
mëa
);

33 
gëNumbî
(
keycode
);

34 
gëM©ch
(
keycode
, c⁄° * 
ch¨s
,

35 
ch¨size
, 
uöt32_t
 
modifõrs
);

36 
gëDi•œyLabñ
(
keycode
);

37 
boﬁ
 
gëKeyD©a
(
keycode
, *
di•œyLabñ
,

38 *
numbî
, * 
ªsu…s
);

39 
ölöe
 
	$gëKeybﬂrdTy≥
(Ë{  
m_ty≥
; }

40 
boﬁ
 
	`gëEvíts
(
uöt16_t
* 
ch¨s
, 
size_t
 
Àn
,

41 
Ve˘‹
<
öt32_t
>* 
keys
, Ve˘‹<
uöt32_t
>* 
modifõrs
);

43 
KeyCh¨a˘îM≠
* 
	`lﬂd
(
id
);

46 
NUMERIC
 = 1,

47 
Q14
 = 2,

48 
QWERTY
 = 3

49 
	}
};

51 
	#META_MASK
 3

	)

53 
	g¥iv©e
:

54 
	sKey


56 
öt32_t
 
keycode
;

57 
uöt16_t
 
	gdi•œy_œbñ
;

58 
uöt16_t
 
	gnumbî
;

59 
uöt16_t
 
	gd©a
[
META_MASK
 + 1];

62 
KeyCh¨a˘îM≠
();

63 
KeyCh¨a˘îM≠
* 
åy_fûe
(c⁄° * 
fûíame
);

64 
Key
* 
föd_key
(
keycode
);

65 
boﬁ
 
föd_ch¨
(
uöt16_t
 
c
, 
uöt32_t
* 
key
, uöt32_t* 
mods
);

67 
	gm_ty≥
;

68 
	gm_keyCou¡
;

69 
Key
* 
	gm_keys
;

	@jni/include/ui/KeycodeLabels.h

17 #i‚de‡
_UI_KEYCODE_LABELS_H


18 
	#_UI_KEYCODE_LABELS_H


	)

20 
	sKeycodeLabñ
 {

21 c⁄° *
	mlôîÆ
;

22 
	mvÆue
;

25 c⁄° 
KeycodeLabñ
 
	gKEYCODES
[] = {

128 { 
NULL
, 0 }

132 
	eKeyCode
 {

133 
	mkKeyCodeUnknown
 = 0,

135 
	mkKeyCodeSo·Le·
 = 1,

136 
	mkKeyCodeSo·Right
 = 2,

137 
	mkKeyCodeHome
 = 3,

138 
	mkKeyCodeBack
 = 4,

139 
	mkKeyCodeCÆl
 = 5,

140 
	mkKeyCodeEndCÆl
 = 6,

141 
	mkKeyCode0
 = 7,

142 
	mkKeyCode1
 = 8,

143 
	mkKeyCode2
 = 9,

144 
	mkKeyCode3
 = 10,

145 
	mkKeyCode4
 = 11,

146 
	mkKeyCode5
 = 12,

147 
	mkKeyCode6
 = 13,

148 
	mkKeyCode7
 = 14,

149 
	mkKeyCode8
 = 15,

150 
	mkKeyCode9
 = 16,

151 
	mkKeyCodeSèr
 = 17,

152 
	mkKeyCodePound
 = 18,

153 
	mkKeyCodeD∑dUp
 = 19,

154 
	mkKeyCodeD∑dDown
 = 20,

155 
	mkKeyCodeD∑dLe·
 = 21,

156 
	mkKeyCodeD∑dRight
 = 22,

157 
	mkKeyCodeD∑dCíãr
 = 23,

158 
	mkKeyCodeVﬁumeUp
 = 24,

159 
	mkKeyCodeVﬁumeDown
 = 25,

160 
	mkKeyCodePowî
 = 26,

161 
	mkKeyCodeCamîa
 = 27,

162 
	mkKeyCodeCÀ¨
 = 28,

163 
	mkKeyCodeA
 = 29,

164 
	mkKeyCodeB
 = 30,

165 
	mkKeyCodeC
 = 31,

166 
	mkKeyCodeD
 = 32,

167 
	mkKeyCodeE
 = 33,

168 
	mkKeyCodeF
 = 34,

169 
	mkKeyCodeG
 = 35,

170 
	mkKeyCodeH
 = 36,

171 
	mkKeyCodeI
 = 37,

172 
	mkKeyCodeJ
 = 38,

173 
	mkKeyCodeK
 = 39,

174 
	mkKeyCodeL
 = 40,

175 
	mkKeyCodeM
 = 41,

176 
	mkKeyCodeN
 = 42,

177 
	mkKeyCodeO
 = 43,

178 
	mkKeyCodeP
 = 44,

179 
	mkKeyCodeQ
 = 45,

180 
	mkKeyCodeR
 = 46,

181 
	mkKeyCodeS
 = 47,

182 
	mkKeyCodeT
 = 48,

183 
	mkKeyCodeU
 = 49,

184 
	mkKeyCodeV
 = 50,

185 
	mkKeyCodeW
 = 51,

186 
	mkKeyCodeX
 = 52,

187 
	mkKeyCodeY
 = 53,

188 
	mkKeyCodeZ
 = 54,

189 
	mkKeyCodeComma
 = 55,

190 
	mkKeyCodePîiod
 = 56,

191 
	mkKeyCodeA…Le·
 = 57,

192 
	mkKeyCodeA…Right
 = 58,

193 
	mkKeyCodeShi·Le·
 = 59,

194 
	mkKeyCodeShi·Right
 = 60,

195 
	mkKeyCodeTab
 = 61,

196 
	mkKeyCodeS∑˚
 = 62,

197 
	mkKeyCodeSym
 = 63,

198 
	mkKeyCodeEx∂‹î
 = 64,

199 
	mkKeyCodeEnvñ›e
 = 65,

200 
	mkKeyCodeNewlöe
 = 66,

201 
	mkKeyCodeDñ
 = 67,

202 
	mkKeyCodeGøve
 = 68,

203 
	mkKeyCodeMöus
 = 69,

204 
	mkKeyCodeEquÆs
 = 70,

205 
	mkKeyCodeLe·Bøckë
 = 71,

206 
	mkKeyCodeRightBøckë
 = 72,

207 
	mkKeyCodeBack¶ash
 = 73,

208 
	mkKeyCodeSemicﬁ⁄
 = 74,

209 
	mkKeyCodeApo°r›he
 = 75,

210 
	mkKeyCodeSœsh
 = 76,

211 
	mkKeyCodeAt
 = 77,

212 
	mkKeyCodeNum
 = 78,

213 
	mkKeyCodeHódSëHook
 = 79,

214 
	mkKeyCodeFocus
 = 80,

215 
	mkKeyCodePlus
 = 81,

216 
	mkKeyCodeMíu
 = 82,

217 
	mkKeyCodeNŸifiˇti⁄
 = 83,

218 
	mkKeyCodeSórch
 = 84,

219 
	mkKeyCodePœyPau£
 = 85,

220 
	mkKeyCodeSt›
 = 86,

221 
	mkKeyCodeNextS⁄g
 = 87,

222 
	mkKeyCodePªviousS⁄g
 = 88,

223 
	mkKeyCodeRewöd
 = 89,

224 
	mkKeyCodeF‹w¨d
 = 90,

225 
	mkKeyCodeMuã
 = 91,

226 
	mkKeyCodePageUp
 = 92,

227 
	mkKeyCodePageDown
 = 93,

228 
	mkKeyCodePi˘Symbﬁs
 = 94,

229 
	mkKeyCodeSwôchCh¨£t
 = 95

230 } 
	tKeyCode
;

232 c⁄° 
KeycodeLabñ
 
	gFLAGS
[] = {

241 { 
NULL
, 0 }

	@jni/include/ui/Overlay.h

17 #i‚de‡
ANDROID_OVERLAY_H


18 
	#ANDROID_OVERLAY_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	~<utûs/Eº‹s.h
>

24 
	~<bödî/II¡îÁ˚.h
>

25 
	~<utûs/RefBa£.h
>

26 
	~<utûs/thªads.h
>

28 
	~<ui/PixñF‹m©.h
>

29 
	~<ui/IOvîœy.h
>

31 
	~<h¨dw¨e/ovîœy.h
>

33 
«me•a˚
 
	g™droid
 {

35 
˛ass
 
	gIMem‹y
;

36 
˛ass
 
	gIMem‹yHóp
;

40 
˛ass
 
	gOvîœyRef
 : 
public
 
LightRefBa£
<
OvîœyRef
>

42 
public
:

43 
OvîœyRef
(
ovîœy_h™dÀ_t
, c⁄° 
•
<
IOvîœy
>&,

44 
uöt32_t
 
w
, uöt32_à
h
, 
öt32_t
 
f
, uöt32_à
ws
, uöt32_à
hs
);

46 
	g•
<
	gOvîœyRef
> 
ªadFromP¨˚l
(c⁄° 
P¨˚l
& 
d©a
);

47 
°©us_t
 
wrôeToP¨˚l
(
P¨˚l
* 
ª∂y
, c⁄° 
•
<
OvîœyRef
>& 
o
);

49 
	g¥iv©e
:

50 
‰õnd
 
˛ass
 
LightRefBa£
<
OvîœyRef
>;

51 
‰õnd
 
˛ass
 
	gOvîœy
;

53 
OvîœyRef
();

54 
	gvútuÆ
 ~
OvîœyRef
();

56 
ovîœy_h™dÀ_t
 
	gmOvîœyH™dÀ
;

57 
	g•
<
	gIOvîœy
> 
	gmOvîœyCh™√l
;

58 
uöt32_t
 
	gmWidth
;

59 
uöt32_t
 
	gmHeight
;

60 
öt32_t
 
	gmF‹m©
;

61 
öt32_t
 
	gmWidthSåide
;

62 
öt32_t
 
	gmHeightSåide
;

63 
boﬁ
 
	gmOwnH™dÀ
;

68 ˛as†
	cOvîœy
 : 
public
 
vútuÆ
 
RefBa£


70 
public
:

71 
Ovîœy
(c⁄° 
•
<
OvîœyRef
>& 
ovîœyRef
);

74 
de°roy
();

77 
ovîœy_h™dÀ_t
 
gëH™dÀRef
() const;

80 
°©us_t
 
dequeueBuf„r
(
ovîœy_buf„r_t
* 
buf„r
);

83 
°©us_t
 
queueBuf„r
(
ovîœy_buf„r_t
 
buf„r
);

86 
°©us_t
 
ªsizeI≈ut
(
uöt32_t
 
width
, uöt32_à
height
);

88 
°©us_t
 
£tCr›
(
uöt32_t
 
x
, uöt32_à
y
, uöt32_à
w
, uöt32_à
h
) ;

90 
°©us_t
 
gëCr›
(
uöt32_t
* 
x
, uöt32_t* 
y
, uöt32_t* 
w
, uöt32_t* 
h
) ;

93 
°©us_t
 
£tP¨amëî
(
∑øm
, 
vÆue
);

96 * 
gëBuf„rAddªss
(
ovîœy_buf„r_t
 
buf„r
);

99 
uöt32_t
 
gëWidth
() const;

100 
uöt32_t
 
gëHeight
() const;

101 
öt32_t
 
gëF‹m©
() const;

102 
öt32_t
 
gëWidthSåide
() const;

103 
öt32_t
 
gëHeightSåide
() const;

104 
öt32_t
 
gëBuf„rCou¡
() const;

105 
°©us_t
 
gëSètus
() const;

107 
	g¥iv©e
:

108 
vútuÆ
 ~
Ovîœy
();

110 
	g•
<
	gOvîœyRef
> 
	gmOvîœyRef
;

111 
ovîœy_d©a_devi˚_t
 *
	gmOvîœyD©a
;

112 
°©us_t
 
	gmSètus
;

	@jni/include/ui/PixelFormat.h

26 #i‚de‡
UI_PIXELFORMAT_H


27 
	#UI_PIXELFORMAT_H


	)

29 
	~<°döt.h
>

30 
	~<sys/ty≥s.h
>

31 
	~<utûs/Eº‹s.h
>

32 
	~<pixñÊögî/f‹m©.h
>

33 
	~<h¨dw¨e/h¨dw¨e.h
>

35 
«me•a˚
 
	g™droid
 {

42 
	gPIXEL_FORMAT_UNKNOWN
 = 0,

43 
	gPIXEL_FORMAT_NONE
 = 0,

46 
	gPIXEL_FORMAT_CUSTOM
 = -4,

49 
	gPIXEL_FORMAT_TRANSLUCENT
 = -3,

52 
	gPIXEL_FORMAT_TRANSPARENT
 = -2,

56 
	gPIXEL_FORMAT_OPAQUE
 = -1,

61 
	gPIXEL_FORMAT_RGBA_8888
 = 
HAL_PIXEL_FORMAT_RGBA_8888
,

62 
	gPIXEL_FORMAT_RGBX_8888
 = 
HAL_PIXEL_FORMAT_RGBX_8888
,

63 
	gPIXEL_FORMAT_RGB_888
 = 
HAL_PIXEL_FORMAT_RGB_888
,

64 
	gPIXEL_FORMAT_RGB_565
 = 
HAL_PIXEL_FORMAT_RGB_565
,

65 
	gPIXEL_FORMAT_BGRA_8888
 = 
HAL_PIXEL_FORMAT_BGRA_8888
,

66 
	gPIXEL_FORMAT_RGBA_5551
 = 
HAL_PIXEL_FORMAT_RGBA_5551
,

67 
	gPIXEL_FORMAT_RGBA_4444
 = 
HAL_PIXEL_FORMAT_RGBA_4444
,

68 
	gPIXEL_FORMAT_A_8
 = 
GGL_PIXEL_FORMAT_A_8
,

69 
	gPIXEL_FORMAT_L_8
 = 
GGL_PIXEL_FORMAT_L_8
,

70 
	gPIXEL_FORMAT_LA_88
 = 
GGL_PIXEL_FORMAT_LA_88
,

71 
	gPIXEL_FORMAT_RGB_332
 = 
GGL_PIXEL_FORMAT_RGB_332
,

77 
öt32_t
 
	tPixñF‹m©
;

79 
	sPixñF‹m©Info


82 
	gINDEX_ALPHA
 = 0,

83 
	gINDEX_RED
 = 1,

84 
	gINDEX_GREEN
 = 2,

85 
	gINDEX_BLUE
 = 3

89 
	gALPHA
 = 1,

90 
	gRGB
 = 2,

91 
	gRGBA
 = 3,

92 
	gLUMINANCE
 = 4,

93 
	gLUMINANCE_ALPHA
 = 5,

94 
	gOTHER
 = 0xFF

97 
	sszöfo
 {

98 
uöt8_t
 
	gh
;

99 
uöt8_t
 
	gl
;

102 
ölöe
 
PixñF‹m©Info
(Ë: 
vîsi⁄
((PixelFormatInfo)) { }

103 
size_t
 
gëSˇ∆öeSize
(
width
) const;

104 
size_t
 
gëSize
(size_à
ci
) const {

105  (
	gci
 <3Ë? (
cöfo
[
ci
].
h
 - cöfo[ci].
l
) : 0;

107 
size_t
 
	gvîsi⁄
;

108 
PixñF‹m©
 
	gf‹m©
;

109 
size_t
 
	gbyãsPîPixñ
;

110 
size_t
 
	gbôsPîPixñ
;

112 
szöfo
 
	gcöfo
[4];

114 
uöt8_t
 
	gh_Æpha
;

115 
uöt8_t
 
	gl_Æpha
;

116 
uöt8_t
 
	gh_ªd
;

117 
uöt8_t
 
	gl_ªd
;

118 
uöt8_t
 
	gh_gªí
;

119 
uöt8_t
 
	gl_gªí
;

120 
uöt8_t
 
	gh_blue
;

121 
uöt8_t
 
	gl_blue
;

124 
uöt8_t
 
	gcomp⁄íts
;

125 
uöt8_t
 
	gª£rved0
[3];

126 
uöt32_t
 
	gª£rved1
;

131 
ssize_t
 
byãsPîPixñ
(
PixñF‹m©
 
f‹m©
);

132 
ssize_t
 
bôsPîPixñ
(
PixñF‹m©
 
f‹m©
);

133 
°©us_t
 
gëPixñF‹m©Info
(
PixñF‹m©
 
f‹m©
, 
PixñF‹m©Info
* 
öfo
);

	@jni/include/ui/Point.h

17 #i‚de‡
ANDROID_UI_POINT


18 
	#ANDROID_UI_POINT


	)

20 
	~<utûs/Ty≥Hñ≥rs.h
>

22 
«me•a˚
 
	g™droid
 {

24 ˛as†
	cPoöt


26 
	gpublic
:

27 
x
;

28 
	gy
;

34 
ölöe
 
Poöt
() {

36 
ölöe
 
Poöt
(
x
, 
y
) : x(x), y(y) {

39 
ölöe
 
boﬁ
 
	g›î©‹
 =(c⁄° 
Poöt
& 
rhs
) const {

40  (
x
 =
rhs
.xË&& (
y
 ==Ñhs.y);

42 
ölöe
 
boﬁ
 
	g›î©‹
 !(c⁄° 
Poöt
& 
rhs
) const {

43  !
›î©‹
 =(
rhs
);

46 
ölöe
 
boﬁ
 
isOrigö
() const {

47  !(
	gx
|
	gy
);

52 
boﬁ
 
	g›î©‹
 < (c⁄° 
	gPoöt
& 
	grhs
) const {

53  
	gy
<
	grhs
.y || (y==
rhs
.
y
 && 
x
<rhs.x);

56 
ölöe
 
	gPoöt
& 
	g›î©‹
 - () {

57 
	gx
 = -
x
;

58 
	gy
 = -
y
;

59  *
	gthis
;

62 
ölöe
 
	gPoöt
& 
	g›î©‹
 +(c⁄° 
Poöt
& 
rhs
) {

63 
x
 +
rhs
.x;

64 
	gy
 +
rhs
.
y
;

65  *
	gthis
;

67 
ölöe
 
	gPoöt
& 
	g›î©‹
 -(c⁄° 
Poöt
& 
rhs
) {

68 
x
 -
rhs
.x;

69 
	gy
 -
rhs
.
y
;

70  *
	gthis
;

73 c⁄° 
Poöt
 
	g›î©‹
 + (c⁄° 
	gPoöt
& 
	grhs
) const {

74 c⁄° 
Poöt
 
ªsu…
(
x
+
rhs
.x, 
y
+rhs.y);

75  
	gªsu…
;

77 c⁄° 
Poöt
 
	g›î©‹
 - (c⁄° 
	gPoöt
& 
	grhs
) const {

78 c⁄° 
Poöt
 
ªsu…
(
x
-
rhs
.x, 
y
-rhs.y);

79  
	gªsu…
;

83 
ANDROID_BASIC_TYPES_TRAITS
(
Poöt
)

	@jni/include/ui/Rect.h

17 #i‚de‡
ANDROID_UI_RECT


18 
	#ANDROID_UI_RECT


	)

20 
	~<utûs/Ty≥Hñ≥rs.h
>

21 
	~<ui/Poöt.h
>

23 
«me•a˚
 
	g™droid
 {

25 ˛as†
	cRe˘


27 
	gpublic
:

28 
À·
;

29 
	gt›
;

30 
	gright
;

31 
	gbŸtom
;

33 
	tvÆue_ty≥
;

38 
ölöe
 
Re˘
() {

40 
ölöe
 
Re˘
(
w
, 
h
)

41 : 
À·
(0), 
t›
(0), 
right
(
w
), 
bŸtom
(
h
) {

43 
ölöe
 
Re˘
(
l
, 
t
, 
r
, 
b
)

44 : 
À·
(
l
), 
t›
(
t
), 
right
(
r
), 
bŸtom
(
b
) {

46 
ölöe
 
Re˘
(c⁄° 
Poöt
& 
…
, c⁄° Poöt& 
rb
)

47 : 
À·
(
…
.
x
), 
t›
÷t.
y
), 
right
(
rb
.x), 
bŸtom
(rb.y) {

50 
makeInvÆid
();

52 
ölöe
 
˛ór
() {

53 
	gÀ·
 = 
t›
 = 
right
 = 
bŸtom
 = 0;

57 
ölöe
 
boﬁ
 
isVÆid
() const {

58  (
width
()>=0Ë&& (
height
()>=0);

62 
ölöe
 
boﬁ
 
isEm±y
() const {

63  (
width
()<=0Ë|| (
height
()<=0);

66 
ölöe
 
£t
(c⁄° 
Re˘
& 
rhs
) {

67 
	g›î©‹
 = (
rhs
);

71 
ölöe
 
width
() const {

72  
	gright
-
	gÀ·
;

76 
ölöe
 
height
() const {

77  
	gbŸtom
-
	gt›
;

80 
£tLe·T›
(c⁄° 
Poöt
& 
…
) {

81 
	gÀ·
 = 
…
.
x
;

82 
	gt›
 = 
…
.
y
;

85 
£tRightBŸtom
(c⁄° 
Poöt
& 
rb
) {

86 
	gright
 = 
rb
.
x
;

87 
	gbŸtom
 = 
rb
.
y
;

91 
Poöt
 
À·T›
() const {

92  
Poöt
(
À·
, 
t›
);

94 
Poöt
 
rightBŸtom
() const {

95  
Poöt
(
right
, 
bŸtom
);

97 
Poöt
 
rightT›
() const {

98  
Poöt
(
right
, 
t›
);

100 
Poöt
 
À·BŸtom
() const {

101  
Poöt
(
À·
, 
bŸtom
);

105 
ölöe
 
boﬁ
 
	g›î©‹
 =(c⁄° 
Re˘
& 
rhs
) const {

106  (
À·
 =
rhs
.À·Ë&& (
t›
 ==Ñhs.top) &&

107 (
right
 =
rhs
.rightË&& (
bŸtom
 ==Ñhs.bottom);

110 
ölöe
 
boﬁ
 
	g›î©‹
 !(c⁄° 
Re˘
& 
rhs
) const {

111  !
›î©‹
 =(
rhs
);

116 
boﬁ
 
	g›î©‹
 < (c⁄° 
	gRe˘
& 
	grhs
) const;

118 
	gRe˘
& 
off£tToOrigö
() {

119 
	gright
 -
À·
;

120 
	gbŸtom
 -
t›
;

121 
	gÀ·
 = 
t›
 = 0;

122  *
	gthis
;

124 
	gRe˘
& 
off£tTo
(c⁄° 
Poöt
& 
p
) {

125  
off£tTo
(
p
.
x
,Ö.
y
);

127 
	gRe˘
& 
off£tBy
(c⁄° 
Poöt
& 
dp
) {

128  
off£tBy
(
dp
.
x
, dp.
y
);

130 
	gRe˘
& 
	g›î©‹
 +(c⁄° 
Poöt
& 
rhs
) {

131  
off£tBy
(
rhs
.
x
,Ñhs.
y
);

133 
	gRe˘
& 
	g›î©‹
 -(c⁄° 
Poöt
& 
rhs
) {

134  
off£tBy
(-
rhs
.
x
, -rhs.
y
);

136 c⁄° 
Re˘
 
	g›î©‹
 + (c⁄° 
	gPoöt
& 
	grhs
) const;

137 c⁄° 
Re˘
 
	g›î©‹
 - (c⁄° 
	gPoöt
& 
	grhs
) const;

139 
å™¶©e
(
dx
, 
dy
) {

140 
off£tBy
(
dx
, 
dy
);

143 
	gRe˘
& 
off£tTo
(
x
, 
y
);

144 
	gRe˘
& 
off£tBy
(
x
, 
y
);

145 
boﬁ
 
öãr£˘
(c⁄° 
Re˘
& 
wôh
, Re˘* 
ªsu…
) const;

148 
ANDROID_BASIC_TYPES_TRAITS
(
Re˘
)

	@jni/include/ui/Region.h

17 #i‚de‡
ANDROID_UI_REGION_H


18 
	#ANDROID_UI_REGION_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	~<utûs/Ve˘‹.h
>

25 
	~<ui/Re˘.h
>

27 
	~<h¨dw¨e/c›ybô.h
>

29 
«me•a˚
 
	g™droid
 {

32 
˛ass
 
	gSåög8
;

35 ˛as†
	cRegi⁄


37 
	gpublic
:

38 
Regi⁄
();

39 
Regi⁄
(c⁄° Regi⁄& 
rhs
);

40 
ex∂icô
 
Regi⁄
(c⁄° 
Re˘
& 
rhs
);

41 
ex∂icô
 
Regi⁄
(c⁄° * 
buf„r
);

42 ~
Regi⁄
();

44 
	gRegi⁄
& 
	g›î©‹
 = (c⁄° 
Regi⁄
& 
rhs
);

46 
ölöe
 
boﬁ
 
isEm±y
(Ëc⁄° {  
	gmBounds
.isEmpty(); }

47 
ölöe
 
boﬁ
 
isRe˘
(Ëc⁄° {  
	gmSt‹age
.
isEm±y
(); }

49 
ölöe
 
Re˘
 
gëBounds
(Ëc⁄° {  
	gmBounds
; }

50 
ölöe
 
Re˘
 
bounds
(Ëc⁄° {  
gëBounds
(); }

53 
	gRegi⁄
& 
makeBoundsSñf
();

55 
˛ór
();

56 
£t
(c⁄° 
Re˘
& 
r
);

57 
£t
(
uöt32_t
 
w
, uöt32_à
h
);

59 
	gRegi⁄
& 
‹Sñf
(c⁄° 
Re˘
& 
rhs
);

60 
	gRegi⁄
& 
™dSñf
(c⁄° 
Re˘
& 
rhs
);

61 
	gRegi⁄
& 
subåa˘Sñf
(c⁄° 
Re˘
& 
rhs
);

64 
	gRegi⁄
& 
‹Sñf
(c⁄° 
Regi⁄
& 
rhs
);

65 
	gRegi⁄
& 
™dSñf
(c⁄° 
Regi⁄
& 
rhs
);

66 
	gRegi⁄
& 
subåa˘Sñf
(c⁄° 
Regi⁄
& 
rhs
);

69 c⁄° 
Regi⁄
 
mîge
(c⁄° 
Re˘
& 
rhs
) const;

70 c⁄° 
Regi⁄
 
öãr£˘
(c⁄° 
Re˘
& 
rhs
) const;

71 c⁄° 
Regi⁄
 
subåa˘
(c⁄° 
Re˘
& 
rhs
) const;

74 c⁄° 
Regi⁄
 
mîge
(c⁄° Regi⁄& 
rhs
) const;

75 c⁄° 
Regi⁄
 
öãr£˘
(c⁄° Regi⁄& 
rhs
) const;

76 c⁄° 
Regi⁄
 
subåa˘
(c⁄° Regi⁄& 
rhs
) const;

79 
	gRegi⁄
& 
å™¶©eSñf
(
dx
, 
dy
);

80 
	gRegi⁄
& 
‹Sñf
(c⁄° 
Regi⁄
& 
rhs
, 
dx
, 
dy
);

81 
	gRegi⁄
& 
™dSñf
(c⁄° 
Regi⁄
& 
rhs
, 
dx
, 
dy
);

82 
	gRegi⁄
& 
subåa˘Sñf
(c⁄° 
Regi⁄
& 
rhs
, 
dx
, 
dy
);

85 c⁄° 
Regi⁄
 
å™¶©e
(
dx
, 
dy
) const;

86 c⁄° 
Regi⁄
 
mîge
(c⁄° Regi⁄& 
rhs
, 
dx
, 
dy
) const;

87 c⁄° 
Regi⁄
 
öãr£˘
(c⁄° Regi⁄& 
rhs
, 
dx
, 
dy
) const;

88 c⁄° 
Regi⁄
 
subåa˘
(c⁄° Regi⁄& 
rhs
, 
dx
, 
dy
) const;

91 
ölöe
 c⁄° 
Regi⁄
 
	g›î©‹
 | (c⁄° 
	gRegi⁄
& 
	grhs
) const;

92 
ölöe
 c⁄° 
Regi⁄
 
	g›î©‹
 & (c⁄° 
	gRegi⁄
& 
	grhs
) const;

93 
ölöe
 c⁄° 
Regi⁄
 
	g›î©‹
 - (c⁄° 
	gRegi⁄
& 
	grhs
) const;

94 
ölöe
 c⁄° 
Regi⁄
 
	g›î©‹
 + (c⁄° 
	gPoöt
& 
	g±
) const;

96 
ölöe
 
	gRegi⁄
& 
	g›î©‹
 |(c⁄° 
Regi⁄
& 
rhs
);

97 
ölöe
 
	gRegi⁄
& 
	g›î©‹
 &(c⁄° 
Regi⁄
& 
rhs
);

98 
ölöe
 
	gRegi⁄
& 
	g›î©‹
 -(c⁄° 
Regi⁄
& 
rhs
);

99 
ölöe
 
	gRegi⁄
& 
	g›î©‹
 +(c⁄° 
Poöt
& 
±
);

104 
Re˘
 c⁄°* 
	tc⁄°_ôî©‹
;

106 
c⁄°_ôî©‹
 
begö
() const;

107 
c⁄°_ôî©‹
 
íd
() const;

111 
size_t
 
gëRe˘s
(
Ve˘‹
<
Re˘
>& 
ª˘Li°
) const;

112 
Re˘
 c⁄°* 
gëAºay
(
size_t
* 
cou¡
) const;

117 
addRe˘Unchecked
(
l
, 
t
, 
r
, 
b
);

120 
ssize_t
 
wrôe
(* 
buf„r
, 
size_t
 
size
) const;

121 
ssize_t
 
wrôeEm±y
(* 
buf„r
, 
size_t
 
size
);

123 
ssize_t
 
ªad
(c⁄° * 
buf„r
);

124 
boﬁ
 
isEm±y
(* 
buf„r
);

126 
dump
(
Såög8
& 
out
, c⁄° * 
wh©
, 
uöt32_t
 
Êags
=0) const;

127 
dump
(c⁄° * 
wh©
, 
uöt32_t
 
Êags
=0) const;

129 
	g¥iv©e
:

130 
˛ass
 
ø°îizî
;

131 
‰õnd
 
˛ass
 
	gø°îizî
;

133 
	gRegi⁄
& 
›î©i⁄Sñf
(c⁄° 
Re˘
& 
r
, 
›
);

134 
	gRegi⁄
& 
›î©i⁄Sñf
(c⁄° 
Regi⁄
& 
r
, 
›
);

135 
	gRegi⁄
& 
›î©i⁄Sñf
(c⁄° 
Regi⁄
& 
r
, 
dx
, 
dy
, 
›
);

136 c⁄° 
Regi⁄
 
›î©i⁄
(c⁄° 
Re˘
& 
rhs
, 
›
) const;

137 c⁄° 
Regi⁄
 
›î©i⁄
(c⁄° Regi⁄& 
rhs
, 
›
) const;

138 c⁄° 
Regi⁄
 
›î©i⁄
(c⁄° Regi⁄& 
rhs
, 
dx
, 
dy
, 
›
) const;

140 
boﬁón_›î©i⁄
(
›
, 
Regi⁄
& 
d°
,

141 c⁄° 
Regi⁄
& 
lhs
, c⁄° Regi⁄& 
rhs
, 
dx
, 
dy
);

142 
boﬁón_›î©i⁄
(
›
, 
Regi⁄
& 
d°
,

143 c⁄° 
Regi⁄
& 
lhs
, c⁄° 
Re˘
& 
rhs
, 
dx
, 
dy
);

145 
boﬁón_›î©i⁄
(
›
, 
Regi⁄
& 
d°
,

146 c⁄° 
Regi⁄
& 
lhs
, c⁄° Regi⁄& 
rhs
);

147 
boﬁón_›î©i⁄
(
›
, 
Regi⁄
& 
d°
,

148 c⁄° 
Regi⁄
& 
lhs
, c⁄° 
Re˘
& 
rhs
);

150 
å™¶©e
(
Regi⁄
& 
ªg
, 
dx
, 
dy
);

151 
å™¶©e
(
Regi⁄
& 
d°
, c⁄° Regi⁄& 
ªg
, 
dx
, 
dy
);

153 
boﬁ
 
vÆid©e
(c⁄° 
Regi⁄
& 
ªg
, c⁄° * 
«me
);

155 
Re˘
 
	gmBounds
;

156 
	gVe˘‹
<
	gRe˘
> 
	gmSt‹age
;

160 c⁄° 
Regi⁄
 
	gRegi⁄
::
›î©‹
 | (c⁄° Regi⁄& 
rhs
) const {

161  
mîge
(
rhs
);

163 c⁄° 
Regi⁄
 
	gRegi⁄
::
›î©‹
 & (c⁄° Regi⁄& 
rhs
) const {

164  
öãr£˘
(
rhs
);

166 c⁄° 
Regi⁄
 
	gRegi⁄
::
›î©‹
 - (c⁄° Regi⁄& 
rhs
) const {

167  
subåa˘
(
rhs
);

169 c⁄° 
Regi⁄
 
	gRegi⁄
::
›î©‹
 + (c⁄° 
Poöt
& 
±
) const {

170  
å™¶©e
(
±
.
x
,Öt.
y
);

174 
	gRegi⁄
& Regi⁄::
›î©‹
 |(c⁄° 
Regi⁄
& 
rhs
) {

175  
‹Sñf
(
rhs
);

177 
	gRegi⁄
& Regi⁄::
›î©‹
 &(c⁄° 
Regi⁄
& 
rhs
) {

178  
™dSñf
(
rhs
);

180 
	gRegi⁄
& Regi⁄::
›î©‹
 -(c⁄° 
Regi⁄
& 
rhs
) {

181  
subåa˘Sñf
(
rhs
);

183 
	gRegi⁄
& Regi⁄::
›î©‹
 +(c⁄° 
Poöt
& 
±
) {

184  
å™¶©eSñf
(
±
.
x
,Öt.
y
);

189 
	gªgi⁄_ôî©‹
 : 
public
 
c›ybô_ªgi⁄_t
 {

190 
ªgi⁄_ôî©‹
(c⁄° 
Regi⁄
& 
ªgi⁄
)

191 : 
b
(
ªgi⁄
.
begö
()), 
e
‘egi⁄.
íd
()) {

192 
	gthis
->
	g√xt
 = 
ôî©e
;

194 
	g¥iv©e
:

195 
ôî©e
(
c›ybô_ªgi⁄_t
 c⁄° * 
£lf
, 
c›ybô_ª˘_t
* 
ª˘
) {

196 
ªgi⁄_ôî©‹
 c⁄°* 
	gme
 = 
°©ic_ˇ°
<ªgi⁄_ôî©‹ c⁄°*>(
£lf
);

197 i‡(
	gme
->
	gb
 !
me
->
e
) {

198 *
ªöãΩªt_ˇ°
<
Re˘
*>(
ª˘
Ë*
me
->
b
++;

203 
muèbÀ
 
	gRegi⁄
::
c⁄°_ôî©‹
 
b
;

204 
	gRegi⁄
::
c⁄°_ôî©‹
 c⁄° 
e
;

	@jni/include/ui/android_native_buffer.h

17 #i‚de‡
ANDROID_ANDROID_NATIVES_PRIV_H


18 
	#ANDROID_ANDROID_NATIVES_PRIV_H


	)

20 
	~<ui/egl/™droid_«tives.h
>

22 #ifde‡
__˝lu•lus


28 
	s™droid_«tive_buf„r_t


30 #ifde‡
__˝lu•lus


31 
™droid_«tive_buf„r_t
() {

32 
comm⁄
.
magic
 = 
ANDROID_NATIVE_BUFFER_MAGIC
;

33 
comm⁄
.
vîsi⁄
 = (
™droid_«tive_buf„r_t
);

34 
mem£t
(
comm⁄
.
ª£rved
, 0, (common.reserved));

38 
™droid_«tive_ba£_t
 
comm⁄
;

40 
width
;

41 
height
;

42 
°ride
;

43 
f‹m©
;

44 
ußge
;

46 * 
ª£rved
[2];

48 
buf„r_h™dÀ_t
 
h™dÀ
;

50 * 
ª£rved_¥oc
[8];

51 } 
	t™droid_«tive_buf„r_t
;

56 #ifde‡
__˝lu•lus


	@jni/include/ui/egl/android_natives.h

17 #i‚de‡
ANDROID_ANDROID_NATIVES_H


18 
	#ANDROID_ANDROID_NATIVES_H


	)

20 
	~<sys/ty≥s.h
>

21 
	~<°rög.h
>

23 
	~<h¨dw¨e/gøŒoc.h
>

25 #ifde‡
__˝lu•lus


31 
	#ANDROID_NATIVE_MAKE_CONSTANT
(
a
,
b
,
c
,
d
) \

32 ((()(
a
)<<24)|(()(
b
)<<16)|(()(
c
)<<8)|()(
d
))

	)

34 
	#ANDROID_NATIVE_WINDOW_MAGIC
 \

35 
	`ANDROID_NATIVE_MAKE_CONSTANT
('_','w','n','d')

	)

37 
	#ANDROID_NATIVE_BUFFER_MAGIC
 \

38 
	`ANDROID_NATIVE_MAKE_CONSTANT
('_','b','f','r')

	)

42 
™droid_«tive_buf„r_t
;

46 
	s™droid_«tive_ba£_t


49 
magic
;

52 
vîsi⁄
;

54 * 
ª£rved
[4];

57 (*
öcRef
)(
™droid_«tive_ba£_t
* 
ba£
);

58 (*
decRef
)(
™droid_«tive_ba£_t
* 
ba£
);

59 } 
	t™droid_«tive_ba£_t
;

65 
NATIVE_WINDOW_WIDTH
 = 0,

66 
NATIVE_WINDOW_HEIGHT
 = 1,

67 
NATIVE_WINDOW_FORMAT
 = 2,

72 
NATIVE_WINDOW_SET_USAGE
 = 0,

73 
NATIVE_WINDOW_CONNECT
 = 1,

74 
NATIVE_WINDOW_DISCONNECT
 = 2

79 
NATIVE_WINDOW_API_EGL
 = 1

82 
	s™droid_«tive_wödow_t


84 #ifde‡
__˝lu•lus


85 
™droid_«tive_wödow_t
()

86 : 
Êags
(0), 
möSw≠I¡îvÆ
(0), 
maxSw≠I¡îvÆ
(0), 
xdpi
(0), 
ydpi
(0)

88 
comm⁄
.
magic
 = 
ANDROID_NATIVE_WINDOW_MAGIC
;

89 
comm⁄
.
vîsi⁄
 = (
™droid_«tive_wödow_t
);

90 
mem£t
(
comm⁄
.
ª£rved
, 0, (common.reserved));

94 
™droid_«tive_ba£_t
 
comm⁄
;

97 c⁄° 
uöt32_t
 
Êags
;

100 c⁄° 
möSw≠I¡îvÆ
;

103 c⁄° 
maxSw≠I¡îvÆ
;

106 c⁄° 
xdpi
;

107 c⁄° 
ydpi
;

110 
öçå_t
 
€m
[4];

118 (*
£tSw≠I¡îvÆ
)(
™droid_«tive_wödow_t
* 
wödow
,

119 
öãrvÆ
);

128 (*
dequeueBuf„r
)(
™droid_«tive_wödow_t
* 
wödow
,

129 
™droid_«tive_buf„r_t
** 
buf„r
);

138 (*
lockBuf„r
)(
™droid_«tive_wödow_t
* 
wödow
,

139 
™droid_«tive_buf„r_t
* 
buf„r
);

148 (*
queueBuf„r
)(
™droid_«tive_wödow_t
* 
wödow
,

149 
™droid_«tive_buf„r_t
* 
buf„r
);

156 (*
quîy
)(
™droid_«tive_wödow_t
* 
wödow
,

157 
wh©
, * 
vÆue
);

177 (*
≥rf‹m
)(
™droid_«tive_wödow_t
* 
wödow
,

178 
›î©i⁄
, ... );

180 * 
ª£rved_¥oc
[3];

181 } 
	t™droid_«tive_wödow_t
;

194 
ölöe
 
«tive_wödow_£t_ußge
(

195 
™droid_«tive_wödow_t
* 
wödow
, 
ußge
)

197  
wödow
->
≥rf‹m
(wödow, 
NATIVE_WINDOW_SET_USAGE
, 
ußge
);

206 
ölöe
 
«tive_wödow_c⁄√˘
(

207 
™droid_«tive_wödow_t
* 
wödow
, 
≠i
)

209  
wödow
->
≥rf‹m
(wödow, 
NATIVE_WINDOW_CONNECT
, 
≠i
);

218 
ölöe
 
«tive_wödow_disc⁄√˘
(

219 
™droid_«tive_wödow_t
* 
wödow
, 
≠i
)

221  
wödow
->
≥rf‹m
(wödow, 
NATIVE_WINDOW_DISCONNECT
, 
≠i
);

228 
	segl_«tive_pixm≠_t


230 
öt32_t
 
vîsi⁄
;

231 
öt32_t
 
width
;

232 
öt32_t
 
height
;

233 
öt32_t
 
°ride
;

234 
uöt8_t
* 
d©a
;

235 
uöt8_t
 
f‹m©
;

236 
uöt8_t
 
rfu
[3];

238 
uöt32_t
 
com¥es£dF‹m©
;

239 
öt32_t
 
v°ride
;

241 
öt32_t
 
ª£rved
;

242 } 
	tegl_«tive_pixm≠_t
;

246 #ifde‡
__˝lu•lus


253 #ifde‡
__˝lu•lus


255 
	~<utûs/RefBa£.h
>

257 
«me•a˚
 
™droid
 {

263 
ãm∂©e
 <
ty≥«me
 
NATIVE_TYPE
,Åy≥«mê
TYPE
,Åy≥«mê
REF
>

264 
˛ass
 
EGLN©iveBa£
 : 
public
 
NATIVE_TYPE
,Öubli¯
REF


266 
¥Ÿe˘ed
:

267 
EGLN©iveBa£
<
	tNATIVE_TYPE
, 
	tTYPE
, 
	tREF
> 
	tBASE
;

268 
EGLN©iveBa£
(Ë: 
NATIVE_TYPE
(), 
REF
() {

269 
NATIVE_TYPE
::
comm⁄
.
öcRef
 = incRef;

270 
NATIVE_TYPE
::
comm⁄
.
decRef
 = decRef;

272 
ölöe
 
TYPE
* 
gëSñf
(
NATIVE_TYPE
* 
£lf
) {

273  
°©ic_ˇ°
<
TYPE
*>(
£lf
);

275 
ölöe
 
TYPE
 c⁄°* 
gëSñf
(
NATIVE_TYPE
 c⁄°* 
£lf
) {

276  
°©ic_ˇ°
<
TYPE
 c⁄° *>(
£lf
);

278 
ölöe
 
TYPE
* 
gëSñf
(
™droid_«tive_ba£_t
* 
ba£
) {

279  
gëSñf
(
ªöãΩªt_ˇ°
<
NATIVE_TYPE
*>(
ba£
));

281 
ölöe
 
TYPE
 c⁄° * 
gëSñf
(
™droid_«tive_ba£_t
 c⁄°* 
ba£
) {

282  
gëSñf
(
ªöãΩªt_ˇ°
<
NATIVE_TYPE
 c⁄°*>(
ba£
));

284 
öcRef
(
™droid_«tive_ba£_t
* 
ba£
) {

285 
EGLN©iveBa£
* 
£lf
 = 
gëSñf
(
ba£
);

286 
£lf
->
öcSå⁄g
(self);

288 
decRef
(
™droid_«tive_ba£_t
* 
ba£
) {

289 
EGLN©iveBa£
* 
£lf
 = 
gëSñf
(
ba£
);

290 
£lf
->
decSå⁄g
(self);

	@jni/include/utils/Asset.h

21 #i‚de‡
__LIBS_ASSET_H


22 
	#__LIBS_ASSET_H


	)

24 
	~<°dio.h
>

25 
	~<sys/ty≥s.h
>

26 
	~"FûeM≠.h
"

27 
	~"Såög8.h
"

28 
	~"Eº‹s.h
"

30 
«me•a˚
 
	g™droid
 {

43 ˛as†
	cAs£t
 {

44 
	gpublic
:

45 
vútuÆ
 ~
As£t
();

47 
öt32_t
 
gëGlobÆCou¡
();

48 
Såög8
 
gëAs£tAŒoˇti⁄s
();

51 
	eAc˚ssMode
 {

52 
	gACCESS_UNKNOWN
 = 0,

55 
	gACCESS_RANDOM
,

58 
	gACCESS_STREAMING
,

61 
	gACCESS_BUFFER
,

62 } 
	tAc˚ssMode
;

66 #ifde‡
HAVE_ANDROID_OS


67 
	gUNCOMPRESS_DATA_MAX
 = 1 * 1024 * 1024

69 
UNCOMPRESS_DATA_MAX
 = 2 * 1024 * 1024

77 
vútuÆ
 
ssize_t
 
ªad
(* 
buf
, 
size_t
 
cou¡
) = 0;

84 
vútuÆ
 
off_t
 
£ek
(off_à
off£t
, 
whí˚
) = 0;

89 
vútuÆ
 
˛o£
() = 0;

94 
vútuÆ
 c⁄° * 
gëBuf„r
(
boﬁ
 
w‹dAlig√d
) = 0;

99 
vútuÆ
 
off_t
 
gëLígth
() const = 0;

104 
vútuÆ
 
off_t
 
gëRemaöögLígth
() const = 0;

111 
vútuÆ
 
›íFûeDes¸ùt‹
(
off_t
* 
outSèπ
, off_t* 
outLígth
) const = 0;

117 
vútuÆ
 
boﬁ
 
isAŒoˇãd
(Ëc⁄° {  
	gÁl£
; }

126 c⁄° * 
gëAs£tSour˚
(Ëc⁄° {  
	gmAs£tSour˚
.
°rög
(); }

128 
	g¥Ÿe˘ed
:

129 
As£t
();

132 
off_t
 
h™dÀSìk
(off_à
off£t
, 
whí˚
, off_à
curPo¢
, off_à
maxPo¢
);

135 
£tAs£tSour˚
(c⁄° 
Såög8
& 
∑th
Ë{ 
	gmAs£tSour˚
 =Öath; }

137 
Ac˚ssMode
 
gëAc˚ssMode
(Ëc⁄° {  
	gmAc˚ssMode
; }

139 
	g¥iv©e
:

141 
As£t
(c⁄° As£t& 
§c
);

142 
	gAs£t
& 
	g›î©‹
=(c⁄° 
As£t
& 
§c
);

145 
‰õnd
 
˛ass
 
	gAs£tM™agî
;

150 
As£t
* 
¸óãFromFûe
(c⁄° * 
fûeName
, 
Ac˚ssMode
 
mode
);

155 
As£t
* 
¸óãFromCom¥es£dFûe
(c⁄° * 
fûeName
,

156 
Ac˚ssMode
 
mode
);

165 
As£t
* 
¸óãFromFûeSegmít
(
fd
, 
off_t
 
off£t
, 
size_t
 
Àngth
,

166 
Ac˚ssMode
 
mode
);

178 
As£t
* 
¸óãFromCom¥es£dD©a
(
fd
, 
off_t
 
off£t
,

179 
com¥essi⁄Mëhod
, 
size_t
 
com¥es£dLígth
,

180 
size_t
 
uncom¥es£dLígth
, 
Ac˚ssMode
 
mode
);

188 
As£t
* 
¸óãFromUncom¥es£dM≠
(
FûeM≠
* 
d©aM≠
, 
Ac˚ssMode
 
mode
);

196 
As£t
* 
¸óãFromCom¥es£dM≠
(
FûeM≠
* 
d©aM≠
, 
mëhod
,

197 
size_t
 
uncom¥es£dLí
, 
Ac˚ssMode
 
mode
);

205 
Ac˚ssMode
 
	gmAc˚ssMode
;

206 
Såög8
 
	gmAs£tSour˚
;

208 
As£t
* 
	gmNext
;

209 
As£t
* 
	gmPªv
;

223 ˛as†
	c_FûeAs£t
 : 
public
 
As£t
 {

224 
public
:

225 
_FûeAs£t
();

226 
	gvútuÆ
 ~
_FûeAs£t
();

233 
°©us_t
 
›íChunk
(c⁄° * 
fûeName
, 
fd
, 
off_t
 
off£t
, 
size_t
 
Àngth
);

240 
°©us_t
 
›íChunk
(
FûeM≠
* 
d©aM≠
);

245 
vútuÆ
 
ssize_t
 
ªad
(* 
buf
, 
size_t
 
cou¡
);

246 
vútuÆ
 
off_t
 
£ek
(off_à
off£t
, 
whí˚
);

247 
vútuÆ
 
˛o£
();

248 
vútuÆ
 c⁄° * 
gëBuf„r
(
boﬁ
 
w‹dAlig√d
);

249 
vútuÆ
 
off_t
 
gëLígth
(Ëc⁄° {  
	gmLígth
; }

250 
vútuÆ
 
off_t
 
gëRemaöögLígth
(Ëc⁄° {  
	gmLígth
-
	gmOff£t
; }

251 
vútuÆ
 
›íFûeDes¸ùt‹
(
off_t
* 
outSèπ
, off_t* 
outLígth
) const;

252 
vútuÆ
 
boﬁ
 
isAŒoˇãd
(Ëc⁄° {  
	gmBuf
 !
NULL
; }

254 
	g¥iv©e
:

255 
off_t
 
mSèπ
;

256 
off_t
 
	gmLígth
;

257 
off_t
 
	gmOff£t
;

258 
FILE
* 
	gmFp
;

259 * 
	gmFûeName
;

266 íum { 
	gkRódVsM≠Thªshﬁd
 = 4096 };

268 
FûeM≠
* 
	gmM≠
;

269 * 
	gmBuf
;

271 c⁄° * 
ísuªAlignmít
(
FûeM≠
* 
m≠
);

278 ˛as†
	c_Com¥es£dAs£t
 : 
public
 
As£t
 {

279 
public
:

280 
_Com¥es£dAs£t
();

281 
	gvútuÆ
 ~
_Com¥es£dAs£t
();

288 
°©us_t
 
›íChunk
(
fd
, 
off_t
 
off£t
, 
com¥essi⁄Mëhod
,

289 
size_t
 
uncom¥es£dLí
, size_à
com¥es£dLí
);

296 
°©us_t
 
›íChunk
(
FûeM≠
* 
d©aM≠
, 
com¥essi⁄Mëhod
,

297 
size_t
 
uncom¥es£dLí
);

302 
vútuÆ
 
ssize_t
 
ªad
(* 
buf
, 
size_t
 
cou¡
);

303 
vútuÆ
 
off_t
 
£ek
(off_à
off£t
, 
whí˚
);

304 
vútuÆ
 
˛o£
();

305 
vútuÆ
 c⁄° * 
gëBuf„r
(
boﬁ
 
w‹dAlig√d
);

306 
vútuÆ
 
off_t
 
gëLígth
(Ëc⁄° {  
	gmUncom¥es£dLí
; }

307 
vútuÆ
 
off_t
 
gëRemaöögLígth
(Ëc⁄° {  
	gmUncom¥es£dLí
-
	gmOff£t
; }

308 
vútuÆ
 
›íFûeDes¸ùt‹
(
off_t
* 
outSèπ
, off_t* 
outLígth
) const {  -1; }

309 
vútuÆ
 
boﬁ
 
isAŒoˇãd
(Ëc⁄° {  
	gmBuf
 !
NULL
; }

311 
	g¥iv©e
:

312 
off_t
 
mSèπ
;

313 
off_t
 
	gmCom¥es£dLí
;

314 
off_t
 
	gmUncom¥es£dLí
;

315 
off_t
 
	gmOff£t
;

317 
FûeM≠
* 
	gmM≠
;

318 
	gmFd
;

320 * 
	gmBuf
;

	@jni/include/utils/AssetDir.h

20 #i‚de‡
__LIBS_ASSETDIR_H


21 
	#__LIBS_ASSETDIR_H


	)

23 
	~<utûs/Såög8.h
>

24 
	~<utûs/Ve˘‹.h
>

25 
	~<utûs/S‹ãdVe˘‹.h
>

26 
	~<utûs/misc.h
>

27 
	~<sys/ty≥s.h
>

29 
«me•a˚
 
	g™droid
 {

40 ˛as†
	cAs£tDú
 {

41 
	gpublic
:

42 
As£tDú
()

43 : 
mFûeInfo
(
NULL
)

45 
vútuÆ
 ~
As£tDú
() {

46 
dñëe
 
mFûeInfo
;

52 
size_t
 
gëFûeCou¡
(Ë{  
	gmFûeInfo
->
size
(); }

53 c⁄° 
	gSåög8
& 
gëFûeName
(
idx
) {

54  
	gmFûeInfo
->
ôemAt
(
idx
).
gëFûeName
();

56 c⁄° 
	gSåög8
& 
gëSour˚Name
(
idx
) {

57  
	gmFûeInfo
->
ôemAt
(
idx
).
gëSour˚Name
();

63 
FûeTy≥
 
gëFûeTy≥
(
idx
) {

64  
	gmFûeInfo
->
ôemAt
(
idx
).
gëFûeTy≥
();

67 
	g¥iv©e
:

69 
As£tDú
(c⁄° As£tDú& 
§c
);

70 c⁄° 
	gAs£tDú
& 
	g›î©‹
=(c⁄° 
As£tDú
& 
§c
);

72 
‰õnd
 
˛ass
 
	gAs£tM™agî
;

77 ˛as†
	cFûeInfo
 {

78 
	gpublic
:

79 
FûeInfo
() {}

80 
FûeInfo
(c⁄° 
Såög8
& 
∑th
)

81 : 
mFûeName
(
∑th
), 
mFûeTy≥
(
kFûeTy≥Unknown
)

83 ~
FûeInfo
() {}

84 
FûeInfo
(c⁄° FûeInfo& 
§c
) {

85 
c›yMembîs
(
§c
);

87 c⁄° 
	gFûeInfo
& 
	g›î©‹
(c⁄° 
FûeInfo
& 
§c
) {

88 i‡(
this
 !&
§c
)

89 
c›yMembîs
(
§c
);

90  *
	gthis
;

93 
c›yMembîs
(c⁄° 
FûeInfo
& 
§c
) {

94 
	gmFûeName
 = 
§c
.
mFûeName
;

95 
	gmFûeTy≥
 = 
§c
.
mFûeTy≥
;

96 
	gmSour˚Name
 = 
§c
.
mSour˚Name
;

100 
boﬁ
 
	g›î©‹
< (c⁄° 
	gFûeInfo
& 
	grhs
) const {

101  
	gmFûeName
 < 
	grhs
.mFileName;

105 
boﬁ
 
	g›î©‹
=(c⁄° 
FûeInfo
& 
rhs
) const {

106  
mFûeName
 =
rhs
.mFileName;

109 
£t
(c⁄° 
Såög8
& 
∑th
, 
FûeTy≥
 
ty≥
) {

110 
	gmFûeName
 = 
∑th
;

111 
	gmFûeTy≥
 = 
ty≥
;

114 c⁄° 
	gSåög8
& 
gëFûeName
(Ëc⁄° {  
	gmFûeName
; }

115 
£tFûeName
(c⁄° 
Såög8
& 
∑th
Ë{ 
	gmFûeName
 =Öath; }

117 
FûeTy≥
 
gëFûeTy≥
(Ëc⁄° {  
	gmFûeTy≥
; }

118 
£tFûeTy≥
(
FûeTy≥
 
ty≥
Ë{ 
	gmFûeTy≥
 =Åype; }

120 c⁄° 
	gSåög8
& 
gëSour˚Name
(Ëc⁄° {  
	gmSour˚Name
; }

121 
£tSour˚Name
(c⁄° 
Såög8
& 
∑th
Ë{ 
	gmSour˚Name
 =Öath; }

127 
födE¡ry
(c⁄° 
S‹ãdVe˘‹
<
FûeInfo
>* 
pVe˘‹
,

128 c⁄° 
Såög8
& 
fûeName
);

130 
	g¥iv©e
:

131 
Såög8
 
mFûeName
;

132 
FûeTy≥
 
	gmFûeTy≥
;

134 
Såög8
 
	gmSour˚Name
;

138 
£tFûeLi°
(
S‹ãdVe˘‹
<
FûeInfo
>* 
li°
Ë{ 
	gmFûeInfo
 =Üist; }

140 
	gS‹ãdVe˘‹
<
	gFûeInfo
>* 
	gmFûeInfo
;

	@jni/include/utils/AssetManager.h

20 #i‚de‡
__LIBS_ASSETMANAGER_H


21 
	#__LIBS_ASSETMANAGER_H


	)

23 
	~<utûs/As£t.h
>

24 
	~<utûs/As£tDú.h
>

25 
	~<utûs/KeyedVe˘‹.h
>

26 
	~<utûs/Såög8.h
>

27 
	~<utûs/Ve˘‹.h
>

28 
	~<utûs/Såög16.h
>

29 
	~<utûs/ZùFûeRO.h
>

30 
	~<utûs/thªads.h
>

32 
«me•a˚
 
	g™droid
 {

34 
˛ass
 
	gAs£t
;

35 
˛ass
 
	gResTabÀ
;

36 
	gResTabÀ_c⁄fig
;

51 ˛as†
	cAs£tM™agî
 {

52 
	gpublic
:

53 
	eCacheMode
 {

54 
CACHE_UNKNOWN
 = 0,

55 
	gCACHE_OFF
,

56 
	gCACHE_DEFER
,

58 } 
	tCacheMode
;

60 
As£tM™agî
(
CacheMode
 
ˇcheMode
 = 
CACHE_OFF
);

61 
	gvútuÆ
 ~
As£tM™agî
();

63 
öt32_t
 
gëGlobÆCou¡
();

76 
boﬁ
 
addAs£tP©h
(c⁄° 
Såög8
& 
∑th
, ** 
cookõ
);

82 
boﬁ
 
addDeÁu…As£ts
();

91 * 
√xtAs£tP©h
(* 
cookõ
) const;

97 
Såög8
 
gëAs£tP©h
(* 
cookõ
) const;

106 
£tLoˇÀ
(c⁄° * 
loˇÀ
);

107 
£tVíd‹
(c⁄° * 
víd‹
);

112 
£tC⁄figuøti⁄
(c⁄° 
ResTabÀ_c⁄fig
& 
c⁄fig
, c⁄° * 
loˇÀ
 = 
NULL
);

114 
	gAs£t
::
	tAc˚ssMode
 AccessMode;

125 
As£t
* 
›í
(c⁄° * 
fûeName
, 
Ac˚ssMode
 
mode
);

135 
As£t
* 
›íN⁄As£t
(c⁄° * 
fûeName
, 
Ac˚ssMode
 
mode
);

141 
As£t
* 
›íN⁄As£t
(* 
cookõ
, c⁄° * 
fûeName
, 
Ac˚ssMode
 
mode
);

153 
As£tDú
* 
›íDú
(c⁄° * 
dúName
);

165 
As£tDú
* 
›íN⁄As£tDú
(* 
cookõ
, c⁄° * 
dúName
);

173 
FûeTy≥
 
gëFûeTy≥
(c⁄° * 
fûeName
);

178 c⁄° 
	gResTabÀ
& 
gëResour˚s
(
boﬁ
 
ªquúed
 = 
åue
) const;

185 
purge
(Ë{ 
purgeFûeNameCacheLocked
(); }

193 
boﬁ
 
isUpToD©e
();

198 
gëLoˇÀs
(
Ve˘‹
<
Såög8
>* 
loˇÀs
) const;

200 
	g¥iv©e
:

201 
	sas£t_∑th


203 
Såög8
 
∑th
;

204 
FûeTy≥
 
	gty≥
;

207 
As£t
* 
›íInP©hLocked
(c⁄° * 
fûeName
, 
Ac˚ssMode
 
mode
,

208 c⁄° 
as£t_∑th
& 
∑th
);

209 
As£t
* 
›íN⁄As£tInP©hLocked
(c⁄° * 
fûeName
, 
Ac˚ssMode
 
mode
,

210 c⁄° 
as£t_∑th
& 
∑th
);

211 
As£t
* 
›íInLoˇÀVíd‹Locked
(c⁄° * 
fûeName
, 
Ac˚ssMode
 
mode
,

212 c⁄° 
as£t_∑th
& 
∑th
, c⁄° * 
loˇÀ
, c⁄° * 
víd‹
);

213 
Såög8
 
¸óãP©hNameLocked
(c⁄° 
as£t_∑th
& 
∑th
, c⁄° * 
loˇÀ
,

214 c⁄° * 
víd‹
);

215 
Såög8
 
¸óãP©hNameLocked
(c⁄° 
as£t_∑th
& 
∑th
, c⁄° * 
roŸDú
);

216 
Såög8
 
¸óãZùSour˚NameLocked
(c⁄° Såög8& 
zùFûeName
,

217 c⁄° 
Såög8
& 
dúName
, c⁄° Såög8& 
fûeName
);

219 
ZùFûeRO
* 
gëZùFûeLocked
(c⁄° 
as£t_∑th
& 
∑th
);

220 
As£t
* 
›íAs£tFromFûeLocked
(c⁄° 
Såög8
& 
fûeName
, 
Ac˚ssMode
 
mode
);

221 
As£t
* 
›íAs£tFromZùLocked
(c⁄° 
ZùFûeRO
* 
pZùFûe
,

222 c⁄° 
ZùE¡ryRO
 
íåy
, 
Ac˚ssMode
 
mode
, c⁄° 
Såög8
& 
íåyName
);

224 
boﬁ
 
sˇnAndMîgeDúLocked
(
S‹ãdVe˘‹
<
As£tDú
::
FûeInfo
>* 
pMîgedInfo
,

225 c⁄° 
as£t_∑th
& 
∑th
, c⁄° * 
roŸDú
, c⁄° * 
dúName
);

226 
	gS‹ãdVe˘‹
<
	gAs£tDú
::
FûeInfo
>* 
sˇnDúLocked
(c⁄° 
Såög8
& 
∑th
);

227 
boﬁ
 
sˇnAndMîgeZùLocked
(
S‹ãdVe˘‹
<
As£tDú
::
FûeInfo
>* 
pMîgedInfo
,

228 c⁄° 
as£t_∑th
& 
∑th
, c⁄° * 
roŸDú
, c⁄° * 
dúName
);

229 
mîgeInfoLocked
(
S‹ãdVe˘‹
<
As£tDú
::
FûeInfo
>* 
pMîgedInfo
,

230 c⁄° 
S‹ãdVe˘‹
<
As£tDú
::
FûeInfo
>* 
pC⁄ã¡s
);

232 
lﬂdFûeNameCacheLocked
();

233 
‚cSˇnLocked
(
S‹ãdVe˘‹
<
As£tDú
::
FûeInfo
>* 
pMîgedInfo
,

234 c⁄° * 
dúName
);

235 
boﬁ
 
‚cSˇnAndMîgeDúLocked
(

236 
S‹ãdVe˘‹
<
As£tDú
::
FûeInfo
>* 
pMîgedInfo
,

237 c⁄° 
as£t_∑th
& 
∑th
, c⁄° * 
loˇÀ
, c⁄° * 
víd‹
,

238 c⁄° * 
dúName
);

239 
purgeFûeNameCacheLocked
();

241 c⁄° 
ResTabÀ
* 
gëResTabÀ
(
boﬁ
 
ªquúed
 = 
åue
) const;

242 
£tLoˇÀLocked
(c⁄° * 
loˇÀ
);

243 
upd©eResour˚P¨amsLocked
() const;

245 ˛as†
	cSh¨edZù
 : 
public
 
RefBa£
 {

246 
public
:

247 
•
<
Sh¨edZù
> 
gë
(c⁄° 
Såög8
& 
∑th
);

249 
ZùFûeRO
* 
gëZù
();

251 
As£t
* 
gëResour˚TabÀAs£t
();

252 
As£t
* 
£tResour˚TabÀAs£t
(As£t* 
as£t
);

254 
ResTabÀ
* 
gëResour˚TabÀ
();

255 
ResTabÀ
* 
£tResour˚TabÀ
(ResTabÀ* 
ªs
);

257 
boﬁ
 
isUpToD©e
();

259 
	g¥Ÿe˘ed
:

260 ~
Sh¨edZù
();

262 
	g¥iv©e
:

263 
Sh¨edZù
(c⁄° 
Såög8
& 
∑th
, 
time_t
 
modWhí
);

264 
Sh¨edZù
();

266 
Såög8
 
	gmP©h
;

267 
ZùFûeRO
* 
	gmZùFûe
;

268 
time_t
 
	gmModWhí
;

270 
As£t
* 
	gmResour˚TabÀAs£t
;

271 
ResTabÀ
* 
	gmResour˚TabÀ
;

273 
Muãx
 
	ggLock
;

274 
	gDeÁu…KeyedVe˘‹
<
	gSåög8
, 
	gwp
<
	gSh¨edZù
> > 
	ggO≥n
;

284 ˛as†
	cZùSë
 {

285 
	gpublic
:

286 
ZùSë
();

287 ~
ZùSë
();

293 
ZùFûeRO
* 
gëZù
(c⁄° 
Såög8
& 
∑th
);

295 
As£t
* 
gëZùResour˚TabÀAs£t
(c⁄° 
Såög8
& 
∑th
);

296 
As£t
* 
£tZùResour˚TabÀAs£t
(c⁄° 
Såög8
& 
∑th
, As£t* 
as£t
);

298 
ResTabÀ
* 
gëZùResour˚TabÀ
(c⁄° 
Såög8
& 
∑th
);

299 
ResTabÀ
* 
£tZùResour˚TabÀ
(c⁄° 
Såög8
& 
∑th
, ResTabÀ* 
ªs
);

302 
Såög8
 
gëP©hName
(c⁄° * 
∑th
);

304 
boﬁ
 
isUpToD©e
();

306 
	g¥iv©e
:

307 
˛o£Zù
(
idx
);

309 
gëIndex
(c⁄° 
Såög8
& 
zù
) const;

310 
muèbÀ
 
	gVe˘‹
<
	gSåög8
> 
	gmZùP©h
;

311 
muèbÀ
 
	gVe˘‹
<
	g•
<
	gSh¨edZù
> > 
	gmZùFûe
;

315 
muèbÀ
 
Muãx
 
	gmLock
;

317 
ZùSë
 
	gmZùSë
;

319 
	gVe˘‹
<
	gas£t_∑th
> 
	gmAs£tP©hs
;

320 * 
	gmLoˇÀ
;

321 * 
	gmVíd‹
;

323 
muèbÀ
 
ResTabÀ
* 
	gmResour˚s
;

324 
ResTabÀ_c⁄fig
* 
	gmC⁄fig
;

335 
CacheMode
 
	gmCacheMode
;

336 
boﬁ
 
	gmCacheVÆid
;

337 
	gS‹ãdVe˘‹
<
	gAs£tDú
::
FûeInfo
> 
mCache
;

	@jni/include/utils/Atomic.h

17 #i‚de‡
ANDROID_UTILS_ATOMIC_H


18 
	#ANDROID_UTILS_ATOMIC_H


	)

20 
	~<cutûs/©omic.h
>

	@jni/include/utils/BackupHelpers.h

17 #i‚de‡
_UTILS_BACKUP_HELPERS_H


18 
	#_UTILS_BACKUP_HELPERS_H


	)

20 
	~<utûs/Eº‹s.h
>

21 
	~<utûs/Såög8.h
>

22 
	~<utûs/KeyedVe˘‹.h
>

24 
«me•a˚
 
	g™droid
 {

27 
	gBACKUP_HEADER_ENTITY_V1
 = 0x61746144,

31 
	gty≥
;

32 
	gkeyLí
;

33 
	gd©aSize
;

34 } 
	títôy_hódî_v1
;

36 
	sS«pshŸHódî
 {

37 
	gmagic0
;

38 
	gfûeCou¡
;

39 
	gmagic1
;

40 
	gtŸÆSize
;

43 
	sFûeSèã
 {

44 
	gmodTime_£c
;

45 
	gmodTime_n£c
;

46 
	gmode
;

47 
	gsize
;

48 
	g¸c32
;

49 
	g«meLí
;

52 
	sFûeRec
 {

53 
Såög8
 
	gfûe
;

54 
boﬁ
 
	gdñëed
;

55 
FûeSèã
 
	gs
;

65 ˛as†
	cBackupD©aWrôî


67 
	gpublic
:

68 
BackupD©aWrôî
(
fd
);

70 ~
BackupD©aWrôî
();

72 
°©us_t
 
WrôeE¡ôyHódî
(c⁄° 
Såög8
& 
key
, 
size_t
 
d©aSize
);

73 
°©us_t
 
WrôeE¡ôyD©a
(c⁄° * 
d©a
, 
size_t
 
size
);

75 
SëKeyPªfix
(c⁄° 
Såög8
& 
keyPªfix
);

77 
	g¥iv©e
:

78 
ex∂icô
 
BackupD©aWrôî
();

79 
°©us_t
 
wrôe_∑ddög_f‹
(
n
);

81 
	gm_fd
;

82 
°©us_t
 
	gm_°©us
;

83 
ssize_t
 
	gm_pos
;

84 
	gm_ítôyCou¡
;

85 
Såög8
 
	gm_keyPªfix
;

94 ˛as†
	cBackupD©aRódî


96 
	gpublic
:

97 
BackupD©aRódî
(
fd
);

99 ~
BackupD©aRódî
();

101 
°©us_t
 
Sètus
();

102 
°©us_t
 
RódNextHódî
(
boﬁ
* 
d⁄e
, * 
ty≥
);

104 
boﬁ
 
HasE¡ôõs
();

105 
°©us_t
 
RódE¡ôyHódî
(
Såög8
* 
key
, 
size_t
* 
d©aSize
);

106 
°©us_t
 
SkùE¡ôyD©a
();

107 
ssize_t
 
RódE¡ôyD©a
(* 
d©a
, 
size_t
 
size
);

109 
	g¥iv©e
:

110 
ex∂icô
 
BackupD©aRódî
();

111 
°©us_t
 
skù_∑ddög
();

113 
	gm_fd
;

114 
boﬁ
 
	gm_d⁄e
;

115 
°©us_t
 
	gm_°©us
;

116 
ssize_t
 
	gm_pos
;

117 
ssize_t
 
	gm_d©aEndPos
;

118 
	gm_ítôyCou¡
;

120 
	gty≥
;

121 
ítôy_hódî_v1
 
	gítôy
;

122 } 
	gm_hódî
;

123 
Såög8
 
	gm_key
;

126 
back_up_fûes
(
ﬁdS«pshŸFD
, 
BackupD©aWrôî
* 
d©aSåóm
, 
√wS«pshŸFD
,

127 c⁄°* c⁄°* 
fûes
, c⁄°* c⁄° *
keys
, 
fûeCou¡
);

129 ˛as†
	cRe°‹eHñ≥rBa£


131 
	gpublic
:

132 
Re°‹eHñ≥rBa£
();

133 ~
Re°‹eHñ≥rBa£
();

135 
°©us_t
 
WrôeFûe
(c⁄° 
Såög8
& 
fûíame
, 
BackupD©aRódî
* 
ö
);

136 
°©us_t
 
WrôeS«pshŸ
(
fd
);

138 
	g¥iv©e
:

139 * 
m_buf
;

140 
boﬁ
 
	gm_loggedUnknownMëad©a
;

141 
	gKeyedVe˘‹
<
	gSåög8
,
	gFûeRec
> 
	gm_fûes
;

144 
	#TEST_BACKUP_HELPERS
 1

	)

146 #i‡
TEST_BACKUP_HELPERS


147 
backup_hñ≥r_ã°_em±y
();

148 
backup_hñ≥r_ã°_four
();

149 
backup_hñ≥r_ã°_fûes
();

150 
backup_hñ≥r_ã°_nuŒ_ba£
();

151 
backup_hñ≥r_ã°_missög_fûe
();

152 
backup_hñ≥r_ã°_d©a_wrôî
();

153 
backup_hñ≥r_ã°_d©a_ªadî
();

	@jni/include/utils/Buffer.h

17 #i‚de‡
__UTILS_BUFFER_H__


18 
	#__UTILS_BUFFER_H__
 1

	)

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

24 
«me•a˚
 
	g™droid
 {

26 ˛as†
	cBuf„r


28 
	g¥iv©e
:

29 *
buf
;

30 
	gbufsiz
;

31 
	gu£d
;

32 
ísuªC≠acôy
(
Àn
);

35 
makeRoomF‹
(
Àn
)

37 i‡(
	gÀn
 + 
	gu£d
 >
bufsiz
) {

38 
bufsiz
 = (
Àn
 + 
u£d
) * 3/2 + 2;

39 *
	gbœh
 = 
√w
 [
bufsiz
];

41 
mem˝y
(
bœh
, 
buf
, 
u£d
);

42 
	gdñëe
[] 
	gbuf
;

43 
	gbuf
 = 
bœh
;

47 
	gpublic
:

48 
Buf„r
()

50 
bufsiz
 = 16;

51 
	gbuf
 = 
√w
 [
bufsiz
];

52 
˛ór
();

55 ~
Buf„r
()

57 
	gdñëe
[] 
	gbuf
;

61 
˛ór
()

63 
	gbuf
[0] = '\0';

64 
	gu£d
 = 0;

68 
Àngth
()

70  
	gu£d
;

74 
≠≥nd
(c⁄° 
c
)

76 
makeRoomF‹
(1);

77 
	gbuf
[
u£d
] = 
c
;

78 
	gu£d
++;

79 
	gbuf
[
u£d
] = '\0';

83 
≠≥nd
(c⁄° *
s
, 
Àn
)

85 
makeRoomF‹
(
Àn
);

87 
mem˝y
(
buf
 + 
u£d
, 
s
, 
Àn
);

88 
	gu£d
 +
Àn
;

89 
	gbuf
[
u£d
] = '\0';

93 
≠≥nd
(c⁄° *
s
)

95 
≠≥nd
(
s
, 
°æí
(s));

99 
gëByãs
()

101  
	gbuf
;

	@jni/include/utils/BufferedTextOutput.h

17 #i‚de‡
ANDROID_BUFFEREDTEXTOUTPUT_H


18 
	#ANDROID_BUFFEREDTEXTOUTPUT_H


	)

20 
	~<utûs/TextOuçut.h
>

21 
	~<utûs/thªads.h
>

22 
	~<cutûs/uio.h
>

25 
«me•a˚
 
	g™droid
 {

27 ˛as†
	cBuf„ªdTextOuçut
 : 
public
 
TextOuçut


29 
public
:

32 
MULTITHREADED
 = 0x0001

35 
Buf„ªdTextOuçut
(
uöt32_t
 
Êags
 = 0);

36 
	gvútuÆ
 ~
Buf„ªdTextOuçut
();

38 
vútuÆ
 
°©us_t
 
¥öt
(c⁄° * 
txt
, 
size_t
 
Àn
);

39 
vútuÆ
 
moveIndít
(
dñè
);

41 
vútuÆ
 
pushBundÀ
();

42 
vútuÆ
 
p›BundÀ
();

44 
	g¥Ÿe˘ed
:

45 
vútuÆ
 
°©us_t
 
wrôeLöes
(c⁄° 
iovec
& 
vec
, 
size_t
 
N
) = 0;

47 
	g¥iv©e
:

48 
Buf„rSèã
;

49 
	gThªadSèã
;

51 
ThªadSèã
*
gëThªadSèã
();

52 
thªadDe°ru˘‹
(*
°
);

54 
Buf„rSèã
*
gëBuf„r
() const;

56 
uöt32_t
 
	gmFœgs
;

57 c⁄° 
öt32_t
 
	gmSeq
;

58 c⁄° 
öt32_t
 
	gmIndex
;

60 
Muãx
 
	gmLock
;

61 
Buf„rSèã
* 
	gmGlobÆSèã
;

	@jni/include/utils/ByteOrder.h

19 #i‚de‡
_LIBS_UTILS_BYTE_ORDER_H


20 
	#_LIBS_UTILS_BYTE_ORDER_H


	)

22 
	~<°döt.h
>

23 
	~<sys/ty≥s.h
>

24 #ifde‡
HAVE_WINSOCK


25 
	~<wösock2.h
>

27 
	~<√töë/ö.h
>

41 
ölöe
 
uöt32_t
 
	$™droid_sw≠_l⁄g
(
uöt32_t
 
v
)

43  (
v
<<24) | ((v<<8)&0x00FF0000) | ((v>>8)&0x0000FF00) | (v>>24);

44 
	}
}

46 
ölöe
 
uöt16_t
 
	$™droid_sw≠_sh‹t
(
uöt16_t
 
v
)

48  (
v
<<8) | (v>>8);

49 
	}
}

51 
	#DEVICE_BYTE_ORDER
 
LITTLE_ENDIAN


	)

53 #i‡
BYTE_ORDER
 =
DEVICE_BYTE_ORDER


55 
	#dtohl
(
x
Ë(x)

	)

56 
	#dtohs
(
x
Ë(x)

	)

57 
	#htodl
(
x
Ë(x)

	)

58 
	#htods
(
x
Ë(x)

	)

62 
	#dtohl
(
x
Ë(
	`™droid_sw≠_l⁄g
(x))

	)

63 
	#dtohs
(
x
Ë(
	`™droid_sw≠_sh‹t
(x))

	)

64 
	#htodl
(
x
Ë(
	`™droid_sw≠_l⁄g
(x))

	)

65 
	#htods
(
x
Ë(
	`™droid_sw≠_sh‹t
(x))

	)

69 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


70 
	#‰omÀl
(
x
Ë(x)

	)

71 
	#‰omÀs
(
x
Ë(x)

	)

72 
	#tﬁñ
(
x
Ë(x)

	)

73 
	#tﬁes
(
x
Ë(x)

	)

75 
	#‰omÀl
(
x
Ë(
	`™droid_sw≠_l⁄g
(x))

	)

76 
	#‰omÀs
(
x
Ë(
	`™droid_sw≠_sh‹t
(x))

	)

77 
	#tﬁñ
(
x
Ë(
	`™droid_sw≠_l⁄g
(x))

	)

78 
	#tﬁes
(
x
Ë(
	`™droid_sw≠_sh‹t
(x))

	)

	@jni/include/utils/CallStack.h

17 #i‚de‡
ANDROID_CALLSTACK_H


18 
	#ANDROID_CALLSTACK_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	~<utûs/Såög8.h
>

27 
«me•a˚
 
	g™droid
 {

29 ˛as†
	cCÆlSèck


31 
	gpublic
:

33 
MAX_DEPTH
 = 31

36 
CÆlSèck
();

37 
CÆlSèck
(c⁄° CÆlSèck& 
rhs
);

38 ~
CÆlSèck
();

40 
	gCÆlSèck
& 
	g›î©‹
 = (c⁄° 
CÆlSèck
& 
rhs
);

42 
boﬁ
 
	g›î©‹
 =(c⁄° 
CÆlSèck
& 
rhs
) const;

43 
boﬁ
 
	g›î©‹
 !(c⁄° 
CÆlSèck
& 
rhs
) const;

44 
boﬁ
 
	g›î©‹
 < (c⁄° 
	gCÆlSèck
& 
	grhs
) const;

45 
boﬁ
 
	g›î©‹
 >(c⁄° 
CÆlSèck
& 
rhs
) const;

46 
boﬁ
 
	g›î©‹
 > (c⁄° 
	gCÆlSèck
& 
	grhs
) const;

47 
boﬁ
 
	g›î©‹
 <(c⁄° 
CÆlSèck
& 
rhs
) const;

49 c⁄° * 
	g›î©‹
 [] (
	gödex
) const;

51 
˛ór
();

53 
upd©e
(
öt32_t
 
ign‹eDïth
=0, i¡32_à
maxDïth
=
MAX_DEPTH
);

56 
dump
(c⁄° * 
¥efix
 = 0) const;

59 
Såög8
 
toSåög
(c⁄° * 
¥efix
 = 0) const;

61 
size_t
 
size
(Ëc⁄° {  
	gmCou¡
; }

63 
	g¥iv©e
:

65 
Såög8
 
toSåögSögÀLevñ
(c⁄° * 
¥efix
, 
öt32_t
 
Àvñ
) const;

67 
size_t
 
	gmCou¡
;

68 c⁄° * 
	gmSèck
[
MAX_DEPTH
];

	@jni/include/utils/Debug.h

17 #i‚de‡
ANDROID_DEBUG_H


18 
	#ANDROID_DEBUG_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
«me•a˚
 
	g™droid
 {

26 #ifde‡
__˝lu•lus


27 
	gãm∂©e
<
	gboﬁ
> 
	gCompûeTimeAs£π
;

28 
	gãm∂©e
<> 
	gCompûeTimeAs£π
<
	gåue
> {};

29 
	#COMPILE_TIME_ASSERT
(
_exp
) \

30 
ãm∂©e
 
˛ass
 
CompûeTimeAs£π
< (
_exp
Ë>;

	)

32 
	#COMPILE_TIME_ASSERT_FUNCTION_SCOPE
(
_exp
) \

33 
CompûeTimeAs£π
<–
_exp
 )>();

	)

37 #ifde‡
__˝lu•lus


38 
	gãm∂©e
<
boﬁ
 
	gC
, 
ty≥«me
 
	gLSH
,Åy≥«mê
	gRHS
> 
	gCompûeTimeIfEl£
;

39 
	gãm∂©e
<
ty≥«me
 
	gLHS
,Åy≥«mê
	gRHS
>

40 
	gCompûeTimeIfEl£
<
	gåue
, 
	gLHS
, 
	gRHS
> { 
LHS
 
	tTYPE
; };

41 
	gãm∂©e
<
ty≥«me
 
	gLHS
,Åy≥«mê
	gRHS
>

42 
	gCompûeTimeIfEl£
<
	gÁl£
, 
	gLHS
, 
	gRHS
> { 
RHS
 
	tTYPE
; };

47 #ifde‡
__˝lu•lus


51 c⁄° * 
°rögF‹Indít
(
öt32_t
 
ödítLevñ
);

53 (*
debugPrötFunc
)(* 
	tcookõ
, c⁄° * 
	ttxt
);

55 
¥ötTy≥Code
(
uöt32_t
 
ty≥Code
,

56 
debugPrötFunc
 
func
 = 0, * 
cookõ
 = 0);

58 
¥ötHexD©a
(
öt32_t
 
ödít
, c⁄° *
buf
, 
size_t
 
Àngth
,

59 
size_t
 
byãsPîLöe
=16, 
öt32_t
 
sögÀLöeByãsCutoff
=16,

60 
size_t
 
Æignmít
=0, 
boﬁ
 
cAºayStyÀ
=
Ál£
,

61 
debugPrötFunc
 
func
 = 0, * 
cookõ
 = 0);

63 #ifde‡
__˝lu•lus


	@jni/include/utils/Endian.h

20 #i‚de‡
_LIBS_UTILS_ENDIAN_H


21 
	#_LIBS_UTILS_ENDIAN_H


	)

23 #i‡
deföed
(
HAVE_ENDIAN_H
)

25 
	~<ídün.h
>

29 
	#__BIG_ENDIAN
 0x1000

	)

30 
	#__LITTLE_ENDIAN
 0x0001

	)

32 #i‡
deföed
(
HAVE_LITTLE_ENDIAN
)

33 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

35 
	#__BYTE_ORDER
 
__BIG_ENDIAN


	)

	@jni/include/utils/Errors.h

17 #i‚de‡
ANDROID_ERRORS_H


18 
	#ANDROID_ERRORS_H


	)

20 
	~<sys/ty≥s.h
>

21 
	~<î∫o.h
>

23 
«me•a˚
 
	g™droid
 {

26 #ifde‡
HAVE_MS_C_RUNTIME


27 
	t°©us_t
;

29 
öt32_t
 
	t°©us_t
;

41 #ifde‡
_WIN32


42 #unde‡
NO_ERROR


46 
	gOK
 = 0,

47 
	gNO_ERROR
 = 0,

49 
	gUNKNOWN_ERROR
 = 0x80000000,

51 
	gNO_MEMORY
 = -
ENOMEM
,

52 
	gINVALID_OPERATION
 = -
ENOSYS
,

53 
	gBAD_VALUE
 = -
EINVAL
,

54 
	gBAD_TYPE
 = 0x80000001,

55 
	gNAME_NOT_FOUND
 = -
ENOENT
,

56 
	gPERMISSION_DENIED
 = -
EPERM
,

57 
	gNO_INIT
 = -
ENODEV
,

58 
	gALREADY_EXISTS
 = -
EEXIST
,

59 
	gDEAD_OBJECT
 = -
EPIPE
,

60 
	gFAILED_TRANSACTION
 = 0x80000002,

61 
	gJPARKS_BROKE_IT
 = -
EPIPE
,

62 #i‡!
deföed
(
HAVE_MS_C_RUNTIME
)

63 
	gBAD_INDEX
 = -
EOVERFLOW
,

64 
	gNOT_ENOUGH_DATA
 = -
ENODATA
,

65 
	gWOULD_BLOCK
 = -
EWOULDBLOCK
,

66 
	gTIMED_OUT
 = -
ETIMEDOUT
,

67 
	gUNKNOWN_TRANSACTION
 = -
EBADMSG
,

69 
	gBAD_INDEX
 = -
E2BIG
,

70 
	gNOT_ENOUGH_DATA
 = 0x80000003,

71 
	gWOULD_BLOCK
 = 0x80000004,

72 
	gTIMED_OUT
 = 0x80000005,

73 
	gUNKNOWN_TRANSACTION
 = 0x80000006,

79 #ifde‡
_WIN32


80 
	#NO_ERROR
 0L

	)

	@jni/include/utils/FileMap.h

20 #i‚de‡
__LIBS_FILE_MAP_H


21 
	#__LIBS_FILE_MAP_H


	)

23 
	~<sys/ty≥s.h
>

25 #ifde‡
HAVE_WIN32_FILEMAP


26 
	~<wödows.h
>

29 
«me•a˚
 
	g™droid
 {

45 ˛as†
	cFûeM≠
 {

46 
	gpublic
:

47 
FûeM≠
();

57 
boﬁ
 
¸óã
(c⁄° * 
‹igFûeName
, 
fd
,

58 
off_t
 
off£t
, 
size_t
 
Àngth
, 
boﬁ
 
ªadO∆y
);

63 c⁄° * 
gëFûeName
(Ëc⁄° {  
	gmFûeName
; }

68 * 
gëD©aPå
(Ëc⁄° {  
	gmD©aPå
; }

73 
size_t
 
gëD©aLígth
(Ëc⁄° {  
	gmD©aLígth
; }

78 
off_t
 
gëD©aOff£t
(Ëc⁄° {  
	gmD©aOff£t
; }

83 
FûeM≠
* 
acquúe
(Ë{ 
	gmRefCou¡
++;  
	gthis
; }

88 
ªÀa£
() {

89 i‡(--
	gmRefCou¡
 <= 0)

90 
dñëe
 
this
;

97 
	eM≠Advi˚
 {

98 
	gNORMAL
, 
	gRANDOM
, 
	gSEQUENTIAL
, 
	gWILLNEED
, 
	gDONTNEED


106 
advi£
(
M≠Advi˚
 
advi˚
);

108 
	g¥Ÿe˘ed
:

110 ~
FûeM≠
();

112 
	g¥iv©e
:

114 
FûeM≠
(c⁄° FûeM≠& 
§c
);

115 c⁄° 
	gFûeM≠
& 
	g›î©‹
=(c⁄° 
FûeM≠
& 
§c
);

117 
	gmRefCou¡
;

118 * 
	gmFûeName
;

119 * 
	gmBa£På
;

120 
size_t
 
	gmBa£Lígth
;

121 
off_t
 
	gmD©aOff£t
;

122 * 
	gmD©aPå
;

123 
size_t
 
	gmD©aLígth
;

124 #ifde‡
HAVE_WIN32_FILEMAP


125 
HANDLE
 
	gmFûeH™dÀ
;

126 
HANDLE
 
	gmFûeM≠pög
;

129 
	gmPageSize
;

	@jni/include/utils/Flattenable.h

17 #i‚de‡
ANDROID_UTILS_FLATTENABLE_H


18 
	#ANDROID_UTILS_FLATTENABLE_H


	)

21 
	~<°döt.h
>

22 
	~<sys/ty≥s.h
>

23 
	~<utûs/Eº‹s.h
>

25 
«me•a˚
 
	g™droid
 {

27 ˛as†
	cFœâíabÀ


29 
	gpublic
:

31 
vútuÆ
 
size_t
 
gëFœâíedSize
() const = 0;

34 
vútuÆ
 
size_t
 
gëFdCou¡
() const = 0;

41 
vútuÆ
 
°©us_t
 
Ê©ãn
(* 
buf„r
, 
size_t
 
size
,

42 
fds
[], 
size_t
 
cou¡
) const = 0;

51 
vútuÆ
 
°©us_t
 
unÊ©ãn
(c⁄°* 
buf„r
, 
size_t
 
size
,

52 
fds
[], 
size_t
 
cou¡
) = 0;

54 
	g¥Ÿe˘ed
:

55 
vútuÆ
 ~
FœâíabÀ
() = 0;

	@jni/include/utils/KeyedVector.h

17 #i‚de‡
ANDROID_KEYED_VECTOR_H


18 
	#ANDROID_KEYED_VECTOR_H


	)

20 
	~<as£π.h
>

21 
	~<°döt.h
>

22 
	~<sys/ty≥s.h
>

24 
	~<utûs/S‹ãdVe˘‹.h
>

25 
	~<utûs/Ty≥Hñ≥rs.h
>

26 
	~<utûs/Eº‹s.h
>

30 
«me•a˚
 
	g™droid
 {

32 
	gãm∂©e
 <
ty≥«me
 
	gKEY
,Åy≥«mê
	gVALUE
>

33 ˛as†
	cKeyedVe˘‹


35 
	gpublic
:

36 
KEY
 
	tkey_ty≥
;

37 
VALUE
 
	tvÆue_ty≥
;

39 
ölöe
 
KeyedVe˘‹
();

45 
ölöe
 
˛ór
(Ë{ 
	gmVe˘‹
.clear(); }

52 
ölöe
 
size_t
 
size
(Ëc⁄° {  
	gmVe˘‹
.size(); }

54 
ölöe
 
boﬁ
 
isEm±y
(Ëc⁄° {  
	gmVe˘‹
.isEmpty(); }

56 
ölöe
 
size_t
 
ˇ∑côy
(Ëc⁄° {  
	gmVe˘‹
.capacity(); }

58 
ölöe
 
ssize_t
 
£tC≠acôy
(
size_t
 
size
Ë{  
	gmVe˘‹
.setCapacity(size); }

63 c⁄° 
	gVALUE
& 
vÆueF‹
(c⁄° 
KEY
& 
key
) const;

64 c⁄° 
	gVALUE
& 
vÆueAt
(
size_t
 
ödex
) const;

65 c⁄° 
	gKEY
& 
keyAt
(
size_t
 
ödex
) const;

66 
ssize_t
 
ödexOfKey
(c⁄° 
KEY
& 
key
) const;

72 
	gVALUE
& 
edôVÆueF‹
(c⁄° 
KEY
& 
key
);

73 
	gVALUE
& 
edôVÆueAt
(
size_t
 
ödex
);

79 
ssize_t
 
add
(c⁄° 
KEY
& 
key
, c⁄° 
VALUE
& 
ôem
);

80 
ssize_t
 
ª∂a˚VÆueF‹
(c⁄° 
KEY
& 
key
, c⁄° 
VALUE
& 
ôem
);

81 
ssize_t
 
ª∂a˚VÆueAt
(
size_t
 
ödex
, c⁄° 
VALUE
& 
ôem
);

87 
ssize_t
 
ªmoveIãm
(c⁄° 
KEY
& 
key
);

88 
ssize_t
 
ªmoveIãmsAt
(
size_t
 
ödex
, size_à
cou¡
 = 1);

90 
	g¥iv©e
:

91 
S‹ãdVe˘‹
< 
key_vÆue_∑ú_t
<
KEY
, 
	gVALUE
> > 
	gmVe˘‹
;

100 
	gãm∂©e
 <
ty≥«me
 
	gKEY
,Åy≥«mê
	gVALUE
>

101 
˛ass
 
	gDeÁu…KeyedVe˘‹
 : 
public
 
KeyedVe˘‹
<
KEY
, 
	gVALUE
>

103 
	gpublic
:

104 
ölöe
 
DeÁu…KeyedVe˘‹
(c⁄° 
VALUE
& 
defVÆue
 = VALUE());

105 c⁄° 
	gVALUE
& 
vÆueF‹
(c⁄° 
KEY
& 
key
) const;

107 
	g¥iv©e
:

108 
VALUE
 
mDeÁu…
;

113 
	gãm∂©e
<
ty≥«me
 
	gKEY
,Åy≥«mê
	gVALUE
> 
ölöe


114 
	gKeyedVe˘‹
<
	gKEY
,
	gVALUE
>::
	$KeyedVe˘‹
()

116 
	}
}

118 
ãm∂©e
<
ty≥«me
 
KEY
,Åy≥«mê
	gVALUE
> 
ölöe


119 
ssize_t
 
	gKeyedVe˘‹
<
	gKEY
,
	gVALUE
>::
	$ödexOfKey
(c⁄° 
KEY
& 
key
) const {

120  
mVe˘‹
.
	`ödexOf
–
key_vÆue_∑ú_t
<
KEY
,
VALUE
>(
key
) );

121 
	}
}

123 
	gãm∂©e
<
ty≥«me
 
	gKEY
,Åy≥«mê
	gVALUE
> 
ölöe


124 c⁄° 
	gVALUE
& 
	gKeyedVe˘‹
<
	gKEY
,VALUE>::
	$vÆueF‹
(c⁄° 
KEY
& 
key
) const {

125 
ssize_t
 
i
 = 
	`ödexOfKey
(
key
);

126 
	`as£π
(
i
>=0);

127  
mVe˘‹
.
	`ôemAt
(
i
).
vÆue
;

128 
	}
}

130 
	gãm∂©e
<
ty≥«me
 
	gKEY
,Åy≥«mê
	gVALUE
> 
ölöe


131 c⁄° 
	gVALUE
& 
	gKeyedVe˘‹
<
	gKEY
,VALUE>::
	$vÆueAt
(
size_t
 
ödex
) const {

132  
mVe˘‹
.
	`ôemAt
(
ödex
).
vÆue
;

133 
	}
}

135 
	gãm∂©e
<
ty≥«me
 
	gKEY
,Åy≥«mê
	gVALUE
> 
ölöe


136 c⁄° 
	gKEY
& 
	gKeyedVe˘‹
<KEY,
	gVALUE
>::
	$keyAt
(
size_t
 
ödex
) const {

137  
mVe˘‹
.
	`ôemAt
(
ödex
).
key
;

138 
	}
}

140 
	gãm∂©e
<
ty≥«me
 
	gKEY
,Åy≥«mê
	gVALUE
> 
ölöe


141 
	gVALUE
& 
	gKeyedVe˘‹
<
	gKEY
,VALUE>::
	$edôVÆueF‹
(c⁄° 
KEY
& 
key
) {

142 
ssize_t
 
i
 = 
	`ödexOfKey
(
key
);

143 
	`as£π
(
i
>=0);

144  
mVe˘‹
.
	`edôIãmAt
(
i
).
vÆue
;

145 
	}
}

147 
	gãm∂©e
<
ty≥«me
 
	gKEY
,Åy≥«mê
	gVALUE
> 
ölöe


148 
	gVALUE
& 
	gKeyedVe˘‹
<
	gKEY
,VALUE>::
	$edôVÆueAt
(
size_t
 
ödex
) {

149  
mVe˘‹
.
	`edôIãmAt
(
ödex
).
vÆue
;

150 
	}
}

152 
	gãm∂©e
<
ty≥«me
 
	gKEY
,Åy≥«mê
	gVALUE
> 
ölöe


153 
ssize_t
 
	gKeyedVe˘‹
<
	gKEY
,
	gVALUE
>::
	$add
(c⁄° 
KEY
& 
key
, c⁄° 
VALUE
& 
vÆue
) {

154  
mVe˘‹
.
	`add
–
key_vÆue_∑ú_t
<
KEY
,
VALUE
>(
key
, 
vÆue
) );

155 
	}
}

157 
	gãm∂©e
<
ty≥«me
 
	gKEY
,Åy≥«mê
	gVALUE
> 
ölöe


158 
ssize_t
 
	gKeyedVe˘‹
<
	gKEY
,
	gVALUE
>::
	$ª∂a˚VÆueF‹
(c⁄° 
KEY
& 
key
, c⁄° 
VALUE
& 
vÆue
) {

159 
key_vÆue_∑ú_t
<
KEY
,
VALUE
> 
	`∑ú
(
key
, 
vÆue
);

160 
mVe˘‹
.
	`ªmove
(
∑ú
);

161  
mVe˘‹
.
	`add
(
∑ú
);

162 
	}
}

164 
	gãm∂©e
<
ty≥«me
 
	gKEY
,Åy≥«mê
	gVALUE
> 
ölöe


165 
ssize_t
 
	gKeyedVe˘‹
<
	gKEY
,
	gVALUE
>::
	$ª∂a˚VÆueAt
(
size_t
 
ödex
, c⁄° 
VALUE
& 
ôem
) {

166 i‡(
ödex
<
	`size
()) {

167 
mVe˘‹
.
	`edôIãmAt
(
ödex
).
vÆue
 = 
ôem
;

168  
ödex
;

170  
BAD_INDEX
;

171 
	}
}

173 
	gãm∂©e
<
ty≥«me
 
	gKEY
,Åy≥«mê
	gVALUE
> 
ölöe


174 
ssize_t
 
	gKeyedVe˘‹
<
	gKEY
,
	gVALUE
>::
	$ªmoveIãm
(c⁄° 
KEY
& 
key
) {

175  
mVe˘‹
.
	`ªmove
(
key_vÆue_∑ú_t
<
KEY
,
VALUE
>(
key
));

176 
	}
}

178 
	gãm∂©e
<
ty≥«me
 
	gKEY
,Åy≥«mê
	gVALUE
> 
ölöe


179 
ssize_t
 
	gKeyedVe˘‹
<
	gKEY
, 
	gVALUE
>::
	$ªmoveIãmsAt
(
size_t
 
ödex
, size_à
cou¡
) {

180  
mVe˘‹
.
	`ªmoveIãmsAt
(
ödex
, 
cou¡
);

181 
	}
}

185 
	gãm∂©e
<
ty≥«me
 
	gKEY
,Åy≥«mê
	gVALUE
> 
ölöe


186 
	gDeÁu…KeyedVe˘‹
<
	gKEY
,
	gVALUE
>::
	$DeÁu…KeyedVe˘‹
(c⁄° 
VALUE
& 
defVÆue
)

187 : 
	$mDeÁu…
(
defVÆue
)

189 
	}
}

191 
ãm∂©e
<
ty≥«me
 
KEY
,Åy≥«mê
	gVALUE
> 
ölöe


192 c⁄° 
	gVALUE
& 
	gDeÁu…KeyedVe˘‹
<
	gKEY
,VALUE>::
	$vÆueF‹
(c⁄° 
KEY
& 
key
) const {

193 
ssize_t
 
i
 = 
	`ödexOfKey
(
key
);

194  
i
 >0 ? 
KeyedVe˘‹
<
KEY
,
VALUE
>::
	`vÆueAt
(iË: 
mDeÁu…
;

195 
	}
}

	@jni/include/utils/List.h

27 #i‚de‡
_LIBS_UTILS_LIST_H


28 
	#_LIBS_UTILS_LIST_H


	)

30 
	~<°ddef.h
>

31 
	~<°döt.h
>

33 
«me•a˚
 
	g™droid
 {

41 
	gãm∂©e
<
ty≥«me
 
	gT
>

42 ˛as†
	cLi°


44 
	g¥Ÿe˘ed
:

48 ˛as†
	c_Node
 {

49 
public
:

50 
ex∂icô
 
_Node
(c⁄° 
T
& 
vÆ
Ë: 
mVÆ
(val) {}

51 ~
_Node
() {}

52 
ölöe
 
T
& 
gëRef
(Ë{  
mVÆ
; }

53 
ölöe
 c⁄° 
	gT
& 
gëRef
(Ëc⁄° {  
	gmVÆ
; }

54 
ölöe
 
_Node
* 
gëPªv
(Ëc⁄° {  
	gmpPªv
; }

55 
ölöe
 
_Node
* 
gëNext
(Ëc⁄° {  
	gmpNext
; }

56 
ölöe
 
£tVÆ
(c⁄° 
T
& 
vÆ
Ë{ 
	gmVÆ
 = val; }

57 
ölöe
 
£tPªv
(
_Node
* 
±r
Ë{ 
	gmpPªv
 =Ötr; }

58 
ölöe
 
£tNext
(
_Node
* 
±r
Ë{ 
	gmpNext
 =Ötr; }

59 
	g¥iv©e
:

60 
‰õnd
 
˛ass
 
Li°
;

61 
‰õnd
 
˛ass
 
	g_Li°Iãøt‹
;

62 
T
 
	gmVÆ
;

63 
_Node
* 
	gmpPªv
;

64 
_Node
* 
	gmpNext
;

71 
	gãm∂©e
 <
ty≥«me
 
	gTYPE
>

72 
	sCONST_ITERATOR
 {

73 
_Node
 c⁄° * 
	tNodePå
;

74 c⁄° 
	tTYPE
 
	tTy≥
;

77 
	gãm∂©e
 <
ty≥«me
 
	gTYPE
>

78 
	sNON_CONST_ITERATOR
 {

79 
_Node
* 
	tNodePå
;

80 
TYPE
 
	tTy≥
;

83 
	gãm∂©e
<

84 
ty≥«me
 
	gU
,

85 
	gãm∂©e
 <
	g˛ass
> 
˛ass
 
	gC⁄°√ss


87 ˛as†
	c_Li°Iãøt‹
 {

88 
	g_Li°Iãøt‹
<
	tU
, 
	tC⁄°√ss
> 
	t_Iãr
;

89 
ty≥«me
 
	tC⁄°√ss
<
	tU
>::
	tNodePå
 
	t_NodePå
;

90 
ty≥«me
 
	tC⁄°√ss
<
	tU
>::
	tTy≥
 
	t_Ty≥
;

92 
ex∂icô
 
_Li°Iãøt‹
(
_NodePå
 
±r
Ë: 
mpNode
(ptr) {}

94 
public
:

95 
_Li°Iãøt‹
() {}

96 
_Li°Iãøt‹
(c⁄° 
_Iãr
& 
rhs
Ë: 
mpNode
(rhs.mpNode) {}

97 ~
_Li°Iãøt‹
() {}

103 
ãm∂©e
<
ty≥«me
 
V
> 
ex∂icô


104 
_Li°Iãøt‹
(c⁄° 
V
& 
rhs
Ë: 
mpNode
(rhs.mpNode) {}

110 
_Ty≥
& 
›î©‹
*(Ëc⁄° {  
mpNode
->
gëRef
(); }

111 
_Ty≥
* 
	g›î©‹
->(Ëc⁄° {  &(
	gmpNode
->
gëRef
()); }

116 
ölöe
 
boﬁ
 
	g›î©‹
==(c⁄° 
_Iãr
& 
right
) const {

117  
mpNode
 =
right
.mpNode; }

119 
ölöe
 
boﬁ
 
	g›î©‹
!=(c⁄° 
_Iãr
& 
right
) const {

120  
mpNode
 !
right
.mpNode; }

125 
	gãm∂©e
<
ty≥«me
 
	gOTHER
>

126 
ölöe
 
boﬁ
 
	g›î©‹
==(c⁄° 
OTHER
& 
right
) const {

127  
mpNode
 =
right
.mpNode; }

129 
	gãm∂©e
<
ty≥«me
 
	gOTHER
>

130 
ölöe
 
boﬁ
 
	g›î©‹
!=(c⁄° 
OTHER
& 
right
) const {

131  
mpNode
 !
right
.mpNode; }

136 
ölöe
 
	g_Iãr
& 
	g›î©‹
++() {

137 
	gmpNode
 = 
mpNode
->
gëNext
();

138  *
	gthis
;

140 c⁄° 
_Iãr
 
	g›î©‹
++() {

141 
_Iãr
 
tmp
(*
this
);

142 
	gmpNode
 = 
mpNode
->
gëNext
();

143  
	gtmp
;

145 
ölöe
 
	g_Iãr
& 
	g›î©‹
--() {

146 
	gmpNode
 = 
mpNode
->
gëPªv
();

147  *
	gthis
;

149 c⁄° 
_Iãr
 
	g›î©‹
--() {

150 
_Iãr
 
tmp
(*
this
);

151 
	gmpNode
 = 
mpNode
->
gëPªv
();

152  
	gtmp
;

155 
ölöe
 
_NodePå
 
gëNode
(Ëc⁄° {  
	gmpNode
; }

157 
_NodePå
 
	gmpNode
;

158 
	g¥iv©e
:

159 
‰õnd
 
˛ass
 
Li°
;

162 
	gpublic
:

163 
Li°
() {

164 
¥ï
();

166 
Li°
(c⁄° Li°<
T
>& 
§c
) {

167 
¥ï
();

168 
ö£π
(
begö
(), 
§c
.begö(), src.
íd
());

170 
	gvútuÆ
 ~
Li°
() {

171 
˛ór
();

172 
	gdñëe
[] (*Ë
	gmpMiddÀ
;

175 
	g_Li°Iãøt‹
<
	tT
, 
	tNON_CONST_ITERATOR
> 
	tôî©‹
;

176 
	g_Li°Iãøt‹
<
	tT
, 
	tCONST_ITERATOR
> 
	tc⁄°_ôî©‹
;

178 
	gLi°
<
	gT
>& 
	g›î©‹
=(c⁄° 
Li°
<
T
>& 
right
);

181 
ölöe
 
boﬁ
 
em±y
(Ëc⁄° {  
	gmpMiddÀ
->
gëNext
(Ë=
mpMiddÀ
; }

184 
size_t
 
size
() const {

185  
size_t
(
di°™˚
(
begö
(), 
íd
()));

193 
ölöe
 
ôî©‹
 
begö
() {

194  
ôî©‹
(
mpMiddÀ
->
gëNext
());

196 
ölöe
 
c⁄°_ôî©‹
 
begö
() const {

197  
c⁄°_ôî©‹
(
c⁄°_ˇ°
<
_Node
 c⁄°*>(
mpMiddÀ
->
gëNext
()));

199 
ölöe
 
ôî©‹
 
íd
() {

200  
ôî©‹
(
mpMiddÀ
);

202 
ölöe
 
c⁄°_ôî©‹
 
íd
() const {

203  
c⁄°_ôî©‹
(
c⁄°_ˇ°
<
_Node
 c⁄°*>(
mpMiddÀ
));

207 
push_‰⁄t
(c⁄° 
T
& 
vÆ
Ë{ 
ö£π
(
begö
(), val); }

208 
push_back
(c⁄° 
T
& 
vÆ
Ë{ 
ö£π
(
íd
(), val); }

211 
ôî©‹
 
ö£π
(ôî©‹ 
po¢
, c⁄° 
T
& 
vÆ
)

213 
_Node
* 
	g√wNode
 = 
√w
 _Node(
vÆ
);

214 
	g√wNode
->
£tNext
(
po¢
.
gëNode
());

215 
	g√wNode
->
£tPªv
(
po¢
.
gëNode
()->
gëPªv
());

216 
	gpo¢
.
gëNode
()->
gëPªv
()->
£tNext
(
√wNode
);

217 
	gpo¢
.
gëNode
()->
£tPªv
(
√wNode
);

218  
ôî©‹
(
√wNode
);

222 
ö£π
(
ôî©‹
 
po¢
, 
c⁄°_ôî©‹
 
fú°
, c⁄°_ôî©‹ 
œ°
) {

223  ; 
	gfú°
 !
œ°
; ++first)

224 
ö£π
(
po¢
, *
fú°
);

228 
ôî©‹
 
îa£
(ôî©‹ 
po¢
) {

229 
_Node
* 
	gpNext
 = 
po¢
.
gëNode
()->
gëNext
();

230 
_Node
* 
	gpPªv
 = 
po¢
.
gëNode
()->
gëPªv
();

231 
	gpPªv
->
£tNext
(
pNext
);

232 
	gpNext
->
£tPªv
(
pPªv
);

233 
dñëe
 
	gpo¢
.
gëNode
();

234  
ôî©‹
(
pNext
);

238 
ôî©‹
 
îa£
(ôî©‹ 
fú°
, iãøt‹ 
œ°
) {

239 
	gfú°
 !
œ°
)

240 
îa£
(
fú°
++);

241  
ôî©‹
(
œ°
);

245 
˛ór
() {

246 
_Node
* 
	gpCuºít
 = 
mpMiddÀ
->
gëNext
();

247 
_Node
* 
	gpNext
;

249 
	gpCuºít
 !
mpMiddÀ
) {

250 
pNext
 = 
pCuºít
->
gëNext
();

251 
dñëe
 
	gpCuºít
;

252 
	gpCuºít
 = 
pNext
;

254 
	gmpMiddÀ
->
£tPªv
(
mpMiddÀ
);

255 
	gmpMiddÀ
->
£tNext
(
mpMiddÀ
);

268 
	gãm∂©e
<

269 
ty≥«me
 
	gU
,

270 
	gãm∂©e
 <
	g˛ass
> 
˛ass
 
	gCL
,

271 
	gãm∂©e
 <
	g˛ass
> 
˛ass
 
	gCR


273 
±rdiff_t
 
di°™˚
(

274 
_Li°Iãøt‹
<
U
, 
CL
> 
fú°
, _Li°Iãøt‹<U, 
CR
> 
œ°
) const

276 
±rdiff_t
 
	gcou¡
 = 0;

277 
	gfú°
 !
œ°
) {

278 ++
fú°
;

279 ++
	gcou¡
;

281  
	gcou¡
;

284 
	g¥iv©e
:

291 
¥ï
() {

292 
mpMiddÀ
 = (
_Node
*Ë
√w
 [(_Node)];

293 
	gmpMiddÀ
->
£tPªv
(
mpMiddÀ
);

294 
	gmpMiddÀ
->
£tNext
(
mpMiddÀ
);

302 
_Node
* 
	gmpMiddÀ
;

312 
	gãm∂©e
<
˛ass
 
	gT
>

313 
	gLi°
<
	gT
>& Li°<T>::
›î©‹
=(c⁄° 
Li°
<
T
>& 
right
)

315 i‡(
this
 =&
right
)

316  *
this
;

317 
ôî©‹
 
	gfú°D°
 = 
begö
();

318 
ôî©‹
 
	gœ°D°
 = 
íd
();

319 
c⁄°_ôî©‹
 
	gfú°Src
 = 
right
.
begö
();

320 
c⁄°_ôî©‹
 
	gœ°Src
 = 
right
.
íd
();

321 
	gfú°Src
 !
œ°Src
 && 
fú°D°
 !
œ°D°
)

322 *
fú°D°
++ = *
fú°Src
++;

323 i‡(
	gfú°Src
 =
œ°Src
)

324 
îa£
(
fú°D°
, 
œ°D°
);

326 
ö£π
(
œ°D°
, 
fú°Src
, 
œ°Src
);

327  *
	gthis
;

	@jni/include/utils/Log.h

28 #i‚de‡
_LIBS_UTILS_LOG_H


29 
	#_LIBS_UTILS_LOG_H


	)

31 
	~<cutûs/log.h
>

	@jni/include/utils/RefBase.h

17 #i‚de‡
ANDROID_REF_BASE_H


18 
	#ANDROID_REF_BASE_H


	)

20 
	~<cutûs/©omic.h
>

21 
	~<utûs/TextOuçut.h
>

23 
	~<°döt.h
>

24 
	~<sys/ty≥s.h
>

25 
	~<°dlib.h
>

28 
«me•a˚
 
	g™droid
 {

30 
	gãm∂©e
<
ty≥«me
 
	gT
> 
˛ass
 
	gwp
;

34 
	#COMPARE
(
_›_
) \

35 
ölöe
 
boﬁ
 
›î©‹
 
	`_›_
 (c⁄° 
•
<
T
>& 
o
) const { \

36  
m_±r
 
_›_
 
o
.m_ptr; \

38 
ölöe
 
boﬁ
 
›î©‹
 
	`_›_
 (c⁄° 
wp
<
T
>& 
o
) const { \

39  
m_±r
 
_›_
 
o
.m_ptr; \

41 
ölöe
 
boﬁ
 
›î©‹
 
	`_›_
 (c⁄° 
T
* 
o
) const { \

42  
m_±r
 
_›_
 
o
; \

44 
ãm∂©e
<
ty≥«me
 
U
> \

45 
ölöe
 
boﬁ
 
›î©‹
 
	`_›_
 (c⁄° 
•
<
U
>& 
o
) const { \

46  
m_±r
 
_›_
 
o
.m_ptr; \

48 
ãm∂©e
<
ty≥«me
 
U
> \

49 
ölöe
 
boﬁ
 
›î©‹
 
	`_›_
 (c⁄° 
wp
<
U
>& 
o
) const { \

50  
m_±r
 
_›_
 
o
.m_ptr; \

52 
ãm∂©e
<
ty≥«me
 
U
> \

53 
ölöe
 
boﬁ
 
›î©‹
 
	`_›_
 (c⁄° 
U
* 
o
) const { \

54  
m_±r
 
_›_
 
o
; \

55 }

	)

59 ˛as†
	cRefBa£


61 
	gpublic
:

62 
öcSå⁄g
(c⁄° * 
id
) const;

63 
decSå⁄g
(c⁄° * 
id
) const;

65 
f‹˚IncSå⁄g
(c⁄° * 
id
) const;

68 
öt32_t
 
gëSå⁄gCou¡
() const;

70 ˛as†
	cwókªf_ty≥


72 
	gpublic
:

73 
RefBa£
* 
ªfBa£
() const;

75 
öcWók
(c⁄° * 
id
);

76 
decWók
(c⁄° * 
id
);

78 
boﬁ
 
©ãm±IncSå⁄g
(c⁄° * 
id
);

81 
boﬁ
 
©ãm±IncWók
(c⁄° * 
id
);

84 
öt32_t
 
gëWókCou¡
() const;

87 
¥ötRefs
() const;

96 
åackMe
(
boﬁ
 
íabÀ
, boﬁ 
ªèö
);

99 
wókªf_ty≥
* 
¸óãWók
(c⁄° * 
id
) const;

101 
wókªf_ty≥
* 
gëWókRefs
() const;

104 
ölöe
 
¥ötRefs
(Ëc⁄° { 
gëWókRefs
()->printRefs(); }

107 
ölöe
 
åackMe
(
boﬁ
 
íabÀ
, boﬁ 
ªèö
)

109 
gëWókRefs
()->
åackMe
(
íabÀ
, 
ªèö
);

112 
	g¥Ÿe˘ed
:

113 
RefBa£
();

114 
	gvútuÆ
 ~
RefBa£
();

118 
	gOBJECT_LIFETIME_WEAK
 = 0x0001,

119 
	gOBJECT_LIFETIME_FOREVER
 = 0x0003

122 
exãndObje˘Li„time
(
öt32_t
 
mode
);

126 
	gFIRST_INC_STRONG
 = 0x0001

129 
vútuÆ
 
⁄Fú°Ref
();

130 
vútuÆ
 
⁄La°Så⁄gRef
(c⁄° * 
id
);

131 
vútuÆ
 
boﬁ
 
⁄IncSå⁄gAâem±ed
(
uöt32_t
 
Êags
, c⁄° * 
id
);

132 
vútuÆ
 
⁄La°WókRef
(c⁄° * 
id
);

134 
	g¥iv©e
:

135 
‰õnd
 
˛ass
 
wókªf_ty≥
;

136 
˛ass
 
	gwókªf_im∂
;

138 
RefBa£
(c⁄° RefBa£& 
o
);

139 
	gRefBa£
& 
	g›î©‹
=(c⁄° 
RefBa£
& 
o
);

141 
wókªf_im∂
* c⁄° 
	gmRefs
;

146 
	gãm∂©e
 <
˛ass
 
	gT
>

147 ˛as†
	cLightRefBa£


149 
	gpublic
:

150 
ölöe
 
LightRefBa£
(Ë: 
mCou¡
(0) { }

151 
ölöe
 
öcSå⁄g
(c⁄° * 
id
) const {

152 
™droid_©omic_öc
(&
mCou¡
);

154 
ölöe
 
decSå⁄g
(c⁄° * 
id
) const {

155 i‡(
™droid_©omic_dec
(&
mCou¡
) == 1) {

156 
dñëe
 
°©ic_ˇ°
<c⁄° 
T
*>(
this
);

160 
ölöe
 
öt32_t
 
gëSå⁄gCou¡
() const {

161  
	gmCou¡
;

164 
	g¥Ÿe˘ed
:

165 
ölöe
 ~
LightRefBa£
() { }

167 
¥iv©e
:

168 
muèbÀ
 vﬁ©ûê
öt32_t
 
mCou¡
;

173 
	gãm∂©e
 <
ty≥«me
 
	gT
>

174 ˛as†
	c•


176 
	gpublic
:

177 
ty≥«me
 
	tRefBa£
::
	twókªf_ty≥
 weakref_type;

179 
ölöe
 
•
(Ë: 
m_±r
(0) { }

181 
•
(
T
* 
Ÿhî
);

182 
•
(c⁄° sp<
T
>& 
Ÿhî
);

183 
	gãm∂©e
<
ty≥«me
 
	gU
> 
•
(
U
* 
Ÿhî
);

184 
	gãm∂©e
<
ty≥«me
 
	gU
> 
•
(c⁄° sp<
U
>& 
Ÿhî
);

186 ~
•
();

190 
	g•
& 
	g›î©‹
 = (
T
* 
Ÿhî
);

191 
	g•
& 
	g›î©‹
 = (c⁄° 
•
<
T
>& 
Ÿhî
);

193 
	gãm∂©e
<
ty≥«me
 
	gU
> 
	g•
& 
	g›î©‹
 = (c⁄° 
•
<
U
>& 
Ÿhî
);

194 
	gãm∂©e
<
ty≥«me
 
	gU
> 
	g•
& 
	g›î©‹
 = (
U
* 
Ÿhî
);

197 
f‹˚_£t
(
T
* 
Ÿhî
);

201 
˛ór
();

205 
ölöe
 
	gT
& 
	g›î©‹
* (Ëc⁄° {  *
	gm_±r
; }

206 
ölöe
 
T
* 
	g›î©‹
-> (Ëc⁄° {  
	gm_±r
; }

207 
ölöe
 
T
* 
gë
(Ëc⁄° {  
	gm_±r
; }

211 
COMPARE
(==)

212 
COMPARE
(!=)

213 
COMPARE
(>)

214 
COMPARE
(<)

215 
COMPARE
(<=)

216 
COMPARE
(>=)

218 
¥iv©e
:

219 
ãm∂©e
<
ty≥«me
 
Y
> 
‰õnd
 
˛ass
 
•
;

220 
	gãm∂©e
<
ty≥«me
 
	gY
> 
‰õnd
 
˛ass
 
	gwp
;

223 
•
(
T
* 
p
, 
wókªf_ty≥
* 
ªfs
);

225 
T
* 
	gm_±r
;

228 
	gãm∂©e
 <
ty≥«me
 
	gT
>

229 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, c⁄° 
	g•
<
	gT
>& 
	gvÆ
);

233 
	gãm∂©e
 <
ty≥«me
 
	gT
>

234 ˛as†
	cwp


236 
	gpublic
:

237 
ty≥«me
 
	tRefBa£
::
	twókªf_ty≥
 weakref_type;

239 
ölöe
 
wp
(Ë: 
m_±r
(0) { }

241 
wp
(
T
* 
Ÿhî
);

242 
wp
(c⁄° wp<
T
>& 
Ÿhî
);

243 
wp
(c⁄° 
•
<
T
>& 
Ÿhî
);

244 
	gãm∂©e
<
ty≥«me
 
	gU
> 
wp
(
U
* 
Ÿhî
);

245 
	gãm∂©e
<
ty≥«me
 
	gU
> 
wp
(c⁄° 
•
<
U
>& 
Ÿhî
);

246 
	gãm∂©e
<
ty≥«me
 
	gU
> 
wp
(c⁄° wp<
U
>& 
Ÿhî
);

248 ~
wp
();

252 
	gwp
& 
	g›î©‹
 = (
T
* 
Ÿhî
);

253 
	gwp
& 
	g›î©‹
 = (c⁄° 
wp
<
T
>& 
Ÿhî
);

254 
	gwp
& 
	g›î©‹
 = (c⁄° 
•
<
T
>& 
Ÿhî
);

256 
	gãm∂©e
<
ty≥«me
 
	gU
> 
	gwp
& 
	g›î©‹
 = (
U
* 
Ÿhî
);

257 
	gãm∂©e
<
ty≥«me
 
	gU
> 
	gwp
& 
	g›î©‹
 = (c⁄° 
wp
<
U
>& 
Ÿhî
);

258 
	gãm∂©e
<
ty≥«me
 
	gU
> 
	gwp
& 
	g›î©‹
 = (c⁄° 
•
<
U
>& 
Ÿhî
);

260 
£t_obje˘_™d_ªfs
(
T
* 
Ÿhî
, 
wókªf_ty≥
* 
ªfs
);

264 
	g•
<
	gT
> 
¥omŸe
() const;

268 
˛ór
();

272 
ölöe
 
wókªf_ty≥
* 
gë_ªfs
(Ëc⁄° {  
	gm_ªfs
; }

274 
ölöe
 
T
* 
unß„_gë
(Ëc⁄° {  
	gm_±r
; }

278 
COMPARE
(==)

279 
COMPARE
(!=)

280 
COMPARE
(>)

281 
COMPARE
(<)

282 
COMPARE
(<=)

283 
COMPARE
(>=)

285 
¥iv©e
:

286 
ãm∂©e
<
ty≥«me
 
Y
> 
‰õnd
 
˛ass
 
•
;

287 
	gãm∂©e
<
ty≥«me
 
	gY
> 
‰õnd
 
˛ass
 
	gwp
;

289 
T
* 
	gm_±r
;

290 
wókªf_ty≥
* 
	gm_ªfs
;

293 
	gãm∂©e
 <
ty≥«me
 
	gT
>

294 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, c⁄° 
	gwp
<
	gT
>& 
	gvÆ
);

296 #unde‡
COMPARE


301 
	gãm∂©e
<
ty≥«me
 
	gT
>

302 
	g•
<
	gT
>::
	$•
(
T
* 
Ÿhî
)

303 : 
	$m_±r
(
Ÿhî
)

305 i‡(
Ÿhî
ËŸhî->
	`öcSå⁄g
(
this
);

306 
	}
}

308 
	gãm∂©e
<
ty≥«me
 
	gT
>

309 
	g•
<
	gT
>::
•
(c⁄° sp<
T
>& 
Ÿhî
)

310 : 
	$m_±r
(
Ÿhî
.
m_±r
)

312 i‡(
m_±r
Ëm_±r->
	`öcSå⁄g
(
this
);

313 
	}
}

315 
	gãm∂©e
<
ty≥«me
 
	gT
>Åem∂©e<ty≥«mê
	gU
>

316 
	g•
<
	gT
>::
	$•
(
U
* 
Ÿhî
Ë: 
	$m_±r
(
Ÿhî
)

318 i‡(
Ÿhî
ËŸhî->
	`öcSå⁄g
(
this
);

319 
	}
}

321 
	gãm∂©e
<
ty≥«me
 
	gT
>Åem∂©e<ty≥«mê
	gU
>

322 
	g•
<
	gT
>::
•
(c⁄° sp<
U
>& 
Ÿhî
)

323 : 
	$m_±r
(
Ÿhî
.
m_±r
)

325 i‡(
m_±r
Ëm_±r->
	`öcSå⁄g
(
this
);

326 
	}
}

328 
	gãm∂©e
<
ty≥«me
 
	gT
>

329 
	g•
<
	gT
>::~
	$•
()

331 i‡(
m_±r
Ëm_±r->
	`decSå⁄g
(
this
);

332 
	}
}

334 
	gãm∂©e
<
ty≥«me
 
	gT
>

335 
	g•
<
	gT
>& sp<T>::
›î©‹
 = (c⁄° 
•
<
T
>& 
Ÿhî
) {

336 i‡(
Ÿhî
.
m_±r
ËŸhî.m_±r->
öcSå⁄g
(
this
);

337 i‡(
	gm_±r
Ëm_±r->
decSå⁄g
(
this
);

338 
	gm_±r
 = 
Ÿhî
.
m_±r
;

339  *
	gthis
;

342 
	gãm∂©e
<
ty≥«me
 
	gT
>

343 
	g•
<
	gT
>& sp<T>::
›î©‹
 = (
T
* 
Ÿhî
)

345 i‡(
Ÿhî
ËŸhî->
öcSå⁄g
(
this
);

346 i‡(
	gm_±r
Ëm_±r->
decSå⁄g
(
this
);

347 
	gm_±r
 = 
Ÿhî
;

348  *
	gthis
;

351 
	gãm∂©e
<
ty≥«me
 
	gT
>Åem∂©e<ty≥«mê
	gU
>

352 
	g•
<
	gT
>& sp<T>::
›î©‹
 = (c⁄° 
•
<
U
>& 
Ÿhî
)

354 i‡(
Ÿhî
.
m_±r
ËŸhî.m_±r->
öcSå⁄g
(
this
);

355 i‡(
	gm_±r
Ëm_±r->
decSå⁄g
(
this
);

356 
	gm_±r
 = 
Ÿhî
.
m_±r
;

357  *
	gthis
;

360 
	gãm∂©e
<
ty≥«me
 
	gT
>Åem∂©e<ty≥«mê
	gU
>

361 
	g•
<
	gT
>& sp<T>::
›î©‹
 = (
U
* 
Ÿhî
)

363 i‡(
Ÿhî
ËŸhî->
öcSå⁄g
(
this
);

364 i‡(
	gm_±r
Ëm_±r->
decSå⁄g
(
this
);

365 
	gm_±r
 = 
Ÿhî
;

366  *
	gthis
;

369 
	gãm∂©e
<
ty≥«me
 
	gT
>

370 
	g•
<
	gT
>::
	$f‹˚_£t
(
T
* 
Ÿhî
)

372 
Ÿhî
->
	`f‹˚IncSå⁄g
(
this
);

373 
m_±r
 = 
Ÿhî
;

374 
	}
}

376 
	gãm∂©e
<
ty≥«me
 
	gT
>

377 
	g•
<
	gT
>::
	$˛ór
()

379 i‡(
m_±r
) {

380 
m_±r
->
	`decSå⁄g
(
this
);

381 
m_±r
 = 0;

383 
	}
}

385 
	gãm∂©e
<
ty≥«me
 
	gT
>

386 
	g•
<
	gT
>::
	$•
(
T
* 
p
, 
wókªf_ty≥
* 
ªfs
)

387 : 
	`m_±r
((
p
 && 
ªfs
->
	`©ãm±IncSå⁄g
(
this
)) ?Ö : 0)

389 
	}
}

391 
ãm∂©e
 <
ty≥«me
 
T
>

392 
ölöe
 
TextOuçut
& 
›î©‹
<<(TextOuçut& 
to
, c⁄° 
	g•
<
	gT
>& 
	gvÆ
)

394 
	gto
 << "•<>(" << 
	gvÆ
.
gë
() << ")";

395  
	gto
;

400 
	gãm∂©e
<
ty≥«me
 
	gT
>

401 
	gwp
<
	gT
>::
	$wp
(
T
* 
Ÿhî
)

402 : 
	$m_±r
(
Ÿhî
)

404 i‡(
Ÿhî
Ë
m_ªfs
 = othî->
	`¸óãWók
(
this
);

405 
	}
}

407 
	gãm∂©e
<
ty≥«me
 
	gT
>

408 
	gwp
<
	gT
>::
wp
(c⁄° wp<
T
>& 
Ÿhî
)

409 : 
m_±r
(
Ÿhî
.m_±r), 
	$m_ªfs
(
Ÿhî
.
m_ªfs
)

411 i‡(
m_±r
Ë
m_ªfs
->
	`öcWók
(
this
);

412 
	}
}

414 
	gãm∂©e
<
ty≥«me
 
	gT
>

415 
	gwp
<
	gT
>::
wp
(c⁄° 
•
<
T
>& 
Ÿhî
)

416 : 
	$m_±r
(
Ÿhî
.
m_±r
)

418 i‡(
m_±r
) {

419 
m_ªfs
 = 
m_±r
->
	`¸óãWók
(
this
);

421 
	}
}

423 
	gãm∂©e
<
ty≥«me
 
	gT
>Åem∂©e<ty≥«mê
	gU
>

424 
	gwp
<
	gT
>::
	$wp
(
U
* 
Ÿhî
)

425 : 
	$m_±r
(
Ÿhî
)

427 i‡(
Ÿhî
Ë
m_ªfs
 = othî->
	`¸óãWók
(
this
);

428 
	}
}

430 
	gãm∂©e
<
ty≥«me
 
	gT
>Åem∂©e<ty≥«mê
	gU
>

431 
	gwp
<
	gT
>::
wp
(c⁄° wp<
U
>& 
Ÿhî
)

432 : 
	$m_±r
(
Ÿhî
.
m_±r
)

434 i‡(
m_±r
) {

435 
m_ªfs
 = 
Ÿhî
.m_refs;

436 
m_ªfs
->
	`öcWók
(
this
);

438 
	}
}

440 
	gãm∂©e
<
ty≥«me
 
	gT
>Åem∂©e<ty≥«mê
	gU
>

441 
	gwp
<
	gT
>::
wp
(c⁄° 
•
<
U
>& 
Ÿhî
)

442 : 
	$m_±r
(
Ÿhî
.
m_±r
)

444 i‡(
m_±r
) {

445 
m_ªfs
 = 
m_±r
->
	`¸óãWók
(
this
);

447 
	}
}

449 
	gãm∂©e
<
ty≥«me
 
	gT
>

450 
	gwp
<
	gT
>::~
	$wp
()

452 i‡(
m_±r
Ë
m_ªfs
->
	`decWók
(
this
);

453 
	}
}

455 
	gãm∂©e
<
ty≥«me
 
	gT
>

456 
	gwp
<
	gT
>& wp<T>::
›î©‹
 = (
T
* 
Ÿhî
)

458 
wókªf_ty≥
* 
√wRefs
 =

459 
Ÿhî
 ? othî->
¸óãWók
(
this
) : 0;

460 i‡(
	gm_±r
Ë
	gm_ªfs
->
decWók
(
this
);

461 
	gm_±r
 = 
Ÿhî
;

462 
	gm_ªfs
 = 
√wRefs
;

463  *
	gthis
;

466 
	gãm∂©e
<
ty≥«me
 
	gT
>

467 
	gwp
<
	gT
>& wp<T>::
›î©‹
 = (c⁄° 
wp
<
T
>& 
Ÿhî
)

469 i‡(
Ÿhî
.
m_±r
ËŸhî.
m_ªfs
->
öcWók
(
this
);

470 i‡(
	gm_±r
Ë
	gm_ªfs
->
decWók
(
this
);

471 
	gm_±r
 = 
Ÿhî
.
m_±r
;

472 
	gm_ªfs
 = 
Ÿhî
.
m_ªfs
;

473  *
	gthis
;

476 
	gãm∂©e
<
ty≥«me
 
	gT
>

477 
	gwp
<
	gT
>& wp<T>::
›î©‹
 = (c⁄° 
•
<
T
>& 
Ÿhî
)

479 
wókªf_ty≥
* 
√wRefs
 =

480 
Ÿhî
 !
NULL
 ? othî->
¸óãWók
(
this
) : 0;

481 i‡(
	gm_±r
Ë
	gm_ªfs
->
decWók
(
this
);

482 
	gm_±r
 = 
Ÿhî
.
gë
();

483 
	gm_ªfs
 = 
√wRefs
;

484  *
	gthis
;

487 
	gãm∂©e
<
ty≥«me
 
	gT
>Åem∂©e<ty≥«mê
	gU
>

488 
	gwp
<
	gT
>& wp<T>::
›î©‹
 = (
U
* 
Ÿhî
)

490 
wókªf_ty≥
* 
√wRefs
 =

491 
Ÿhî
 ? othî->
¸óãWók
(
this
) : 0;

492 i‡(
	gm_±r
Ë
	gm_ªfs
->
decWók
(
this
);

493 
	gm_±r
 = 
Ÿhî
;

494 
	gm_ªfs
 = 
√wRefs
;

495  *
	gthis
;

498 
	gãm∂©e
<
ty≥«me
 
	gT
>Åem∂©e<ty≥«mê
	gU
>

499 
	gwp
<
	gT
>& wp<T>::
›î©‹
 = (c⁄° 
wp
<
U
>& 
Ÿhî
)

501 i‡(
Ÿhî
.
m_±r
ËŸhî.
m_ªfs
->
öcWók
(
this
);

502 i‡(
	gm_±r
Ë
	gm_ªfs
->
decWók
(
this
);

503 
	gm_±r
 = 
Ÿhî
.
m_±r
;

504 
	gm_ªfs
 = 
Ÿhî
.
m_ªfs
;

505  *
	gthis
;

508 
	gãm∂©e
<
ty≥«me
 
	gT
>Åem∂©e<ty≥«mê
	gU
>

509 
	gwp
<
	gT
>& wp<T>::
›î©‹
 = (c⁄° 
•
<
U
>& 
Ÿhî
)

511 
wókªf_ty≥
* 
√wRefs
 =

512 
Ÿhî
 !
NULL
 ? othî->
¸óãWók
(
this
) : 0;

513 i‡(
	gm_±r
Ë
	gm_ªfs
->
decWók
(
this
);

514 
	gm_±r
 = 
Ÿhî
.
gë
();

515 
	gm_ªfs
 = 
√wRefs
;

516  *
	gthis
;

519 
	gãm∂©e
<
ty≥«me
 
	gT
>

520 
	gwp
<
	gT
>::
	$£t_obje˘_™d_ªfs
(
T
* 
Ÿhî
, 
wókªf_ty≥
* 
ªfs
)

522 i‡(
Ÿhî
Ë
ªfs
->
	`öcWók
(
this
);

523 i‡(
m_±r
Ë
m_ªfs
->
	`decWók
(
this
);

524 
m_±r
 = 
Ÿhî
;

525 
m_ªfs
 = 
ªfs
;

526 
	}
}

528 
	gãm∂©e
<
ty≥«me
 
	gT
>

529 
	g•
<
	gT
> 
	gwp
<T>::
	$¥omŸe
() const

531  
•
<
T
>(
m_±r
, 
m_ªfs
);

532 
	}
}

534 
	gãm∂©e
<
ty≥«me
 
	gT
>

535 
	gwp
<
	gT
>::
	$˛ór
()

537 i‡(
m_±r
) {

538 
m_ªfs
->
	`decWók
(
this
);

539 
m_±r
 = 0;

541 
	}
}

543 
	gãm∂©e
 <
ty≥«me
 
	gT
>

544 
ölöe
 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, c⁄° 
	gwp
<
	gT
>& 
	gvÆ
)

546 
	gto
 << "wp<>(" << 
	gvÆ
.
unß„_gë
() << ")";

547  
	gto
;

	@jni/include/utils/ResourceTypes.h

20 #i‚de‡
_LIBS_UTILS_RESOURCE_TYPES_H


21 
	#_LIBS_UTILS_RESOURCE_TYPES_H


	)

23 
	~<utûs/As£t.h
>

24 
	~<utûs/ByãOrdî.h
>

25 
	~<utûs/Eº‹s.h
>

26 
	~<utûs/Såög16.h
>

27 
	~<utûs/Ve˘‹.h
>

29 
	~<utûs/thªads.h
>

31 
	~<°döt.h
>

32 
	~<sys/ty≥s.h
>

34 
«me•a˚
 
	g™droid
 {

102 
	sRes_≤g_9∑tch


104 
Res_≤g_9∑tch
(Ë: 
wasDe£rülized
(
Ál£
), 
xDivs
(
NULL
),

105 
yDivs
(
NULL
), 
cﬁ‹s
(NULL) { }

107 
öt8_t
 
	gwasDe£rülized
;

108 
öt8_t
 
	gnumXDivs
;

109 
öt8_t
 
	gnumYDivs
;

110 
öt8_t
 
	gnumCﬁ‹s
;

117 
öt32_t
* 
	gxDivs
;

118 
öt32_t
* 
	gyDivs
;

120 
öt32_t
 
	g∑ddögLe·
, 
	g∑ddögRight
;

121 
öt32_t
 
	g∑ddögT›
, 
	g∑ddögBŸtom
;

125 
	gNO_COLOR
 = 0x00000001,

128 
	gTRANSPARENT_COLOR
 = 0x00000000

131 
uöt32_t
* 
	gcﬁ‹s
;

134 
devi˚ToFûe
();

136 
fûeToDevi˚
();

138 * 
£rülize
();

140 
£rülize
(* 
outD©a
);

142 
Res_≤g_9∑tch
* 
de£rülize
(c⁄° * 
d©a
);

144 
size_t
 
£rülizedSize
();

158 
	sResChunk_hódî


162 
uöt16_t
 
	gty≥
;

167 
uöt16_t
 
	ghódîSize
;

174 
uöt32_t
 
	gsize
;

178 
	gRES_NULL_TYPE
 = 0x0000,

179 
	gRES_STRING_POOL_TYPE
 = 0x0001,

180 
	gRES_TABLE_TYPE
 = 0x0002,

181 
	gRES_XML_TYPE
 = 0x0003,

184 
	gRES_XML_FIRST_CHUNK_TYPE
 = 0x0100,

185 
	gRES_XML_START_NAMESPACE_TYPE
= 0x0100,

186 
	gRES_XML_END_NAMESPACE_TYPE
 = 0x0101,

187 
	gRES_XML_START_ELEMENT_TYPE
 = 0x0102,

188 
	gRES_XML_END_ELEMENT_TYPE
 = 0x0103,

189 
	gRES_XML_CDATA_TYPE
 = 0x0104,

190 
	gRES_XML_LAST_CHUNK_TYPE
 = 0x017f,

193 
	gRES_XML_RESOURCE_MAP_TYPE
 = 0x0180,

196 
	gRES_TABLE_PACKAGE_TYPE
 = 0x0200,

197 
	gRES_TABLE_TYPE_TYPE
 = 0x0201,

198 
	gRES_TABLE_TYPE_SPEC_TYPE
 = 0x0202

204 
	#Res_VALIDID
(
ªsid
Ë‘esid !0)

	)

205 
	#Res_CHECKID
(
ªsid
Ë(‘esid&0xFFFF0000Ë!0)

	)

206 
	#Res_MAKEID
(
∑ckage
, 
ty≥
, 
íåy
) \

207 (((
∑ckage
+1)<<24Ë| (((
ty≥
+1)&0xFF)<<16Ë| (
íåy
&0xFFFF))

	)

208 
	#Res_GETPACKAGE
(
id
Ë((id>>24)-1)

	)

209 
	#Res_GETTYPE
(
id
Ë(((id>>16)&0xFF)-1)

	)

210 
	#Res_GETENTRY
(
id
Ë(id&0xFFFF)

	)

212 
	#Res_INTERNALID
(
ªsid
Ë(‘esid&0xFFFF0000Ë!0 && (ªsid&0xFF0000Ë=0)

	)

213 
	#Res_MAKEINTERNAL
(
íåy
Ë(0x01000000 | (íåy&0xFFFF))

	)

214 
	#Res_MAKEARRAY
(
íåy
Ë(0x02000000 | (íåy&0xFFFF))

	)

216 
	#Res_MAXPACKAGE
 255

	)

222 
	sRes_vÆue


225 
uöt16_t
 
	gsize
;

228 
uöt8_t
 
	gªs0
;

233 
	gTYPE_NULL
 = 0x00,

236 
	gTYPE_REFERENCE
 = 0x01,

238 
	gTYPE_ATTRIBUTE
 = 0x02,

241 
	gTYPE_STRING
 = 0x03,

243 
	gTYPE_FLOAT
 = 0x04,

246 
	gTYPE_DIMENSION
 = 0x05,

249 
	gTYPE_FRACTION
 = 0x06,

252 
	gTYPE_FIRST_INT
 = 0x10,

255 
	gTYPE_INT_DEC
 = 0x10,

257 
	gTYPE_INT_HEX
 = 0x11,

259 
	gTYPE_INT_BOOLEAN
 = 0x12,

262 
	gTYPE_FIRST_COLOR_INT
 = 0x1c,

265 
	gTYPE_INT_COLOR_ARGB8
 = 0x1c,

267 
	gTYPE_INT_COLOR_RGB8
 = 0x1d,

269 
	gTYPE_INT_COLOR_ARGB4
 = 0x1e,

271 
	gTYPE_INT_COLOR_RGB4
 = 0x1f,

274 
	gTYPE_LAST_COLOR_INT
 = 0x1f,

277 
	gTYPE_LAST_INT
 = 0x1f

279 
uöt8_t
 
	gd©aTy≥
;

285 
	gCOMPLEX_UNIT_SHIFT
 = 0,

286 
	gCOMPLEX_UNIT_MASK
 = 0xf,

289 
	gCOMPLEX_UNIT_PX
 = 0,

291 
	gCOMPLEX_UNIT_DIP
 = 1,

293 
	gCOMPLEX_UNIT_SP
 = 2,

295 
	gCOMPLEX_UNIT_PT
 = 3,

297 
	gCOMPLEX_UNIT_IN
 = 4,

299 
	gCOMPLEX_UNIT_MM
 = 5,

302 
	gCOMPLEX_UNIT_FRACTION
 = 0,

304 
	gCOMPLEX_UNIT_FRACTION_PARENT
 = 1,

309 
	gCOMPLEX_RADIX_SHIFT
 = 4,

310 
	gCOMPLEX_RADIX_MASK
 = 0x3,

313 
	gCOMPLEX_RADIX_23p0
 = 0,

315 
	gCOMPLEX_RADIX_16p7
 = 1,

317 
	gCOMPLEX_RADIX_8p15
 = 2,

319 
	gCOMPLEX_RADIX_0p23
 = 3,

323 
	gCOMPLEX_MANTISSA_SHIFT
 = 8,

324 
	gCOMPLEX_MANTISSA_MASK
 = 0xffffff

328 
uöt32_t
 
	gd©a
;

330 
c›yFrom_dtoh
(c⁄° 
Res_vÆue
& 
§c
);

341 
	sResTabÀ_ªf


343 
uöt32_t
 
	gidít
;

349 
	sResSåögPoﬁ_ªf


354 
uöt32_t
 
	gödex
;

380 
	sResSåögPoﬁ_hódî


382 
ResChunk_hódî
 
	ghódî
;

386 
uöt32_t
 
	g°rögCou¡
;

390 
uöt32_t
 
	g°yÀCou¡
;

396 
	gSORTED_FLAG
 = 1<<0,

399 
	gUTF8_FLAG
 = 1<<8

401 
uöt32_t
 
	gÊags
;

404 
uöt32_t
 
	g°rögsSèπ
;

407 
uöt32_t
 
	g°yÀsSèπ
;

414 
	sResSåögPoﬁ_•™


417 
	gEND
 = 0xFFFFFFFF

423 
ResSåögPoﬁ_ªf
 
	g«me
;

426 
uöt32_t
 
	gfú°Ch¨
, 
	gœ°Ch¨
;

432 ˛as†
	cResSåögPoﬁ


434 
	gpublic
:

435 
ResSåögPoﬁ
();

436 
ResSåögPoﬁ
(c⁄° * 
d©a
, 
size_t
 
size
, 
boﬁ
 
c›yD©a
=
Ál£
);

437 ~
ResSåögPoﬁ
();

439 
°©us_t
 
£tTo
(c⁄° * 
d©a
, 
size_t
 
size
, 
boﬁ
 
c›yD©a
=
Ál£
);

441 
°©us_t
 
gëEº‹
() const;

443 
unöô
();

445 
ölöe
 c⁄° 
ch¨16_t
* 
°rögAt
(c⁄° 
ResSåögPoﬁ_ªf
& 
ªf
, 
size_t
* 
outLí
) const {

446  
°rögAt
(
ªf
.
ödex
, 
outLí
);

448 c⁄° 
ch¨16_t
* 
°rögAt
(
size_t
 
idx
, size_t* 
outLí
) const;

450 c⁄° * 
°rög8At
(
size_t
 
idx
, size_t* 
outLí
) const;

452 c⁄° 
ResSåögPoﬁ_•™
* 
°yÀAt
(c⁄° 
ResSåögPoﬁ_ªf
& 
ªf
) const;

453 c⁄° 
ResSåögPoﬁ_•™
* 
°yÀAt
(
size_t
 
idx
) const;

455 
ssize_t
 
ödexOfSåög
(c⁄° 
ch¨16_t
* 
°r
, 
size_t
 
°rLí
) const;

457 
size_t
 
size
() const;

459 #i‚de‡
HAVE_ANDROID_OS


460 
boﬁ
 
isUTF8
() const;

463 
	g¥iv©e
:

464 
°©us_t
 
mEº‹
;

465 * 
	gmOw√dD©a
;

466 c⁄° 
ResSåögPoﬁ_hódî
* 
	gmHódî
;

467 
size_t
 
	gmSize
;

468 
muèbÀ
 
Muãx
 
	gmDecodeLock
;

469 c⁄° 
uöt32_t
* 
	gmE¡rõs
;

470 c⁄° 
uöt32_t
* 
	gmE¡ryStyÀs
;

471 c⁄° * 
	gmSåögs
;

472 
ch¨16_t
** 
	gmCache
;

473 
uöt32_t
 
	gmSåögPoﬁSize
;

474 c⁄° 
uöt32_t
* 
	gmStyÀs
;

475 
uöt32_t
 
	gmStyÀPoﬁSize
;

494 
	sResXMLTªe_hódî


496 
ResChunk_hódî
 
	ghódî
;

503 
	sResXMLTªe_node


505 
ResChunk_hódî
 
	ghódî
;

508 
uöt32_t
 
	glöeNumbî
;

511 
ResSåögPoﬁ_ªf
 
	gcommít
;

518 
	sResXMLTªe_cd©aExt


521 
ResSåögPoﬁ_ªf
 
	gd©a
;

524 
Res_vÆue
 
	gty≥dD©a
;

531 
	sResXMLTªe_«me•a˚Ext


534 
ResSåögPoﬁ_ªf
 
	g¥efix
;

537 
ResSåögPoﬁ_ªf
 
	guri
;

544 
	sResXMLTªe_ídEÀmítExt


547 
ResSåögPoﬁ_ªf
 
	gns
;

551 
ResSåögPoﬁ_ªf
 
	g«me
;

559 
	sResXMLTªe_©åExt


562 
ResSåögPoﬁ_ªf
 
	gns
;

566 
ResSåögPoﬁ_ªf
 
	g«me
;

569 
uöt16_t
 
	g©åibuãSèπ
;

572 
uöt16_t
 
	g©åibuãSize
;

577 
uöt16_t
 
	g©åibuãCou¡
;

580 
uöt16_t
 
	gidIndex
;

583 
uöt16_t
 
	g˛assIndex
;

586 
uöt16_t
 
	g°yÀIndex
;

589 
	sResXMLTªe_©åibuã


592 
ResSåögPoﬁ_ªf
 
	gns
;

595 
ResSåögPoﬁ_ªf
 
	g«me
;

598 
ResSåögPoﬁ_ªf
 
	gøwVÆue
;

601 
Res_vÆue
 
	gty≥dVÆue
;

604 
˛ass
 
	gResXMLTªe
;

606 ˛as†
	cResXMLP¨£r


608 
	gpublic
:

609 
ResXMLP¨£r
(c⁄° 
ResXMLTªe
& 
åì
);

611 
	eevít_code_t
 {

612 
	gBAD_DOCUMENT
 = -1,

613 
	gSTART_DOCUMENT
 = 0,

614 
	gEND_DOCUMENT
 = 1,

616 
	gFIRST_CHUNK_CODE
 = 
RES_XML_FIRST_CHUNK_TYPE
,

618 
	gSTART_NAMESPACE
 = 
RES_XML_START_NAMESPACE_TYPE
,

619 
	gEND_NAMESPACE
 = 
RES_XML_END_NAMESPACE_TYPE
,

620 
	gSTART_TAG
 = 
RES_XML_START_ELEMENT_TYPE
,

621 
	gEND_TAG
 = 
RES_XML_END_ELEMENT_TYPE
,

622 
	gTEXT
 = 
RES_XML_CDATA_TYPE


625 
	sResXMLPosôi⁄


627 
evít_code_t
 
	gevítCode
;

628 c⁄° 
ResXMLTªe_node
* 
	gcurNode
;

629 c⁄° * 
	gcurExt
;

632 
ª°¨t
();

634 c⁄° 
	gResSåögPoﬁ
& 
gëSåögs
() const;

636 
evít_code_t
 
gëEvítTy≥
() const;

639 
evít_code_t
 
√xt
();

642 
öt32_t
 
gëCommítID
() const;

643 c⁄° 
uöt16_t
* 
gëCommít
(
size_t
* 
outLí
) const;

644 
uöt32_t
 
gëLöeNumbî
() const;

647 
öt32_t
 
gëTextID
() const;

648 c⁄° 
uöt16_t
* 
gëText
(
size_t
* 
outLí
) const;

649 
ssize_t
 
gëTextVÆue
(
Res_vÆue
* 
outVÆue
) const;

652 
öt32_t
 
gëName•a˚PªfixID
() const;

653 c⁄° 
uöt16_t
* 
gëName•a˚Pªfix
(
size_t
* 
outLí
) const;

654 
öt32_t
 
gëName•a˚UriID
() const;

655 c⁄° 
uöt16_t
* 
gëName•a˚Uri
(
size_t
* 
outLí
) const;

658 
öt32_t
 
gëEÀmítName•a˚ID
() const;

659 c⁄° 
uöt16_t
* 
gëEÀmítName•a˚
(
size_t
* 
outLí
) const;

660 
öt32_t
 
gëEÀmítNameID
() const;

661 c⁄° 
uöt16_t
* 
gëEÀmítName
(
size_t
* 
outLí
) const;

666 
size_t
 
gëAâribuãCou¡
() const;

669 
öt32_t
 
gëAâribuãName•a˚ID
(
size_t
 
idx
) const;

670 c⁄° 
uöt16_t
* 
gëAâribuãName•a˚
(
size_t
 
idx
, size_t* 
outLí
) const;

672 
öt32_t
 
gëAâribuãNameID
(
size_t
 
idx
) const;

673 c⁄° 
uöt16_t
* 
gëAâribuãName
(
size_t
 
idx
, size_t* 
outLí
) const;

674 
uöt32_t
 
gëAâribuãNameResID
(
size_t
 
idx
) const;

676 
öt32_t
 
gëAâribuãVÆueSåögID
(
size_t
 
idx
) const;

677 c⁄° 
uöt16_t
* 
gëAâribuãSåögVÆue
(
size_t
 
idx
, size_t* 
outLí
) const;

679 
öt32_t
 
gëAâribuãD©aTy≥
(
size_t
 
idx
) const;

680 
öt32_t
 
gëAâribuãD©a
(
size_t
 
idx
) const;

681 
ssize_t
 
gëAâribuãVÆue
(
size_t
 
idx
, 
Res_vÆue
* 
outVÆue
) const;

683 
ssize_t
 
ödexOfAâribuã
(c⁄° * 
ns
, c⁄° * 
©å
) const;

684 
ssize_t
 
ödexOfAâribuã
(c⁄° 
ch¨16_t
* 
ns
, 
size_t
 
nsLí
,

685 c⁄° 
ch¨16_t
* 
©å
, 
size_t
 
©åLí
) const;

687 
ssize_t
 
ödexOfID
() const;

688 
ssize_t
 
ödexOfCœss
() const;

689 
ssize_t
 
ödexOfStyÀ
() const;

691 
gëPosôi⁄
(
ResXMLPosôi⁄
* 
pos
) const;

692 
£tPosôi⁄
(c⁄° 
ResXMLPosôi⁄
& 
pos
);

694 
	g¥iv©e
:

695 
‰õnd
 
˛ass
 
ResXMLTªe
;

697 
evít_code_t
 
√xtNode
();

699 c⁄° 
	gResXMLTªe
& 
	gmTªe
;

700 
evít_code_t
 
	gmEvítCode
;

701 c⁄° 
ResXMLTªe_node
* 
	gmCurNode
;

702 c⁄° * 
	gmCurExt
;

708 ˛as†
	cResXMLTªe
 : 
public
 
ResXMLP¨£r


710 
public
:

711 
ResXMLTªe
();

712 
ResXMLTªe
(c⁄° * 
d©a
, 
size_t
 
size
, 
boﬁ
 
c›yD©a
=
Ál£
);

713 ~
ResXMLTªe
();

715 
°©us_t
 
£tTo
(c⁄° * 
d©a
, 
size_t
 
size
, 
boﬁ
 
c›yD©a
=
Ál£
);

717 
°©us_t
 
gëEº‹
() const;

719 
unöô
();

721 
	g¥iv©e
:

722 
‰õnd
 
˛ass
 
ResXMLP¨£r
;

724 
°©us_t
 
vÆid©eNode
(c⁄° 
ResXMLTªe_node
* 
node
) const;

726 
°©us_t
 
	gmEº‹
;

727 * 
	gmOw√dD©a
;

728 c⁄° 
ResXMLTªe_hódî
* 
	gmHódî
;

729 
size_t
 
	gmSize
;

730 c⁄° 
uöt8_t
* 
	gmD©aEnd
;

731 
ResSåögPoﬁ
 
	gmSåögs
;

732 c⁄° 
uöt32_t
* 
	gmResIds
;

733 
size_t
 
	gmNumResIds
;

734 c⁄° 
ResXMLTªe_node
* 
	gmRoŸNode
;

735 c⁄° * 
	gmRoŸExt
;

736 
evít_code_t
 
	gmRoŸCode
;

753 
	sResTabÀ_hódî


755 
ResChunk_hódî
 
	ghódî
;

758 
uöt32_t
 
	g∑ckageCou¡
;

766 
	sResTabÀ_∑ckage


768 
ResChunk_hódî
 
	ghódî
;

773 
uöt32_t
 
	gid
;

776 
ch¨16_t
 
	g«me
[128];

781 
uöt32_t
 
	gty≥Såögs
;

784 
uöt32_t
 
	gœ°PublicTy≥
;

789 
uöt32_t
 
	gkeySåögs
;

792 
uöt32_t
 
	gœ°PublicKey
;

798 
	sResTabÀ_c⁄fig


801 
uöt32_t
 
	gsize
;

806 
uöt16_t
 
	gmcc
;

808 
uöt16_t
 
	gmnc
;

810 
uöt32_t
 
	gimsi
;

816 
	gœnguage
[2];

819 
	gcou¡ry
[2];

821 
uöt32_t
 
	gloˇÀ
;

825 
	gORIENTATION_ANY
 = 0x0000,

826 
	gORIENTATION_PORT
 = 0x0001,

827 
	gORIENTATION_LAND
 = 0x0002,

828 
	gORIENTATION_SQUARE
 = 0x0003,

832 
	gTOUCHSCREEN_ANY
 = 0x0000,

833 
	gTOUCHSCREEN_NOTOUCH
 = 0x0001,

834 
	gTOUCHSCREEN_STYLUS
 = 0x0002,

835 
	gTOUCHSCREEN_FINGER
 = 0x0003,

839 
	gDENSITY_DEFAULT
 = 0,

840 
	gDENSITY_LOW
 = 120,

841 
	gDENSITY_MEDIUM
 = 160,

842 
	gDENSITY_HIGH
 = 240,

843 
	gDENSITY_NONE
 = 0xffff

848 
uöt8_t
 
	g‹õ¡©i⁄
;

849 
uöt8_t
 
	gtouchs¸ìn
;

850 
uöt16_t
 
	gdísôy
;

852 
uöt32_t
 
	gs¸ìnTy≥
;

856 
	gKEYBOARD_ANY
 = 0x0000,

857 
	gKEYBOARD_NOKEYS
 = 0x0001,

858 
	gKEYBOARD_QWERTY
 = 0x0002,

859 
	gKEYBOARD_12KEY
 = 0x0003,

863 
	gNAVIGATION_ANY
 = 0x0000,

864 
	gNAVIGATION_NONAV
 = 0x0001,

865 
	gNAVIGATION_DPAD
 = 0x0002,

866 
	gNAVIGATION_TRACKBALL
 = 0x0003,

867 
	gNAVIGATION_WHEEL
 = 0x0004,

871 
	gMASK_KEYSHIDDEN
 = 0x0003,

872 
	gKEYSHIDDEN_ANY
 = 0x0000,

873 
	gKEYSHIDDEN_NO
 = 0x0001,

874 
	gKEYSHIDDEN_YES
 = 0x0002,

875 
	gKEYSHIDDEN_SOFT
 = 0x0003,

879 
	gMASK_NAVHIDDEN
 = 0x000c,

880 
	gNAVHIDDEN_ANY
 = 0x0000,

881 
	gNAVHIDDEN_NO
 = 0x0004,

882 
	gNAVHIDDEN_YES
 = 0x0008,

887 
uöt8_t
 
	gkeybﬂrd
;

888 
uöt8_t
 
	g«vig©i⁄
;

889 
uöt8_t
 
	göputFœgs
;

890 
uöt8_t
 
	göputPad0
;

892 
uöt32_t
 
	göput
;

896 
	gSCREENWIDTH_ANY
 = 0

900 
	gSCREENHEIGHT_ANY
 = 0

905 
uöt16_t
 
	gs¸ìnWidth
;

906 
uöt16_t
 
	gs¸ìnHeight
;

908 
uöt32_t
 
	gs¸ìnSize
;

912 
	gSDKVERSION_ANY
 = 0

916 
	gMINORVERSION_ANY
 = 0

921 
uöt16_t
 
	gsdkVîsi⁄
;

924 
uöt16_t
 
	gmö‹Vîsi⁄
;

926 
uöt32_t
 
	gvîsi⁄
;

931 
	gMASK_SCREENSIZE
 = 0x0f,

932 
	gSCREENSIZE_ANY
 = 0x00,

933 
	gSCREENSIZE_SMALL
 = 0x01,

934 
	gSCREENSIZE_NORMAL
 = 0x02,

935 
	gSCREENSIZE_LARGE
 = 0x03,

938 
	gMASK_SCREENLONG
 = 0x30,

939 
	gSCREENLONG_ANY
 = 0x00,

940 
	gSCREENLONG_NO
 = 0x10,

941 
	gSCREENLONG_YES
 = 0x20,

946 
	gMASK_UI_MODE_TYPE
 = 0x0f,

947 
	gUI_MODE_TYPE_ANY
 = 0x00,

948 
	gUI_MODE_TYPE_NORMAL
 = 0x01,

949 
	gUI_MODE_TYPE_DESK
 = 0x02,

950 
	gUI_MODE_TYPE_CAR
 = 0x03,

953 
	gMASK_UI_MODE_NIGHT
 = 0x30,

954 
	gUI_MODE_NIGHT_ANY
 = 0x00,

955 
	gUI_MODE_NIGHT_NO
 = 0x10,

956 
	gUI_MODE_NIGHT_YES
 = 0x20,

961 
uöt8_t
 
	gs¸ìnLayout
;

962 
uöt8_t
 
	guiMode
;

963 
uöt8_t
 
	gs¸ìnC⁄figPad1
;

964 
uöt8_t
 
	gs¸ìnC⁄figPad2
;

966 
uöt32_t
 
	gs¸ìnC⁄fig
;

969 
ölöe
 
c›yFromDevi˚NoSw≠
(c⁄° 
ResTabÀ_c⁄fig
& 
o
) {

970 c⁄° 
size_t
 
	gsize
 = 
dtohl
(
o
.
size
);

971 i‡(
	gsize
 >(
ResTabÀ_c⁄fig
)) {

972 *
this
 = 
o
;

974 
mem˝y
(
this
, &
o
, 
size
);

975 
mem£t
(((
uöt8_t
*)
this
)+
size
, 0, (
ResTabÀ_c⁄fig
)-size);

979 
ölöe
 
c›yFromDtoH
(c⁄° 
ResTabÀ_c⁄fig
& 
o
) {

980 
c›yFromDevi˚NoSw≠
(
o
);

981 
	gsize
 = (
ResTabÀ_c⁄fig
);

982 
	gmcc
 = 
dtohs
(
mcc
);

983 
	gmnc
 = 
dtohs
(
mnc
);

984 
	gdísôy
 = 
dtohs
(
dísôy
);

985 
	gs¸ìnWidth
 = 
dtohs
(
s¸ìnWidth
);

986 
	gs¸ìnHeight
 = 
dtohs
(
s¸ìnHeight
);

987 
	gsdkVîsi⁄
 = 
dtohs
(
sdkVîsi⁄
);

988 
	gmö‹Vîsi⁄
 = 
dtohs
(
mö‹Vîsi⁄
);

991 
ölöe
 
sw≠HtoD
() {

992 
	gsize
 = 
htodl
(
size
);

993 
	gmcc
 = 
htods
(
mcc
);

994 
	gmnc
 = 
htods
(
mnc
);

995 
	gdísôy
 = 
htods
(
dísôy
);

996 
	gs¸ìnWidth
 = 
htods
(
s¸ìnWidth
);

997 
	gs¸ìnHeight
 = 
htods
(
s¸ìnHeight
);

998 
	gsdkVîsi⁄
 = 
htods
(
sdkVîsi⁄
);

999 
	gmö‹Vîsi⁄
 = 
htods
(
mö‹Vîsi⁄
);

1002 
ölöe
 
com∑ª
(c⁄° 
ResTabÀ_c⁄fig
& 
o
) const {

1003 
öt32_t
 
	gdiff
 = (öt32_t)(
imsi
 - 
o
.imsi);

1004 i‡(
	gdiff
 !0Ë 
diff
;

1005 
	gdiff
 = (
öt32_t
)(
loˇÀ
 - 
o
.locale);

1006 i‡(
	gdiff
 !0Ë 
diff
;

1007 
	gdiff
 = (
öt32_t
)(
s¸ìnTy≥
 - 
o
.screenType);

1008 i‡(
	gdiff
 !0Ë 
diff
;

1009 
	gdiff
 = (
öt32_t
)(
öput
 - 
o
.input);

1010 i‡(
	gdiff
 !0Ë 
diff
;

1011 
	gdiff
 = (
öt32_t
)(
s¸ìnSize
 - 
o
.screenSize);

1012 i‡(
	gdiff
 !0Ë 
diff
;

1013 
	gdiff
 = (
öt32_t
)(
vîsi⁄
 - 
o
.version);

1014 i‡(
	gdiff
 !0Ë 
diff
;

1015 
	gdiff
 = (
öt32_t
)(
s¸ìnLayout
 - 
o
.screenLayout);

1016 i‡(
	gdiff
 !0Ë 
diff
;

1017 
	gdiff
 = (
öt32_t
)(
uiMode
 - 
o
.uiMode);

1018  ()
	gdiff
;

1025 
	gCONFIG_MCC
 = 0x0001,

1026 
	gCONFIG_MNC
 = 0x0002,

1027 
	gCONFIG_LOCALE
 = 0x0004,

1028 
	gCONFIG_TOUCHSCREEN
 = 0x0008,

1029 
	gCONFIG_KEYBOARD
 = 0x0010,

1030 
	gCONFIG_KEYBOARD_HIDDEN
 = 0x0020,

1031 
	gCONFIG_NAVIGATION
 = 0x0040,

1032 
	gCONFIG_ORIENTATION
 = 0x0080,

1033 
	gCONFIG_DENSITY
 = 0x0100,

1034 
	gCONFIG_SCREEN_SIZE
 = 0x0200,

1035 
	gCONFIG_VERSION
 = 0x0400,

1036 
	gCONFIG_SCREEN_LAYOUT
 = 0x0800,

1037 
	gCONFIG_UI_MODE
 = 0x1000

1042 
ölöe
 
diff
(c⁄° 
ResTabÀ_c⁄fig
& 
o
) const {

1043 
	gdiffs
 = 0;

1044 i‡(
	gmcc
 !
o
.
mcc
Ë
diffs
 |
CONFIG_MCC
;

1045 i‡(
	gmnc
 !
o
.
mnc
Ë
diffs
 |
CONFIG_MNC
;

1046 i‡(
	gloˇÀ
 !
o
.
loˇÀ
Ë
diffs
 |
CONFIG_LOCALE
;

1047 i‡(
	g‹õ¡©i⁄
 !
o
.
‹õ¡©i⁄
Ë
diffs
 |
CONFIG_ORIENTATION
;

1048 i‡(
	gdísôy
 !
o
.
dísôy
Ë
diffs
 |
CONFIG_DENSITY
;

1049 i‡(
	gtouchs¸ìn
 !
o
.
touchs¸ìn
Ë
diffs
 |
CONFIG_TOUCHSCREEN
;

1050 i‡(((
	göputFœgs
^
	go
.öputFœgs)&(
	gMASK_KEYSHIDDEN
|
	gMASK_NAVHIDDEN
)) != 0)

1051 
diffs
 |
CONFIG_KEYBOARD_HIDDEN
;

1052 i‡(
	gkeybﬂrd
 !
o
.
keybﬂrd
Ë
diffs
 |
CONFIG_KEYBOARD
;

1053 i‡(
	g«vig©i⁄
 !
o
.
«vig©i⁄
Ë
diffs
 |
CONFIG_NAVIGATION
;

1054 i‡(
	gs¸ìnSize
 !
o
.
s¸ìnSize
Ë
diffs
 |
CONFIG_SCREEN_SIZE
;

1055 i‡(
	gvîsi⁄
 !
o
.
vîsi⁄
Ë
diffs
 |
CONFIG_VERSION
;

1056 i‡(
	gs¸ìnLayout
 !
o
.
s¸ìnLayout
Ë
diffs
 |
CONFIG_SCREEN_LAYOUT
;

1057 i‡(
	guiMode
 !
o
.
uiMode
Ë
diffs
 |
CONFIG_UI_MODE
;

1058  
	gdiffs
;

1062 
ölöe
 
boﬁ


1063 
isM‹eS≥cificTh™
(c⁄° 
ResTabÀ_c⁄fig
& 
o
) const {

1067 i‡(
	gimsi
 || 
	go
.imsi) {

1068 i‡(
	gmcc
 !
o
.
mcc
) {

1069 i‡(!
mcc
Ë 
Ál£
;

1070 i‡(!
	go
.
	gmcc
Ë 
	gåue
;

1073 i‡(
	gmnc
 !
o
.
mnc
) {

1074 i‡(!
mnc
Ë 
Ál£
;

1075 i‡(!
	go
.
	gmnc
Ë 
	gåue
;

1079 i‡(
	gloˇÀ
 || 
	go
.locale) {

1080 i‡(
	gœnguage
[0] !
o
.
œnguage
[0]) {

1081 i‡(!
œnguage
[0]Ë 
Ál£
;

1082 i‡(!
	go
.
	gœnguage
[0]Ë 
	gåue
;

1085 i‡(
	gcou¡ry
[0] !
o
.
cou¡ry
[0]) {

1086 i‡(!
cou¡ry
[0]Ë 
Ál£
;

1087 i‡(!
	go
.
	gcou¡ry
[0]Ë 
	gåue
;

1091 i‡(
	gs¸ìnLayout
 || 
	go
.screenLayout) {

1092 i‡(((
	gs¸ìnLayout
^
	go
.s¸ìnLayoutË& 
	gMASK_SCREENSIZE
) != 0) {

1093 i‡(!(
s¸ìnLayout
 & 
MASK_SCREENSIZE
)Ë 
Ál£
;

1094 i‡(!(
	go
.
	gs¸ìnLayout
 & 
	gMASK_SCREENSIZE
)Ë 
	gåue
;

1096 i‡(((
	gs¸ìnLayout
^
	go
.s¸ìnLayoutË& 
	gMASK_SCREENLONG
) != 0) {

1097 i‡(!(
s¸ìnLayout
 & 
MASK_SCREENLONG
)Ë 
Ál£
;

1098 i‡(!(
	go
.
	gs¸ìnLayout
 & 
	gMASK_SCREENLONG
)Ë 
	gåue
;

1102 i‡(
	g‹õ¡©i⁄
 !
o
.
‹õ¡©i⁄
) {

1103 i‡(!
‹õ¡©i⁄
Ë 
Ál£
;

1104 i‡(!
	go
.
	g‹õ¡©i⁄
Ë 
	gåue
;

1107 i‡(
	guiMode
 || 
	go
.uiMode) {

1108 i‡(((
	guiMode
^
	go
.uiModeË& 
	gMASK_UI_MODE_TYPE
) != 0) {

1109 i‡(!(
uiMode
 & 
MASK_UI_MODE_TYPE
)Ë 
Ál£
;

1110 i‡(!(
	go
.
	guiMode
 & 
	gMASK_UI_MODE_TYPE
)Ë 
	gåue
;

1112 i‡(((
	guiMode
^
	go
.uiModeË& 
	gMASK_UI_MODE_NIGHT
) != 0) {

1113 i‡(!(
uiMode
 & 
MASK_UI_MODE_NIGHT
)Ë 
Ál£
;

1114 i‡(!(
	go
.
	guiMode
 & 
	gMASK_UI_MODE_NIGHT
)Ë 
	gåue
;

1121 i‡(
	gtouchs¸ìn
 !
o
.
touchs¸ìn
) {

1122 i‡(!
touchs¸ìn
Ë 
Ál£
;

1123 i‡(!
	go
.
	gtouchs¸ìn
Ë 
	gåue
;

1126 i‡(
	göput
 || 
	go
.input) {

1127 i‡(((
	göputFœgs
^
	go
.öputFœgsË& 
	gMASK_KEYSHIDDEN
) != 0) {

1128 i‡(!(
öputFœgs
 & 
MASK_KEYSHIDDEN
)Ë 
Ál£
;

1129 i‡(!(
	go
.
	göputFœgs
 & 
	gMASK_KEYSHIDDEN
)Ë 
	gåue
;

1132 i‡(((
	göputFœgs
^
	go
.öputFœgsË& 
	gMASK_NAVHIDDEN
) != 0) {

1133 i‡(!(
öputFœgs
 & 
MASK_NAVHIDDEN
)Ë 
Ál£
;

1134 i‡(!(
	go
.
	göputFœgs
 & 
	gMASK_NAVHIDDEN
)Ë 
	gåue
;

1137 i‡(
	gkeybﬂrd
 !
o
.
keybﬂrd
) {

1138 i‡(!
keybﬂrd
Ë 
Ál£
;

1139 i‡(!
	go
.
	gkeybﬂrd
Ë 
	gåue
;

1142 i‡(
	g«vig©i⁄
 !
o
.
«vig©i⁄
) {

1143 i‡(!
«vig©i⁄
Ë 
Ál£
;

1144 i‡(!
	go
.
	g«vig©i⁄
Ë 
	gåue
;

1148 i‡(
	gs¸ìnSize
 || 
	go
.screenSize) {

1149 i‡(
	gs¸ìnWidth
 !
o
.
s¸ìnWidth
) {

1150 i‡(!
s¸ìnWidth
Ë 
Ál£
;

1151 i‡(!
	go
.
	gs¸ìnWidth
Ë 
	gåue
;

1154 i‡(
	gs¸ìnHeight
 !
o
.
s¸ìnHeight
) {

1155 i‡(!
s¸ìnHeight
Ë 
Ál£
;

1156 i‡(!
	go
.
	gs¸ìnHeight
Ë 
	gåue
;

1160 i‡(
	gvîsi⁄
 || 
	go
.version) {

1161 i‡(
	gsdkVîsi⁄
 !
o
.
sdkVîsi⁄
) {

1162 i‡(!
sdkVîsi⁄
Ë 
Ál£
;

1163 i‡(!
	go
.
	gsdkVîsi⁄
Ë 
	gåue
;

1166 i‡(
	gmö‹Vîsi⁄
 !
o
.
mö‹Vîsi⁄
) {

1167 i‡(!
mö‹Vîsi⁄
Ë 
Ál£
;

1168 i‡(!
	go
.
	gmö‹Vîsi⁄
Ë 
	gåue
;

1171  
	gÁl£
;

1184 
ölöe
 
boﬁ


1185 
isBëãrTh™
(c⁄° 
ResTabÀ_c⁄fig
& 
o
,

1186 c⁄° 
ResTabÀ_c⁄fig
* 
ªque°ed
) const {

1187 i‡(
	gªque°ed
) {

1188 i‡(
	gimsi
 || 
	go
.imsi) {

1189 i‡((
	gmcc
 !
o
.
mcc
Ë&& 
ªque°ed
->mcc) {

1190  (
mcc
);

1193 i‡((
	gmnc
 !
o
.
mnc
Ë&& 
ªque°ed
->mnc) {

1194  (
mnc
);

1198 i‡(
	gloˇÀ
 || 
	go
.locale) {

1199 i‡((
	gœnguage
[0] !
o
.
œnguage
[0]Ë&& 
ªque°ed
->language[0]) {

1200  (
œnguage
[0]);

1203 i‡((
	gcou¡ry
[0] !
o
.
cou¡ry
[0]Ë&& 
ªque°ed
->country[0]) {

1204  (
cou¡ry
[0]);

1208 i‡(
	gs¸ìnLayout
 || 
	go
.screenLayout) {

1209 i‡(((
	gs¸ìnLayout
^
	go
.s¸ìnLayoutË& 
	gMASK_SCREENSIZE
) != 0

1210 && (
ªque°ed
->
s¸ìnLayout
 & 
MASK_SCREENSIZE
)) {

1211  (
s¸ìnLayout
 & 
MASK_SCREENSIZE
);

1213 i‡(((
	gs¸ìnLayout
^
	go
.s¸ìnLayoutË& 
	gMASK_SCREENLONG
) != 0

1214 && (
ªque°ed
->
s¸ìnLayout
 & 
MASK_SCREENLONG
)) {

1215  (
s¸ìnLayout
 & 
MASK_SCREENLONG
);

1219 i‡((
	g‹õ¡©i⁄
 !
o
.
‹õ¡©i⁄
Ë&& 
ªque°ed
->orientation) {

1220  (
‹õ¡©i⁄
);

1223 i‡(
	guiMode
 || 
	go
.uiMode) {

1224 i‡(((
	guiMode
^
	go
.uiModeË& 
	gMASK_UI_MODE_TYPE
) != 0

1225 && (
ªque°ed
->
uiMode
 & 
MASK_UI_MODE_TYPE
)) {

1226  (
uiMode
 & 
MASK_UI_MODE_TYPE
);

1228 i‡(((
	guiMode
^
	go
.uiModeË& 
	gMASK_UI_MODE_NIGHT
) != 0

1229 && (
ªque°ed
->
uiMode
 & 
MASK_UI_MODE_NIGHT
)) {

1230  (
uiMode
 & 
MASK_UI_MODE_NIGHT
);

1234 i‡(
	gs¸ìnTy≥
 || 
	go
.screenType) {

1235 i‡(
	gdísôy
 !
o
.
dísôy
) {

1241 
h
 = (
dísôy
?density:160);

1242 
	gl
 = (
o
.
dísôy
?o.density:160);

1243 
boﬁ
 
	gbImBiggî
 = 
åue
;

1244 i‡(
	gl
 > 
	gh
) {

1245 
	gt
 = 
h
;

1246 
	gh
 = 
l
;

1247 
	gl
 = 
t
;

1248 
	gbImBiggî
 = 
Ál£
;

1251 
	gªqVÆue
 = (
ªque°ed
->
dísôy
?requested->density:160);

1252 i‡(
	gªqVÆue
 >
h
) {

1254  
bImBiggî
;

1256 i‡(
	gl
 >
ªqVÆue
) {

1258  !
bImBiggî
;

1261 i‡(((2 * 
	gl
Ë- 
	gªqVÆue
Ë* 
	gh
 > 
ªqVÆue
 *ÑeqValue) {

1262  !
	gbImBiggî
;

1264  
	gbImBiggî
;

1268 i‡((
	gtouchs¸ìn
 !
o
.
touchs¸ìn
Ë&& 
ªque°ed
->touchscreen) {

1269  (
touchs¸ìn
);

1273 i‡(
	göput
 || 
	go
.input) {

1274 c⁄° 
	gkeysHiddí
 = 
öputFœgs
 & 
MASK_KEYSHIDDEN
;

1275 c⁄° 
	goKeysHiddí
 = 
o
.
öputFœgs
 & 
MASK_KEYSHIDDEN
;

1276 i‡(
	gkeysHiddí
 !
oKeysHiddí
) {

1277 c⁄° 
ªqKeysHiddí
 =

1278 
ªque°ed
->
öputFœgs
 & 
MASK_KEYSHIDDEN
;

1279 i‡(
	gªqKeysHiddí
) {

1281 i‡(!
	gkeysHiddí
Ë 
	gÁl£
;

1282 i‡(!
	goKeysHiddí
Ë 
	gåue
;

1286 i‡(
	gªqKeysHiddí
 =
keysHiddí
Ë 
åue
;

1287 i‡(
	gªqKeysHiddí
 =
oKeysHiddí
Ë 
Ál£
;

1291 c⁄° 
	g«vHiddí
 = 
öputFœgs
 & 
MASK_NAVHIDDEN
;

1292 c⁄° 
	goNavHiddí
 = 
o
.
öputFœgs
 & 
MASK_NAVHIDDEN
;

1293 i‡(
	g«vHiddí
 !
oNavHiddí
) {

1294 c⁄° 
ªqNavHiddí
 =

1295 
ªque°ed
->
öputFœgs
 & 
MASK_NAVHIDDEN
;

1296 i‡(
	gªqNavHiddí
) {

1298 i‡(!
	g«vHiddí
Ë 
	gÁl£
;

1299 i‡(!
	goNavHiddí
Ë 
	gåue
;

1303 i‡((
	gkeybﬂrd
 !
o
.
keybﬂrd
Ë&& 
ªque°ed
->keyboard) {

1304  (
keybﬂrd
);

1307 i‡((
	g«vig©i⁄
 !
o
.
«vig©i⁄
Ë&& 
ªque°ed
->navigation) {

1308  (
«vig©i⁄
);

1312 i‡(
	gs¸ìnSize
 || 
	go
.screenSize) {

1313 i‡((
	gs¸ìnWidth
 !
o
.
s¸ìnWidth
Ë&& 
ªque°ed
->screenWidth) {

1314  (
s¸ìnWidth
);

1317 i‡((
	gs¸ìnHeight
 !
o
.
s¸ìnHeight
) &&

1318 
ªque°ed
->
s¸ìnHeight
) {

1319  (
s¸ìnHeight
);

1323 i‡(
	gvîsi⁄
 || 
	go
.version) {

1324 i‡((
	gsdkVîsi⁄
 !
o
.
sdkVîsi⁄
Ë&& 
ªque°ed
->sdkVersion) {

1325  (
sdkVîsi⁄
 > 
o
.sdkVersion);

1328 i‡((
	gmö‹Vîsi⁄
 !
o
.
mö‹Vîsi⁄
) &&

1329 
ªque°ed
->
mö‹Vîsi⁄
) {

1330  (
mö‹Vîsi⁄
);

1334  
	gÁl£
;

1336  
isM‹eS≥cificTh™
(
o
);

1345 
ölöe
 
boﬁ
 
m©ch
(c⁄° 
ResTabÀ_c⁄fig
& 
£âögs
) const {

1346 i‡(
	gimsi
 != 0) {

1347 i‡((
£âögs
.
mcc
 != 0 && mcc != 0

1348 && 
mcc
 !
£âögs
.mcc) ||

1349 (
£âögs
.
mcc
 == 0 && mcc != 0)) {

1350  
Ál£
;

1352 i‡((
	g£âögs
.
	gmnc
 !0 && 
mnc
 != 0

1353 && 
mnc
 !
£âögs
.mnc) ||

1354 (
£âögs
.
mnc
 == 0 && mnc != 0)) {

1355  
Ál£
;

1358 i‡(
	gloˇÀ
 != 0) {

1359 i‡(
£âögs
.
œnguage
[0] != 0 &&Üanguage[0] != 0

1360 && (
œnguage
[0] !
£âögs
.language[0]

1361 || 
œnguage
[1] !
£âögs
.language[1])) {

1362  
Ál£
;

1364 i‡(
	g£âögs
.
	gcou¡ry
[0] !0 && 
cou¡ry
[0] != 0

1365 && (
cou¡ry
[0] !
£âögs
.country[0]

1366 || 
cou¡ry
[1] !
£âögs
.country[1])) {

1367  
Ál£
;

1370 i‡(
	gs¸ìnC⁄fig
 != 0) {

1371 c⁄° 
s¸ìnSize
 = 
s¸ìnLayout
&
MASK_SCREENSIZE
;

1372 c⁄° 
	g£tS¸ìnSize
 = 
£âögs
.
s¸ìnLayout
&
MASK_SCREENSIZE
;

1373 i‡(
	g£tS¸ìnSize
 !0 && 
s¸ìnSize
 != 0

1374 && 
s¸ìnSize
 !
£tS¸ìnSize
) {

1375  
Ál£
;

1378 c⁄° 
	gs¸ìnL⁄g
 = 
s¸ìnLayout
&
MASK_SCREENLONG
;

1379 c⁄° 
	g£tS¸ìnL⁄g
 = 
£âögs
.
s¸ìnLayout
&
MASK_SCREENLONG
;

1380 i‡(
	g£tS¸ìnL⁄g
 !0 && 
s¸ìnL⁄g
 != 0

1381 && 
s¸ìnL⁄g
 !
£tS¸ìnL⁄g
) {

1382  
Ál£
;

1385 c⁄° 
	guiModeTy≥
 = 
uiMode
&
MASK_UI_MODE_TYPE
;

1386 c⁄° 
	g£tUiModeTy≥
 = 
£âögs
.
uiMode
&
MASK_UI_MODE_TYPE
;

1387 i‡(
	g£tUiModeTy≥
 !0 && 
uiModeTy≥
 != 0

1388 && 
uiModeTy≥
 !
£tUiModeTy≥
) {

1389  
Ál£
;

1392 c⁄° 
	guiModeNight
 = 
uiMode
&
MASK_UI_MODE_NIGHT
;

1393 c⁄° 
	g£tUiModeNight
 = 
£âögs
.
uiMode
&
MASK_UI_MODE_NIGHT
;

1394 i‡(
	g£tUiModeNight
 !0 && 
uiModeNight
 != 0

1395 && 
uiModeNight
 !
£tUiModeNight
) {

1396  
Ál£
;

1399 i‡(
	gs¸ìnTy≥
 != 0) {

1400 i‡(
£âögs
.
‹õ¡©i⁄
 != 0 && orientation != 0

1401 && 
‹õ¡©i⁄
 !
£âögs
.orientation) {

1402  
Ál£
;

1405 i‡(
	g£âögs
.
	gtouchs¸ìn
 !0 && 
touchs¸ìn
 != 0

1406 && 
touchs¸ìn
 !
£âögs
.touchscreen) {

1407  
Ál£
;

1410 i‡(
	göput
 != 0) {

1411 c⁄° 
keysHiddí
 = 
öputFœgs
&
MASK_KEYSHIDDEN
;

1412 c⁄° 
	g£tKeysHiddí
 = 
£âögs
.
öputFœgs
&
MASK_KEYSHIDDEN
;

1413 i‡(
	g£tKeysHiddí
 !0 && 
keysHiddí
 != 0

1414 && 
keysHiddí
 !
£tKeysHiddí
) {

1419 i‡(
keysHiddí
 !
KEYSHIDDEN_NO
 || 
£tKeysHiddí
 !
KEYSHIDDEN_SOFT
) {

1421  
Ál£
;

1424 c⁄° 
	g«vHiddí
 = 
öputFœgs
&
MASK_NAVHIDDEN
;

1425 c⁄° 
	g£tNavHiddí
 = 
£âögs
.
öputFœgs
&
MASK_NAVHIDDEN
;

1426 i‡(
	g£tNavHiddí
 !0 && 
«vHiddí
 != 0

1427 && 
«vHiddí
 !
£tNavHiddí
) {

1428  
Ál£
;

1430 i‡(
	g£âögs
.
	gkeybﬂrd
 !0 && 
keybﬂrd
 != 0

1431 && 
keybﬂrd
 !
£âögs
.keyboard) {

1432  
Ál£
;

1434 i‡(
	g£âögs
.
	g«vig©i⁄
 !0 && 
«vig©i⁄
 != 0

1435 && 
«vig©i⁄
 !
£âögs
.navigation) {

1436  
Ál£
;

1439 i‡(
	gs¸ìnSize
 != 0) {

1440 i‡(
£âögs
.
s¸ìnWidth
 != 0 && screenWidth != 0

1441 && 
s¸ìnWidth
 !
£âögs
.screenWidth) {

1442  
Ál£
;

1444 i‡(
	g£âögs
.
	gs¸ìnHeight
 !0 && 
s¸ìnHeight
 != 0

1445 && 
s¸ìnHeight
 !
£âögs
.screenHeight) {

1446  
Ál£
;

1449 i‡(
	gvîsi⁄
 != 0) {

1450 i‡(
£âögs
.
sdkVîsi⁄
 != 0 && sdkVersion != 0

1451 && 
sdkVîsi⁄
 > 
£âögs
.sdkVersion) {

1452  
Ál£
;

1454 i‡(
	g£âögs
.
	gmö‹Vîsi⁄
 !0 && 
mö‹Vîsi⁄
 != 0

1455 && 
mö‹Vîsi⁄
 !
£âögs
.minorVersion) {

1456  
Ál£
;

1459  
	gåue
;

1462 
gëLoˇÀ
(
°r
[6]) const {

1463 
mem£t
(
°r
, 0, 6);

1464 i‡(
	gœnguage
[0]) {

1465 
	g°r
[0] = 
œnguage
[0];

1466 
	g°r
[1] = 
œnguage
[1];

1467 i‡(
	gcou¡ry
[0]) {

1468 
	g°r
[2] = '_';

1469 
	g°r
[3] = 
cou¡ry
[0];

1470 
	g°r
[4] = 
cou¡ry
[1];

1475 
Såög8
 
toSåög
() const {

1476 
	gbuf
[200];

1477 
•rötf
(
buf
, "imsi=%d/%dÜang=%c%cÑeg=%c%c orient=%dÅouch=%d dens=%d "

1480 
mcc
, 
mnc
,

1481 
œnguage
[0] ?Üanguage[0] : '-',Üanguage[1] ?Üanguage[1] : '-',

1482 
cou¡ry
[0] ? country[0] : '-', country[1] ? country[1] : '-',

1483 
‹õ¡©i⁄
, 
touchs¸ìn
, 
dísôy
, 
keybﬂrd
, 
«vig©i⁄
, 
öputFœgs
,

1484 
s¸ìnWidth
, 
s¸ìnHeight
,

1485 
s¸ìnLayout
&
MASK_SCREENSIZE
, s¸ìnLayout&
MASK_SCREENLONG
,

1486 
uiMode
&
MASK_UI_MODE_TYPE
, uiMode&
MASK_UI_MODE_NIGHT
,

1487 
sdkVîsi⁄
, 
mö‹Vîsi⁄
);

1488  
Såög8
(
buf
);

1502 
	sResTabÀ_ty≥S≥c


1504 
ResChunk_hódî
 
	ghódî
;

1509 
uöt8_t
 
	gid
;

1512 
uöt8_t
 
	gªs0
;

1514 
uöt16_t
 
	gªs1
;

1517 
uöt32_t
 
	gíåyCou¡
;

1521 
	gSPEC_PUBLIC
 = 0x40000000

1540 
	sResTabÀ_ty≥


1542 
ResChunk_hódî
 
	ghódî
;

1545 
	gNO_ENTRY
 = 0xFFFFFFFF

1551 
uöt8_t
 
	gid
;

1554 
uöt8_t
 
	gªs0
;

1556 
uöt16_t
 
	gªs1
;

1559 
uöt32_t
 
	gíåyCou¡
;

1562 
uöt32_t
 
	gíåõsSèπ
;

1565 
ResTabÀ_c⁄fig
 
	gc⁄fig
;

1576 
	sResTabÀ_íåy


1579 
uöt16_t
 
	gsize
;

1584 
	gFLAG_COMPLEX
 = 0x0001,

1587 
	gFLAG_PUBLIC
 = 0x0002

1589 
uöt16_t
 
	gÊags
;

1592 
ResSåögPoﬁ_ªf
 
	gkey
;

1599 
	gResTabÀ_m≠_íåy
 : 
public
 
ResTabÀ_íåy


1602 
ResTabÀ_ªf
 
∑ª¡
;

1604 
uöt32_t
 
	gcou¡
;

1611 
	sResTabÀ_m≠


1617 
ResTabÀ_ªf
 
	g«me
;

1622 
	gATTR_TYPE
 = 
Res_MAKEINTERNAL
(0),

1625 
	gATTR_MIN
 = 
Res_MAKEINTERNAL
(1),

1628 
	gATTR_MAX
 = 
Res_MAKEINTERNAL
(2),

1632 
	gATTR_L10N
 = 
Res_MAKEINTERNAL
(3),

1635 
	gATTR_OTHER
 = 
Res_MAKEINTERNAL
(4),

1636 
	gATTR_ZERO
 = 
Res_MAKEINTERNAL
(5),

1637 
	gATTR_ONE
 = 
Res_MAKEINTERNAL
(6),

1638 
	gATTR_TWO
 = 
Res_MAKEINTERNAL
(7),

1639 
	gATTR_FEW
 = 
Res_MAKEINTERNAL
(8),

1640 
	gATTR_MANY
 = 
Res_MAKEINTERNAL
(9)

1650 
	gTYPE_ANY
 = 0x0000FFFF,

1653 
	gTYPE_REFERENCE
 = 1<<0,

1656 
	gTYPE_STRING
 = 1<<1,

1660 
	gTYPE_INTEGER
 = 1<<2,

1663 
	gTYPE_BOOLEAN
 = 1<<3,

1666 
	gTYPE_COLOR
 = 1<<4,

1669 
	gTYPE_FLOAT
 = 1<<5,

1672 
	gTYPE_DIMENSION
 = 1<<6,

1675 
	gTYPE_FRACTION
 = 1<<7,

1679 
	gTYPE_ENUM
 = 1<<16,

1683 
	gTYPE_FLAGS
 = 1<<17

1688 
	gL10N_NOT_REQUIRED
 = 0,

1689 
	gL10N_SUGGESTED
 = 1

1693 
Res_vÆue
 
	gvÆue
;

1699 ˛as†
	cResTabÀ


1701 
	gpublic
:

1702 
ResTabÀ
();

1703 
ResTabÀ
(c⁄° * 
d©a
, 
size_t
 
size
, * 
cookõ
,

1704 
boﬁ
 
c›yD©a
=
Ál£
);

1705 ~
ResTabÀ
();

1707 
°©us_t
 
add
(c⁄° * 
d©a
, 
size_t
 
size
, * 
cookõ
,

1708 
boﬁ
 
c›yD©a
=
Ál£
);

1709 
°©us_t
 
add
(
As£t
* 
as£t
, * 
cookõ
,

1710 
boﬁ
 
c›yD©a
=
Ál£
);

1711 
°©us_t
 
add
(
ResTabÀ
* 
§c
);

1713 
°©us_t
 
gëEº‹
() const;

1715 
unöô
();

1717 
	sªsour˚_«me


1719 c⁄° 
ch¨16_t
* 
	g∑ckage
;

1720 
size_t
 
	g∑ckageLí
;

1721 c⁄° 
ch¨16_t
* 
	gty≥
;

1722 
size_t
 
	gty≥Lí
;

1723 c⁄° 
ch¨16_t
* 
	g«me
;

1724 
size_t
 
	g«meLí
;

1727 
boﬁ
 
gëResour˚Name
(
uöt32_t
 
ªsID
, 
ªsour˚_«me
* 
outName
) const;

1744 
ssize_t
 
gëResour˚
(
uöt32_t
 
ªsID
, 
Res_vÆue
* 
outVÆue
, 
boﬁ
 
mayBeBag
=
Ál£
,

1745 
uöt32_t
* 
outS≥cFœgs
=
NULL
, 
ResTabÀ_c⁄fig
* 
outC⁄fig
=NULL) const;

1747 
ölöe
 
ssize_t
 
gëResour˚
(c⁄° 
ResTabÀ_ªf
& 
ªs
, 
Res_vÆue
* 
outVÆue
,

1748 
uöt32_t
* 
outS≥cFœgs
=
NULL
) const {

1749  
gëResour˚
(
ªs
.
idít
, 
outVÆue
, 
Ál£
, 
outS≥cFœgs
, 
NULL
);

1752 
ssize_t
 
ªsﬁveRe„ªn˚
(
Res_vÆue
* 
öOutVÆue
,

1753 
ssize_t
 
blockIndex
,

1754 
uöt32_t
* 
outLa°Ref
 = 
NULL
,

1755 
uöt32_t
* 
öoutTy≥S≥cFœgs
 = 
NULL
,

1756 
ResTabÀ_c⁄fig
* 
outC⁄fig
 = 
NULL
) const;

1759 
	gTMP_BUFFER_SIZE
 = 16

1761 c⁄° 
ch¨16_t
* 
vÆueToSåög
(c⁄° 
Res_vÆue
* 
vÆue
, 
size_t
 
°rögBlock
,

1762 
ch¨16_t
 
tmpBuf„r
[
TMP_BUFFER_SIZE
],

1763 
size_t
* 
outLí
);

1765 
	sbag_íåy
 {

1766 
ssize_t
 
	g°rögBlock
;

1767 
ResTabÀ_m≠
 
	gm≠
;

1782 
ssize_t
 
lockBag
(
uöt32_t
 
ªsID
, c⁄° 
bag_íåy
** 
outBag
) const;

1784 
u∆ockBag
(c⁄° 
bag_íåy
* 
bag
) const;

1786 
lock
() const;

1788 
ssize_t
 
gëBagLocked
(
uöt32_t
 
ªsID
, c⁄° 
bag_íåy
** 
outBag
,

1789 
uöt32_t
* 
outTy≥S≥cFœgs
=
NULL
) const;

1791 
u∆ock
() const;

1793 ˛as†
	cTheme
 {

1794 
	gpublic
:

1795 
Theme
(c⁄° 
ResTabÀ
& 
èbÀ
);

1796 ~
Theme
();

1798 
ölöe
 c⁄° 
	gResTabÀ
& 
gëResTabÀ
(Ëc⁄° {  
	gmTabÀ
; }

1800 
°©us_t
 
≠∂yStyÀ
(
uöt32_t
 
ªsID
, 
boﬁ
 
f‹˚
=
Ál£
);

1801 
°©us_t
 
£tTo
(c⁄° 
Theme
& 
Ÿhî
);

1821 
ssize_t
 
gëAâribuã
(
uöt32_t
 
ªsID
, 
Res_vÆue
* 
outVÆue
,

1822 
uöt32_t
* 
outTy≥S≥cFœgs
 = 
NULL
) const;

1828 
ssize_t
 
ªsﬁveAâribuãRe„ªn˚
(
Res_vÆue
* 
öOutVÆue
,

1829 
ssize_t
 
blockIndex
, 
uöt32_t
* 
outLa°Ref
 = 
NULL
,

1830 
uöt32_t
* 
öoutTy≥S≥cFœgs
 = 
NULL
,

1831 
ResTabÀ_c⁄fig
* 
öoutC⁄fig
 = 
NULL
) const;

1833 
dumpToLog
() const;

1835 
	g¥iv©e
:

1836 
Theme
(const Theme&);

1837 
	gTheme
& 
	g›î©‹
=(c⁄° 
Theme
&);

1839 
	stheme_íåy
 {

1840 
ssize_t
 
	g°rögBlock
;

1841 
uöt32_t
 
	gty≥S≥cFœgs
;

1842 
Res_vÆue
 
	gvÆue
;

1844 
	sty≥_öfo
 {

1845 
size_t
 
	gnumE¡rõs
;

1846 
theme_íåy
* 
	gíåõs
;

1848 
	s∑ckage_öfo
 {

1849 
size_t
 
	gnumTy≥s
;

1850 
ty≥_öfo
 
	gty≥s
[];

1853 
‰ì_∑ckage
(
∑ckage_öfo
* 
pi
);

1854 
∑ckage_öfo
* 
c›y_∑ckage
’ackage_öfo* 
pi
);

1856 c⁄° 
	gResTabÀ
& 
	gmTabÀ
;

1857 
∑ckage_öfo
* 
	gmPackages
[
Res_MAXPACKAGE
];

1860 
£tP¨amëîs
(c⁄° 
ResTabÀ_c⁄fig
* 
∑øms
);

1861 
gëP¨amëîs
(
ResTabÀ_c⁄fig
* 
∑øms
) const;

1869 
uöt32_t
 
idítifõrF‹Name
(c⁄° 
ch¨16_t
* 
«me
, 
size_t
 
«meLí
,

1870 c⁄° 
ch¨16_t
* 
ty≥
 = 0, 
size_t
 
ty≥Lí
 = 0,

1871 c⁄° 
ch¨16_t
* 
defPackage
 = 0,

1872 
size_t
 
defPackageLí
 = 0,

1873 
uöt32_t
* 
outTy≥S≥cFœgs
 = 
NULL
) const;

1875 
boﬁ
 
ex∑ndResour˚Ref
(c⁄° 
uöt16_t
* 
ªfSå
, 
size_t
 
ªfLí
,

1876 
Såög16
* 
outPackage
,

1877 
Såög16
* 
outTy≥
,

1878 
Såög16
* 
outName
,

1879 c⁄° 
Såög16
* 
defTy≥
 = 
NULL
,

1880 c⁄° 
Såög16
* 
defPackage
 = 
NULL
,

1881 c⁄° ** 
outEº‹Msg
 = 
NULL
);

1883 
boﬁ
 
°rögToI¡
(c⁄° 
ch¨16_t
* 
s
, 
size_t
 
Àn
, 
Res_vÆue
* 
outVÆue
);

1884 
boﬁ
 
°rögToFlﬂt
(c⁄° 
ch¨16_t
* 
s
, 
size_t
 
Àn
, 
Res_vÆue
* 
outVÆue
);

1887 ˛as†
	cAc˚ss‹


1889 
	gpublic
:

1890 
ölöe
 
vútuÆ
 ~
Ac˚ss‹
() { }

1892 
vútuÆ
 
uöt32_t
 
gëCu°omResour˚
(c⁄° 
Såög16
& 
∑ckage
,

1893 c⁄° 
Såög16
& 
ty≥
,

1894 c⁄° 
Såög16
& 
«me
) const = 0;

1895 
vútuÆ
 
uöt32_t
 
gëCu°omResour˚WôhCª©i⁄
(c⁄° 
Såög16
& 
∑ckage
,

1896 c⁄° 
Såög16
& 
ty≥
,

1897 c⁄° 
Såög16
& 
«me
,

1898 c⁄° 
boﬁ
 
¸óãIfNìded
 = 
Ál£
) = 0;

1899 
vútuÆ
 
uöt32_t
 
gëRem≠≥dPackage
(uöt32_à
‹igPackage
) const = 0;

1900 
vútuÆ
 
boﬁ
 
gëAâribuãTy≥
(
uöt32_t
 
©åID
, uöt32_t* 
outTy≥
) = 0;

1901 
vútuÆ
 
boﬁ
 
gëAâribuãMö
(
uöt32_t
 
©åID
, uöt32_t* 
outMö
) = 0;

1902 
vútuÆ
 
boﬁ
 
gëAâribuãMax
(
uöt32_t
 
©åID
, uöt32_t* 
outMax
) = 0;

1903 
vútuÆ
 
boﬁ
 
gëAâribuãEnum
(
uöt32_t
 
©åID
,

1904 c⁄° 
ch¨16_t
* 
«me
, 
size_t
 
«meLí
,

1905 
Res_vÆue
* 
outVÆue
) = 0;

1906 
vútuÆ
 
boﬁ
 
gëAâribuãFœgs
(
uöt32_t
 
©åID
,

1907 c⁄° 
ch¨16_t
* 
«me
, 
size_t
 
«meLí
,

1908 
Res_vÆue
* 
outVÆue
) = 0;

1909 
vútuÆ
 
uöt32_t
 
gëAâribuãL10N
(uöt32_à
©åID
) = 0;

1910 
vútuÆ
 
boﬁ
 
gëLoˇliz©i⁄Sëtög
() = 0;

1911 
vútuÆ
 
ªp‹tEº‹
(* 
ac˚ss‹Cookõ
, c⁄° * 
fmt
, ...) = 0;

1923 
boﬁ
 
°rögToVÆue
(
Res_vÆue
* 
outVÆue
, 
Såög16
* 
outSåög
,

1924 c⁄° 
ch¨16_t
* 
s
, 
size_t
 
Àn
,

1925 
boﬁ
 
¥e£rveS∑˚s
, boﬁ 
c€r˚Ty≥
,

1926 
uöt32_t
 
©åID
 = 0,

1927 c⁄° 
Såög16
* 
defTy≥
 = 
NULL
,

1928 c⁄° 
Såög16
* 
defPackage
 = 
NULL
,

1929 
Ac˚ss‹
* 
ac˚ss‹
 = 
NULL
,

1930 * 
ac˚ss‹Cookõ
 = 
NULL
,

1931 
uöt32_t
 
©åTy≥
 = 
ResTabÀ_m≠
::
TYPE_ANY
,

1932 
boﬁ
 
íf‹˚Priv©e
 = 
åue
) const;

1935 
boﬁ
 
cﬁÀ˘Såög
(
Såög16
* 
outSåög
,

1936 c⁄° 
ch¨16_t
* 
s
, 
size_t
 
Àn
,

1937 
boﬁ
 
¥e£rveS∑˚s
,

1938 c⁄° ** 
outEº‹Msg
 = 
NULL
,

1939 
boﬁ
 
≠≥nd
 = 
Ál£
);

1941 
size_t
 
gëBa£PackageCou¡
() const;

1942 c⁄° 
ch¨16_t
* 
gëBa£PackageName
(
size_t
 
idx
) const;

1943 
uöt32_t
 
gëBa£PackageId
(
size_t
 
idx
) const;

1945 
size_t
 
gëTabÀCou¡
() const;

1946 c⁄° 
ResSåögPoﬁ
* 
gëTabÀSåögBlock
(
size_t
 
ödex
) const;

1947 * 
gëTabÀCookõ
(
size_t
 
ödex
) const;

1950 
gëC⁄figuøti⁄s
(
Ve˘‹
<
ResTabÀ_c⁄fig
>* 
c⁄figs
) const;

1952 
gëLoˇÀs
(
Ve˘‹
<
Såög8
>* 
loˇÀs
) const;

1954 #i‚de‡
HAVE_ANDROID_OS


1955 
¥öt
(
boﬁ
 
ö˛VÆues
) const;

1958 
	g¥iv©e
:

1959 
Hódî
;

1960 
	gTy≥
;

1961 
	gPackage
;

1962 
	gPackageGroup
;

1963 
	gbag_£t
;

1965 
°©us_t
 
add
(c⁄° * 
d©a
, 
size_t
 
size
, * 
cookõ
,

1966 
As£t
* 
as£t
, 
boﬁ
 
c›yD©a
);

1968 
ssize_t
 
gëResour˚PackageIndex
(
uöt32_t
 
ªsID
) const;

1969 
ssize_t
 
gëE¡ry
(

1970 c⁄° 
Package
* 
∑ckage
, 
ty≥Index
, 
íåyIndex
,

1971 c⁄° 
ResTabÀ_c⁄fig
* 
c⁄fig
,

1972 c⁄° 
ResTabÀ_ty≥
** 
outTy≥
, c⁄° 
ResTabÀ_íåy
** 
outE¡ry
,

1973 c⁄° 
Ty≥
** 
outTy≥Cœss
) const;

1974 
°©us_t
 
∑r£Package
(

1975 c⁄° 
ResTabÀ_∑ckage
* c⁄° 
pkg
, c⁄° 
Hódî
* c⁄° 
hódî
);

1977 
¥öt_vÆue
(c⁄° 
Package
* 
pkg
, c⁄° 
Res_vÆue
& 
vÆue
) const;

1979 
muèbÀ
 
Muãx
 
	gmLock
;

1981 
°©us_t
 
	gmEº‹
;

1983 
ResTabÀ_c⁄fig
 
	gmP¨ams
;

1986 
	gVe˘‹
<
	gHódî
*> 
	gmHódîs
;

1989 
	gVe˘‹
<
	gPackageGroup
*> 
	gmPackageGroups
;

1993 
uöt8_t
 
	gmPackageM≠
[256];

	@jni/include/utils/SharedBuffer.h

17 #i‚de‡
ANDROID_SHARED_BUFFER_H


18 
	#ANDROID_SHARED_BUFFER_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

25 
«me•a˚
 
	g™droid
 {

27 ˛as†
	cSh¨edBuf„r


29 
	gpublic
:

33 
eKìpSt‹age
 = 0x00000001

39 
Sh¨edBuf„r
* 
Æloc
(
size_t
 
size
);

46 
ssize_t
 
dóŒoc
(c⁄° 
Sh¨edBuf„r
* 
ªÀa£d
);

49 
ölöe
 c⁄° 
Sh¨edBuf„r
* 
sh¨edBuf„r
(c⁄° * 
d©a
);

52 
ölöe
 c⁄° * 
d©a
() const;

55 
ölöe
 * 
d©a
();

58 
ölöe
 
size_t
 
size
() const;

61 
ölöe
 
Sh¨edBuf„r
* 
buf„rFromD©a
(* 
d©a
);

64 
ölöe
 c⁄° 
Sh¨edBuf„r
* 
buf„rFromD©a
(c⁄° * 
d©a
);

67 
ölöe
 
size_t
 
sizeFromD©a
(c⁄° * 
d©a
);

70 
Sh¨edBuf„r
* 
edô
() const;

73 
Sh¨edBuf„r
* 
edôResize
(
size_t
 
size
) const;

76 
Sh¨edBuf„r
* 
©ãm±Edô
() const;

79 
Sh¨edBuf„r
* 
ª£t
(
size_t
 
size
) const;

82 
acquúe
() const;

88 
öt32_t
 
ªÀa£
(
uöt32_t
 
Êags
 = 0) const;

91 
ölöe
 
boﬁ
 
⁄lyOw√r
() const;

94 
	g¥iv©e
:

95 
ölöe
 
Sh¨edBuf„r
() { }

96 
ölöe
 ~
Sh¨edBuf„r
() { }

97 
ölöe
 
Sh¨edBuf„r
(const SharedBuffer&);

100 
muèbÀ
 
öt32_t
 
	gmRefs
;

101 
size_t
 
	gmSize
;

102 
uöt32_t
 
	gmRe£rved
[2];

107 c⁄° 
Sh¨edBuf„r
* 
	gSh¨edBuf„r
::
	$sh¨edBuf„r
(c⁄° * 
d©a
) {

108  
d©a
 ? 
ªöãΩªt_ˇ°
<c⁄° 
Sh¨edBuf„r
 *>(data)-1 : 0;

109 
	}
}

111 c⁄° * 
	gSh¨edBuf„r
::
	$d©a
() const {

112  
this
 + 1;

113 
	}
}

115 * 
	gSh¨edBuf„r
::
	$d©a
() {

116  
this
 + 1;

117 
	}
}

119 
size_t
 
	gSh¨edBuf„r
::
	$size
() const {

120  
mSize
;

121 
	}
}

123 
Sh¨edBuf„r
* 
	gSh¨edBuf„r
::
	$buf„rFromD©a
(* 
d©a
)

125  ((
Sh¨edBuf„r
*)
d©a
)-1;

126 
	}
}

128 c⁄° 
Sh¨edBuf„r
* 
	gSh¨edBuf„r
::
	$buf„rFromD©a
(c⁄° * 
d©a
)

130  ((c⁄° 
Sh¨edBuf„r
*)
d©a
)-1;

131 
	}
}

133 
size_t
 
	gSh¨edBuf„r
::
	$sizeFromD©a
(c⁄° * 
d©a
)

135  (((c⁄° 
Sh¨edBuf„r
*)
d©a
)-1)->
mSize
;

136 
	}
}

138 
boﬁ
 
	gSh¨edBuf„r
::
	$⁄lyOw√r
() const {

139  (
mRefs
 == 1);

140 
	}
}

	@jni/include/utils/Singleton.h

17 #i‚de‡
ANDROID_UTILS_SINGLETON_H


18 
	#ANDROID_UTILS_SINGLETON_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<utûs/thªads.h
>

24 
«me•a˚
 
	g™droid
 {

27 
	gãm∂©e
 <
ty≥«me
 
	gTYPE
>

28 ˛as†
	cSögÀt⁄


30 
	gpublic
:

31 
TYPE
& 
gëIn°™˚
() {

32 
Muãx
::
Autﬁock
 
_l
(
sLock
);

33 
TYPE
* 
	gö°™˚
 = 
sIn°™˚
;

34 i‡(
	gö°™˚
 == 0) {

35 
ö°™˚
 = 
√w
 
TYPE
();

36 
	gsIn°™˚
 = 
ö°™˚
;

38  *
	gö°™˚
;

41 
	g¥Ÿe˘ed
:

42 ~
SögÀt⁄
() { };

43 
SögÀt⁄
() { };

45 
	g¥iv©e
:

46 
SögÀt⁄
(const Singleton&);

47 
	gSögÀt⁄
& 
	g›î©‹
 = (c⁄° 
SögÀt⁄
&);

48 
Muãx
 
	gsLock
;

49 
TYPE
* 
	gsIn°™˚
;

59 
	#ANDROID_SINGLETON_STATIC_INSTANCE
(
TYPE
) \

60 
ãm∂©e
 
˛ass
 
SögÀt⁄
< 
TYPE
 >; \

61 
ãm∂©e
< 
˛ass
 
TYPE
 > 
Muãx
 
SögÀt⁄
< TYPE >::
sLock
; \

62 
ãm∂©e
<> 
TYPE
* 
SögÀt⁄
< TYPE >::
	`sIn°™˚
(0);

	)

	@jni/include/utils/SortedVector.h

17 #i‚de‡
ANDROID_SORTED_VECTOR_H


18 
	#ANDROID_SORTED_VECTOR_H


	)

20 
	~<as£π.h
>

21 
	~<°döt.h
>

22 
	~<sys/ty≥s.h
>

24 
	~<utûs/Ve˘‹.h
>

25 
	~<utûs/Ve˘‹Im∂.h
>

26 
	~<utûs/Ty≥Hñ≥rs.h
>

30 
«me•a˚
 
	g™droid
 {

32 
	gãm∂©e
 <
˛ass
 
	gTYPE
>

33 ˛as†
	cS‹ãdVe˘‹
 : 
¥iv©e
 
S‹ãdVe˘‹Im∂


35 
public
:

36 
TYPE
 
	tvÆue_ty≥
;

42 
S‹ãdVe˘‹
();

43 
S‹ãdVe˘‹
(c⁄° S‹ãdVe˘‹<
TYPE
>& 
rhs
);

44 
	gvútuÆ
 ~
S‹ãdVe˘‹
();

47 c⁄° 
	gS‹ãdVe˘‹
<
	gTYPE
>& 
	g›î©‹
 = (c⁄° 
S‹ãdVe˘‹
<
TYPE
>& 
rhs
) const;

48 
	gS‹ãdVe˘‹
<
	gTYPE
>& 
	g›î©‹
 = (c⁄° 
S‹ãdVe˘‹
<
TYPE
>& 
rhs
);

54 
ölöe
 
˛ór
(Ë{ 
	gVe˘‹Im∂
::clear(); }

61 
ölöe
 
size_t
 
size
(Ëc⁄° {  
	gVe˘‹Im∂
::size(); }

63 
ölöe
 
boﬁ
 
isEm±y
(Ëc⁄° {  
	gVe˘‹Im∂
::isEmpty(); }

65 
ölöe
 
size_t
 
ˇ∑côy
(Ëc⁄° {  
	gVe˘‹Im∂
::capacity(); }

67 
ölöe
 
ssize_t
 
£tC≠acôy
(
size_t
 
size
Ë{  
	gVe˘‹Im∂
::setCapacity(size); }

74 
ölöe
 c⁄° 
TYPE
* 
¨øy
() const;

78 
TYPE
* 
edôAºay
();

81 
ssize_t
 
ödexOf
(c⁄° 
TYPE
& 
ôem
) const;

84 
size_t
 
‹dîOf
(c⁄° 
TYPE
& 
ôem
) const;

92 
ölöe
 c⁄° 
	gTYPE
& 
	g›î©‹
 [] (
size_t
 
	gödex
) const;

94 
ölöe
 c⁄° 
	gTYPE
& 
ôemAt
(
size_t
 
ödex
) const;

96 c⁄° 
	gTYPE
& 
t›
() const;

98 c⁄° 
	gTYPE
& 
múr‹IãmAt
(
ssize_t
 
ödex
) const;

105 
ssize_t
 
add
(c⁄° 
TYPE
& 
ôem
);

108 
	gTYPE
& 
edôIãmAt
(
size_t
 
ödex
) {

109  *–
	g°©ic_ˇ°
<
	gTYPE
 *>(
	gVe˘‹Im∂
::
edôIãmLoˇti⁄
(
ödex
)) );

113 
ssize_t
 
mîge
(c⁄° 
Ve˘‹
<
TYPE
>& 
ve˘‹
);

114 
ssize_t
 
mîge
(c⁄° 
S‹ãdVe˘‹
<
TYPE
>& 
ve˘‹
);

117 
ssize_t
 
ªmove
(c⁄° 
TYPE
&);

120 
ölöe
 
ssize_t
 
ªmoveIãmsAt
(
size_t
 
ödex
, size_à
cou¡
 = 1);

122 
ölöe
 
ssize_t
 
ªmoveAt
(
size_t
 
ödex
Ë{  
ªmoveIãmsAt
(index); }

124 
	g¥Ÿe˘ed
:

125 
vútuÆ
 
do_c⁄°ru˘
(* 
°‹age
, 
size_t
 
num
) const;

126 
vútuÆ
 
do_de°roy
(* 
°‹age
, 
size_t
 
num
) const;

127 
vútuÆ
 
do_c›y
(* 
de°
, c⁄° * 
‰om
, 
size_t
 
num
) const;

128 
vútuÆ
 
do_•œt
(* 
de°
, c⁄° * 
ôem
, 
size_t
 
num
) const;

129 
vútuÆ
 
do_move_f‹w¨d
(* 
de°
, c⁄° * 
‰om
, 
size_t
 
num
) const;

130 
vútuÆ
 
do_move_backw¨d
(* 
de°
, c⁄° * 
‰om
, 
size_t
 
num
) const;

131 
vútuÆ
 
do_com∑ª
(c⁄° * 
lhs
, c⁄° * 
rhs
) const;

139 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


140 
	gS‹ãdVe˘‹
<
	gTYPE
>::
	$S‹ãdVe˘‹
()

141 : 
	`S‹ãdVe˘‹Im∂
((
TYPE
),

142 ((
åaôs
<
TYPE
>::
has_åivül_˘‹
 ? 
HAS_TRIVIAL_CTOR
 : 0)

143 |(
åaôs
<
TYPE
>::
has_åivül_dt‹
 ? 
HAS_TRIVIAL_DTOR
 : 0)

144 |(
åaôs
<
TYPE
>::
has_åivül_c›y
 ? 
HAS_TRIVIAL_COPY
 : 0))

147 
	}
}

149 
ãm∂©e
<
˛ass
 
TYPE
> 
ölöe


150 
S‹ãdVe˘‹
<
TYPE
>::S‹ãdVe˘‹(c⁄° S‹ãdVe˘‹<TYPE>& 
rhs
)

151 : 
	$S‹ãdVe˘‹Im∂
(
rhs
) {

152 
	}
}

154 
ãm∂©e
<
˛ass
 
TYPE
> 
ölöe


155 
S‹ãdVe˘‹
<
TYPE
>::~
	$S‹ãdVe˘‹
() {

156 
	`föish_ve˘‹
();

157 
	}
}

159 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


160 
	gS‹ãdVe˘‹
<
	gTYPE
>& S‹ãdVe˘‹<TYPE>::
›î©‹
 = (c⁄° 
S‹ãdVe˘‹
<
TYPE
>& 
rhs
) {

161 
S‹ãdVe˘‹Im∂
::
›î©‹
 = (
rhs
);

162  *
	gthis
;

165 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


166 c⁄° 
	gS‹ãdVe˘‹
<
	gTYPE
>& S‹ãdVe˘‹<TYPE>::
›î©‹
 = (c⁄° 
S‹ãdVe˘‹
<
TYPE
>& 
rhs
) const {

167 
S‹ãdVe˘‹Im∂
::
›î©‹
 = (
rhs
);

168  *
	gthis
;

171 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


172 c⁄° 
TYPE
* 
	gS‹ãdVe˘‹
<
	gTYPE
>::
	$¨øy
() const {

173  
°©ic_ˇ°
<c⁄° 
TYPE
 *>(
	`¨øyIm∂
());

174 
	}
}

176 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


177 
TYPE
* 
	gS‹ãdVe˘‹
<
	gTYPE
>::
	$edôAºay
() {

178  
°©ic_ˇ°
<
TYPE
 *>(
	`edôAºayIm∂
());

179 
	}
}

182 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


183 c⁄° 
	gTYPE
& 
	gS‹ãdVe˘‹
<TYPE>::
›î©‹
[](
size_t
 
ödex
) const {

184 
as£π
–
ödex
<
size
() );

185  *(
¨øy
(Ë+ 
	gödex
);

188 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


189 c⁄° 
	gTYPE
& 
	gS‹ãdVe˘‹
<TYPE>::
	$ôemAt
(
size_t
 
ödex
) const {

190  
›î©‹
[](
ödex
);

191 
	}
}

193 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


194 c⁄° 
	gTYPE
& 
	gS‹ãdVe˘‹
<TYPE>::
	$múr‹IãmAt
(
ssize_t
 
ödex
) const {

195 
	`as£π
–(
ödex
>0 ? index : -ödex)<
	`size
() );

196  *(
	`¨øy
(Ë+ ((
ödex
<0Ë? (
	`size
()-index) : index));

197 
	}
}

199 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


200 c⁄° 
	gTYPE
& 
	gS‹ãdVe˘‹
<TYPE>::
	$t›
() const {

201  *(
	`¨øy
(Ë+ 
	`size
() - 1);

202 
	}
}

204 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


205 
ssize_t
 
	gS‹ãdVe˘‹
<
	gTYPE
>::
	$add
(c⁄° 
TYPE
& 
ôem
) {

206  
S‹ãdVe˘‹Im∂
::
	`add
(&
ôem
);

207 
	}
}

209 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


210 
ssize_t
 
	gS‹ãdVe˘‹
<
	gTYPE
>::
	$ödexOf
(c⁄° 
TYPE
& 
ôem
) const {

211  
S‹ãdVe˘‹Im∂
::
	`ödexOf
(&
ôem
);

212 
	}
}

214 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


215 
size_t
 
	gS‹ãdVe˘‹
<
	gTYPE
>::
	$‹dîOf
(c⁄° 
TYPE
& 
ôem
) const {

216  
S‹ãdVe˘‹Im∂
::
	`‹dîOf
(&
ôem
);

217 
	}
}

219 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


220 
ssize_t
 
	gS‹ãdVe˘‹
<
	gTYPE
>::
mîge
(c⁄° 
Ve˘‹
<
TYPE
>& 
ve˘‹
) {

221  
S‹ãdVe˘‹Im∂
::
mîge
(
ªöãΩªt_ˇ°
<c⁄° 
Ve˘‹Im∂
&>(
ve˘‹
));

224 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


225 
ssize_t
 
	gS‹ãdVe˘‹
<
	gTYPE
>::
mîge
(c⁄° 
S‹ãdVe˘‹
<
TYPE
>& 
ve˘‹
) {

226  
S‹ãdVe˘‹Im∂
::
mîge
(
ªöãΩªt_ˇ°
<c⁄° S‹ãdVe˘‹Im∂&>(
ve˘‹
));

229 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


230 
ssize_t
 
	gS‹ãdVe˘‹
<
	gTYPE
>::
	$ªmove
(c⁄° 
TYPE
& 
ôem
) {

231  
S‹ãdVe˘‹Im∂
::
	`ªmove
(&
ôem
);

232 
	}
}

234 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


235 
ssize_t
 
	gS‹ãdVe˘‹
<
	gTYPE
>::
	$ªmoveIãmsAt
(
size_t
 
ödex
, size_à
cou¡
) {

236  
Ve˘‹Im∂
::
	`ªmoveIãmsAt
(
ödex
, 
cou¡
);

237 
	}
}

241 
	gãm∂©e
<
˛ass
 
	gTYPE
>

242 
	gS‹ãdVe˘‹
<
	gTYPE
>::
	$do_c⁄°ru˘
(* 
°‹age
, 
size_t
 
num
) const {

243 
	`c⁄°ru˘_ty≥
–
ªöãΩªt_ˇ°
<
TYPE
*>(
°‹age
), 
num
 );

244 
	}
}

246 
	gãm∂©e
<
˛ass
 
	gTYPE
>

247 
	gS‹ãdVe˘‹
<
	gTYPE
>::
	$do_de°roy
(* 
°‹age
, 
size_t
 
num
) const {

248 
	`de°roy_ty≥
–
ªöãΩªt_ˇ°
<
TYPE
*>(
°‹age
), 
num
 );

249 
	}
}

251 
	gãm∂©e
<
˛ass
 
	gTYPE
>

252 
	gS‹ãdVe˘‹
<
	gTYPE
>::
	$do_c›y
(* 
de°
, c⁄° * 
‰om
, 
size_t
 
num
) const {

253 
	`c›y_ty≥
–
ªöãΩªt_ˇ°
<
TYPE
*>(
de°
),ÑeöãΩªt_ˇ°<c⁄° TYPE*>(
‰om
), 
num
 );

254 
	}
}

256 
	gãm∂©e
<
˛ass
 
	gTYPE
>

257 
	gS‹ãdVe˘‹
<
	gTYPE
>::
	$do_•œt
(* 
de°
, c⁄° * 
ôem
, 
size_t
 
num
) const {

258 
	`•œt_ty≥
–
ªöãΩªt_ˇ°
<
TYPE
*>(
de°
),ÑeöãΩªt_ˇ°<c⁄° TYPE*>(
ôem
), 
num
 );

259 
	}
}

261 
	gãm∂©e
<
˛ass
 
	gTYPE
>

262 
	gS‹ãdVe˘‹
<
	gTYPE
>::
	$do_move_f‹w¨d
(* 
de°
, c⁄° * 
‰om
, 
size_t
 
num
) const {

263 
	`move_f‹w¨d_ty≥
–
ªöãΩªt_ˇ°
<
TYPE
*>(
de°
),ÑeöãΩªt_ˇ°<c⁄° TYPE*>(
‰om
), 
num
 );

264 
	}
}

266 
	gãm∂©e
<
˛ass
 
	gTYPE
>

267 
	gS‹ãdVe˘‹
<
	gTYPE
>::
	$do_move_backw¨d
(* 
de°
, c⁄° * 
‰om
, 
size_t
 
num
) const {

268 
	`move_backw¨d_ty≥
–
ªöãΩªt_ˇ°
<
TYPE
*>(
de°
),ÑeöãΩªt_ˇ°<c⁄° TYPE*>(
‰om
), 
num
 );

269 
	}
}

271 
	gãm∂©e
<
˛ass
 
	gTYPE
>

272 
	gS‹ãdVe˘‹
<
	gTYPE
>::
	$do_com∑ª
(c⁄° * 
lhs
, c⁄° * 
rhs
) const {

273  
	`com∑ª_ty≥
–*
ªöãΩªt_ˇ°
<c⁄° 
TYPE
*>(
lhs
), *ªöãΩªt_ˇ°<c⁄° TYPE*>(
rhs
) );

274 
	}
}

	@jni/include/utils/StopWatch.h

17 #i‚de‡
ANDROID_STOPWATCH_H


18 
	#ANDROID_STOPWATCH_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
	~<utûs/Timîs.h
>

27 
«me•a˚
 
	g™droid
 {

29 ˛as†
	cSt›W©ch


31 
	gpublic
:

32 
St›W©ch
–c⁄° *
«me
,

33 
˛ock
 = 
SYSTEM_TIME_MONOTONIC
,

34 
uöt32_t
 
Êags
 = 0);

35 ~
St›W©ch
();

37 c⁄° * 
«me
() const;

38 
n£cs_t
 
œp
();

39 
n£cs_t
 
ñ≠£dTime
() const;

41 
	g¥iv©e
:

42 c⁄° * 
mName
;

43 
	gmClock
;

44 
uöt32_t
 
	gmFœgs
;

46 
	sœp_t
 {

47 
n£cs_t
 
	gsoF¨
;

48 
n£cs_t
 
	gthisL≠
;

51 
n£cs_t
 
	gmSèπTime
;

52 
œp_t
 
	gmL≠s
[8];

53 
	gmNumL≠s
;

	@jni/include/utils/String16.h

17 #i‚de‡
ANDROID_STRING16_H


18 
	#ANDROID_STRING16_H


	)

20 
	~<utûs/Eº‹s.h
>

21 
	~<utûs/Sh¨edBuf„r.h
>

23 
	~<°döt.h
>

24 
	~<sys/ty≥s.h
>

30 
uöt16_t
 
	tch¨16_t
;

33 
°rcmp16
(c⁄° 
ch¨16_t
 *, const char16_t *);

34 
°∫cmp16
(c⁄° 
ch¨16_t
 *
s1
, c⁄° ch¨16_à*
s2
, 
size_t
 
n
);

35 
size_t
 
°æí16
(c⁄° 
ch¨16_t
 *);

36 
size_t
 
°∫Àn16
(c⁄° 
ch¨16_t
 *, size_t);

37 
ch¨16_t
 *
°r˝y16
(char16_t *, const char16_t *);

38 
ch¨16_t
 *
°∫˝y16
(ch¨16_à*, c⁄° ch¨16_à*, 
size_t
);

47 
°rzcmp16
(c⁄° 
ch¨16_t
 *
s1
, 
size_t
 
n1
, c⁄° ch¨16_à*
s2
, size_à
n2
);

50 
°rzcmp16_h_n
(c⁄° 
ch¨16_t
 *
s1H
, 
size_t
 
n1
, c⁄° ch¨16_à*
s2N
, size_à
n2
);

53 
utf8_to_utf16
(c⁄° 
uöt8_t
 *
§c
, 
size_t
 
§cLí
, 
ch¨16_t
* 
d°
, c⁄° size_à
d°Lí
);

59 
«me•a˚
 
™droid
 {

63 
˛ass
 
Såög8
;

64 
˛ass
 
TextOuçut
;

67 ˛as†
	cSåög16


69 
public
:

70 
Såög16
();

71 
Såög16
(c⁄° Såög16& 
o
);

72 
Såög16
(c⁄° Såög16& 
o
,

73 
size_t
 
Àn
,

74 
size_t
 
begö
=0);

75 
ex∂icô
 
Såög16
(c⁄° 
ch¨16_t
* 
o
);

76 
ex∂icô
 
Såög16
(c⁄° 
ch¨16_t
* 
o
, 
size_t
 
Àn
);

77 
ex∂icô
 
Såög16
(c⁄° 
Såög8
& 
o
);

78 
ex∂icô
 
Såög16
(c⁄° * 
o
);

79 
ex∂icô
 
Såög16
(c⁄° * 
o
, 
size_t
 
Àn
);

81 ~
Såög16
();

83 
ölöe
 c⁄° 
ch¨16_t
* 
°rög
() const;

84 
ölöe
 
size_t
 
size
() const;

86 
ölöe
 c⁄° 
Sh¨edBuf„r
* 
sh¨edBuf„r
() const;

88 
£tTo
(c⁄° 
Såög16
& 
Ÿhî
);

89 
°©us_t
 
£tTo
(c⁄° 
ch¨16_t
* 
Ÿhî
);

90 
°©us_t
 
£tTo
(c⁄° 
ch¨16_t
* 
Ÿhî
, 
size_t
 
Àn
);

91 
°©us_t
 
£tTo
(c⁄° 
Såög16
& 
Ÿhî
,

92 
size_t
 
Àn
,

93 
size_t
 
begö
=0);

95 
°©us_t
 
≠≥nd
(c⁄° 
Såög16
& 
Ÿhî
);

96 
°©us_t
 
≠≥nd
(c⁄° 
ch¨16_t
* 
Ÿhî
, 
size_t
 
Àn
);

98 
ölöe
 
Såög16
& 
›î©‹
=(c⁄° Såög16& 
Ÿhî
);

100 
ölöe
 
Såög16
& 
›î©‹
+=(c⁄° Såög16& 
Ÿhî
);

101 
ölöe
 
Såög16
 
›î©‹
+(c⁄° Såög16& 
Ÿhî
) const;

103 
°©us_t
 
ö£π
(
size_t
 
pos
, c⁄° 
ch¨16_t
* 
chrs
);

104 
°©us_t
 
ö£π
(
size_t
 
pos
,

105 c⁄° 
ch¨16_t
* 
chrs
, 
size_t
 
Àn
);

107 
ssize_t
 
födFú°
(
ch¨16_t
 
c
) const;

108 
ssize_t
 
födLa°
(
ch¨16_t
 
c
) const;

110 
boﬁ
 
°¨tsWôh
(c⁄° 
Såög16
& 
¥efix
) const;

111 
boﬁ
 
°¨tsWôh
(c⁄° 
ch¨16_t
* 
¥efix
) const;

113 
°©us_t
 
makeLowî
();

115 
°©us_t
 
ª∂a˚AŒ
(
ch¨16_t
 
ª∂a˚This
,

116 
ch¨16_t
 
wôhThis
);

118 
°©us_t
 
ªmove
(
size_t
 
Àn
, size_à
begö
=0);

120 
ölöe
 
com∑ª
(c⁄° 
Såög16
& 
Ÿhî
) const;

122 
ölöe
 
boﬁ
 
›î©‹
<(c⁄° 
Såög16
& 
Ÿhî
) const;

123 
ölöe
 
boﬁ
 
›î©‹
<=(c⁄° 
Såög16
& 
Ÿhî
) const;

124 
ölöe
 
boﬁ
 
›î©‹
==(c⁄° 
Såög16
& 
Ÿhî
) const;

125 
ölöe
 
boﬁ
 
›î©‹
!=(c⁄° 
Såög16
& 
Ÿhî
) const;

126 
ölöe
 
boﬁ
 
›î©‹
>=(c⁄° 
Såög16
& 
Ÿhî
) const;

127 
ölöe
 
boﬁ
 
›î©‹
>(c⁄° 
Såög16
& 
Ÿhî
) const;

129 
ölöe
 
boﬁ
 
›î©‹
<(c⁄° 
ch¨16_t
* 
Ÿhî
) const;

130 
ölöe
 
boﬁ
 
›î©‹
<=(c⁄° 
ch¨16_t
* 
Ÿhî
) const;

131 
ölöe
 
boﬁ
 
›î©‹
==(c⁄° 
ch¨16_t
* 
Ÿhî
) const;

132 
ölöe
 
boﬁ
 
›î©‹
!=(c⁄° 
ch¨16_t
* 
Ÿhî
) const;

133 
ölöe
 
boﬁ
 
›î©‹
>=(c⁄° 
ch¨16_t
* 
Ÿhî
) const;

134 
ölöe
 
boﬁ
 
›î©‹
>(c⁄° 
ch¨16_t
* 
Ÿhî
) const;

136 
ölöe
 
›î©‹
 c⁄° 
ch¨16_t
*() const;

138 
¥iv©e
:

139 c⁄° 
ch¨16_t
* 
mSåög
;

142 
TextOuçut
& 
›î©‹
<<(TextOuçut& 
to
, c⁄° 
Såög16
& 
vÆ
);

147 
ölöe
 
	$com∑ª_ty≥
(c⁄° 
Såög16
& 
lhs
, c⁄° Såög16& 
rhs
)

149  
lhs
.
	`com∑ª
(
rhs
);

150 
	}
}

152 
ölöe
 
	$°ri˘ly_‹dî_ty≥
(c⁄° 
Såög16
& 
lhs
, c⁄° Såög16& 
rhs
)

154  
	`com∑ª_ty≥
(
lhs
, 
rhs
) < 0;

155 
	}
}

157 
ölöe
 c⁄° 
ch¨16_t
* 
Såög16
::
	$°rög
() const

159  
mSåög
;

160 
	}
}

162 
ölöe
 
size_t
 
Såög16
::
	$size
() const

164  
Sh¨edBuf„r
::
	`sizeFromD©a
(
mSåög
)/(
ch¨16_t
)-1;

165 
	}
}

167 
ölöe
 c⁄° 
Sh¨edBuf„r
* 
Såög16
::
	$sh¨edBuf„r
() const

169  
Sh¨edBuf„r
::
	`buf„rFromD©a
(
mSåög
);

170 
	}
}

172 
ölöe
 
Såög16
& Såög16::
›î©‹
=(c⁄° Såög16& 
Ÿhî
)

174 
£tTo
(
Ÿhî
);

175  *
this
;

178 
ölöe
 
Såög16
& Såög16::
›î©‹
+=(c⁄° Såög16& 
Ÿhî
)

180 
≠≥nd
(
Ÿhî
);

181  *
this
;

184 
ölöe
 
Såög16
 Såög16::
›î©‹
+(c⁄° Såög16& 
Ÿhî
) const

186 
Såög16
 
tmp
;

187 
tmp
 +
Ÿhî
;

188  
tmp
;

191 
ölöe
 
Såög16
::
	$com∑ª
(c⁄° 
Såög16
& 
Ÿhî
) const

193  
	`°rzcmp16
(
mSåög
, 
	`size
(), 
Ÿhî
.mString, other.size());

194 
	}
}

196 
ölöe
 
boﬁ
 
Såög16
::
›î©‹
<(c⁄° Såög16& 
Ÿhî
) const

198  
°rzcmp16
(
mSåög
, 
size
(), 
Ÿhî
.mString, other.size()) < 0;

201 
ölöe
 
boﬁ
 
Såög16
::
›î©‹
<=(c⁄° Såög16& 
Ÿhî
) const

203  
°rzcmp16
(
mSåög
, 
size
(), 
Ÿhî
.mString, other.size()) <= 0;

206 
ölöe
 
boﬁ
 
Såög16
::
›î©‹
==(c⁄° Såög16& 
Ÿhî
) const

208  
°rzcmp16
(
mSåög
, 
size
(), 
Ÿhî
.mString, other.size()) == 0;

211 
ölöe
 
boﬁ
 
Såög16
::
›î©‹
!=(c⁄° Såög16& 
Ÿhî
) const

213  
°rzcmp16
(
mSåög
, 
size
(), 
Ÿhî
.mString, other.size()) != 0;

216 
ölöe
 
boﬁ
 
Såög16
::
›î©‹
>=(c⁄° Såög16& 
Ÿhî
) const

218  
°rzcmp16
(
mSåög
, 
size
(), 
Ÿhî
.mString, other.size()) >= 0;

221 
ölöe
 
boﬁ
 
Såög16
::
›î©‹
>(c⁄° Såög16& 
Ÿhî
) const

223  
°rzcmp16
(
mSåög
, 
size
(), 
Ÿhî
.mString, other.size()) > 0;

226 
ölöe
 
boﬁ
 
Såög16
::
›î©‹
<(c⁄° 
ch¨16_t
* 
Ÿhî
) const

228  
°rcmp16
(
mSåög
, 
Ÿhî
) < 0;

231 
ölöe
 
boﬁ
 
Såög16
::
›î©‹
<=(c⁄° 
ch¨16_t
* 
Ÿhî
) const

233  
°rcmp16
(
mSåög
, 
Ÿhî
) <= 0;

236 
ölöe
 
boﬁ
 
Såög16
::
›î©‹
==(c⁄° 
ch¨16_t
* 
Ÿhî
) const

238  
°rcmp16
(
mSåög
, 
Ÿhî
) == 0;

241 
ölöe
 
boﬁ
 
Såög16
::
›î©‹
!=(c⁄° 
ch¨16_t
* 
Ÿhî
) const

243  
°rcmp16
(
mSåög
, 
Ÿhî
) != 0;

246 
ölöe
 
boﬁ
 
Såög16
::
›î©‹
>=(c⁄° 
ch¨16_t
* 
Ÿhî
) const

248  
°rcmp16
(
mSåög
, 
Ÿhî
) >= 0;

251 
ölöe
 
boﬁ
 
Såög16
::
›î©‹
>(c⁄° 
ch¨16_t
* 
Ÿhî
) const

253  
°rcmp16
(
mSåög
, 
Ÿhî
) > 0;

256 
ölöe
 
Såög16
::
›î©‹
 c⁄° 
ch¨16_t
*() const

258  
mSåög
;

	@jni/include/utils/String8.h

17 #i‚de‡
ANDROID_STRING8_H


18 
	#ANDROID_STRING8_H


	)

20 
	~<utûs/Eº‹s.h
>

24 
	~<utûs/Såög16.h
>

26 
	~<°döt.h
>

27 
	~<°rög.h
>

28 
	~<sys/ty≥s.h
>

34 
uöt32_t
 
	tch¨32_t
;

36 
size_t
 
°æí32
(c⁄° 
ch¨32_t
 *);

37 
size_t
 
°∫Àn32
(c⁄° 
ch¨32_t
 *, size_t);

53 
size_t
 
utf8_Àngth
(c⁄° *
§c
);

58 
size_t
 
utf32_Àngth
(c⁄° *
§c
, size_à
§c_Àn
);

63 
size_t
 
utf8_Àngth_‰om_utf16
(c⁄° 
ch¨16_t
 *
§c
, size_à
§c_Àn
);

68 
size_t
 
utf8_Àngth_‰om_utf32
(c⁄° 
ch¨32_t
 *
§c
, size_à
§c_Àn
);

77 
öt32_t
 
utf32_©
(c⁄° *
§c
, 
size_t
 
§c_Àn
,

78 
size_t
 
ödex
, size_à*
√xt_ödex
);

87 
size_t
 
utf8_to_utf32
(c⁄° * 
§c
, size_à
§c_Àn
,

88 
ch¨32_t
* 
d°
, 
size_t
 
d°_Àn
);

125 
size_t
 
utf32_to_utf8
(c⁄° 
ch¨32_t
* 
§c
, size_à
§c_Àn
,

126 * 
d°
, 
size_t
 
d°_Àn
);

128 
size_t
 
utf16_to_utf8
(c⁄° 
ch¨16_t
* 
§c
, size_à
§c_Àn
,

129 * 
d°
, 
size_t
 
d°_Àn
);

135 
«me•a˚
 
™droid
 {

137 
˛ass
 
TextOuçut
;

141 ˛as†
	cSåög8


143 
public
:

144 
Såög8
();

145 
Såög8
(c⁄° Såög8& 
o
);

146 
ex∂icô
 
Såög8
(c⁄° * 
o
);

147 
ex∂icô
 
Såög8
(c⁄° * 
o
, 
size_t
 
numCh¨s
);

149 
ex∂icô
 
Såög8
(c⁄° 
Såög16
& 
o
);

150 
ex∂icô
 
Såög8
(c⁄° 
ch¨16_t
* 
o
);

151 
ex∂icô
 
Såög8
(c⁄° 
ch¨16_t
* 
o
, 
size_t
 
numCh¨s
);

152 
ex∂icô
 
Såög8
(c⁄° 
ch¨32_t
* 
o
);

153 
ex∂icô
 
Såög8
(c⁄° 
ch¨32_t
* 
o
, 
size_t
 
numCh¨s
);

154 ~
Såög8
();

156 
ölöe
 c⁄° * 
°rög
() const;

157 
ölöe
 
size_t
 
size
() const;

158 
ölöe
 
size_t
 
Àngth
() const;

159 
ölöe
 
size_t
 
byãs
() const;

161 
ölöe
 c⁄° 
Sh¨edBuf„r
* 
sh¨edBuf„r
() const;

163 
£tTo
(c⁄° 
Såög8
& 
Ÿhî
);

164 
°©us_t
 
£tTo
(c⁄° * 
Ÿhî
);

165 
°©us_t
 
£tTo
(c⁄° * 
Ÿhî
, 
size_t
 
numCh¨s
);

166 
°©us_t
 
£tTo
(c⁄° 
ch¨16_t
* 
Ÿhî
, 
size_t
 
numCh¨s
);

167 
°©us_t
 
£tTo
(c⁄° 
ch¨32_t
* 
Ÿhî
,

168 
size_t
 
Àngth
);

170 
°©us_t
 
≠≥nd
(c⁄° 
Såög8
& 
Ÿhî
);

171 
°©us_t
 
≠≥nd
(c⁄° * 
Ÿhî
);

172 
°©us_t
 
≠≥nd
(c⁄° * 
Ÿhî
, 
size_t
 
numCh¨s
);

176 
size_t
 
gëUtf32Lígth
() const;

177 
öt32_t
 
gëUtf32At
(
size_t
 
ödex
,

178 
size_t
 *
√xt_ödex
) const;

179 
size_t
 
gëUtf32
(
ch¨32_t
* 
d°
, size_à
d°_Àn
) const;

181 
ölöe
 
Såög8
& 
›î©‹
=(c⁄° Såög8& 
Ÿhî
);

182 
ölöe
 
Såög8
& 
›î©‹
=(c⁄° * 
Ÿhî
);

184 
ölöe
 
Såög8
& 
›î©‹
+=(c⁄° Såög8& 
Ÿhî
);

185 
ölöe
 
Såög8
 
›î©‹
+(c⁄° Såög8& 
Ÿhî
) const;

187 
ölöe
 
Såög8
& 
›î©‹
+=(c⁄° * 
Ÿhî
);

188 
ölöe
 
Såög8
 
›î©‹
+(c⁄° * 
Ÿhî
) const;

190 
ölöe
 
com∑ª
(c⁄° 
Såög8
& 
Ÿhî
) const;

192 
ölöe
 
boﬁ
 
›î©‹
<(c⁄° 
Såög8
& 
Ÿhî
) const;

193 
ölöe
 
boﬁ
 
›î©‹
<=(c⁄° 
Såög8
& 
Ÿhî
) const;

194 
ölöe
 
boﬁ
 
›î©‹
==(c⁄° 
Såög8
& 
Ÿhî
) const;

195 
ölöe
 
boﬁ
 
›î©‹
!=(c⁄° 
Såög8
& 
Ÿhî
) const;

196 
ölöe
 
boﬁ
 
›î©‹
>=(c⁄° 
Såög8
& 
Ÿhî
) const;

197 
ölöe
 
boﬁ
 
›î©‹
>(c⁄° 
Såög8
& 
Ÿhî
) const;

199 
ölöe
 
boﬁ
 
›î©‹
<(c⁄° * 
Ÿhî
) const;

200 
ölöe
 
boﬁ
 
›î©‹
<=(c⁄° * 
Ÿhî
) const;

201 
ölöe
 
boﬁ
 
›î©‹
==(c⁄° * 
Ÿhî
) const;

202 
ölöe
 
boﬁ
 
›î©‹
!=(c⁄° * 
Ÿhî
) const;

203 
ölöe
 
boﬁ
 
›î©‹
>=(c⁄° * 
Ÿhî
) const;

204 
ölöe
 
boﬁ
 
›î©‹
>(c⁄° * 
Ÿhî
) const;

206 
ölöe
 
›î©‹
 const *() const;

208 * 
lockBuf„r
(
size_t
 
size
);

209 
u∆ockBuf„r
();

210 
°©us_t
 
u∆ockBuf„r
(
size_t
 
size
);

214 
ssize_t
 
föd
(c⁄° * 
Ÿhî
, 
size_t
 
°¨t
 = 0) const;

216 
toLowî
();

217 
toLowî
(
size_t
 
°¨t
, size_à
numCh¨s
);

218 
toUµî
();

219 
toUµî
(
size_t
 
°¨t
, size_à
numCh¨s
);

230 
£tP©hName
(c⁄° * 
«me
);

231 
£tP©hName
(c⁄° * 
«me
, 
size_t
 
numCh¨s
);

238 
Såög8
 
gëP©hLóf
() const;

248 
Såög8
 
gëP©hDú
() const;

258 
Såög8
 
wÆkP©h
(Såög8* 
outRemaös
 = 
NULL
) const;

271 
Såög8
 
gëP©hExãnsi⁄
() const;

279 
Såög8
 
gëBa£P©h
() const;

289 
Såög8
& 
≠≥ndP©h
(c⁄° * 
Àaf
);

290 
Såög8
& 
≠≥ndP©h
(c⁄° Såög8& 
Àaf
Ë{ áµídP©h÷óf.
°rög
()); }

295 
Såög8
 
≠≥ndP©hC›y
(c⁄° * 
Àaf
) const

296 { 
Såög8
 
p
(*
this
);Ö.
≠≥ndP©h
(
Àaf
); Ö; }

297 
Såög8
 
≠≥ndP©hC›y
(c⁄° Såög8& 
Àaf
Ëc⁄° { áµídP©hC›y÷óf.
°rög
()); }

306 
Såög8
& 
c⁄vîtToResP©h
();

308 
¥iv©e
:

309 
°©us_t
 
ªÆ_≠≥nd
(c⁄° * 
Ÿhî
, 
size_t
 
numCh¨s
);

310 * 
föd_exãnsi⁄
() const;

312 c⁄° * 
mSåög
;

315 
TextOuçut
& 
›î©‹
<<(TextOuçut& 
to
, c⁄° 
Såög16
& 
vÆ
);

320 
ölöe
 
	$com∑ª_ty≥
(c⁄° 
Såög8
& 
lhs
, c⁄° Såög8& 
rhs
)

322  
lhs
.
	`com∑ª
(
rhs
);

323 
	}
}

325 
ölöe
 
	$°ri˘ly_‹dî_ty≥
(c⁄° 
Såög8
& 
lhs
, c⁄° Såög8& 
rhs
)

327  
	`com∑ª_ty≥
(
lhs
, 
rhs
) < 0;

328 
	}
}

330 
ölöe
 c⁄° * 
Såög8
::
	$°rög
() const

332  
mSåög
;

333 
	}
}

335 
ölöe
 
size_t
 
Såög8
::
	$Àngth
() const

337  
Sh¨edBuf„r
::
	`sizeFromD©a
(
mSåög
)-1;

338 
	}
}

340 
ölöe
 
size_t
 
Såög8
::
	$size
() const

342  
	`Àngth
();

343 
	}
}

345 
ölöe
 
size_t
 
Såög8
::
	$byãs
() const

347  
Sh¨edBuf„r
::
	`sizeFromD©a
(
mSåög
)-1;

348 
	}
}

350 
ölöe
 c⁄° 
Sh¨edBuf„r
* 
Såög8
::
	$sh¨edBuf„r
() const

352  
Sh¨edBuf„r
::
	`buf„rFromD©a
(
mSåög
);

353 
	}
}

355 
ölöe
 
Såög8
& Såög8::
›î©‹
=(c⁄° Såög8& 
Ÿhî
)

357 
£tTo
(
Ÿhî
);

358  *
this
;

361 
ölöe
 
Såög8
& Såög8::
›î©‹
=(c⁄° * 
Ÿhî
)

363 
£tTo
(
Ÿhî
);

364  *
this
;

367 
ölöe
 
Såög8
& Såög8::
›î©‹
+=(c⁄° Såög8& 
Ÿhî
)

369 
≠≥nd
(
Ÿhî
);

370  *
this
;

373 
ölöe
 
Såög8
 Såög8::
›î©‹
+(c⁄° Såög8& 
Ÿhî
) const

375 
Såög8
 
tmp
;

376 
tmp
 +
Ÿhî
;

377  
tmp
;

380 
ölöe
 
Såög8
& Såög8::
›î©‹
+=(c⁄° * 
Ÿhî
)

382 
≠≥nd
(
Ÿhî
);

383  *
this
;

386 
ölöe
 
Såög8
 Såög8::
›î©‹
+(c⁄° * 
Ÿhî
) const

388 
Såög8
 
tmp
;

389 
tmp
 +
Ÿhî
;

390  
tmp
;

393 
ölöe
 
Såög8
::
	$com∑ª
(c⁄° 
Såög8
& 
Ÿhî
) const

395  
	`°rcmp
(
mSåög
, 
Ÿhî
.mString);

396 
	}
}

398 
ölöe
 
boﬁ
 
Såög8
::
›î©‹
<(c⁄° Såög8& 
Ÿhî
) const

400  
°rcmp
(
mSåög
, 
Ÿhî
.mString) < 0;

403 
ölöe
 
boﬁ
 
Såög8
::
›î©‹
<=(c⁄° Såög8& 
Ÿhî
) const

405  
°rcmp
(
mSåög
, 
Ÿhî
.mString) <= 0;

408 
ölöe
 
boﬁ
 
Såög8
::
›î©‹
==(c⁄° Såög8& 
Ÿhî
) const

410  
°rcmp
(
mSåög
, 
Ÿhî
.mString) == 0;

413 
ölöe
 
boﬁ
 
Såög8
::
›î©‹
!=(c⁄° Såög8& 
Ÿhî
) const

415  
°rcmp
(
mSåög
, 
Ÿhî
.mString) != 0;

418 
ölöe
 
boﬁ
 
Såög8
::
›î©‹
>=(c⁄° Såög8& 
Ÿhî
) const

420  
°rcmp
(
mSåög
, 
Ÿhî
.mString) >= 0;

423 
ölöe
 
boﬁ
 
Såög8
::
›î©‹
>(c⁄° Såög8& 
Ÿhî
) const

425  
°rcmp
(
mSåög
, 
Ÿhî
.mString) > 0;

428 
ölöe
 
boﬁ
 
Såög8
::
›î©‹
<(c⁄° * 
Ÿhî
) const

430  
°rcmp
(
mSåög
, 
Ÿhî
) < 0;

433 
ölöe
 
boﬁ
 
Såög8
::
›î©‹
<=(c⁄° * 
Ÿhî
) const

435  
°rcmp
(
mSåög
, 
Ÿhî
) <= 0;

438 
ölöe
 
boﬁ
 
Såög8
::
›î©‹
==(c⁄° * 
Ÿhî
) const

440  
°rcmp
(
mSåög
, 
Ÿhî
) == 0;

443 
ölöe
 
boﬁ
 
Såög8
::
›î©‹
!=(c⁄° * 
Ÿhî
) const

445  
°rcmp
(
mSåög
, 
Ÿhî
) != 0;

448 
ölöe
 
boﬁ
 
Såög8
::
›î©‹
>=(c⁄° * 
Ÿhî
) const

450  
°rcmp
(
mSåög
, 
Ÿhî
) >= 0;

453 
ölöe
 
boﬁ
 
Såög8
::
›î©‹
>(c⁄° * 
Ÿhî
) const

455  
°rcmp
(
mSåög
, 
Ÿhî
) > 0;

458 
ölöe
 
Såög8
::
›î©‹
 const *() const

460  
mSåög
;

	@jni/include/utils/StringArray.h

20 #i‚de‡
_LIBS_UTILS_STRING_ARRAY_H


21 
	#_LIBS_UTILS_STRING_ARRAY_H


	)

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

26 
«me•a˚
 
	g™droid
 {

31 ˛as†
	cSåögAºay
 {

32 
	gpublic
:

33 
SåögAºay
();

34 
	gvútuÆ
 ~
SåögAºay
();

39 
boﬁ
 
push_back
(c⁄° * 
°r
);

44 
îa£
(
idx
);

49 
s‹t
((*
com∑ª
)(const *, const *));

54 
cmpAs˚ndögAÕha
(c⁄° * 
p°r1
, c⁄° * 
p°r2
);

59 
ölöe
 
size
(Ëc⁄° {  
	gmCuºít
; }

65 c⁄° * 
gëE¡ry
(
idx
) const {

66  ((
	gidx
Ë>(
mCuºít
)Ë? 
NULL
 : 
mAºay
[
idx
];

73 
£tE¡ry
(
idx
, c⁄° * 
°r
);

75 
	g¥iv©e
:

76 
mMax
;

77 
	gmCuºít
;

78 ** 
	gmAºay
;

	@jni/include/utils/SystemClock.h

17 #i‚de‡
ANDROID_UTILS_SYSTEMCLOCK_H


18 
	#ANDROID_UTILS_SYSTEMCLOCK_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 
«me•a˚
 
	g™droid
 {

25 
£tCuºítTimeMûlis
(
öt64_t
 
mûlis
);

26 
öt64_t
 
u±imeMûlis
();

27 
öt64_t
 
ñ≠£dRó…ime
();

	@jni/include/utils/TextOutput.h

17 #i‚de‡
ANDROID_TEXTOUTPUT_H


18 
	#ANDROID_TEXTOUTPUT_H


	)

20 
	~<utûs/Eº‹s.h
>

22 
	~<°döt.h
>

23 
	~<°rög.h
>

26 
«me•a˚
 
	g™droid
 {

28 ˛as†
	cTextOuçut


30 
	gpublic
:

31 
TextOuçut
();

32 
	gvútuÆ
 ~
TextOuçut
();

34 
vútuÆ
 
°©us_t
 
¥öt
(c⁄° * 
txt
, 
size_t
 
Àn
) = 0;

35 
vútuÆ
 
moveIndít
(
dñè
) = 0;

37 ˛as†
	cBundÀ
 {

38 
	gpublic
:

39 
ölöe
 
BundÀ
(
TextOuçut
& 
to
Ë: 
mTO
—oË{Åo.
pushBundÀ
(); }

40 
	gölöe
 ~
BundÀ
(Ë{ 
	gmTO
.
p›BundÀ
(); }

41 
	g¥iv©e
:

42 
TextOuçut
& 
mTO
;

45 
vútuÆ
 
pushBundÀ
() = 0;

46 
vútuÆ
 
p›BundÀ
() = 0;

52 
TextOuçut
& 
Æog
;

55 
TextOuçut
& 
aout
;

58 
TextOuçut
& 
´º
;

60 
	gTextOuçut
& (*
	tTextOuçutM™ùFunc
)(
	tTextOuçut
&);

62 
	gTextOuçut
& 
ídl
(
TextOuçut
& 
to
);

63 
	gTextOuçut
& 
ödít
(
TextOuçut
& 
to
);

64 
	gTextOuçut
& 
dedít
(
TextOuçut
& 
to
);

66 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, c⁄° * 
	g°r
);

67 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, );

68 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, 
	gboﬁ
);

69 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, );

70 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, );

71 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, );

72 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, );

73 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, );

74 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, );

75 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, );

76 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, );

77 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, 
TextOuçutM™ùFunc
 
	gfunc
);

78 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, const *);

80 ˛as†
	cTy≥Code


82 
	gpublic
:

83 
ölöe
 
Ty≥Code
(
uöt32_t
 
code
);

84 
	gölöe
 ~
Ty≥Code
();

86 
ölöe
 
uöt32_t
 
ty≥Code
() const;

88 
	g¥iv©e
:

89 
uöt32_t
 
mCode
;

92 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, c⁄° 
	gTy≥Code
& 
	gvÆ
);

94 ˛as†
	cHexDump


96 
	gpublic
:

97 
HexDump
(c⁄° *
buf
, 
size_t
 
size
, size_à
byãsPîLöe
=16);

98 
	gölöe
 ~
HexDump
();

100 
ölöe
 
	gHexDump
& 
£tByãsPîLöe
(
size_t
 
byãsPîLöe
);

101 
ölöe
 
	gHexDump
& 
£tSögÀLöeCutoff
(
öt32_t
 
byãs
);

102 
ölöe
 
	gHexDump
& 
£tAlignmít
(
size_t
 
Æignmít
);

103 
ölöe
 
	gHexDump
& 
£tCAºayStyÀ
(
boﬁ
 
íabÀd
);

105 
ölöe
 c⁄° * 
buf„r
() const;

106 
ölöe
 
size_t
 
size
() const;

107 
ölöe
 
size_t
 
byãsPîLöe
() const;

108 
ölöe
 
öt32_t
 
sögÀLöeCutoff
() const;

109 
ölöe
 
size_t
 
Æignmít
() const;

110 
ölöe
 
boﬁ
 
ˇºayStyÀ
() const;

112 
	g¥iv©e
:

113 c⁄° * 
mBuf„r
;

114 
size_t
 
	gmSize
;

115 
size_t
 
	gmByãsPîLöe
;

116 
öt32_t
 
	gmSögÀLöeCutoff
;

117 
size_t
 
	gmAlignmít
;

118 
boﬁ
 
	gmCAºayStyÀ
;

121 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, c⁄° 
	gHexDump
& 
	gvÆ
);

126 
ölöe
 
	gTextOuçut
& 
	$ídl
(
TextOuçut
& 
to
)

128 
to
.
	`¥öt
("\n", 1);

129  
to
;

130 
	}
}

132 
ölöe
 
	gTextOuçut
& 
	$ödít
(
TextOuçut
& 
to
)

134 
to
.
	`moveIndít
(1);

135  
to
;

136 
	}
}

138 
ölöe
 
	gTextOuçut
& 
	$dedít
(
TextOuçut
& 
to
)

140 
to
.
	`moveIndít
(-1);

141  
to
;

142 
	}
}

144 
ölöe
 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, c⁄° * 
	g°r
)

146 
	gto
.
¥öt
(
°r
, 
°æí
(str));

147  
	gto
;

150 
ölöe
 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, 
	gc
)

152 
	gto
.
¥öt
(&
c
, 1);

153  
	gto
;

156 
ölöe
 
	gTextOuçut
& 
	g›î©‹
<<(TextOuçut& 
	gto
, 
TextOuçutM™ùFunc
 
	gfunc
)

158  (*
	gfunc
)(
	gto
);

161 
ölöe
 
	gTy≥Code
::
	$Ty≥Code
(
uöt32_t
 
code
Ë: 
	$mCode
(
code
Ë{ 
	}
}

162 
ölöe
 
Ty≥Code
::~
	$Ty≥Code
(Ë{ 
	}
}

163 
ölöe
 
uöt32_t
 
Ty≥Code
::
	$ty≥Code
(Ëc⁄° {  
mCode
; 
	}
}

165 
ölöe
 
	gHexDump
::~
	$HexDump
(Ë{ 
	}
}

167 
ölöe
 
HexDump
& HexDump::
	$£tByãsPîLöe
(
size_t
 
byãsPîLöe
) {

168 
mByãsPîLöe
 = 
byãsPîLöe
;  *
this
;

169 
	}
}

170 
ölöe
 
	gHexDump
& HexDump::
	$£tSögÀLöeCutoff
(
öt32_t
 
byãs
) {

171 
mSögÀLöeCutoff
 = 
byãs
;  *
this
;

172 
	}
}

173 
ölöe
 
	gHexDump
& HexDump::
	$£tAlignmít
(
size_t
 
Æignmít
) {

174 
mAlignmít
 = 
Æignmít
;  *
this
;

175 
	}
}

176 
ölöe
 
	gHexDump
& HexDump::
	$£tCAºayStyÀ
(
boﬁ
 
íabÀd
) {

177 
mCAºayStyÀ
 = 
íabÀd
;  *
this
;

178 
	}
}

180 
ölöe
 c⁄° * 
	gHexDump
::
	$buf„r
(Ëc⁄° {  
mBuf„r
; 
	}
}

181 
ölöe
 
size_t
 
	gHexDump
::
	$size
(Ëc⁄° {  
mSize
; 
	}
}

182 
ölöe
 
size_t
 
	gHexDump
::
	$byãsPîLöe
(Ëc⁄° {  
mByãsPîLöe
; 
	}
}

183 
ölöe
 
öt32_t
 
	gHexDump
::
	$sögÀLöeCutoff
(Ëc⁄° {  
mSögÀLöeCutoff
; 
	}
}

184 
ölöe
 
size_t
 
	gHexDump
::
	$Æignmít
(Ëc⁄° {  
mAlignmít
; 
	}
}

185 
ölöe
 
boﬁ
 
	gHexDump
::
	$ˇºayStyÀ
(Ëc⁄° {  
mCAºayStyÀ
; 
	}
}

	@jni/include/utils/Timers.h

20 #i‚de‡
_LIBS_UTILS_TIMERS_H


21 
	#_LIBS_UTILS_TIMERS_H


	)

23 
	~<°döt.h
>

24 
	~<sys/ty≥s.h
>

25 
	~<sys/time.h
>

30 #ifde‡
__˝lu•lus


34 
öt64_t
 
	tn£cs_t
;

36 
ölöe
 
n£cs_t
 
£c⁄ds_to_«no£c⁄ds
“£cs_à
£cs
)

38  
£cs
*1000000000;

41 
ölöe
 
n£cs_t
 
mûli£c⁄ds_to_«no£c⁄ds
“£cs_à
£cs
)

43  
£cs
*1000000;

46 
ölöe
 
n£cs_t
 
mi¸o£c⁄ds_to_«no£c⁄ds
“£cs_à
£cs
)

48  
£cs
*1000;

51 
ölöe
 
n£cs_t
 
«no£c⁄ds_to_£c⁄ds
“£cs_à
£cs
)

53  
£cs
/1000000000;

56 
ölöe
 
n£cs_t
 
«no£c⁄ds_to_mûli£c⁄ds
“£cs_à
£cs
)

58  
£cs
/1000000;

61 
ölöe
 
n£cs_t
 
«no£c⁄ds_to_mi¸o£c⁄ds
“£cs_à
£cs
)

63  
£cs
/1000;

66 
ölöe
 
n£cs_t
 
s2ns
“£cs_à
v
Ë{ 
£c⁄ds_to_«no£c⁄ds
(v);}

67 
ölöe
 
n£cs_t
 
ms2ns
“£cs_à
v
Ë{ 
mûli£c⁄ds_to_«no£c⁄ds
(v);}

68 
ölöe
 
n£cs_t
 
us2ns
“£cs_à
v
Ë{ 
mi¸o£c⁄ds_to_«no£c⁄ds
(v);}

69 
ölöe
 
n£cs_t
 
ns2s
“£cs_à
v
Ë{ 
«no£c⁄ds_to_£c⁄ds
(v);}

70 
ölöe
 
n£cs_t
 
ns2ms
“£cs_à
v
Ë{ 
«no£c⁄ds_to_mûli£c⁄ds
(v);}

71 
ölöe
 
n£cs_t
 
ns2us
“£cs_à
v
Ë{ 
«no£c⁄ds_to_mi¸o£c⁄ds
(v);}

73 
ölöe
 
n£cs_t
 
£c⁄ds
“£cs_à
v
Ë{  
s2ns
(v); }

74 
ölöe
 
n£cs_t
 
mûli£c⁄ds
“£cs_à
v
Ë{  
ms2ns
(v); }

75 
ölöe
 
n£cs_t
 
mi¸o£c⁄ds
“£cs_à
v
Ë{  
us2ns
(v); }

78 
SYSTEM_TIME_REALTIME
 = 0,

79 
SYSTEM_TIME_MONOTONIC
 = 1,

80 
SYSTEM_TIME_PROCESS
 = 2,

81 
SYSTEM_TIME_THREAD
 = 3

85 #ifde‡
__˝lu•lus


86 
n£cs_t
 
sy°emTime
(
˛ock
 = 
SYSTEM_TIME_MONOTONIC
);

88 
n£cs_t
 
sy°emTime
(
˛ock
);

91 #ifde‡
__˝lu•lus


98 #ifde‡
__˝lu•lus


100 
«me•a˚
 
™droid
 {

106 ˛as†
	cDuøti⁄Timî
 {

107 
public
:

108 
Duøti⁄Timî
() {}

109 ~
Duøti⁄Timî
() {}

112 
°¨t
();

114 
°›
();

116 
duøti⁄U£cs
() const;

120 
subåa˘TimevÆs
(c⁄° 
timevÆ
* 
±v1
,

121 c⁄° 
timevÆ
* 
±v2
);

124 
addToTimevÆ
(
timevÆ
* 
±v
, 
u£c
);

126 
¥iv©e
:

127 
timevÆ
 
mSèπWhí
;

128 
timevÆ
 
mSt›Whí
;

	@jni/include/utils/TypeHelpers.h

17 #i‚de‡
ANDROID_TYPE_HELPERS_H


18 
	#ANDROID_TYPE_HELPERS_H


	)

20 
	~<√w
>

21 
	~<°döt.h
>

22 
	~<°rög.h
>

23 
	~<sys/ty≥s.h
>

27 
«me•a˚
 
	g™droid
 {

33 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	såaô_åivül_˘‹
 {Énum { 
	gvÆue
 = 
Ál£
 }; };

34 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	såaô_åivül_dt‹
 {Énum { 
	gvÆue
 = 
Ál£
 }; };

35 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	såaô_åivül_c›y
 {Énum { 
	gvÆue
 = 
Ál£
 }; };

36 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	såaô_åivül_move
 {Énum { 
	gvÆue
 = 
Ál£
 }; };

37 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	såaô_poöãr
 {Énum { 
	gvÆue
 = 
Ál£
 }; };

38 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	gåaô_poöãr
<T*> {Énum { 
	gvÆue
 = 
åue
 }; };

41 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
˛ass
 
	g•
;

42 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	gåaô_åivül_move
< 
	g•
<T> >{

43 íum { 
	gvÆue
 = 
åue
 };

47 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
˛ass
 
	gwp
;

48 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	gåaô_åivül_move
< 
	gwp
<T> >{

49 íum { 
	gvÆue
 = 
åue
 };

52 
	gãm∂©e
 <
ty≥«me
 
	gTYPE
>

53 
	såaôs
 {

56 
	gis_poöãr
 = 
åaô_poöãr
<
TYPE
>::
vÆue
,

58 
	ghas_åivül_˘‹
 = 
is_poöãr
 || 
åaô_åivül_˘‹
<
TYPE
>::
vÆue
,

60 
	ghas_åivül_dt‹
 = 
is_poöãr
 || 
åaô_åivül_dt‹
<
TYPE
>::
vÆue
,

62 
	ghas_åivül_c›y
 = 
is_poöãr
 || 
åaô_åivül_c›y
<
TYPE
>::
vÆue
,

64 
	ghas_åivül_move
 = 
is_poöãr
 || 
åaô_åivül_move
<
TYPE
>::
vÆue


68 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

69 
	saggªg©e_åaôs
 {

71 
	gis_poöãr
 = 
Ál£
,

72 
	ghas_åivül_˘‹
 =

73 
åaôs
<
T
>::
has_åivül_˘‹
 &&Åøôs<
U
>::has_trivial_ctor,

74 
	ghas_åivül_dt‹
 =

75 
åaôs
<
T
>::
has_åivül_dt‹
 &&Åøôs<
U
>::has_trivial_dtor,

76 
	ghas_åivül_c›y
 =

77 
åaôs
<
T
>::
has_åivül_c›y
 &&Åøôs<
U
>::has_trivial_copy,

78 
	ghas_åivül_move
 =

79 
åaôs
<
T
>::
has_åivül_move
 &&Åøôs<
U
>::has_trivial_move

83 
	#ANDROID_BASIC_TYPES_TRAITS
–
T
 ) \

84 
ãm∂©e
<> 
åaô_åivül_˘‹
< 
T
 > {Énum { 
vÆue
 = 
åue
 }; }; \

85 
ãm∂©e
<> 
åaô_åivül_dt‹
< 
T
 > {Énum { 
vÆue
 = 
åue
 }; }; \

86 
ãm∂©e
<> 
åaô_åivül_c›y
< 
T
 > {Énum { 
vÆue
 = 
åue
 }; }; \

87 
ãm∂©e
<> 
åaô_åivül_move
< 
T
 > {Énum { 
vÆue
 = 
åue
 }; };

	)

95 
ANDROID_BASIC_TYPES_TRAITS
( )

96 
ANDROID_BASIC_TYPES_TRAITS
–
boﬁ
 )

97 
ANDROID_BASIC_TYPES_TRAITS
( )

98 
ANDROID_BASIC_TYPES_TRAITS
( )

99 
ANDROID_BASIC_TYPES_TRAITS
( )

100 
ANDROID_BASIC_TYPES_TRAITS
( )

101 
ANDROID_BASIC_TYPES_TRAITS
( )

102 
ANDROID_BASIC_TYPES_TRAITS
( )

103 
ANDROID_BASIC_TYPES_TRAITS
( )

104 
ANDROID_BASIC_TYPES_TRAITS
( )

105 
ANDROID_BASIC_TYPES_TRAITS
( )

106 
ANDROID_BASIC_TYPES_TRAITS
( )

107 
ANDROID_BASIC_TYPES_TRAITS
( )

108 
ANDROID_BASIC_TYPES_TRAITS
( )

117 
	gãm∂©e
<
ty≥«me
 
	gTYPE
> 
ölöe


118 
°ri˘ly_‹dî_ty≥
(c⁄° 
TYPE
& 
lhs
, c⁄° TYPE& 
rhs
) {

119  (
	glhs
 < 
	grhs
) ? 1 : 0;

122 
	gãm∂©e
<
ty≥«me
 
	gTYPE
> 
ölöe


123 
com∑ª_ty≥
(c⁄° 
TYPE
& 
lhs
, c⁄° TYPE& 
rhs
) {

124  
°ri˘ly_‹dî_ty≥
(
rhs
, 
lhs
) - strictly_order_type(lhs,Ñhs);

131 
	gãm∂©e
<
ty≥«me
 
	gTYPE
> 
ölöe


132 
c⁄°ru˘_ty≥
(
TYPE
* 
p
, 
size_t
 
n
) {

133 i‡(!
	gåaôs
<
	gTYPE
>::
has_åivül_˘‹
) {

134 
n
--) {

135 
√w
(
p
++Ë
TYPE
;

140 
	gãm∂©e
<
ty≥«me
 
	gTYPE
> 
ölöe


141 
de°roy_ty≥
(
TYPE
* 
p
, 
size_t
 
n
) {

142 i‡(!
	gåaôs
<
	gTYPE
>::
has_åivül_dt‹
) {

143 
n
--) {

144 
p
->~
TYPE
();

145 
	gp
++;

150 
	gãm∂©e
<
ty≥«me
 
	gTYPE
> 
ölöe


151 
c›y_ty≥
(
TYPE
* 
d
, c⁄° TYPE* 
s
, 
size_t
 
n
) {

152 i‡(!
	gåaôs
<
	gTYPE
>::
has_åivül_c›y
) {

153 
n
--) {

154 
√w
(
d
Ë
TYPE
(*
s
);

155 
	gd
++, 
	gs
++;

158 
mem˝y
(
d
,
s
,
n
*(
TYPE
));

162 
	gãm∂©e
<
ty≥«me
 
	gTYPE
> 
ölöe


163 
•œt_ty≥
(
TYPE
* 
whîe
, c⁄° TYPE* 
wh©
, 
size_t
 
n
) {

164 i‡(!
	gåaôs
<
	gTYPE
>::
has_åivül_c›y
) {

165 
n
--) {

166 
√w
(
whîe
Ë
TYPE
(*
wh©
);

167 
	gwhîe
++;

170 
	gn
--) {

171 *
	gwhîe
++ = *
wh©
;

176 
	gãm∂©e
<
ty≥«me
 
	gTYPE
> 
ölöe


177 
move_f‹w¨d_ty≥
(
TYPE
* 
d
, c⁄° TYPE* 
s
, 
size_t
 
n
 = 1) {

178 i‡((
åaôs
<
TYPE
>::
has_åivül_dt‹
 &&Åøôs<TYPE>::
has_åivül_c›y
)

179 || 
åaôs
<
TYPE
>::
has_åivül_move
)

181 
memmove
(
d
,
s
,
n
*(
TYPE
));

183 
	gd
 +
n
;

184 
	gs
 +
n
;

185 
	gn
--) {

186 --
	gd
, --
	gs
;

187 i‡(!
	gåaôs
<
	gTYPE
>::
has_åivül_c›y
) {

188 
√w
(
d
Ë
TYPE
(*
s
);

190 *
	gd
 = *
s
;

192 i‡(!
	gåaôs
<
	gTYPE
>::
has_åivül_dt‹
) {

193 
s
->~
TYPE
();

199 
	gãm∂©e
<
ty≥«me
 
	gTYPE
> 
ölöe


200 
move_backw¨d_ty≥
(
TYPE
* 
d
, c⁄° TYPE* 
s
, 
size_t
 
n
 = 1) {

201 i‡((
åaôs
<
TYPE
>::
has_åivül_dt‹
 &&Åøôs<TYPE>::
has_åivül_c›y
)

202 || 
åaôs
<
TYPE
>::
has_åivül_move
)

204 
memmove
(
d
,
s
,
n
*(
TYPE
));

206 
	gn
--) {

207 i‡(!
	gåaôs
<
	gTYPE
>::
has_åivül_c›y
) {

208 
√w
(
d
Ë
TYPE
(*
s
);

210 *
	gd
 = *
s
;

212 i‡(!
	gåaôs
<
	gTYPE
>::
has_åivül_dt‹
) {

213 
s
->~
TYPE
();

215 
	gd
++, 
	gs
++;

227 
	gãm∂©e
 <
ty≥«me
 
	gKEY
,Åy≥«mê
	gVALUE
>

228 
	skey_vÆue_∑ú_t
 {

229 
KEY
 
	gkey
;

230 
VALUE
 
	gvÆue
;

231 
key_vÆue_∑ú_t
() { }

232 
key_vÆue_∑ú_t
(c⁄° key_vÆue_∑ú_t& 
o
Ë: 
key
(o.key), 
vÆue
(o.value) { }

233 
key_vÆue_∑ú_t
(c⁄° 
KEY
& 
k
, c⁄° 
VALUE
& 
v
Ë: 
key
(k), 
vÆue
(v) { }

234 
key_vÆue_∑ú_t
(c⁄° 
KEY
& 
k
Ë: 
key
(k) { }

235 
ölöe
 
boﬁ
 
›î©‹
 < (c⁄° 
key_vÆue_∑ú_t
& 
o
) const {

236  
°ri˘ly_‹dî_ty≥
(
key
, 
o
.key);

240 
	gãm∂©e
<>

241 
	gãm∂©e
 <
ty≥«me
 
	gK
,Åy≥«mê
	gV
>

242 
	gåaô_åivül_˘‹
< 
	gkey_vÆue_∑ú_t
<
	gK
, 
	gV
> >

243 {Énum { 
	gvÆue
 = 
aggªg©e_åaôs
<
K
,
	gV
>::
has_åivül_˘‹
 }; };

244 
	gãm∂©e
<>

245 
	gãm∂©e
 <
ty≥«me
 
	gK
,Åy≥«mê
	gV
>

246 
	gåaô_åivül_dt‹
< 
	gkey_vÆue_∑ú_t
<
	gK
, 
	gV
> >

247 {Énum { 
	gvÆue
 = 
aggªg©e_åaôs
<
K
,
	gV
>::
has_åivül_dt‹
 }; };

248 
	gãm∂©e
<>

249 
	gãm∂©e
 <
ty≥«me
 
	gK
,Åy≥«mê
	gV
>

250 
	gåaô_åivül_c›y
< 
	gkey_vÆue_∑ú_t
<
	gK
, 
	gV
> >

251 {Énum { 
	gvÆue
 = 
aggªg©e_åaôs
<
K
,
	gV
>::
has_åivül_c›y
 }; };

252 
	gãm∂©e
<>

253 
	gãm∂©e
 <
ty≥«me
 
	gK
,Åy≥«mê
	gV
>

254 
	gåaô_åivül_move
< 
	gkey_vÆue_∑ú_t
<
	gK
, 
	gV
> >

255 {Énum { 
	gvÆue
 = 
aggªg©e_åaôs
<
K
,
	gV
>::
has_åivül_move
 }; };

	@jni/include/utils/Vector.h

17 #i‚de‡
ANDROID_VECTOR_H


18 
	#ANDROID_VECTOR_H


	)

20 
	~<√w
>

21 
	~<°döt.h
>

22 
	~<sys/ty≥s.h
>

24 
	~<utûs/Log.h
>

25 
	~<utûs/Ve˘‹Im∂.h
>

26 
	~<utûs/Ty≥Hñ≥rs.h
>

30 
«me•a˚
 
	g™droid
 {

38 
	gãm∂©e
 <
˛ass
 
	gTYPE
>

39 ˛as†
	cVe˘‹
 : 
¥iv©e
 
Ve˘‹Im∂


41 
public
:

42 
TYPE
 
	tvÆue_ty≥
;

48 
Ve˘‹
();

49 
Ve˘‹
(c⁄° Ve˘‹<
TYPE
>& 
rhs
);

50 
	gvútuÆ
 ~
Ve˘‹
();

53 c⁄° 
	gVe˘‹
<
	gTYPE
>& 
	g›î©‹
 = (c⁄° 
Ve˘‹
<
TYPE
>& 
rhs
) const;

54 
	gVe˘‹
<
	gTYPE
>& 
	g›î©‹
 = (c⁄° 
Ve˘‹
<
TYPE
>& 
rhs
);

60 
ölöe
 
˛ór
(Ë{ 
	gVe˘‹Im∂
::clear(); }

67 
ölöe
 
size_t
 
size
(Ëc⁄° {  
	gVe˘‹Im∂
::size(); }

69 
ölöe
 
boﬁ
 
isEm±y
(Ëc⁄° {  
	gVe˘‹Im∂
::isEmpty(); }

71 
ölöe
 
size_t
 
ˇ∑côy
(Ëc⁄° {  
	gVe˘‹Im∂
::capacity(); }

73 
ölöe
 
ssize_t
 
£tC≠acôy
(
size_t
 
size
Ë{  
	gVe˘‹Im∂
::setCapacity(size); }

80 
ölöe
 c⁄° 
TYPE
* 
¨øy
() const;

82 
TYPE
* 
edôAºay
();

89 
ölöe
 c⁄° 
	gTYPE
& 
	g›î©‹
 [] (
size_t
 
	gödex
) const;

91 
ölöe
 c⁄° 
	gTYPE
& 
ôemAt
(
size_t
 
ödex
) const;

93 c⁄° 
	gTYPE
& 
t›
() const;

95 c⁄° 
	gTYPE
& 
múr‹IãmAt
(
ssize_t
 
ödex
) const;

102 
	gTYPE
& 
edôIãmAt
(
size_t
 
ödex
);

104 
	gTYPE
& 
edôT›
();

111 
ssize_t
 
ö£πVe˘‹At
(c⁄° 
Ve˘‹
<
TYPE
>& 
ve˘‹
, 
size_t
 
ödex
);

114 
ssize_t
 
≠≥ndVe˘‹
(c⁄° 
Ve˘‹
<
TYPE
>& 
ve˘‹
);

122 
ölöe
 
ssize_t
 
ö£πAt
(
size_t
 
ödex
, size_à
numIãms
 = 1);

124 
ssize_t
 
ö£πAt
(c⁄° 
TYPE
& 
¥ŸŸy≥_ôem
, 
size_t
 
ödex
, size_à
numIãms
 = 1);

126 
ölöe
 
p›
();

128 
ölöe
 
push
();

130 
push
(c⁄° 
TYPE
& 
ôem
);

132 
ölöe
 
ssize_t
 
add
();

134 
ssize_t
 
add
(c⁄° 
TYPE
& 
ôem
);

136 
ölöe
 
ssize_t
 
ª∂a˚At
(
size_t
 
ödex
);

138 
ssize_t
 
ª∂a˚At
(c⁄° 
TYPE
& 
ôem
, 
size_t
 
ödex
);

145 
ölöe
 
ssize_t
 
ªmoveIãmsAt
(
size_t
 
ödex
, size_à
cou¡
 = 1);

147 
ölöe
 
ssize_t
 
ªmoveAt
(
size_t
 
ödex
Ë{  
ªmoveIãmsAt
(index); }

153 (*
	gcom∑r_t
)(c⁄° 
	tTYPE
* 
	tlhs
, c⁄° TYPE* 
	trhs
);

154 (*
	gcom∑r_r_t
)(c⁄° 
	tTYPE
* 
	tlhs
, c⁄° TYPE* 
	trhs
, * 
	t°©e
);

156 
ölöe
 
°©us_t
 
s‹t
(
com∑r_t
 
cmp
);

157 
ölöe
 
°©us_t
 
s‹t
(
com∑r_r_t
 
cmp
, * 
°©e
);

159 
	g¥Ÿe˘ed
:

160 
vútuÆ
 
do_c⁄°ru˘
(* 
°‹age
, 
size_t
 
num
) const;

161 
vútuÆ
 
do_de°roy
(* 
°‹age
, 
size_t
 
num
) const;

162 
vútuÆ
 
do_c›y
(* 
de°
, c⁄° * 
‰om
, 
size_t
 
num
) const;

163 
vútuÆ
 
do_•œt
(* 
de°
, c⁄° * 
ôem
, 
size_t
 
num
) const;

164 
vútuÆ
 
do_move_f‹w¨d
(* 
de°
, c⁄° * 
‰om
, 
size_t
 
num
) const;

165 
vútuÆ
 
do_move_backw¨d
(* 
de°
, c⁄° * 
‰om
, 
size_t
 
num
) const;

173 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


174 
	gVe˘‹
<
	gTYPE
>::
	$Ve˘‹
()

175 : 
	`Ve˘‹Im∂
((
TYPE
),

176 ((
åaôs
<
TYPE
>::
has_åivül_˘‹
 ? 
HAS_TRIVIAL_CTOR
 : 0)

177 |(
åaôs
<
TYPE
>::
has_åivül_dt‹
 ? 
HAS_TRIVIAL_DTOR
 : 0)

178 |(
åaôs
<
TYPE
>::
has_åivül_c›y
 ? 
HAS_TRIVIAL_COPY
 : 0))

181 
	}
}

183 
ãm∂©e
<
˛ass
 
TYPE
> 
ölöe


184 
Ve˘‹
<
TYPE
>::Ve˘‹(c⁄° Ve˘‹<TYPE>& 
rhs
)

185 : 
	$Ve˘‹Im∂
(
rhs
) {

186 
	}
}

188 
ãm∂©e
<
˛ass
 
TYPE
> 
ölöe


189 
Ve˘‹
<
TYPE
>::~
	$Ve˘‹
() {

190 
	`föish_ve˘‹
();

191 
	}
}

193 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


194 
	gVe˘‹
<
	gTYPE
>& Ve˘‹<TYPE>::
›î©‹
 = (c⁄° 
Ve˘‹
<
TYPE
>& 
rhs
) {

195 
Ve˘‹Im∂
::
›î©‹
 = (
rhs
);

196  *
	gthis
;

199 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


200 c⁄° 
	gVe˘‹
<
	gTYPE
>& Ve˘‹<TYPE>::
›î©‹
 = (c⁄° 
Ve˘‹
<
TYPE
>& 
rhs
) const {

201 
Ve˘‹Im∂
::
›î©‹
 = (
rhs
);

202  *
	gthis
;

205 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


206 c⁄° 
TYPE
* 
	gVe˘‹
<
	gTYPE
>::
	$¨øy
() const {

207  
°©ic_ˇ°
<c⁄° 
TYPE
 *>(
	`¨øyIm∂
());

208 
	}
}

210 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


211 
TYPE
* 
	gVe˘‹
<
	gTYPE
>::
	$edôAºay
() {

212  
°©ic_ˇ°
<
TYPE
 *>(
	`edôAºayIm∂
());

213 
	}
}

216 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


217 c⁄° 
	gTYPE
& 
	gVe˘‹
<TYPE>::
›î©‹
[](
size_t
 
ödex
) const {

218 
LOG_FATAL_IF
–
ödex
>=
size
(),

219 "ôemAt: index %d i†∑° sizê%d", ()
ödex
, ()
size
() );

220  *(
¨øy
(Ë+ 
	gödex
);

223 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


224 c⁄° 
	gTYPE
& 
	gVe˘‹
<TYPE>::
	$ôemAt
(
size_t
 
ödex
) const {

225  
›î©‹
[](
ödex
);

226 
	}
}

228 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


229 c⁄° 
	gTYPE
& 
	gVe˘‹
<TYPE>::
	$múr‹IãmAt
(
ssize_t
 
ödex
) const {

230 
	`LOG_FATAL_IF
–(
ödex
>0 ? index : -ödex)>=
	`size
(),

232 ()
ödex
, ()
	`size
() );

233  *(
	`¨øy
(Ë+ ((
ödex
<0Ë? (
	`size
()-index) : index));

234 
	}
}

236 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


237 c⁄° 
	gTYPE
& 
	gVe˘‹
<TYPE>::
	$t›
() const {

238  *(
	`¨øy
(Ë+ 
	`size
() - 1);

239 
	}
}

241 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


242 
	gTYPE
& 
	gVe˘‹
<TYPE>::
	$edôIãmAt
(
size_t
 
ödex
) {

243  *–
°©ic_ˇ°
<
TYPE
 *>(
	`edôIãmLoˇti⁄
(
ödex
)) );

244 
	}
}

246 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


247 
	gTYPE
& 
	gVe˘‹
<TYPE>::
	$edôT›
() {

248  *–
°©ic_ˇ°
<
TYPE
 *>(
	`edôIãmLoˇti⁄
(
	`size
()-1)) );

249 
	}
}

251 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


252 
ssize_t
 
	gVe˘‹
<
	gTYPE
>::
ö£πVe˘‹At
(c⁄° 
Ve˘‹
<
TYPE
>& 
ve˘‹
, 
size_t
 
ödex
) {

253  
	gVe˘‹Im∂
::
ö£πVe˘‹At
(
ªöãΩªt_ˇ°
<c⁄° 
Ve˘‹Im∂
&>(
ve˘‹
), 
ödex
);

256 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


257 
ssize_t
 
	gVe˘‹
<
	gTYPE
>::
≠≥ndVe˘‹
(c⁄° 
Ve˘‹
<
TYPE
>& 
ve˘‹
) {

258  
Ve˘‹Im∂
::
≠≥ndVe˘‹
(
ªöãΩªt_ˇ°
<c⁄° Ve˘‹Im∂&>(
ve˘‹
));

261 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


262 
ssize_t
 
	gVe˘‹
<
	gTYPE
>::
	$ö£πAt
(c⁄° 
TYPE
& 
ôem
, 
size_t
 
ödex
, size_à
numIãms
) {

263  
Ve˘‹Im∂
::
	`ö£πAt
(&
ôem
, 
ödex
, 
numIãms
);

264 
	}
}

266 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


267 
	gVe˘‹
<
	gTYPE
>::
	$push
(c⁄° 
TYPE
& 
ôem
) {

268  
Ve˘‹Im∂
::
	`push
(&
ôem
);

269 
	}
}

271 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


272 
ssize_t
 
	gVe˘‹
<
	gTYPE
>::
	$add
(c⁄° 
TYPE
& 
ôem
) {

273  
Ve˘‹Im∂
::
	`add
(&
ôem
);

274 
	}
}

276 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


277 
ssize_t
 
	gVe˘‹
<
	gTYPE
>::
	$ª∂a˚At
(c⁄° 
TYPE
& 
ôem
, 
size_t
 
ödex
) {

278  
Ve˘‹Im∂
::
	`ª∂a˚At
(&
ôem
, 
ödex
);

279 
	}
}

281 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


282 
ssize_t
 
	gVe˘‹
<
	gTYPE
>::
	$ö£πAt
(
size_t
 
ödex
, size_à
numIãms
) {

283  
Ve˘‹Im∂
::
	`ö£πAt
(
ödex
, 
numIãms
);

284 
	}
}

286 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


287 
	gVe˘‹
<
	gTYPE
>::
	$p›
() {

288 
Ve˘‹Im∂
::
	`p›
();

289 
	}
}

291 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


292 
	gVe˘‹
<
	gTYPE
>::
	$push
() {

293 
Ve˘‹Im∂
::
	`push
();

294 
	}
}

296 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


297 
ssize_t
 
	gVe˘‹
<
	gTYPE
>::
	$add
() {

298  
Ve˘‹Im∂
::
	`add
();

299 
	}
}

301 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


302 
ssize_t
 
	gVe˘‹
<
	gTYPE
>::
	$ª∂a˚At
(
size_t
 
ödex
) {

303  
Ve˘‹Im∂
::
	`ª∂a˚At
(
ödex
);

304 
	}
}

306 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


307 
ssize_t
 
	gVe˘‹
<
	gTYPE
>::
	$ªmoveIãmsAt
(
size_t
 
ödex
, size_à
cou¡
) {

308  
Ve˘‹Im∂
::
	`ªmoveIãmsAt
(
ödex
, 
cou¡
);

309 
	}
}

311 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


312 
°©us_t
 
	gVe˘‹
<
	gTYPE
>::
s‹t
(
Ve˘‹
<
TYPE
>::
com∑r_t
 
cmp
) {

313  
Ve˘‹Im∂
::
s‹t
((Ve˘‹Im∂::
com∑r_t
)
cmp
);

316 
	gãm∂©e
<
˛ass
 
	gTYPE
> 
ölöe


317 
°©us_t
 
	gVe˘‹
<
	gTYPE
>::
s‹t
(
Ve˘‹
<
TYPE
>::
com∑r_r_t
 
cmp
, * 
°©e
) {

318  
	gVe˘‹Im∂
::
s‹t
((
Ve˘‹Im∂
::
com∑r_r_t
)
cmp
, 
°©e
);

323 
	gãm∂©e
<
˛ass
 
	gTYPE
>

324 
	gVe˘‹
<
	gTYPE
>::
	$do_c⁄°ru˘
(* 
°‹age
, 
size_t
 
num
) const {

325 
	`c⁄°ru˘_ty≥
–
ªöãΩªt_ˇ°
<
TYPE
*>(
°‹age
), 
num
 );

326 
	}
}

328 
	gãm∂©e
<
˛ass
 
	gTYPE
>

329 
	gVe˘‹
<
	gTYPE
>::
	$do_de°roy
(* 
°‹age
, 
size_t
 
num
) const {

330 
	`de°roy_ty≥
–
ªöãΩªt_ˇ°
<
TYPE
*>(
°‹age
), 
num
 );

331 
	}
}

333 
	gãm∂©e
<
˛ass
 
	gTYPE
>

334 
	gVe˘‹
<
	gTYPE
>::
	$do_c›y
(* 
de°
, c⁄° * 
‰om
, 
size_t
 
num
) const {

335 
	`c›y_ty≥
–
ªöãΩªt_ˇ°
<
TYPE
*>(
de°
),ÑeöãΩªt_ˇ°<c⁄° TYPE*>(
‰om
), 
num
 );

336 
	}
}

338 
	gãm∂©e
<
˛ass
 
	gTYPE
>

339 
	gVe˘‹
<
	gTYPE
>::
	$do_•œt
(* 
de°
, c⁄° * 
ôem
, 
size_t
 
num
) const {

340 
	`•œt_ty≥
–
ªöãΩªt_ˇ°
<
TYPE
*>(
de°
),ÑeöãΩªt_ˇ°<c⁄° TYPE*>(
ôem
), 
num
 );

341 
	}
}

343 
	gãm∂©e
<
˛ass
 
	gTYPE
>

344 
	gVe˘‹
<
	gTYPE
>::
	$do_move_f‹w¨d
(* 
de°
, c⁄° * 
‰om
, 
size_t
 
num
) const {

345 
	`move_f‹w¨d_ty≥
–
ªöãΩªt_ˇ°
<
TYPE
*>(
de°
),ÑeöãΩªt_ˇ°<c⁄° TYPE*>(
‰om
), 
num
 );

346 
	}
}

348 
	gãm∂©e
<
˛ass
 
	gTYPE
>

349 
	gVe˘‹
<
	gTYPE
>::
	$do_move_backw¨d
(* 
de°
, c⁄° * 
‰om
, 
size_t
 
num
) const {

350 
	`move_backw¨d_ty≥
–
ªöãΩªt_ˇ°
<
TYPE
*>(
de°
),ÑeöãΩªt_ˇ°<c⁄° TYPE*>(
‰om
), 
num
 );

351 
	}
}

	@jni/include/utils/VectorImpl.h

17 #i‚de‡
ANDROID_VECTOR_IMPL_H


18 
	#ANDROID_VECTOR_IMPL_H


	)

20 
	~<as£π.h
>

21 
	~<°döt.h
>

22 
	~<sys/ty≥s.h
>

23 
	~<utûs/Eº‹s.h
>

29 
«me•a˚
 
	g™droid
 {

40 ˛as†
	cVe˘‹Im∂


42 
	gpublic
:

44 
HAS_TRIVIAL_CTOR
 = 0x00000001,

45 
	gHAS_TRIVIAL_DTOR
 = 0x00000002,

46 
	gHAS_TRIVIAL_COPY
 = 0x00000004,

49 
Ve˘‹Im∂
(
size_t
 
ôemSize
, 
uöt32_t
 
Êags
);

50 
Ve˘‹Im∂
(c⁄° Ve˘‹Im∂& 
rhs
);

51 
	gvútuÆ
 ~
Ve˘‹Im∂
();

54 
föish_ve˘‹
();

56 
	gVe˘‹Im∂
& 
	g›î©‹
 = (c⁄° 
Ve˘‹Im∂
& 
rhs
);

59 
ölöe
 c⁄° * 
¨øyIm∂
(Ëc⁄° {  
	gmSt‹age
; }

60 * 
edôAºayIm∂
();

63 
ölöe
 
size_t
 
size
(Ëc⁄° {  
	gmCou¡
; }

64 
ölöe
 
boﬁ
 
isEm±y
(Ëc⁄° {  
	gmCou¡
 == 0; }

65 
size_t
 
ˇ∑côy
() const;

66 
ssize_t
 
£tC≠acôy
(
size_t
 
size
);

69 
ssize_t
 
ö£πVe˘‹At
(c⁄° 
Ve˘‹Im∂
& 
ve˘‹
, 
size_t
 
ödex
);

70 
ssize_t
 
≠≥ndVe˘‹
(c⁄° 
Ve˘‹Im∂
& 
ve˘‹
);

73 
ssize_t
 
ö£πAt
(
size_t
 
whîe
, size_à
numIãms
 = 1);

74 
ssize_t
 
ö£πAt
(c⁄° * 
ôem
, 
size_t
 
whîe
, size_à
numIãms
 = 1);

75 
p›
();

76 
push
();

77 
push
(c⁄° * 
ôem
);

78 
ssize_t
 
add
();

79 
ssize_t
 
add
(c⁄° * 
ôem
);

80 
ssize_t
 
ª∂a˚At
(
size_t
 
ödex
);

81 
ssize_t
 
ª∂a˚At
(c⁄° * 
ôem
, 
size_t
 
ödex
);

84 
ssize_t
 
ªmoveIãmsAt
(
size_t
 
ödex
, size_à
cou¡
 = 1);

85 
˛ór
();

87 c⁄° * 
ôemLoˇti⁄
(
size_t
 
ödex
) const;

88 * 
edôIãmLoˇti⁄
(
size_t
 
ödex
);

90 (*
	gcom∑r_t
)(c⁄° * 
	tlhs
, c⁄° * 
	trhs
);

91 (*
	gcom∑r_r_t
)(c⁄° * 
	tlhs
, c⁄° * 
	trhs
, * 
	t°©e
);

92 
°©us_t
 
s‹t
(
com∑r_t
 
cmp
);

93 
°©us_t
 
s‹t
(
com∑r_r_t
 
cmp
, * 
°©e
);

95 
	g¥Ÿe˘ed
:

96 
size_t
 
ôemSize
() const;

97 
ªÀa£_°‹age
();

99 
vútuÆ
 
do_c⁄°ru˘
(* 
°‹age
, 
size_t
 
num
) const = 0;

100 
vútuÆ
 
do_de°roy
(* 
°‹age
, 
size_t
 
num
) const = 0;

101 
vútuÆ
 
do_c›y
(* 
de°
, c⁄° * 
‰om
, 
size_t
 
num
) const = 0;

102 
vútuÆ
 
do_•œt
(* 
de°
, c⁄° * 
ôem
, 
size_t
 
num
) const = 0;

103 
vútuÆ
 
do_move_f‹w¨d
(* 
de°
, c⁄° * 
‰om
, 
size_t
 
num
) const = 0;

104 
vútuÆ
 
do_move_backw¨d
(* 
de°
, c⁄° * 
‰om
, 
size_t
 
num
) const = 0;

107 
vútuÆ
 
ª£rvedVe˘‹Im∂1
();

108 
vútuÆ
 
ª£rvedVe˘‹Im∂2
();

109 
vútuÆ
 
ª£rvedVe˘‹Im∂3
();

110 
vútuÆ
 
ª£rvedVe˘‹Im∂4
();

111 
vútuÆ
 
ª£rvedVe˘‹Im∂5
();

112 
vútuÆ
 
ª£rvedVe˘‹Im∂6
();

113 
vútuÆ
 
ª£rvedVe˘‹Im∂7
();

114 
vútuÆ
 
ª£rvedVe˘‹Im∂8
();

116 
	g¥iv©e
:

117 * 
_grow
(
size_t
 
whîe
, size_à
amou¡
);

118 
_shrök
(
size_t
 
whîe
, size_à
amou¡
);

120 
ölöe
 
_do_c⁄°ru˘
(* 
°‹age
, 
size_t
 
num
) const;

121 
ölöe
 
_do_de°roy
(* 
°‹age
, 
size_t
 
num
) const;

122 
ölöe
 
_do_c›y
(* 
de°
, c⁄° * 
‰om
, 
size_t
 
num
) const;

123 
ölöe
 
_do_•œt
(* 
de°
, c⁄° * 
ôem
, 
size_t
 
num
) const;

124 
ölöe
 
_do_move_f‹w¨d
(* 
de°
, c⁄° * 
‰om
, 
size_t
 
num
) const;

125 
ölöe
 
_do_move_backw¨d
(* 
de°
, c⁄° * 
‰om
, 
size_t
 
num
) const;

129 * 
	gmSt‹age
;

130 
size_t
 
	gmCou¡
;

132 c⁄° 
uöt32_t
 
	gmFœgs
;

133 c⁄° 
size_t
 
	gmIãmSize
;

138 ˛as†
	cS‹ãdVe˘‹Im∂
 : 
public
 
Ve˘‹Im∂


140 
public
:

141 
S‹ãdVe˘‹Im∂
(
size_t
 
ôemSize
, 
uöt32_t
 
Êags
);

142 
S‹ãdVe˘‹Im∂
(c⁄° 
Ve˘‹Im∂
& 
rhs
);

143 
	gvútuÆ
 ~
S‹ãdVe˘‹Im∂
();

145 
	gS‹ãdVe˘‹Im∂
& 
	g›î©‹
 = (c⁄° 
S‹ãdVe˘‹Im∂
& 
rhs
);

148 
ssize_t
 
ödexOf
(c⁄° * 
ôem
) const;

151 
size_t
 
‹dîOf
(c⁄° * 
ôem
) const;

154 
ssize_t
 
add
(c⁄° * 
ôem
);

157 
ssize_t
 
mîge
(c⁄° 
Ve˘‹Im∂
& 
ve˘‹
);

158 
ssize_t
 
mîge
(c⁄° 
S‹ãdVe˘‹Im∂
& 
ve˘‹
);

161 
ssize_t
 
ªmove
(c⁄° * 
ôem
);

163 
	g¥Ÿe˘ed
:

164 
vútuÆ
 
do_com∑ª
(c⁄° * 
lhs
, c⁄° * 
rhs
) const = 0;

167 
vútuÆ
 
ª£rvedS‹ãdVe˘‹Im∂1
();

168 
vútuÆ
 
ª£rvedS‹ãdVe˘‹Im∂2
();

169 
vútuÆ
 
ª£rvedS‹ãdVe˘‹Im∂3
();

170 
vútuÆ
 
ª£rvedS‹ãdVe˘‹Im∂4
();

171 
vútuÆ
 
ª£rvedS‹ãdVe˘‹Im∂5
();

172 
vútuÆ
 
ª£rvedS‹ãdVe˘‹Im∂6
();

173 
vútuÆ
 
ª£rvedS‹ãdVe˘‹Im∂7
();

174 
vútuÆ
 
ª£rvedS‹ãdVe˘‹Im∂8
();

176 
	g¥iv©e
:

177 
ssize_t
 
_ödexOrdîOf
(c⁄° * 
ôem
, 
size_t
* 
‹dî
 = 0) const;

181 
ssize_t
 
add
();

182 
p›
();

183 
push
();

184 
push
(c⁄° * 
ôem
);

185 
ssize_t
 
ö£πVe˘‹At
(c⁄° 
Ve˘‹Im∂
& 
ve˘‹
, 
size_t
 
ödex
);

186 
ssize_t
 
≠≥ndVe˘‹
(c⁄° 
Ve˘‹Im∂
& 
ve˘‹
);

187 
ssize_t
 
ö£πAt
(
size_t
 
whîe
, size_à
numIãms
 = 1);

188 
ssize_t
 
ö£πAt
(c⁄° * 
ôem
, 
size_t
 
whîe
, size_à
numIãms
 = 1);

189 
ssize_t
 
ª∂a˚At
(
size_t
 
ödex
);

190 
ssize_t
 
ª∂a˚At
(c⁄° * 
ôem
, 
size_t
 
ödex
);

	@jni/include/utils/ZipFileCRO.h

20 #i‚de‡
__LIBS_ZIPFILECRO_H


21 
	#__LIBS_ZIPFILECRO_H


	)

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<uni°d.h
>

27 #ifde‡
__˝lu•lus


34 * 
	tZùFûeCRO
;

40 * 
	tZùE¡ryCRO
;

42 
ZùFûeCRO
 
ZùFûeXRO_›í
(c⁄° * 
∑th
);

44 
ZùFûeCRO_de°roy
(
ZùFûeCRO
 
zù
);

46 
ZùE¡ryCRO
 
ZùFûeCRO_födE¡ryByName
(
ZùFûeCRO
 
zù
,

47 c⁄° * 
fûeName
);

49 
boﬁ
 
ZùFûeCRO_gëE¡ryInfo
(
ZùFûeCRO
 
zù
, 
ZùE¡ryCRO
 
íåy
,

50 * 
pMëhod
, * 
pUncompLí
,

51 * 
pCompLí
, 
off_t
* 
pOff£t
, * 
pModWhí
, * 
pCrc32
);

53 
boﬁ
 
ZùFûeCRO_uncom¥essE¡ry
(
ZùFûeCRO
 
zù
, 
ZùE¡ryCRO
 
íåy
, 
fd
);

55 #ifde‡
__˝lu•lus


	@jni/include/utils/ZipFileRO.h

24 #i‚de‡
__LIBS_ZIPFILERO_H


25 
	#__LIBS_ZIPFILERO_H


	)

27 
	~"Eº‹s.h
"

28 
	~"FûeM≠.h
"

30 
	~<°dio.h
>

31 
	~<°dlib.h
>

32 
	~<uni°d.h
>

34 
«me•a˚
 
	g™droid
 {

40 * 
	tZùE¡ryRO
;

58 ˛as†
	cZùFûeRO
 {

59 
	gpublic
:

60 
ZùFûeRO
()

61 : 
mFd
(-1), 
mFûeM≠
(
NULL
), 
mHashTabÀSize
(-1), 
mHashTabÀ
(NULL)

62 , 
mNumE¡rõs
(0)

64 ~
ZùFûeRO
() {

65 
‰ì
(
mHashTabÀ
);

66 i‡(
	gmFûeM≠
)

67 
	gmFûeM≠
->
ªÀa£
();

68 i‡(
	gmFd
 >= 0)

69 
˛o£
(
mFd
);

75 
°©us_t
 
›í
(c⁄° * 
zùFûeName
);

83 
ZùE¡ryRO
 
födE¡ryByName
(c⁄° * 
fûeName
) const;

88 
gëNumE¡rõs
() const {

89  
	gmNumE¡rõs
;

104 
ZùE¡ryRO
 
födE¡ryByIndex
(
idx
) const;

111 
gëE¡ryFûeName
(
ZùE¡ryRO
 
íåy
, * 
buf„r
, 
bufLí
) const;

122 
boﬁ
 
gëE¡ryInfo
(
ZùE¡ryRO
 
íåy
, * 
pMëhod
, * 
pUncompLí
,

123 * 
pCompLí
, 
off_t
* 
pOff£t
, * 
pModWhí
, * 
pCrc32
) const;

131 
FûeM≠
* 
¸óãE¡ryFûeM≠
(
ZùE¡ryRO
 
íåy
) const;

142 
boﬁ
 
uncom¥essE¡ry
(
ZùE¡ryRO
 
íåy
, * 
buf„r
) const;

147 
boﬁ
 
uncom¥essE¡ry
(
ZùE¡ryRO
 
íåy
, 
fd
) const;

151 
	gkCom¥essSt‹ed
 = 0,

152 
	gkCom¥essDeÊ©ed
 = 8,

158 
boﬁ
 
öÊ©eBuf„r
(* 
outBuf
, c⁄° * 
öBuf
,

159 
uncompLí
, 
compLí
);

164 
boﬁ
 
öÊ©eBuf„r
(
fd
, c⁄° * 
öBuf
,

165 
uncompLí
, 
compLí
);

171 
ölöe
 
gë2LE
(c⁄° * 
buf
) {

172  
	gbuf
[0] | (buf[1] << 8);

174 
ölöe
 
gë4LE
(c⁄° * 
buf
) {

175  
	gbuf
[0] | (buf[1] << 8) | (buf[2] << 16) | (buf[3] << 24);

178 
	g¥iv©e
:

180 
ZùFûeRO
(c⁄° ZùFûeRO& 
§c
);

181 
	gZùFûeRO
& 
	g›î©‹
=(c⁄° 
ZùFûeRO
& 
§c
);

184 
boﬁ
 
∑r£ZùArchive
();

187 
addToHash
(c⁄° * 
°r
, 
°rLí
, 
hash
);

190 
compuãHash
(c⁄° * 
°r
, 
Àn
);

193 
íåyToIndex
(c⁄° 
ZùE¡ryRO
 
íåy
) const;

198 
	sHashE¡ry
 {

199 c⁄° * 
	g«me
;

200 
	g«meLí
;

202 } 
	tHashE¡ry
;

205 
	gmFd
;

208 
FûeM≠
* 
	gmFûeM≠
;

211 
	gmNumE¡rõs
;

217 
	gmHashTabÀSize
;

218 
HashE¡ry
* 
	gmHashTabÀ
;

	@jni/include/utils/ZipUtils.h

20 #i‚de‡
__LIBS_ZIPUTILS_H


21 
	#__LIBS_ZIPUTILS_H


	)

23 
	~<°dio.h
>

25 
«me•a˚
 
	g™droid
 {

30 ˛as†
	cZùUtûs
 {

31 
	gpublic
:

36 
boﬁ
 
öÊ©eToBuf„r
(
fd
, * 
buf
, 
uncom¥es£dLí
,

37 
com¥es£dLí
);

38 
boﬁ
 
öÊ©eToBuf„r
(
FILE
* 
Â
, * 
buf
, 
uncom¥es£dLí
,

39 
com¥es£dLí
);

57 
boﬁ
 
examöeGzù
(
FILE
* 
Â
, * 
pCom¥essi⁄Mëhod
,

58 * 
pUncom¥es£dLí
, * 
pCom¥es£dLí
, * 
pCRC32
);

60 
	g¥iv©e
:

61 
ZùUtûs
() {}

62 ~
ZùUtûs
() {}

	@jni/include/utils/ashmem.h

10 #i‚de‡
_UTILS_ASHMEM_H


11 
	#_UTILS_ASHMEM_H


	)

13 
	~<löux/limôs.h
>

14 
	~<löux/io˘l.h
>

16 
	#ASHMEM_NAME_LEN
 256

	)

18 
	#ASHMEM_NAME_DEF
 "dev/ashmem"

	)

21 
	#ASHMEM_NOT_REAPED
 0

	)

22 
	#ASHMEM_WAS_REAPED
 1

	)

25 
	#ASHMEM_NOW_UNPINNED
 0

	)

26 
	#ASHMEM_NOW_PINNED
 1

	)

28 
	#__ASHMEMIOC
 0x77

	)

30 
	#ASHMEM_SET_NAME
 
	`_IOW
(
__ASHMEMIOC
, 1, [
ASHMEM_NAME_LEN
])

	)

31 
	#ASHMEM_GET_NAME
 
	`_IOR
(
__ASHMEMIOC
, 2, [
ASHMEM_NAME_LEN
])

	)

32 
	#ASHMEM_SET_SIZE
 
	`_IOW
(
__ASHMEMIOC
, 3, 
size_t
)

	)

33 
	#ASHMEM_GET_SIZE
 
	`_IO
(
__ASHMEMIOC
, 4)

	)

34 
	#ASHMEM_SET_PROT_MASK
 
	`_IOW
(
__ASHMEMIOC
, 5, )

	)

35 
	#ASHMEM_GET_PROT_MASK
 
	`_IO
(
__ASHMEMIOC
, 6)

	)

36 
	#ASHMEM_PIN
 
	`_IO
(
__ASHMEMIOC
, 7)

	)

37 
	#ASHMEM_UNPIN
 
	`_IO
(
__ASHMEMIOC
, 8)

	)

38 
	#ASHMEM_ISPINNED
 
	`_IO
(
__ASHMEMIOC
, 9)

	)

39 
	#ASHMEM_PURGE_ALL_CACHES
 
	`_IO
(
__ASHMEMIOC
, 10)

	)

	@jni/include/utils/misc.h

20 #i‚de‡
_LIBS_UTILS_MISC_H


21 
	#_LIBS_UTILS_MISC_H


	)

23 
	~<sys/time.h
>

24 
	~<utûs/Endün.h
>

26 
«me•a˚
 
	g™droid
 {

29 #i‚de‡
NELEM


30 
	#NELEM
(
x
Ë((Ë((xË/ ((x)[0])))

	)

39 * 
°rdupNew
(c⁄° * 
°r
);

54 * 
c⁄ˇtArgv
(
¨gc
, c⁄° * c⁄° 
¨gv
[]);

60 
cou¡Argv
(c⁄° * c⁄° 
¨gv
[]);

66 
	eFûeTy≥
 {

67 
	gkFûeTy≥Unknown
 = 0,

68 
	gkFûeTy≥N⁄exi°ít
,

69 
	gkFûeTy≥Reguœr
,

70 
	gkFûeTy≥Dúe˘‹y
,

71 
	gkFûeTy≥Ch¨Dev
,

72 
	gkFûeTy≥BlockDev
,

73 
	gkFûeTy≥Fifo
,

74 
	gkFûeTy≥Symlök
,

75 
	gkFûeTy≥Sockë
,

76 } 
	tFûeTy≥
;

78 
FûeTy≥
 
gëFûeTy≥
(c⁄° * 
fûeName
);

80 
time_t
 
gëFûeModD©e
(c⁄° * 
fûeName
);

85 
roundUpPowî2
(
vÆ
);

87 
°ºevî£
(* 
begö
, * 
íd
);

88 
k_ôﬂ
(
vÆue
, * 
°r
, 
ba£
);

89 * 
ôﬂ
(
vÆ
, 
ba£
);

	@jni/include/utils/threads.h

17 #i‚de‡
_LIBS_UTILS_THREADS_H


18 
	#_LIBS_UTILS_THREADS_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<time.h
>

24 #i‡
deföed
(
HAVE_PTHREADS
)

25 
	~<±hªad.h
>

31 #ifde‡
__˝lu•lus


35 * 
	t™droid_thªad_id_t
;

37 (*
™droid_thªad_func_t
)(*);

54 
ANDROID_PRIORITY_LOWEST
 = 19,

57 
ANDROID_PRIORITY_BACKGROUND
 = 10,

60 
ANDROID_PRIORITY_NORMAL
 = 0,

63 
ANDROID_PRIORITY_FOREGROUND
 = -2,

66 
ANDROID_PRIORITY_DISPLAY
 = -4,

69 
ANDROID_PRIORITY_URGENT_DISPLAY
 = -8,

72 
ANDROID_PRIORITY_AUDIO
 = -16,

75 
ANDROID_PRIORITY_URGENT_AUDIO
 = -19,

79 
ANDROID_PRIORITY_HIGHEST
 = -20,

81 
ANDROID_PRIORITY_DEFAULT
 = 
ANDROID_PRIORITY_NORMAL
,

82 
ANDROID_PRIORITY_MORE_FAVORABLE
 = -1,

83 
ANDROID_PRIORITY_LESS_FAVORABLE
 = +1,

87 
ANDROID_TGROUP_DEFAULT
 = 0,

88 
ANDROID_TGROUP_BG_NONINTERACT
 = 1,

89 
ANDROID_TGROUP_FG_BOOST
 = 2,

90 
ANDROID_TGROUP_MAX
 = 
ANDROID_TGROUP_FG_BOOST
,

94 
™droidCª©eThªad
(
™droid_thªad_func_t
, *);

97 
™droidCª©eThªadEtc
(
™droid_thªad_func_t
 
íåyFun˘i⁄
,

98 *
u£rD©a
,

99 c⁄° * 
thªadName
,

100 
öt32_t
 
thªadPri‹ôy
,

101 
size_t
 
thªadSèckSize
,

102 
™droid_thªad_id_t
 *
thªadId
);

105 
™droid_thªad_id_t
 
™droidGëThªadId
();

109 
™droidCª©eRawThªadEtc
(
™droid_thªad_func_t
 
íåyFun˘i⁄
,

110 *
u£rD©a
,

111 c⁄° * 
thªadName
,

112 
öt32_t
 
thªadPri‹ôy
,

113 
size_t
 
thªadSèckSize
,

114 
™droid_thªad_id_t
 *
thªadId
);

118 (*
	g™droid_¸óã_thªad_‚
)(
	t™droid_thªad_func_t
 
	tíåyFun˘i⁄
,

119 *
	tu£rD©a
,

120 c⁄° * 
	tthªadName
,

121 
	töt32_t
 
	tthªadPri‹ôy
,

122 
	tsize_t
 
	tthªadSèckSize
,

123 
	t™droid_thªad_id_t
 *
	tthªadId
);

125 
™droidSëCª©eThªadFunc
(
™droid_¸óã_thªad_‚
 
func
);

131 
pid_t
 
™droidGëTid
();

137 
™droidSëThªadSchedulögGroup
(
pid_t
 
tid
, 
gΩ
);

143 
™droidSëThªadPri‹ôy
(
pid_t
 
tid
, 
¥io
);

145 #ifde‡
__˝lu•lus


152 #ifde‡
__˝lu•lus


154 
	~<utûs/Eº‹s.h
>

155 
	~<utûs/RefBa£.h
>

156 
	~<utûs/Timîs.h
>

158 
«me•a˚
 
	g™droid
 {

160 
™droid_thªad_id_t
 
	tthªad_id_t
;

162 
™droid_thªad_func_t
 
	tthªad_func_t
;

165 
	gPRIORITY_LOWEST
 = 
ANDROID_PRIORITY_LOWEST
,

166 
	gPRIORITY_BACKGROUND
 = 
ANDROID_PRIORITY_BACKGROUND
,

167 
	gPRIORITY_NORMAL
 = 
ANDROID_PRIORITY_NORMAL
,

168 
	gPRIORITY_FOREGROUND
 = 
ANDROID_PRIORITY_FOREGROUND
,

169 
	gPRIORITY_DISPLAY
 = 
ANDROID_PRIORITY_DISPLAY
,

170 
	gPRIORITY_URGENT_DISPLAY
 = 
ANDROID_PRIORITY_URGENT_DISPLAY
,

171 
	gPRIORITY_AUDIO
 = 
ANDROID_PRIORITY_AUDIO
,

172 
	gPRIORITY_URGENT_AUDIO
 = 
ANDROID_PRIORITY_URGENT_AUDIO
,

173 
	gPRIORITY_HIGHEST
 = 
ANDROID_PRIORITY_HIGHEST
,

174 
	gPRIORITY_DEFAULT
 = 
ANDROID_PRIORITY_DEFAULT
,

175 
	gPRIORITY_MORE_FAVORABLE
 = 
ANDROID_PRIORITY_MORE_FAVORABLE
,

176 
	gPRIORITY_LESS_FAVORABLE
 = 
ANDROID_PRIORITY_LESS_FAVORABLE
,

180 
ölöe
 
boﬁ
 
¸óãThªad
(
thªad_func_t
 
f
, *
a
) {

181  
™droidCª©eThªad
(
f
, 
a
Ë? 
	gåue
 : 
Ál£
;

185 
ölöe
 
boﬁ
 
¸óãThªadEtc
(
thªad_func_t
 
íåyFun˘i⁄
,

186 *
u£rD©a
,

187 c⁄° * 
thªadName
 = "android:unnamed_thread",

188 
öt32_t
 
thªadPri‹ôy
 = 
PRIORITY_DEFAULT
,

189 
size_t
 
thªadSèckSize
 = 0,

190 
thªad_id_t
 *
thªadId
 = 0)

192  
™droidCª©eThªadEtc
(
íåyFun˘i⁄
, 
u£rD©a
, 
thªadName
,

193 
thªadPri‹ôy
, 
thªadSèckSize
, 
thªadId
Ë? 
åue
 : 
Ál£
;

197 
ölöe
 
thªad_id_t
 
gëThªadId
() {

198  
™droidGëThªadId
();

209 ˛as†
	cMuãx
 {

210 
	gpublic
:

212 
PRIVATE
 = 0,

213 
	gSHARED
 = 1

216 
Muãx
();

217 
Muãx
(c⁄° * 
«me
);

218 
Muãx
(
ty≥
, c⁄° * 
«me
 = 
NULL
);

219 ~
Muãx
();

222 
°©us_t
 
lock
();

223 
u∆ock
();

226 
°©us_t
 
åyLock
();

230 ˛as†
	cAutﬁock
 {

231 
	gpublic
:

232 
ölöe
 
Autﬁock
(
Muãx
& 
muãx
Ë: 
mLock
(muãxË{ mLock.
lock
(); }

233 
ölöe
 
Autﬁock
(
Muãx
* 
muãx
Ë: 
mLock
(*muãxË{ mLock.
lock
(); }

234 
	gölöe
 ~
Autﬁock
(Ë{ 
	gmLock
.
u∆ock
(); }

235 
	g¥iv©e
:

236 
Muãx
& 
mLock
;

239 
	g¥iv©e
:

240 
‰õnd
 
˛ass
 
C⁄dôi⁄
;

243 
Muãx
(const Mutex&);

244 
	gMuãx
& 
	g›î©‹
 = (c⁄° 
Muãx
&);

246 #i‡
deföed
(
HAVE_PTHREADS
)

247 
±hªad_muãx_t
 
	gmMuãx
;

249 
_öô
();

250 * 
	gmSèã
;

254 #i‡
deföed
(
HAVE_PTHREADS
)

256 
ölöe
 
	gMuãx
::
Muãx
() {

257 
±hªad_muãx_öô
(&
mMuãx
, 
NULL
);

259 
ölöe
 
	gMuãx
::
Muãx
(c⁄° * 
«me
) {

260 
±hªad_muãx_öô
(&
mMuãx
, 
NULL
);

262 
ölöe
 
	gMuãx
::
Muãx
(
ty≥
, c⁄° * 
«me
) {

263 i‡(
	gty≥
 =
SHARED
) {

264 
±hªad_muãx©å_t
 
©å
;

265 
±hªad_muãx©å_öô
(&
©å
);

266 
±hªad_muãx©å_£çsh¨ed
(&
©å
, 
PTHREAD_PROCESS_SHARED
);

267 
±hªad_muãx_öô
(&
mMuãx
, &
©å
);

268 
±hªad_muãx©å_de°roy
(&
©å
);

270 
±hªad_muãx_öô
(&
mMuãx
, 
NULL
);

273 
ölöe
 
	gMuãx
::~
Muãx
() {

274 
±hªad_muãx_de°roy
(&
mMuãx
);

276 
ölöe
 
°©us_t
 
	gMuãx
::
lock
() {

277  -
±hªad_muãx_lock
(&
mMuãx
);

279 
ölöe
 
	gMuãx
::
u∆ock
() {

280 
±hªad_muãx_u∆ock
(&
mMuãx
);

282 
ölöe
 
°©us_t
 
	gMuãx
::
åyLock
() {

283  -
±hªad_muãx_åylock
(&
mMuãx
);

294 
	gMuãx
::
	tAutﬁock
 
	tAutoMuãx
;

306 ˛as†
	cC⁄dôi⁄
 {

307 
	gpublic
:

309 
PRIVATE
 = 0,

310 
	gSHARED
 = 1

313 
C⁄dôi⁄
();

314 
C⁄dôi⁄
(
ty≥
);

315 ~
C⁄dôi⁄
();

317 
°©us_t
 
waô
(
Muãx
& 
muãx
);

319 
°©us_t
 
waôRñ©ive
(
Muãx
& 
muãx
, 
n£cs_t
 
ª…ime
);

321 
sig«l
();

323 
brﬂdˇ°
();

325 
	g¥iv©e
:

326 #i‡
deföed
(
HAVE_PTHREADS
)

327 
±hªad_c⁄d_t
 
mC⁄d
;

329 * 
	gmSèã
;

333 #i‡
deföed
(
HAVE_PTHREADS
)

335 
ölöe
 
	gC⁄dôi⁄
::
C⁄dôi⁄
() {

336 
±hªad_c⁄d_öô
(&
mC⁄d
, 
NULL
);

338 
ölöe
 
	gC⁄dôi⁄
::
C⁄dôi⁄
(
ty≥
) {

339 i‡(
ty≥
 =
SHARED
) {

340 
±hªad_c⁄d©å_t
 
©å
;

341 
±hªad_c⁄d©å_öô
(&
©å
);

342 
±hªad_c⁄d©å_£çsh¨ed
(&
©å
, 
PTHREAD_PROCESS_SHARED
);

343 
±hªad_c⁄d_öô
(&
mC⁄d
, &
©å
);

344 
±hªad_c⁄d©å_de°roy
(&
©å
);

346 
±hªad_c⁄d_öô
(&
mC⁄d
, 
NULL
);

349 
ölöe
 
	gC⁄dôi⁄
::~
C⁄dôi⁄
() {

350 
±hªad_c⁄d_de°roy
(&
mC⁄d
);

352 
ölöe
 
°©us_t
 
	gC⁄dôi⁄
::
waô
(
Muãx
& 
muãx
) {

353  -
±hªad_c⁄d_waô
(&
mC⁄d
, &
muãx
.
mMuãx
);

355 
ölöe
 
°©us_t
 
	gC⁄dôi⁄
::
waôRñ©ive
(
Muãx
& 
muãx
, 
n£cs_t
 
ª…ime
) {

356 #i‡
deföed
(
HAVE_PTHREAD_COND_TIMEDWAIT_RELATIVE
)

357 
time•ec
 
	gts
;

358 
	gts
.
	gtv_£c
 = 
ª…ime
/1000000000;

359 
	gts
.
	gtv_n£c
 = 
ª…ime
%1000000000;

360  -
±hªad_c⁄d_timedwaô_ªœtive_≈
(&
mC⁄d
, &
muãx
.
mMuãx
, &
ts
);

362 
time•ec
 
	gts
;

363 #i‡
deföed
(
HAVE_POSIX_CLOCKS
)

364 
˛ock_gëtime
(
CLOCK_REALTIME
, &
ts
);

367 
timevÆ
 
	gt
;

368 
gëtimeofday
(&
t
, 
NULL
);

369 
	gts
.
	gtv_£c
 = 
t
.
tv_£c
;

370 
	gts
.
	gtv_n£c

t
.
tv_u£c
*1000;

372 
	gts
.
	gtv_£c
 +
ª…ime
/1000000000;

373 
	gts
.
	gtv_n£c
+
ª…ime
%1000000000;

374 i‡(
	gts
.
	gtv_n£c
 >= 1000000000) {

375 
ts
.
tv_n£c
 -= 1000000000;

376 
	gts
.
	gtv_£c
 += 1;

378  -
±hªad_c⁄d_timedwaô
(&
mC⁄d
, &
muãx
.
mMuãx
, &
ts
);

381 
ölöe
 
	gC⁄dôi⁄
::
sig«l
() {

382 
±hªad_c⁄d_sig«l
(&
mC⁄d
);

384 
ölöe
 
	gC⁄dôi⁄
::
brﬂdˇ°
() {

385 
±hªad_c⁄d_brﬂdˇ°
(&
mC⁄d
);

396 ˛as†
	cThªad
 : 
vútuÆ
 
public
 
RefBa£


398 
public
:

401 
Thªad
(
boﬁ
 
ˇnCÆlJava
 = 
åue
);

402 
	gvútuÆ
 ~
Thªad
();

405 
vútuÆ
 
°©us_t
 
run
–c⁄° * 
«me
 = 0,

406 
öt32_t
 
¥i‹ôy
 = 
PRIORITY_DEFAULT
,

407 
size_t
 
°ack
 = 0);

412 
vútuÆ
 
ªque°Exô
();

415 
vútuÆ
 
°©us_t
 
ªadyToRun
();

421 
°©us_t
 
ªque°ExôAndWaô
();

423 
	g¥Ÿe˘ed
:

425 
boﬁ
 
exôPídög
() const;

427 
	g¥iv©e
:

433 
vútuÆ
 
boﬁ
 
thªadLo›
() = 0;

435 
	g¥iv©e
:

436 
Thªad
& 
›î©‹
=(const Thread&);

437 
_thªadLo›
(* 
u£r
);

438 c⁄° 
boﬁ
 
	gmC™CÆlJava
;

439 
thªad_id_t
 
	gmThªad
;

440 
Muãx
 
	gmLock
;

441 
C⁄dôi⁄
 
	gmThªadExôedC⁄dôi⁄
;

442 
°©us_t
 
	gmSètus
;

443 vﬁ©ûê
boﬁ
 
	gmExôPídög
;

444 vﬁ©ûê
boﬁ
 
	gmRu¬ög
;

445 
	g•
<
	gThªad
> 
	gmHﬁdSñf
;

446 #i‡
HAVE_ANDROID_OS


447 
	gmTid
;

	@src/com/example/hello_jni/MainActivity.java

1 
∑ckage
 
	gcom
.
	gexam∂e
.
	ghñlo_jni
;

3 
imp‹t
 
	g™droid
.
	gos
.
	gBundÀ
;

4 
imp‹t
 
	g™droid
.
	g≠p
.
	gA˘ivôy
;

5 
imp‹t
 
	g™droid
.
	gvõw
.
	gMíu
;

6 
imp‹t
 
	g™droid
.
	gwidgë
.
	gTﬂ°
;

8 
public
 cœs†
	cMaöA˘ivôy
 
exãnds
 
	mA˘ivôy
 {

10 @
Ovîride


11 
¥Ÿe˘ed
 
	$⁄Cª©e
(
BundÀ
 
ßvedIn°™˚Sèã
) {

12 
su≥r
.
	`⁄Cª©e
(
ßvedIn°™˚Sèã
);

13 
	`£tC⁄ã¡Võw
(
R
.
œyout
.
a˘ivôy_maö
);

16 @
Ovîride


17 
public
 
boﬁón
 
	$⁄Cª©eO±i⁄sMíu
(
Míu
 
míu
) {

19 
	`gëMíuInÊ©î
().
	`öÊ©e
(
R
.
míu
.
maö
, menu);

20 
ªsu…
 = 
	`«tiveTe°
(3, 4);

21 
Tﬂ°
.
	`makeText
(
this
, "" + 
ªsu…
, Tﬂ°.
LENGTH_SHORT
).
	`show
();

22  
åue
;

23 
	}
}

26 
	gSy°em
.
lﬂdLibøry
("hello-jni");

29 
public
 
«tive
 
«tiveTe°
(
a
, 
b
);

30 
public
 
boﬁón
 
	$ÁkeResu…
() {

31  
Ál£
;

32 
	}
}

	@
1
.
0
302
10979
jni/Android.mk
jni/hello-jni.cpp
jni/hello-jni.h
jni/include/EGL/egl.h
jni/include/EGL/eglext.h
jni/include/EGL/eglnatives.h
jni/include/EGL/eglplatform.h
jni/include/GLES2/gl2.h
jni/include/GLES2/gl2ext.h
jni/include/GLES2/gl2platform.h
jni/include/JNIHelp.h
jni/include/android/native_window.h
jni/include/android/rect.h
jni/include/android_runtime/ActivityManager.h
jni/include/android_runtime/AndroidRuntime.h
jni/include/android_runtime/android_util_AssetManager.h
jni/include/binder/Binder.h
jni/include/binder/BpBinder.h
jni/include/binder/IBinder.h
jni/include/binder/IInterface.h
jni/include/binder/IMemory.h
jni/include/binder/IPCThreadState.h
jni/include/binder/IPermissionController.h
jni/include/binder/IServiceManager.h
jni/include/binder/MemoryBase.h
jni/include/binder/MemoryDealer.h
jni/include/binder/MemoryHeapBase.h
jni/include/binder/MemoryHeapPmem.h
jni/include/binder/Parcel.h
jni/include/binder/Permission.h
jni/include/binder/ProcessState.h
jni/include/cutils/abort_socket.h
jni/include/cutils/array.h
jni/include/cutils/ashmem.h
jni/include/cutils/atomic.h
jni/include/cutils/compiler.h
jni/include/cutils/config_utils.h
jni/include/cutils/cpu_info.h
jni/include/cutils/dir_hash.h
jni/include/cutils/event_tag_map.h
jni/include/cutils/hashmap.h
jni/include/cutils/iosched_policy.h
jni/include/cutils/jstring.h
jni/include/cutils/log.h
jni/include/cutils/logd.h
jni/include/cutils/logger.h
jni/include/cutils/logprint.h
jni/include/cutils/memory.h
jni/include/cutils/misc.h
jni/include/cutils/mq.h
jni/include/cutils/mspace.h
jni/include/cutils/native_handle.h
jni/include/cutils/open_memstream.h
jni/include/cutils/process_name.h
jni/include/cutils/properties.h
jni/include/cutils/record_stream.h
jni/include/cutils/sched_policy.h
jni/include/cutils/selector.h
jni/include/cutils/sockets.h
jni/include/cutils/threads.h
jni/include/cutils/tztime.h
jni/include/cutils/uio.h
jni/include/cutils/zygote.h
jni/include/gui/IGraphicBufferProducer.h
jni/include/hardware/copybit.h
jni/include/hardware/gps.h
jni/include/hardware/gralloc.h
jni/include/hardware/hardware.h
jni/include/hardware/lights.h
jni/include/hardware/overlay.h
jni/include/hardware/qemud.h
jni/include/hardware/sensors.h
jni/include/hardware_legacy/AudioHardwareBase.h
jni/include/hardware_legacy/AudioHardwareInterface.h
jni/include/hardware_legacy/AudioPolicyInterface.h
jni/include/hardware_legacy/AudioPolicyManagerBase.h
jni/include/hardware_legacy/IMountService.h
jni/include/hardware_legacy/gps.h
jni/include/hardware_legacy/gps_ni.h
jni/include/hardware_legacy/power.h
jni/include/hardware_legacy/qemu_tracing.h
jni/include/hardware_legacy/uevent.h
jni/include/hardware_legacy/vibrator.h
jni/include/hardware_legacy/wifi.h
jni/include/include/EGL/egl.h
jni/include/include/EGL/eglext.h
jni/include/include/EGL/eglnatives.h
jni/include/include/EGL/eglplatform.h
jni/include/include/GLES2/gl2.h
jni/include/include/GLES2/gl2ext.h
jni/include/include/GLES2/gl2platform.h
jni/include/include/JNIHelp.h
jni/include/include/android/native_window.h
jni/include/include/android/rect.h
jni/include/include/android_runtime/ActivityManager.h
jni/include/include/android_runtime/AndroidRuntime.h
jni/include/include/android_runtime/android_util_AssetManager.h
jni/include/include/binder/Binder.h
jni/include/include/binder/BpBinder.h
jni/include/include/binder/IBinder.h
jni/include/include/binder/IInterface.h
jni/include/include/binder/IMemory.h
jni/include/include/binder/IPCThreadState.h
jni/include/include/binder/IPermissionController.h
jni/include/include/binder/IServiceManager.h
jni/include/include/binder/MemoryBase.h
jni/include/include/binder/MemoryDealer.h
jni/include/include/binder/MemoryHeapBase.h
jni/include/include/binder/MemoryHeapPmem.h
jni/include/include/binder/Parcel.h
jni/include/include/binder/Permission.h
jni/include/include/binder/ProcessState.h
jni/include/include/cutils/abort_socket.h
jni/include/include/cutils/array.h
jni/include/include/cutils/ashmem.h
jni/include/include/cutils/atomic.h
jni/include/include/cutils/compiler.h
jni/include/include/cutils/config_utils.h
jni/include/include/cutils/cpu_info.h
jni/include/include/cutils/dir_hash.h
jni/include/include/cutils/event_tag_map.h
jni/include/include/cutils/hashmap.h
jni/include/include/cutils/iosched_policy.h
jni/include/include/cutils/jstring.h
jni/include/include/cutils/log.h
jni/include/include/cutils/logd.h
jni/include/include/cutils/logger.h
jni/include/include/cutils/logprint.h
jni/include/include/cutils/memory.h
jni/include/include/cutils/misc.h
jni/include/include/cutils/mq.h
jni/include/include/cutils/mspace.h
jni/include/include/cutils/native_handle.h
jni/include/include/cutils/open_memstream.h
jni/include/include/cutils/process_name.h
jni/include/include/cutils/properties.h
jni/include/include/cutils/record_stream.h
jni/include/include/cutils/sched_policy.h
jni/include/include/cutils/selector.h
jni/include/include/cutils/sockets.h
jni/include/include/cutils/threads.h
jni/include/include/cutils/tztime.h
jni/include/include/cutils/uio.h
jni/include/include/cutils/zygote.h
jni/include/include/gui/IGraphicBufferProducer.h
jni/include/include/hardware/copybit.h
jni/include/include/hardware/gps.h
jni/include/include/hardware/gralloc.h
jni/include/include/hardware/hardware.h
jni/include/include/hardware/lights.h
jni/include/include/hardware/overlay.h
jni/include/include/hardware/qemud.h
jni/include/include/hardware/sensors.h
jni/include/include/hardware_legacy/AudioHardwareBase.h
jni/include/include/hardware_legacy/AudioHardwareInterface.h
jni/include/include/hardware_legacy/AudioPolicyInterface.h
jni/include/include/hardware_legacy/AudioPolicyManagerBase.h
jni/include/include/hardware_legacy/IMountService.h
jni/include/include/hardware_legacy/gps.h
jni/include/include/hardware_legacy/gps_ni.h
jni/include/include/hardware_legacy/power.h
jni/include/include/hardware_legacy/qemu_tracing.h
jni/include/include/hardware_legacy/uevent.h
jni/include/include/hardware_legacy/vibrator.h
jni/include/include/hardware_legacy/wifi.h
jni/include/include/nativehelper/AndroidSystemNatives.h
jni/include/include/nativehelper/JNIHelp.h
jni/include/include/pixelflinger/format.h
jni/include/include/pixelflinger/pixelflinger.h
jni/include/include/surfaceflinger/ISurface.h
jni/include/include/surfaceflinger/ISurfaceComposer.h
jni/include/include/surfaceflinger/ISurfaceFlingerClient.h
jni/include/include/surfaceflinger/Surface.h
jni/include/include/surfaceflinger/SurfaceComposerClient.h
jni/include/include/system/core/include/arch/linux-arm/AndroidConfig.h
jni/include/include/ui/ANativeObjectBase.h
jni/include/include/ui/DisplayInfo.h
jni/include/include/ui/EGLNativeSurface.h
jni/include/include/ui/EGLUtils.h
jni/include/include/ui/EventHub.h
jni/include/include/ui/Fence.h
jni/include/include/ui/FramebufferNativeWindow.h
jni/include/include/ui/GraphicBuffer.h
jni/include/include/ui/GraphicBufferAllocator.h
jni/include/include/ui/GraphicBufferMapper.h
jni/include/include/ui/IOverlay.h
jni/include/include/ui/KeyCharacterMap.h
jni/include/include/ui/KeycodeLabels.h
jni/include/include/ui/Overlay.h
jni/include/include/ui/PixelFormat.h
jni/include/include/ui/Point.h
jni/include/include/ui/Rect.h
jni/include/include/ui/Region.h
jni/include/include/ui/android_native_buffer.h
jni/include/include/ui/egl/android_natives.h
jni/include/include/utils/Asset.h
jni/include/include/utils/AssetDir.h
jni/include/include/utils/AssetManager.h
jni/include/include/utils/Atomic.h
jni/include/include/utils/BackupHelpers.h
jni/include/include/utils/Buffer.h
jni/include/include/utils/BufferedTextOutput.h
jni/include/include/utils/ByteOrder.h
jni/include/include/utils/CallStack.h
jni/include/include/utils/Debug.h
jni/include/include/utils/Endian.h
jni/include/include/utils/Errors.h
jni/include/include/utils/FileMap.h
jni/include/include/utils/Flattenable.h
jni/include/include/utils/KeyedVector.h
jni/include/include/utils/List.h
jni/include/include/utils/Log.h
jni/include/include/utils/RefBase.h
jni/include/include/utils/ResourceTypes.h
jni/include/include/utils/SharedBuffer.h
jni/include/include/utils/Singleton.h
jni/include/include/utils/SortedVector.h
jni/include/include/utils/StopWatch.h
jni/include/include/utils/String16.h
jni/include/include/utils/String8.h
jni/include/include/utils/StringArray.h
jni/include/include/utils/SystemClock.h
jni/include/include/utils/TextOutput.h
jni/include/include/utils/Timers.h
jni/include/include/utils/TypeHelpers.h
jni/include/include/utils/Vector.h
jni/include/include/utils/VectorImpl.h
jni/include/include/utils/ZipFileCRO.h
jni/include/include/utils/ZipFileRO.h
jni/include/include/utils/ZipUtils.h
jni/include/include/utils/ashmem.h
jni/include/include/utils/misc.h
jni/include/include/utils/threads.h
jni/include/nativehelper/AndroidSystemNatives.h
jni/include/nativehelper/JNIHelp.h
jni/include/pixelflinger/format.h
jni/include/pixelflinger/pixelflinger.h
jni/include/surfaceflinger/ISurface.h
jni/include/surfaceflinger/ISurfaceComposer.h
jni/include/surfaceflinger/ISurfaceFlingerClient.h
jni/include/surfaceflinger/Surface.h
jni/include/surfaceflinger/SurfaceComposerClient.h
jni/include/system/core/include/arch/linux-arm/AndroidConfig.h
jni/include/ui/ANativeObjectBase.h
jni/include/ui/DisplayInfo.h
jni/include/ui/EGLNativeSurface.h
jni/include/ui/EGLUtils.h
jni/include/ui/EventHub.h
jni/include/ui/Fence.h
jni/include/ui/FramebufferNativeWindow.h
jni/include/ui/GraphicBuffer.h
jni/include/ui/GraphicBufferAllocator.h
jni/include/ui/GraphicBufferMapper.h
jni/include/ui/IOverlay.h
jni/include/ui/KeyCharacterMap.h
jni/include/ui/KeycodeLabels.h
jni/include/ui/Overlay.h
jni/include/ui/PixelFormat.h
jni/include/ui/Point.h
jni/include/ui/Rect.h
jni/include/ui/Region.h
jni/include/ui/android_native_buffer.h
jni/include/ui/egl/android_natives.h
jni/include/utils/Asset.h
jni/include/utils/AssetDir.h
jni/include/utils/AssetManager.h
jni/include/utils/Atomic.h
jni/include/utils/BackupHelpers.h
jni/include/utils/Buffer.h
jni/include/utils/BufferedTextOutput.h
jni/include/utils/ByteOrder.h
jni/include/utils/CallStack.h
jni/include/utils/Debug.h
jni/include/utils/Endian.h
jni/include/utils/Errors.h
jni/include/utils/FileMap.h
jni/include/utils/Flattenable.h
jni/include/utils/KeyedVector.h
jni/include/utils/List.h
jni/include/utils/Log.h
jni/include/utils/RefBase.h
jni/include/utils/ResourceTypes.h
jni/include/utils/SharedBuffer.h
jni/include/utils/Singleton.h
jni/include/utils/SortedVector.h
jni/include/utils/StopWatch.h
jni/include/utils/String16.h
jni/include/utils/String8.h
jni/include/utils/StringArray.h
jni/include/utils/SystemClock.h
jni/include/utils/TextOutput.h
jni/include/utils/Timers.h
jni/include/utils/TypeHelpers.h
jni/include/utils/Vector.h
jni/include/utils/VectorImpl.h
jni/include/utils/ZipFileCRO.h
jni/include/utils/ZipFileRO.h
jni/include/utils/ZipUtils.h
jni/include/utils/ashmem.h
jni/include/utils/misc.h
jni/include/utils/threads.h
src/com/example/hello_jni/MainActivity.java
